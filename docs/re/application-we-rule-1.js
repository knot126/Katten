$MODULE_FACTORY_REGISTRY = typeof $MODULE_FACTORY_REGISTRY != "undefined" ? $MODULE_FACTORY_REGISTRY : {};
$MODULE_REGISTRY = typeof $MODULE_REGISTRY != "undefined" ? $MODULE_REGISTRY : {};
if (typeof require == "undefined") {
	function require(a) {
		if (!$MODULE_REGISTRY[a]) {
			$MODULE_REGISTRY[a] = $MODULE_FACTORY_REGISTRY[a]()
		}
		return $MODULE_REGISTRY[a]
	}
}
if (typeof(console) == "undefined") {
	console = {
		log: (typeof __underscore_SysLog == "function") ? __underscore_SysLog : function(a) {}
	}
}
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/NGJSEnvironmentSupport"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/UI/NGJSEnvironmentSupport"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/NGJSEnvironmentSupport"] = a;
	var d = false;
	var b = {};
	var e = 0;
	a.NGSetTimeoutRunTimers = function() {
		if (d) {
			var h = [];
			var j = new Date().getTime();
			for (var f in b) {
				if (b.hasOwnProperty(f) && b[f].shouldExecute(j)) {
					h.push(b[f])
				}
			}
			for (var g in h) {
				if (h.hasOwnProperty(g)) {
					h[g].execute()
				}
			}
		}
	};
	if (typeof(setTimeout) != "function") {
		d = true;
		var c = function(f, g) {
			this.uid = e++;
			if (e == Infinity) {
				e = 0
			}
			this.fptr = f;
			this.interval = g;
			this.requestedTime = new Date().getTime() + g
		};
		c.prototype.shouldExecute = function(f) {
			if (f < this.requestedTime) {
				return false
			}
			return true
		};
		c.prototype.execute = function() {
			delete b[this.uid];
			this.fptr()
		};
		setTimeout = function(f, h) {
			if (h < 0 || typeof(h) != "number") {
				h = 0
			}
			var g = new c(f, h);
			b[g.uid] = g;
			return g.uid
		};
		clearTimeout = function(f) {
			if (b.hasOwnProperty(f)) {
				delete b[f]
			}
		};
		setInterval = function(f, h) {
			if (h < 0 || typeof(h) != "number") {
				h = 0
			}
			var g = new c(f, h);
			g.execute = function() {
				this.requestedTime = new Date().getTime() + this.interval;
				this.fptr()
			};
			b[g.uid] = g;
			return g.uid
		};
		clearInterval = clearTimeout
	}
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/SystemBinding"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/SystemBinding"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/SystemBinding"] = b;
	var d = require("NGCore/Client/Core/Class");
	var f = require("NGCore/Client/Core/Base64").Base64;
	var g = require("NGCore/Client/Plus/ResultSet");
	var c = {
		HandleAction: 0
	};
	var a = d.Class.subclass({
		classname: "SystemBinding",
		callbacks: {},
		callbacksUidGenerator: 0,
		_contResultSets: {},
		_contResultSetIdxs: {}
	});
	var e = d.Class.subclass({
		classname: "ResultSet",
		initialize: function(h) {
			this.items = [];
			this._continueId = h;
			this.totalLength = Number.MAX_VALUE
		},
		getMore: function(h) {
			return a._getMoreContacts(this, h)
		},
		closeResultSet: function() {
			a._closeContactsResultSet(this)
		}
	});
	a._pushContactsCmd = function(k, h, m) {
		var l = a.callbacksUidGenerator++;
		if (!!!h) {
			h = function() {}
		}
		a.callbacks[l] = h;
		var j = {
			name: k,
			callbackId: l
		};
		if (typeof m != "undefined") {
			j.continueId = m
		}
		j = JSON.stringify(j);
		NgPushCommand3(NgEntityTypes.NgSystemBinding, c.HandleAction, f.encode(j))
	};
	a._closeContactsResultSetfunction = function(j) {
		var h = function() {};
		a._pushContactsCmd("closecontacts", h, j._continueId)
	};
	a._getMoreContacts = function(j, h) {
		if ((typeof j._continueId != "undefined") && (j.items.length < j.totalLength)) {
			a._pushContactsCmd("morecontacts", h, j._continueId);
			return true
		}
		return false
	};
	a.getContacts = function(h) {
		a._pushContactsCmd("contacts", h, undefined)
	};
	a.getDeviceToken = function(h) {
		var k = a.callbacksUidGenerator++;
		if (!!!h) {
			h = function() {}
		}
		a.callbacks[k] = h;
		var j = {
			name: "devicetoken",
			callbackId: k
		};
		j = JSON.stringify(j);
		NgPushCommand3(NgEntityTypes.NgSystemBinding, c.HandleAction, f.encode(j))
	};
	a.handleCommand = function(p) {
		var j = NgParseCommand2(p, NgParseInt, NgParseBase64);
		var m = JSON.parse(j[1]);
		if (m.name == "callback") {
			var h = a.callbacks[m.callbackId];
			if (typeof h == "function") {
				if (m.callbackname == "contacts") {
					var o = a._contResultSets[m.continueId];
					if (typeof o == "undefined") {
						o = new g.ResultSet(m.continueId);
						a._contResultSets[m.continueId] = o;
						a._contResultSetIdxs[m.continueId] = 0
					}
					var n = m.list.length;
					while (m.list.length > 0) {
						var l = m.list.shift();
						o.items.push(l)
					}
					var k = a._contResultSetIdxs[m.continueId];
					if ((typeof k) != "undefined") {
						a._contResultSetIdxs[m.continueId] = k + n
					}
					if ((typeof m.total != "undefined") || (typeof m.rsclosed != "undefined")) {
						if (typeof m.total != "undefined") {
							o.totalLength = m.total
						}
						delete o._continueId;
						delete a._contResultSets[m.continueId];
						delete a._contResultSetIdxs[m.continueId]
					}
					delete a.callbacks[m.callbackId];
					if (m.success) {
						h(undefined, o, k, n)
					} else {
						h(m.error, o, k, n)
					}
				} else {
					delete a.callbacks[m.callbackId];
					h(m)
				}
			}
		}
	};
	b.SystemBinding = a;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI"] = b;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var c = function(f) {
		var e = function(g, h, j) {
			return function() {
				delete g[h];
				return g[h] = j()
			}
		};
		for (var d in f) {
			if (typeof f[d] == "function") {
				this.__defineGetter__(d, e(this, d, f[d]))
			} else {
				this[d] = f[d]
			}
		}
	};
	c.prototype = {
		Commands: a,
		FontStyle: a.FontStyle,
		State: a.State,
		FitMode: a.FitMode,
		animate: a.animate,
		compositeImages: function(e, j, f, g, k) {
			var d = a.registerTemporaryCallback(k);
			if (d) {
				a.doCompositeImages(e, j, f, g, d)
			}
		},
		choosePhoto: function(h, e, f, g, k, j) {
			if (!j || !j.__objectRegistryId) {
				new b.UI.Toast({
					text: "Photo picker requires an invoking view.",
					onDisappear: function() {
						this.destroy()
					}
				}).show();
				return
			}
			var d = a.registerTemporaryCallback(k);
			if (d) {
				a.doChoosePhoto(h, e, f, g || {}, d, j.__objectRegistryId)
			}
		},
		choosePhotoCamera: function(h, e, f, g, j) {
			var d = a.registerTemporaryCallback(j);
			if (d) {
				a.doChooseCamera(h, e, f, g || {}, d)
			}
		},
		measureText: function(k, e, j, f, g, l) {
			var d = a.registerTemporaryCallback(l);
			if (d != "") {
				a.measureText(k, e || -1, j || -1, f, g, d)
			}
		}
	};
	b.UI = new c({
		Window: function() {
			return require("NGCore/Client/UI/Window").Window
		},
		Element: function() {
			return require("NGCore/Client/UI/Element").Element
		},
		ViewGeometry: function() {
			return require("NGCore/Client/UI/ViewGeometry")
		},
		Scale: function() {
			return b.UI.ViewGeometry.Scale
		},
		View: function() {
			return require("NGCore/Client/UI/View").View
		},
		Label: function() {
			return require("NGCore/Client/UI/Label").Label
		},
		Image: function() {
			return require("NGCore/Client/UI/Image").Image
		},
		Button: function() {
			return require("NGCore/Client/UI/Button").Button
		},
		GLView: function() {
			return require("NGCore/Client/UI/GLView").GLView
		},
		NavController: function() {
			return require("NGCore/Client/UI/NavController").NavController
		},
		WebView: function() {
			return require("NGCore/Client/UI/WebView").WebView
		},
		ScrollView: function() {
			return require("NGCore/Client/UI/ScrollView").ScrollView
		},
		ListView: function() {
			return require("NGCore/Client/UI/ListView").ListView
		},
		ListViewSection: function() {
			return require("NGCore/Client/UI/ListViewSection").ListViewSection
		},
		ListViewItem: function() {
			return require("NGCore/Client/UI/ListViewItem").ListViewItem
		},
		CellView: function() {
			return require("NGCore/Client/UI/CellView").CellView
		},
		CheckBox: function() {
			return require("NGCore/Client/UI/CheckBox").CheckBox
		},
		EditText: function() {
			return require("NGCore/Client/UI/EditText").EditText
		},
		EditTextArea: function() {
			return require("NGCore/Client/UI/EditTextArea").EditTextArea
		},
		DateField: function() {
			return require("NGCore/Client/UI/DateField").DateField
		},
		AlertDialog: function() {
			return require("NGCore/Client/UI/AlertDialog").AlertDialog
		},
		ProgressDialog: function() {
			return require("NGCore/Client/UI/ProgressDialog").ProgressDialog
		},
		Toast: function() {
			return require("NGCore/Client/UI/Toast").Toast
		},
		Style: function() {
			return require("NGCore/Client/UI/Style").Style
		},
		AdView: function() {
			return require("NGCore/Client/UI/AdView").AdView
		},
		DocumentView: function() {
			return require("NGCore/Client/UI/DocumentView").DocumentView
		},
		CheckoutView: function() {
			return require("NGCore/Client/UI/CheckoutView").CheckoutView
		},
		Spinner: function() {
			return require("NGCore/Client/UI/Spinner").Spinner
		},
		ProgressBar: function() {
			return require("NGCore/Client/UI/ProgressBar").ProgressBar
		},
		MapView: function() {
			return require("NGCore/Client/UI/MapView").MapView
		},
		MapAnnotation: function() {
			return require("NGCore/Client/UI/MapAnnotation").MapAnnotation
		},
		_CutSceneView: function() {
			return require("NGCore/Client/UI/_CutSceneView").CutSceneView
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Network/DownloadManifest"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Network/DownloadManifest"] || {};
	$MODULE_REGISTRY["NGCore/Client/Network/DownloadManifest"] = c;
	var b = require("NGCore/Client/Core/Class").Class;
	var e = require("NGCore/Client/Core/MessageListener").MessageListener;
	var d = require("NGCore/Client/Network/XHR").XHR;
	var j = require("NGCore/Client/Network/Util").Util;
	var a = require("NGCore/Client/Network/DownloadFile").DownloadFile;
	var g = require("NGCore/Client/Storage/FileSystem").FileSystem;
	var k = require("NGCore/Client/Core/LocalGameList").LocalGameList;
	var f = require("NGCore/Client/Core/Capabilities").Capabilities;
	var h = b.subclass({
		classname: "Manifest",
		initialize: function() {},
		reset: function() {
			this.mJson = null;
			this.mArchives = null
		},
		initWithJsonText: function(n, l) {
			try {
				this.mJson = JSON.parse(n);
				if (!this.mJson) {
					this.mJson = {}
				}
			} catch (m) {
				this.mJson = {}
			}
			if ("__archives" in this.mJson) {
				this.mArchives = this.mJson.__archives.files;
				delete this.mJson.__archives
			} else {
				this.mArchives = []
			}
		},
		foreach: function(m, l) {
			var p = this.mJson;
			var o = m.mJson;
			for (var n in o) {
				this.handleItem(n, p, o, l)
			}
			for (var n in p) {
				if (!(n in o)) {
					this.handleItem(n, p, o, l)
				}
			}
		},
		handleItem: function(n, p, o, l) {
			var m = l(n, p, o);
			if (!m) {
				delete p[n]
			}
		},
		write: function(n) {
			var l = function(o) {
				if (o) {
					console.log("Error writing manifest! " + o)
				}
			};
			if (this.mJson) {
				var m = JSON.stringify(this.mJson);
				g.writeFile(n, m, l)
			}
		}
	});
	c.DownloadManifest = e.subclass({
		classname: "DownloadManifest",
		initialize: function() {
			this.reset()
		},
		_clearConnections: function() {
			for (var l in this.mConnections) {
				if (!this.mConnections.hasOwnProperty(l)) {
					continue
				}
				this.mConnections[l].abort()
			}
			this.mConnections = []
		},
		reset: function() {
			this.mConcurrentRequests = 6;
			this.mManifest = null;
			this.mRemoteUrl = null;
			this.mLocalPath = null;
			this.mLocalRoot = null;
			this.mLocalText = null;
			this.mRemoteText = null;
			this.mProgressCb = function() {};
			this.mDoneCb = function() {};
			this.mPaused = false;
			this.mValid = false;
			this._clearConnections();
			this.mPendingItems = [];
			this.mCompleteBytes = 0;
			this.mTotalBytes = 0;
			this.mSpaceNeeded = 0;
			this.mNumRemoteManifestFiles = 0;
			this.mNumRemoteManifestBytes = 0;
			this.mDownloadArchives = true;
			this.mActiveRequests = [];
			this.mLocalGameList = k;
			this.mNewJS = false;
			this.mAppObserver = null;
			this.mRetrySchedule = j.RetrySchedule(50, 2000);
			this.mManifestRetrySchedule = this.mRetrySchedule.slice(0);
			if (this._statusListener) {
				this._statusListener.destroy();
				this._statusListener = null
			}
			this.mCheckUpdateOnly = false;
			this.mCheckUpdateCallback = null
		},
		_ensureTrailingSlashes: function(l, n, m) {
			this.mRemoteUrl = l.match(/.*\/$/) ? l : l + "/";
			this.mLocalRoot = (n.match(/.*\/$/) || (!n)) ? n : n + "/";
			this._secureContentUrl = ((!m) || m.match(/.*\/$/)) ? m : m + "/"
		},
		_readLocalManifest: function() {
			g.readFile(this.mLocalPath, this._onReadLocalManifest.bind(this))
		},
		_setRemotePath: function(l) {
			if (this._secureContentUrl) {
				this.mRemotePath = this._secureContentUrl + l
			} else {
				this.mRemotePath = this.mRemoteUrl + l
			}
		},
		_parseManNames: function(m) {
			if (typeof m === "string") {
				var l = {};
				l[m] = m;
				m = l
			}
			return m
		},
		isUpdated: function(n, q, p, l, o) {
			this.mCheckUpdateOnly = true;
			this.mCheckUpdateCallback = l;
			this.mDoneCb = (typeof o == "function") ? o : function() {};
			this.mProgressCb = function(s, t) {};
			var r = 0;
			var m = n + "/configuration.json" + j.getCacheBustingString();
			j.OperationWithRetries((function(s, t) {
				var u = new d();
				u.onreadystatechange = (function() {
					if (u.readyState == 4 && this.mValid) {
						this.mManifest = new h();
						var v = null;
						if (u.status == 200 && u.responseText) {
							var w = JSON.parse(u.responseText);
							v = w.contentUrl;
							if (!p) {
								p = {
									"webgame.ngmanifest": require("NGCore/Client/Core/_int_LGL")._int_LGL.getManifestName(w)
								}
							}
							if (!v) {
								v = n
							}
							p = this._parseManNames(p);
							var z;
							var y;
							for (var x in p) {
								z = p[x];
								y = x;
								break
							}
							this._ensureTrailingSlashes(v, q);
							this.mLocalPath = this.mLocalRoot + y;
							this._setRemotePath(z);
							this._readLocalManifest()
						} else {
							if (u.status == 404) {
								this._processError("404! Failed to download configuration at " + m, false)
							} else {
								r = u.status;
								s()
							}
						}
					}
				}).bind(this);
				u.open("GET", m, true);
				u.send()
			}).bind(this), (function() {
				console.log("Exceeded maximum number of manifest download retires, failing");
				this._processError("Failed to download manifest (" + r + ") at " + m, false)
			}).bind(this), this.mFailEarly);
			this.mValid = true
		},
		start: function(m, p, n, l, s, o, q) {
			this.mCheckUpdateOnly = false;
			n = this._parseManNames(n);
			var v;
			var u;
			for (var t in n) {
				v = n[t];
				u = t;
				break
			}
			console.log("DownloadManifest.start(", m, p, v, ")");
			if (!m || !p || m == "" || p == "") {
				throw new Error("invalid arguments: " + JSON.stringify(arguments))
			}
			this.mManifest = new h();
			if (o) {
				this.mDownloadArchives = false
			}
			if (f.getPlatformOS() == "flash") {
				console.log("Flash does not yet support archive downloads");
				this.mDownloadArchives = false
			}
			this._ensureTrailingSlashes(m, p, this._secureContentUrl);
			this._setRemotePath(v);
			this.mLocalPath = this.mLocalRoot + u;
			this.mFailEarly = q;
			this.mProgressCb = function(w, y) {
				try {
					l(w, y)
				} catch (x) {
					NgLogException(x)
				}
			};
			var r = this;
			this.mDoneCb = function(y, z, w) {
				try {
					g.writeFile(r.mLocalRoot + "/.nomedia", "");
					this.mProgressCb = function() {};
					this.mDoneCb = function() {};
					this._setLifecycleListening(false);
					s(y, z, w)
				} catch (x) {
					NgLogException(x)
				}
			};
			this._readLocalManifest();
			this._setLifecycleListening(true);
			this.mValid = true
		},
		abort: function() {
			this.reset()
		},
		pause: function() {
			this._clearConnections();
			this.mPendingItems = this.mPendingItems.concat(this.mActiveRequests);
			this.mActiveRequests = [];
			this.mPaused = true
		},
		resume: function() {
			if (this.mPaused) {
				this.mPaused = false;
				this._downloadPendingItems()
			}
		},
		_setLifecycleListening: function(l) {
			if (l && !this.lifeListening) {
				Device.LifecycleEmitter.addListener(this, function(m) {
					switch (m) {
						case Device.LifecycleEmitter.Event.Suspend:
						case Device.LifecycleEmitter.Event.Terminate:
							this._writeManifest();
							break
					}
				});
				this.lifeListening = true
			} else {
				if (this.lifeListening) {
					Device.LifecycleEmitter.removeListener(this);
					this.lifeListening = false
				}
			}
		},
		_theQuestion: function(l) {
			return l | !l
		},
		_setConfig: function(l) {
			this._Config = l;
			this._noJS = l.omitJsUpdate;
			this._secureContentUrl = l.secureContentUrl
		},
		_onReadLocalManifest: function(m, n) {
			if (this.mValid) {
				try {
					if (!m) {
						this.mLocalText = n
					} else {
						this.mLocalText = "{}"
					}
					this._downloadManifest()
				} catch (l) {
					NgLogException(l);
					this._processError("Error reading local manifest err: " + m, false)
				}
			}
		},
		_downloadManifest: function() {
			var l = 0;
			j.OperationWithRetries((function(m, n) {
				var o = new d();
				var p = this.mConnections.push(o) - 1;
				o.onreadystatechange = (function() {
					if (o.readyState == 4 && this.mValid) {
						delete this.mConnections[p];
						l = o.status;
						if (l == 200) {
							this.mRemoteText = o.responseText;
							this._checkItems();
							if (this.mCheckUpdateOnly) {
								this._checkUpdate()
							} else {
								this._evalManifests()
							}
						} else {
							console.log("Download of manifest at " + this.mRemotePath + j.getCacheBustingString() + " failed: " + l + " " + o.responseText);
							if (l == 404) {
								n()
							} else {
								m()
							}
						}
					}
				}).bind(this);
				o.open("GET", this.mRemotePath + j.getCacheBustingString(), true);
				o.send()
			}).bind(this), (function() {
				this._processError("Failed to download manifest (" + l + ")", false)
			}).bind(this), this.mFailEarly)
		},
		_processError: function(m, l) {
			if (l && this.mManifest) {
				this._writeManifest()
			}
			if (this.mValid) {
				this.mDoneCb(m, null, this.mLocalText ? this.mLocalText.length > 2 : false);
				this.reset()
			}
		},
		_checkItems: function() {
			this.mManifest.initWithJsonText(this.mLocalText, true);
			var l = new h();
			l.initWithJsonText(this.mRemoteText);
			this.mManifest.foreach(l, this._compareItems.bind(this))
		},
		_checkUpdate: function() {
			this.mPendingItems = [];
			this.mCheckUpdateCallback(this.mTotalBytes > 0, this.mTotalBytes)
		},
		_evalManifests: function() {
			try {
				this.mSpaceNeeded = this.mTotalBytes;
				var l = new h();
				l.initWithJsonText(this.mRemoteText);
				if (!l.mArchives) {
					this.mDownloadArchives = false
				}
				this._prepareForArchiveDownload(l.mArchives, !this.mDownloadArchives);
				this.mProgressCb(this.mCompleteBytes, this.mTotalBytes);
				this.mLocalGameList.freeSpace(this.mSpaceNeeded, (function(o) {
					if (o) {
						this._processError(o, false);
						return
					}
					var n = this.mPendingItems.length;
					if (n) {
						console.log("Going to download %d items.", n);
						if (n < 10) {
							console.log("Items: " + JSON.stringify(this.mPendingItems))
						}
					}
					this._downloadPendingItems()
				}).bind(this))
			} catch (m) {
				NgLogException(m);
				this.mDoneCb("Failed processing manifests!", null)
			}
		},
		_prepareForArchiveDownload: function(w, m) {
			console.log("DownloadManfiest._prepareForArchiveDownload onlyForcedFiles:", m);
			var u = [];
			var o = {};
			var q = 0;
			var r = 0;
			var s = this.mPendingItems;
			var l = [];
			for (var p = 0; p < s.length; ++p) {
				var t = s[p];
				if (!t.arcn) {
					u.push(t);
					q += t.size;
					continue
				}
				var n = t.arcn;
				var v = w[n];
				if (!v.files) {
					v.files = [t]
				} else {
					v.files.push(t)
				}
				if (o[n]) {
					continue
				}
				if (m && !t.arcForce) {
					l.push(t);
					continue
				}
				u.push(v);
				o[n] = true;
				q += v.expSize;
				r += v.arcSize
			}
			for (p = 0; p < l.length; ++p) {
				var t = l[p];
				if (o[t.arcn]) {
					continue
				}
				u.push(t);
				q += t.size
			}
			this.mPendingItems = u;
			this.mTotalBytes = q;
			this.mSpaceNeeded = q + r
		},
		_compareItems: function(p, s, q) {
			var m = s[p];
			var n = q[p];
			if (!n) {
				var r = this.mLocalRoot + p;
				var l = function(t) {
					if (t) {
						console.log("Error deleting " + r + " error: " + t)
					}
				};
				g.deleteFile(r, l);
				if ("pending" in m) {
					r = r + ".tmp";
					g.deleteFile(r, l)
				}
				return false
			}
			var o = this._extensionMatch(p, "js");
			if (this._noJS && (o || p == "index.html")) {
				return true
			}
			n.name = p;
			this.mNumRemoteManifestFiles += 1;
			this.mNumRemoteManifestBytes += n.size;
			if (!m || m.hash != n.hash) {
				if (o) {
					this.mNewJS = true
				}
				this.mTotalBytes += n.size;
				this.mPendingItems.push(n)
			}
			return true
		},
		_extensionMatch: function(o, m) {
			var n = new RegExp("^.*.(" + m + ")$", "i");
			var l = o.match(n);
			return l
		},
		_downloadPendingItems: function() {
			if (this.mValid && !this.mPaused) {
				if (this.mPendingItems.length == 0 && this.mActiveRequests.length == 0) {
					if (this.mTotalBytes > 0) {
						this._writeManifest()
					}
					this._writeConfig();
					this.mDoneCb(null, this.mManifest);
					this.reset();
					return
				}
				while (this.mPendingItems.length && this.mActiveRequests.length < this.mConcurrentRequests) {
					var l = this.mPendingItems.pop();
					l.retrySchedule = this.mRetrySchedule.slice(0);
					this._downloadItem(l)
				}
			}
		},
		_downloadItem: function(n) {
			this.mActiveRequests.push(n);
			var l = this.mRemoteUrl + n.name;
			if (n.mangled) {
				var m = l.lastIndexOf(".");
				l = l.substr(0, m) + "-" + l.substr(m + 1) + ".bin"
			}
			j.OperationWithRetries((function(p) {
				var o = new a();
				var q = this.mConnections.push(o) - 1;
				o.start(this.mLocalRoot + n.name, "GET", l + j.getCacheBustingString(), [], this._onDownloadItemComplete.bind(this, n, p, q))
			}).bind(this), (function() {
				console.log("Manifest download failed. Too many failed download attempts for " + n.name);
				this._processError("Could not download file " + n.name, true)
			}).bind(this), this.mFailEarly)
		},
		_removeActiveRequest: function(m) {
			for (var l in this.mActiveRequests) {
				if (m == this.mActiveRequests[l]) {
					this.mActiveRequests.splice(l, 1)
				}
			}
		},
		_onDownloadItemComplete: function(o, m, q, l, p) {
			try {
				delete this.mConnections[q];
				if (l != 200 || o.hash != p) {
					console.log("Download failed.  Retrying " + o.name);
					console.log("Status: " + l + " manifest hash: " + o.hash + " actual hash: " + p);
					m();
					return
				}
				if (o.files) {
					++this.mConcurrentRequests;
					g.decompressFile(this.mLocalRoot + o.name, this.mLocalRoot, false, (function(t, s) {
						--this.mConcurrentRequests;
						g.deleteFile(this.mLocalRoot + "/" + o.name);
						if (t) {
							console.log("Decompress failed.  Retrying " + o.name);
							m()
						}
						for (var r = 0; r < o.files.length; ++r) {
							var u = o.files[r];
							this.mManifest.mJson[u.name] = {
								size: u.size,
								hash: u.hash
							};
							if (typeof u.encryption != "undefined") {
								this.mManifest.mJson[u.name].encryption = u.encryption
							}
						}
						this._removeActiveRequest(o);
						this.mCompleteBytes += Number(o.expSize);
						this.mProgressCb(this.mCompleteBytes, this.mTotalBytes);
						this._downloadPendingItems()
					}).bind(this))
				} else {
					this.mManifest.mJson[o.name] = {
						size: o.size,
						hash: o.hash
					};
					if (typeof o.encryption != "undefined") {
						this.mManifest.mJson[o.name].encryption = o.encryption
					}
					this._removeActiveRequest(o);
					this.mCompleteBytes += Number(o.size);
					this.mProgressCb(this.mCompleteBytes, this.mTotalBytes);
					this._downloadPendingItems()
				}
			} catch (n) {
				NgLogException(n);
				this._processError("Error after finishing the download of item " + o + ". status is " + l, true)
			}
		},
		_writeManifest: function() {
			console.log("DM Complete!");
			try {
				if (this.mManifest) {
					this.mManifest.write(this.mLocalPath)
				}
			} catch (l) {
				NgLogException(l)
			}
		},
		_writeConfig: function() {
			try {
				if (this._Config) {
					g.writeFile(this.mLocalRoot + f._getConfigFile(), JSON.stringify(this._Config), function(m) {
						console.log(m)
					})
				}
			} catch (l) {
				NgLogException(l)
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/LocalGameList"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Core/LocalGameList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/LocalGameList"] = c;
	var l = require("NGCore/Client/Core/Proc").Proc;
	var a = require("NGCore/Client/Core/Class").Class;
	var f = require("NGCore/Client/Core/MessageListener").MessageListener;
	var b = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var h = require("NGCore/Client/Core/Capabilities").Capabilities;
	var e = require("NGCore/Client/Core/Base64").Base64;
	var g = require("NGCore/Client/Core/toMD5").toMD5;
	var k = require("NGCore/Client/Network/Util").Util;
	var j = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter;
	var d = f.subclass({
		initialize: function(m) {
			j.addListener(this, this.onLifecycleUpdate);
			this._listener = m
		},
		destroy: function() {
			j.removeListener(this)
		},
		onLifecycleUpdate: function(m) {
			switch (m) {
				case Device.LifecycleEmitter.Event.Resume:
					this._listener.onResume();
					break
			}
		}
	});
	c.LocalGameList = a.singleton({
		classname: "LocalGameList",
		initialize: function() {
			b.register(this);
			this._createSendGen(this.__objectRegistryId);
			new d(this);
			this.mRefCount = 0;
			this.mRefTable = [];
			this.mSpaceAvailable = 0;
			this.mRequiredAvailableSpace = 0;
			this.mSpaceCB = [];
			this._getRepoSpaceSendGen();
			var m = this;
			var n = require("NGCore/Client/Storage/KeyValue").KeyValueCache;
			this.mGameStore = n.global("Core.GameList");
			this.mActiveGameKey = "activeGames";
			this.onResume()
		},
		onResume: function() {
			this._reloadGameList()
		},
		_reloadGameList: function() {
			this.mGameStore.getItem(this.mActiveGameKey, (function(m, o) {
				var n;
				if (o) {
					n = JSON.parse(o)
				} else {
					n = []
				}
				this.mGameList = n;
				if (typeof this.mListListen == "function") {
					this.mListListen()
				}
			}).bind(this), true)
		},
		setListListener: function(m) {
			this.mListListen = m
		},
		$_commandRecvGen: (function() {
			var m = (function(q) {
				var o = l.parseInt(q.shift(), 10);
				if (o > 0) {
					var p = l.parseInt(q.shift(), 10);
					var n = b.idToObject(p);
					if (!n) {
						NgLogE("Object instance could not be found for command " + q + ". It may have been destroyed this frame.");
						return
					}
					switch (o) {
						case 3:
							n._updateDoneRecv(q);
							break;
						case 5:
							n._repoSpaceRecv(q);
							break;
						case 12:
							n._updateProgressRecv(q);
							break;
						default:
							NgLogE("Unknown instance method id " + o + " in LocalGameList._commandRecvGen from command: " + q);
							return
					}
				} else {
					switch (o) {
						default:
							NgLogE("Unknown static method id " + o + " in LocalGameList._commandRecvGen from command: " + q);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[302] = m;
			return m
		})(),
		_updateDoneRecvGen: function(m, n) {
			if (m.length != 2) {
				NgLogE("Could not parse due to wrong argument count in LocalGameList.updateDone from command: " + m);
				return false
			}
			n.id = l.parseInt(m[0]);
			if (n.id === undefined) {
				NgLogE("Could not parse id in LocalGameList.updateDone from command: " + m);
				return false
			}
			n.error = l.parseString(m[1]);
			if (n.error === undefined) {
				NgLogE("Could not parse error in LocalGameList.updateDone from command: " + m);
				return false
			}
			return true
		},
		_repoSpaceRecvGen: function(m, n) {
			if (m.length != 1) {
				NgLogE("Could not parse due to wrong argument count in LocalGameList.repoSpace from command: " + m);
				return false
			}
			n.space = l.parseInt(m[0]);
			if (n.space === undefined) {
				NgLogE("Could not parse space in LocalGameList.repoSpace from command: " + m);
				return false
			}
			return true
		},
		_updateProgressRecvGen: function(m, n) {
			if (m.length != 4) {
				NgLogE("Could not parse due to wrong argument count in LocalGameList.updateProgress from command: " + m);
				return false
			}
			n.url = l.parseString(m[0]);
			if (n.url === undefined) {
				NgLogE("Could not parse url in LocalGameList.updateProgress from command: " + m);
				return false
			}
			n.cur = l.parseInt(m[1]);
			if (n.cur === undefined) {
				NgLogE("Could not parse cur in LocalGameList.updateProgress from command: " + m);
				return false
			}
			n.total = l.parseInt(m[2]);
			if (n.total === undefined) {
				NgLogE("Could not parse total in LocalGameList.updateProgress from command: " + m);
				return false
			}
			n.error = l.parseBool(m[3]);
			if (n.error === undefined) {
				NgLogE("Could not parse error in LocalGameList.updateProgress from command: " + m);
				return false
			}
			return true
		},
		$_createSendGen: function(m) {
			l.appendToCommandString(":302,-1," + m)
		},
		_updateGameSendGen: function(m, n) {
			l.appendToCommandString(":302,2," + this.__objectRegistryId + "," + e.encode(m) + "," + n)
		},
		_getRepoSpaceSendGen: function() {
			l.appendToCommandString(":302,4," + this.__objectRegistryId)
		},
		_deleteGameSendGen: function(m) {
			l.appendToCommandString(":302,6," + this.__objectRegistryId + "," + e.encode(m))
		},
		__setUpdateProgressVisibleSendGen: function(m) {
			l.appendToCommandString(":302,7," + this.__objectRegistryId + "," + (m ? 1 : 0))
		},
		__setUpdateProgressBoundsSendGen: function(m, p, n, o) {
			l.appendToCommandString(":302,8," + this.__objectRegistryId + "," + m + "," + p + "," + n + "," + o)
		},
		_pauseUpdateSendGen: function(m) {
			l.appendToCommandString(":302,9," + this.__objectRegistryId + "," + e.encode(m))
		},
		_resumeUpdateSendGen: function(m) {
			l.appendToCommandString(":302,10," + this.__objectRegistryId + "," + e.encode(m))
		},
		_cancelUpdateSendGen: function(m) {
			l.appendToCommandString(":302,11," + this.__objectRegistryId + "," + e.encode(m))
		},
		_runGameSendGen: function(m) {
			l.appendToCommandString(":302,13," + this.__objectRegistryId + "," + e.encode(m))
		},
		_finishGameSendGen: function() {
			l.appendToCommandString(":302,14," + this.__objectRegistryId)
		},
		__forwardExceptionSendGen: function(m) {
			l.appendToCommandString(":302,15," + this.__objectRegistryId + "," + e.encode(m))
		},
		_setProgressVisible: function(m) {
			this.progressVisible = m;
			this.__setUpdateProgressVisibleSendGen(m)
		},
		_setProgressBounds: function(m) {
			this.__setUpdateProgressBoundsSendGen(m[0], m[1], m[2], m[3])
		},
		_createProcSwitchDialog: function(u) {
			var p = require("NGCore/Client/UI").UI;
			var o = require("NGCore/Client/Device").Device;
			var v = NGWindow.outerWidth;
			var s = NGWindow.outerHeight;
			if (o.OrientationEmitter.getInterfaceOrientation() == o.OrientationEmitter.Orientation.Landscape || o.OrientationEmitter.getInterfaceOrientation() == o.OrientationEmitter.Orientation.LandscapeLeft) {
				v = NGWindow.outerHeight;
				s = NGWindow.outerWidth
			}
			var m = new p.ViewGeometry.Rect(0, 0, v, s);
			var n = new p.View({
				frame: m.array(),
				title: u,
				backgroundColor: "8000"
			});
			m.inset(Math.round((s - 238) / 2), 10);
			var t = new p.View({
				frame: m.array(),
				gradient: {
					gradient: ["FF102031 0.0", "FF102031 0.394", "FF101820 0.394", "FF101820 1.0"],
					outerLine: "FF9c 1.0"
				}
			});
			n.addChild(t);
			m.x = m.y = 0;
			var q = new p.Label({
				frame: m.sliceVertical(94).array(),
				text: (u || "Please Wait…"),
				textColor: "FFFF",
				textShadow: "8000 1.0 {0,-1}",
				textSize: 24,
				textGravity: [0, 0.5],
				textInsets: [10, 30, 10, 30]
			});
			t.addChild(q);
			m.inset(36, 36 + Math.floor((m.w - m.h) / 2));
			m.h = m.w;
			var x = new p.Spinner({
				frame: m.array()
			});
			t.addChild(x);
			p.Window.document.addChild(n);
			return n
		},
		restartGame: function() {
			this.runGame(h.getServer() + "/" + h.getGame())
		},
		runGame: function(m) {
			console.log("Calling runGame with " + m);
			if (!m) {
				console.log("Finishing");
				this._finishGame()
			} else {
				this._runGameSendGen(k.NormalizeUrl(m))
			}
		},
		_finishGame: function() {
			this._finishGameSendGen()
		},
		listenUpdates: function(m) {
			this.mUpdateListener = m
		},
		stopUpdateListening: function() {
			delete this.mUpdateListener
		},
		pauseUpdate: function(m) {
			this._pauseUpdateSendGen(k.NormalizeUrl(m))
		},
		resumeUpdate: function(m) {
			this._resumeUpdateSendGen(k.NormalizeUrl(m))
		},
		cancelUpdate: function(m) {
			this._cancelUpdateSendGen(k.NormalizeUrl(m))
		},
		updateGame: function(n, m) {
			var o = this.mRefCount;
			this.mRefTable[this.mRefCount++] = m;
			this._updateGameSendGen(k.NormalizeUrl(n), o);
			return o
		},
		runUpdatedGame: function(m) {
			if (!m) {
				this._finishGame();
				return
			}
			this.updateGame(m, (function(n) {
				if (n) {
					NgLogE("LGL Error updating game! " + n);
					k.showFatalErrorDialog()
				} else {
					this.runGame(m)
				}
			}).bind(this))
		},
		_updateProgressRecv: function(m) {
			var n = {};
			this._updateProgressRecvGen(m, n);
			if (this.mUpdateListener) {
				this.mUpdateListener(n.url, n.cur, n.total, n.error)
			}
		},
		_updateDoneRecv: function(n) {
			var o = {};
			this._updateDoneRecvGen(n, o);
			this._reloadGameList();
			var m = this.mRefTable[o.id];
			if (m) {
				m(o.error)
			}
			delete this.mRefTable[o.id];
			this._getRepoSpaceSendGen()
		},
		_repoSpaceRecv: function(o) {
			var p = {};
			this._repoSpaceRecvGen(o, p);
			this.mSpaceAvailable = p.space - 7340032;
			console.log("LocalGameList.got response:", this.mSpaceAvailable, "and need:", this.mRequiredAvailableSpace);
			if (this.mRequiredAvailableSpace > this.mSpaceAvailable) {
				var m = new UI.AlertDialog();
				m.setText(Core.Localization.getString("SD card is full"));
				m.setChoices([Core.Localization.getString("Exit")]);
				m.game = this.game;
				m.onchoice = function(q) {
					m.hide();
					j.exitProcess()
				};
				m.show()
			} else {
				for (var n = 0; n < this.mSpaceCB.length; ++n) {
					this.mSpaceCB[n]()
				}
				this.mSpaceCB = [];
				this.mRequiredAvailableSpace = 0
			}
		},
		getGameList: function() {
			return this.mGameList
		},
		updateGameList: function(m) {
			this.mGameList = m
		},
		freeSpace: function(n, m) {
			this.mRequiredAvailableSpace += n;
			this.mSpaceCB.push(m);
			console.log("LocalGameList.freeSpace space=", this.mRequiredAvailableSpace);
			if (this.mSpaceCB.length == 1) {
				console.log("LocalGameList.sending request to native");
				this._getRepoSpaceSendGen()
			}
		},
		deleteGame: function(p) {
			p = k.NormalizeUrl(p);
			var t = g(p);
			this._deleteGameSendGen(t);
			var n = this;
			var m = function() {
				NgLogD("LocalGameList finished deleting game from " + n.mActiveGameKey + " for " + t)
			};
			if (this.mGameList) {
				var s = this.mGameList;
				var q = false;
				var r;
				var o = [];
				for (r = 0; r < s.length; ++r) {
					if (s[r].name == t) {
						q = true
					} else {
						o.push(s[r])
					}
				}
				if (q) {
					NgLogD("LocalGameList found and removed " + t);
					this.mGameList = o
				} else {
					NgLogD("LocalGameList failed to find and remove " + t)
				}
			} else {
				NgLogD("LocalGameList cache not warm, can't remove " + t)
			}
		},
		updateAvailable: function(n, m, o) {
			var p = require("NGCore/Client/Core/_int_LGL")._int_LGL;
			p.updateAvailable(n, m, o)
		},
		_forwardException: function(m) {
			this.__forwardExceptionSendGen({
				exceptionString: m
			})
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device"] = a;
	a.Device = {};
	a.Device.__defineGetter__("LifecycleEmitter", function() {
		delete this.LifecycleEmitter;
		return this.LifecycleEmitter = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter
	});
	a.Device.__defineGetter__("LocationEmitter", function() {
		delete this.LocationEmitter;
		return this.LocationEmitter = require("NGCore/Client/Device/LocationEmitter").LocationEmitter
	});
	a.Device.__defineGetter__("MemoryEmitter", function() {
		delete this.MemoryEmitter;
		return this.MemoryEmitter = require("NGCore/Client/Device/MemoryEmitter").MemoryEmitter
	});
	a.Device.__defineGetter__("MotionEmitter", function() {
		delete this.MotionEmitter;
		return this.MotionEmitter = require("NGCore/Client/Device/MotionEmitter").MotionEmitter
	});
	a.Device.__defineGetter__("NetworkEmitter", function() {
		delete this.NetworkEmitter;
		return this.NetworkEmitter = require("NGCore/Client/Device/NetworkEmitter").NetworkEmitter
	});
	a.Device.__defineGetter__("OrientationEmitter", function() {
		delete this.OrientationEmitter;
		return this.OrientationEmitter = require("NGCore/Client/Device/OrientationEmitter").OrientationEmitter
	});
	a.Device.__defineGetter__("ShakeEmitter", function() {
		delete this.ShakeEmitter;
		return this.ShakeEmitter = require("NGCore/Client/Device/ShakeEmitter").ShakeEmitter
	});
	a.Device.__defineGetter__("KeyEmitter", function() {
		delete this.KeyEmitter;
		return this.KeyEmitter = require("NGCore/Client/Device/KeyEmitter").KeyEmitter
	});
	a.Device.__defineGetter__("PushNotificationEmitter", function() {
		delete this.PushNotificationEmitter;
		return this.PushNotificationEmitter = require("NGCore/Client/Device/_PushNotificationEmitter").PushNotificationEmitter
	});
	a.Device.__defineGetter__("InAppPurchaseEmitter", function() {
		delete this.InAppPurchaseEmitter;
		return this.InAppPurchaseEmitter = require("NGCore/Client/Device/_InAppPurchaseEmitter").InAppPurchaseEmitter
	});
	a.Device.__defineGetter__("InAppPurchase", function() {
		delete this.InAppPurchase;
		return this.InAppPurchase = require("NGCore/Client/Device/_InAppPurchase").InAppPurchase
	});
	a.Device.__defineGetter__("IPCEmitter", function() {
		delete this.IPCEmitter;
		return this.IPCEmitter = require("NGCore/Client/Device/IPCEmitter").IPCEmitter
	});
	a.Device.__defineGetter__("LayoutEmitter", function() {
		delete this.LayoutEmitter;
		return this.LayoutEmitter = require("NGCore/Client/Device/LayoutEmitter").LayoutEmitter
	});
	a.Device.__defineGetter__("LocalNotification", function() {
		delete this.LocalNotification;
		return this.LocalNotification = require("NGCore/Client/Device/_LocalNotification").LocalNotification
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core"] = a;
	a.Core = {};
	a.Core.__defineGetter__("Analytics", function() {
		delete this.Analytics;
		return this.Analytics = require("NGCore/Client/Core/Analytics").Analytics
	});
	a.Core.__defineGetter__("Base64", function() {
		delete this.Base64;
		return this.Base64 = require("NGCore/Client/Core/Base64").Base64
	});
	a.Core.__defineGetter__("Capabilities", function() {
		delete this.Capabilities;
		return this.Capabilities = require("NGCore/Client/Core/Capabilities").Capabilities
	});
	a.Core.__defineGetter__("Class", function() {
		delete this.Class;
		return this.Class = require("NGCore/Client/Core/Class").Class
	});
	a.Core.__defineGetter__("Color", function() {
		delete this.Color;
		return this.Color = require("NGCore/Client/Core/Color").Color
	});
	a.Core.__defineGetter__("Vector", function() {
		delete this.Vector;
		return this.Vector = require("NGCore/Client/Core/Vector").Vector
	});
	a.Core.__defineGetter__("Point", function() {
		delete this.Point;
		return this.Point = require("NGCore/Client/Core/Point").Point
	});
	a.Core.__defineGetter__("Size", function() {
		delete this.Size;
		return this.Size = require("NGCore/Client/Core/Size").Size
	});
	a.Core.__defineGetter__("Rect", function() {
		delete this.Rect;
		return this.Rect = require("NGCore/Client/Core/Rect").Rect
	});
	a.Core.__defineGetter__("MessageEmitter", function() {
		delete this.MessageEmitter;
		return this.MessageEmitter = require("NGCore/Client/Core/MessageEmitter").MessageEmitter
	});
	a.Core.__defineGetter__("MessageListener", function() {
		delete this.MessageListener;
		return this.MessageListener = require("NGCore/Client/Core/MessageListener").MessageListener
	});
	a.Core.__defineGetter__("ObjectRegistry", function() {
		delete this.ObjectRegistry;
		return this.ObjectRegistry = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry
	});
	a.Core.__defineGetter__("Time", function() {
		delete this.Time;
		return this.Time = require("NGCore/Client/Core/Time").Time
	});
	a.Core.__defineGetter__("toMD5", function() {
		delete this.toMD5;
		return this.toMD5 = require("NGCore/Client/Core/toMD5").toMD5
	});
	a.Core.__defineGetter__("SHA1", function() {
		delete this.SHA1;
		return this.SHA1 = require("NGCore/Client/Core/SHA1").SHA1
	});
	a.Core.__defineGetter__("UpdateEmitter", function() {
		delete this.UpdateEmitter;
		return this.UpdateEmitter = require("NGCore/Client/Core/UpdateEmitter").UpdateEmitter
	});
	a.Core.__defineGetter__("Proc", function() {
		delete this.Proc;
		return this.Proc = require("NGCore/Client/Core/Proc").Proc
	});
	a.Core.__defineGetter__("Logger", function() {
		delete this.Logger;
		return this.Logger = require("NGCore/Client/Core/Logger").Logger
	});
	a.Core.__defineGetter__("LocalGameList", function() {
		delete this.LocalGameList;
		return this.LocalGameList = require("NGCore/Client/Core/LocalGameList").LocalGameList
	});
	a.Core.__defineGetter__("Localization", function() {
		delete this.Localization;
		return this.Localization = require("NGCore/Client/Core/Localization").Localization
	});
	a.Core.__defineGetter__("_LocalGameList", function() {
		delete this._LocalGameList;
		return this._LocalGameList = require("NGCore/Client/Core/_LocalGameList")._LocalGameList
	});
	a.Core.__defineGetter__("NativeAppLaunch", function() {
		delete this.NativeAppLaunch;
		return this.NativeAppLaunch = require("NGCore/Client/Core/NativeAppLaunch").NativeAppLaunch
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Capabilities"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Core/Capabilities"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Capabilities"] = c;
	var b = require("NGCore/Client/Core/Class").Class;
	var a = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var d = require("NGCore/Client/Core/Proc").Proc;
	c.Capabilities = b.singleton({
		classname: "Capabilities",
		_configFile: "configuration.json",
		initialize: function() {
			a.register(this);
			this._createSendGen(this.__objectRegistryId);
			this._fields = {
				version: "sdks_1.3.5-20111208-1.3.5.10",
				buildDate: "20120225",
				buildHash: "g9235bce"
			}
		},
		_getConfigFile: function() {
			return this._configFile
		},
		_getAccts: function() {
			return this._fields._accts
		},
		meetsBinaryVersion: function(m) {
			var l = this.getBinaryVersion().split("-").pop().split(".");
			var j = m.split(".");
			var k = l.length >= j.length;
			var e = Math.min(j.length, l.length);
			for (var g = 0; g < e; ++g) {
				var f = Number(l[g]);
				var h = Number(j[g]);
				if (f != h) {
					k = f > h;
					break
				}
			}
			return k
		},
		getConfigs: function() {
			return this._configuration
		},
		getSDKVersion: function() {
			return this._fields.version
		},
		getSDKBuildDate: function() {
			return this._fields.buildDate
		},
		getSDKBuildHash: function() {
			return this._fields.buildHash
		},
		getBinaryVersion: function() {
			return this._fields.binaryVersion
		},
		getBinaryBuildDate: function() {
			return this._fields.binaryBuildDate
		},
		getBinaryBuildHash: function() {
			return this._fields.binaryBuildHash
		},
		getUniqueId: function() {
			return this._fields.uniqueId
		},
		getLifetimeName: function() {
			return this._fields.lifetimeName
		},
		getDeviceName: function() {
			return this._fields.deviceName
		},
		getPlatformOS: function() {
			return this._fields.platformOs
		},
		getPlatformOSVersion: function() {
			return this._fields.platformOsVersion
		},
		getPlatformHW: function() {
			return this._fields.platformHw
		},
		getPhysicalMem: function() {
			return this._fields.physicalMem
		},
		getPhysicalCpus: function() {
			return this._fields.physicalCpus
		},
		getActiveCpus: function() {
			return this._fields.activeCpus
		},
		getLanguage: function() {
			return this._fields.language
		},
		_getBoot: function() {
			return this._fields.boot
		},
		_getBootServer: function() {
			return this._fields.bootServer
		},
		getBootDir: function() {
			return this._fields.bootDir
		},
		getGameDir: function() {
			return this._fields.gameDir
		},
		getProductName: function() {
			return this._fields.prodName
		},
		_getReferrer: function() {
			return this._fields.referrer
		},
		getContentUrl: function() {
			return this._fields.contentUrl
		},
		getBootGame: function() {
			return this._fields.bootgame
		},
		getStartingServer: function() {
			return this._fields.startingServer
		},
		getBundleGame: function() {
			return this._fields.bundleGame
		},
		getBundleServer: function() {
			return this._fields.bundleServer
		},
		getBundleIdentifier: function() {
			return this._fields.bundleIdentifier
		},
		getGame: function() {
			return this._fields.game
		},
		getServer: function() {
			return this._fields.server
		},
		getUrl: function() {
			return this._fields.url
		},
		getScreenWidth: function() {
			return this._fields.screenWidth
		},
		getScreenHeight: function() {
			return this._fields.screenHeight
		},
		getScreenUnits: function() {
			return this._fields.screenUnits
		},
		getScreenPixelUnits: function() {
			return this._fields.screenPixelUnits
		},
		getMaxTextureSize: function() {
			return this._fields.maxTextureSize
		},
		getMaxTextureUnits: function() {
			return this._fields.maxTextureUnits
		},
		getOglExtensions: function() {
			if (this._fields.oglExtensions) {
				return this._fields.oglExtensions
			}
			switch (this._fields.deviceName) {
				case "Droid":
				case "DROID2":
				case "DROIDX":
				case "SGH-T959":
				case "SGH-T959V":
				case "SAMSUNG-SGH-I997":
				case "SAMSUNG-SGH-I897":
				case "Nexus S":
					return ["GL_IMG_texture_compression_pvrtc"];
				case "HTC Desire":
				case "PC36100":
				case "ADR6300":
				case "001HT":
				case "Nexus One":
				case "HTC Glacier":
					return ["GL_AMD_compressed_ATC_texture"];
				default:
					return []
			}
		},
		getTmpDir: function() {
			return this._fields.tmpDir
		},
		getHasAccel: function() {
			return this._fields.hasAccel
		},
		getHasGyro: function() {
			return this._fields.hasGyro
		},
		getHasTouch: function() {
			return this._fields.hasTouch
		},
		getHasMultiTouch: function() {
			return this._fields.hasMultiTouch
		},
		getHasGps: function() {
			return this._fields.hasGps
		},
		getHasCompass: function() {
			return this._fields.hasCompass
		},
		getHasHwKeyboard: function() {
			return this._fields.hasHwKeyboard
		},
		getHasBackButton: function() {
			return this._fields.hasBackButton
		},
		getHasCamera: function() {
			return this._fields.hasCamera
		},
		getHasWwan: function() {
			return this._fields.hasWwan
		},
		getHasWifi: function() {
			return this._fields.hasWifi
		},
		getCarrier: function() {
			return this._fields.carrier
		},
		getIntentUrl: function() {
			return this._fields.intentUrl
		},
		getIntentAction: function() {
			return this._fields.intentAction
		},
		getStatusBarHeight: function() {
			return this._fields.statusBarHeight
		},
		getLocale: function() {
			return this._fields.locale
		},
		getAvailableFonts: function() {
			return this._deserializedFonts || (this._deserializedFonts = JSON.parse(this._fields.availableFonts))
		},
		getAutorotateDisabled: function() {
			return this._fields.autorotateDisabled || false
		},
		getSocialServer: function() {
			return this.socialServer
		},
		getDistributionName: function() {
			return this._fields.distributionName
		},
		getSourceAppID: function() {
			return this._fields.sourceAppID
		},
		getAppSignatures: function() {
			return this._fields.appSignatures
		},
		getAppReleaseVersion: function() {
			return this._releaseVersion
		},
		getIsDisaggregated: function() {
			return this._fields.isDisaggregated
		},
		_init: function(j) {
			var h = [];
			NgParseCommandDictionary(j, 2, this._fields, h);
			try {
				var f = /(https?:\/\/.+?)\/(.*)/.exec(this._fields.url);
				this._fields.server = f[1];
				this._fields.game = f[2]
			} catch (g) {
				NgLogException(g)
			}
			if (!this._fields.intentUrl) {
				this._fields.intentUrl = ""
			}
			if (this._fields.oglExtensions) {
				try {
					this._fields.oglExtensions = JSON.parse(this._fields.oglExtensions)
				} catch (g) {
					NgLogE("Unable to parse OGL Extensions! " + this._fields.oglExtensions);
					NgLogException(g)
				}
			}
			if (this._fields._accts) {
				try {
					this._fields._accts = JSON.parse(this._fields._accts)
				} catch (g) {
					NgLogE("Unable to parse Accounts! " + this._fields._accts);
					NgLogException(g)
				}
			}
			try {
				this._configuration = JSON.parse(this._fields.configJSON);
				this._fields.contentUrl = this._configuration.contentUrl;
				this.socialServer = this._configuration.socialServer;
				this._releaseVersion = this._configuration.releaseVersion
			} catch (g) {
				NgLogE("Unable to parse config!! (" + this._fields.configJSON + ")");
				NgLogException(g)
			}
			console.log("dict : JS version : " + this.getSDKVersion());
			console.log("dict : JS build date : " + this.getSDKBuildDate());
			console.log("dict : JS build hash : " + this.getSDKBuildHash());
			console.log("dict : contentUrl : " + this._fields.contentUrl);
			console.log("dict : socialServer : " + this.socialServer);
			console.log("dict : releaseVersion : " + this._releaseVersion)
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = d.parseInt(j.shift(), 10);
				if (g > 0) {
					var h = d.parseInt(j.shift(), 10);
					var f = a.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						default:
							NgLogE("Unknown instance method id " + g + " in Capabilities._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						default:
							NgLogE("Unknown static method id " + g + " in Capabilities._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[301] = e;
			return e
		})(),
		$_createSendGen: function(e) {
			d.appendToCommandString(":301,-1," + e)
		},
		t: 0
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Localization"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Core/Localization"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Localization"] = c;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var b = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var d = require("NGCore/Client/Storage/FileSystem").FileSystem;
	var e = c.LocalizationEngine = b.subclass({
		classname: "Localization",
		directoryPath: null,
		languageFilePath: null,
		initialize: function(f) {
			if (!f) {
				f = "./Content/Localization/"
			}
			NgLogD("Localization : init (" + f + ")");
			this.directoryPath = f;
			this.setLanguage(a.getLanguage())
		},
		setLanguage: function(h) {
			var g = this.languageFilePath = this.directoryPath + h + ".json";
			var f = this;
			NgLogD("Localization : reading json file " + g);
			d.readFile(g, function(j, k) {
				if (j === "") {
					NgLogD("Localization : successfully read json file " + g);
					f.setDictionary(h, JSON.parse(k))
				} else {
					NgLogD("Localization: unable to read json file " + g + ", use default english setting instead");
					f.setDictionary(h, null)
				}
			})
		},
		setDictionary: function(f, g) {
			this._lang = f;
			this._dictionary = g;
			this.emit(this._lang)
		},
		getString: function(g) {
			if (this._dictionary && typeof this._dictionary === "object") {
				var f = this._dictionary[g];
				if (f && typeof f !== "undefined") {
					return f
				}
			}
			return this.unknownString(g)
		},
		unknownString: function(f) {
			NgLogD("Localization: ... No localization for " + f + " in " + this._lang);
			return f
		}
	});
	c.Localization = e.singleton({});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Storage"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Storage"] || {};
	$MODULE_REGISTRY["NGCore/Client/Storage"] = a;
	var b = a.Storage = {};
	b.__defineGetter__("KeyValue", function() {
		delete this.KeyValue;
		return this.KeyValue = require("NGCore/Client/Storage/KeyValue").KeyValue
	});
	b.__defineGetter__("KeyValueCache", function() {
		delete this.KeyValueCache;
		return this.KeyValueCache = require("NGCore/Client/Storage/KeyValue").KeyValueCache
	});
	b.__defineGetter__("FileSystem", function() {
		delete this.FileSystem;
		return this.FileSystem = require("NGCore/Client/Storage/FileSystem").FileSystem
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Logger"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Core/Logger"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Logger"] = d;
	var c = require("NGCore/Client/Core/Class").Class;
	var f = require("NGCore/Client/Core/Proc").Proc;
	var b = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var g = require("NGCore/Shared/Lib/sprintf").sprintf;
	var e = require("NGCore/Client/Core/Base64").Base64;
	var a = c.singleton({
		classname: "Logger",
		initialize: function() {
			b.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		_disable: function() {
			console.log("Logger : javascript logging disabled");
			console.log = a.log = function(j, h) {}
		},
		_enable: function() {
			console.log = a.log = function(m, j) {
				if (arguments.length > 1) {
					try {
						var o = new Array();
						for (var k = 0; k < arguments.length; ++k) {
							o[k] = arguments[k]
						}
						var h = g(o);
						o.unshift(h);
						m = o.join(" ")
					} catch (l) {
						var n = new Array();
						for (var k = 0; k < arguments.length; ++k) {
							n[k] = arguments[k]
						}
						m = n.join(" ")
					}
				}
				__underscore_SysLog(m)
			};
			console.log("Logger : javascript logging enabled")
		},
		log: function(j, h) {},
		$_commandRecvGen: (function() {
			var j = (function(m) {
				var k = f.parseInt(m.shift(), 10);
				if (k > 0) {
					var l = f.parseInt(m.shift(), 10);
					var h = b.idToObject(l);
					if (!h) {
						NgLogE("Object instance could not be found for command " + m + ". It may have been destroyed this frame.");
						return
					}
					switch (k) {
						default:
							NgLogE("Unknown instance method id " + k + " in Logger._commandRecvGen from command: " + m);
							return
					}
				} else {
					switch (k) {
						default:
							NgLogE("Unknown static method id " + k + " in Logger._commandRecvGen from command: " + m);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[305] = j;
			return j
		})(),
		$_createSendGen: function(h) {
			f.appendToCommandString(":305,-1," + h)
		},
		_logSendGen: function(h) {
			f.appendToCommandString(":305,2," + this.__objectRegistryId + "," + e.encode(h))
		},
	});
	a.instantiate();
	__underscore_SysLog = function(h) {
		a._logSendGen(h)
	};
	if (typeof(_NG_TARGET_FLASH) == "undefined") {
		console.log = a.log
	}
	d.Logger = a;
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Class"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/Class"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Class"] = a;
	a.Class = require("NGCore/Shared/Class").Class;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Base64"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/Base64"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Base64"] = a;
	a.Base64 = require("NGCore/Shared/Lib/base64").Base64;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Plus/ResultSet"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Plus/ResultSet"] || {};
	$MODULE_REGISTRY["NGCore/Client/Plus/ResultSet"] = b;
	var c = require("NGCore/Client/Core/Class");
	var a = require("NGCore/Client/UI/SystemBinding");
	var d = c.Class.subclass({
		classname: "ResultSet",
		initialize: function(e) {
			this.items = [];
			this._continueId = e;
			this.totalLength = Number.MAX_VALUE
		},
		getMore: function(e) {
			return a.SystemBinding._getMoreContacts(this, e)
		},
		closeResultSet: function() {
			a.SystemBinding._closeContactsResultSet(this)
		}
	});
	b.ResultSet = d;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Class"] = function() {
	var exports = $MODULE_REGISTRY["NGCore/Shared/Class"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Class"] = exports;
	var Class = function() {};
	exports.Class = Class;
	Class.subclass = (function() {
		function argumentNames(body) {
			var names = body.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, "").replace(/\s+/g, "").split(",");
			return names.length == 1 && !names[0] ? [] : names
		}

		function overrideMethod(overrideBody, ancestorBody) {
			if (ancestorBody !== undefined) {
				var override = function() {
					var localThis = this;
					var $super = function() {
						return ancestorBody.apply(localThis, arguments)
					};
					Array.prototype.unshift.call(arguments, $super);
					return overrideBody.apply(this, arguments)
				}
			} else {
				var override = function() {
					Array.prototype.unshift.call(arguments, undefined);
					return overrideBody.apply(this, arguments)
				}
			}
			override.valueOf = function() {
				return overrideBody.valueOf()
			};
			override.toString = function() {
				return overrideBody.toString()
			};
			return override
		}

		function TempClass() {}

		function emptyFunction() {}
		return function() {
			var properties = arguments[0];
			var classname = properties.classname || "AnonymousClass";
			var NewClass = eval("(function " + classname + "(){this.initialize.apply(this, arguments)})");
			for (var property in this) {
				if (!this.hasOwnProperty(property)) {
					continue
				}
				NewClass[property] = this[property]
			}
			var ancestorPrototype = this.prototype;
			TempClass.prototype = ancestorPrototype;
			NewClass.prototype = new TempClass();
			NewClass.prototype.superclass = ancestorPrototype;
			NewClass.prototype.constructor = NewClass;
			for (var property in properties) {
				if (!properties.hasOwnProperty(property)) {
					continue
				}
				var getter = properties.__lookupGetter__(property);
				var setter = properties.__lookupSetter__(property);
				if (getter || setter) {
					if (getter) {
						var value = getter;
						if (argumentNames(value)[0] == "$super") {
							value = overrideMethod(value, ancestorPrototype.__lookupGetter__(property))
						}
						NewClass.prototype.__defineGetter__(property, value)
					}
					if (setter) {
						var value = setter;
						if (argumentNames(value)[0] == "$super") {
							value = overrideMethod(value, ancestorPrototype.__lookupSetter__(property))
						}
						NewClass.prototype.__defineSetter__(property, value)
					}
				} else {
					var value = properties[property];
					if (typeof value === "function" && property[0] != "$") {
						if (argumentNames(value)[0] == "$super") {
							value = overrideMethod(value, ancestorPrototype[property])
						} else {
							if (property == "initialize") {
								var ancestorInitialize = ancestorPrototype.initialize;
								if (ancestorInitialize) {
									var derivedInitialize = value;
									value = function() {
										ancestorInitialize.apply(this, arguments);
										derivedInitialize.apply(this, arguments)
									}
								}
							} else {
								if (property == "destroy") {
									var ancestorDestroy = ancestorPrototype.destroy;
									if (ancestorDestroy) {
										var derivedDestroy = value;
										value = function() {
											derivedDestroy.apply(this, arguments);
											ancestorDestroy.apply(this, arguments)
										}
									}
								}
							}
						}
						NewClass.prototype[property] = value
					} else {
						if (property[0] == "$") {
							property = property.slice(1)
						}
						NewClass[property] = value;
						NewClass.prototype[property] = value
					}
				}
			}
			if (!NewClass.prototype.initialize) {
				NewClass.prototype.initialize = emptyFunction
			}
			return NewClass
		}
	})();
	Class.singleton = function() {
		var tempClass = this.subclass.apply(this, arguments);
		var initialize = tempClass.prototype.initialize;
		tempClass.prototype.initialize = function() {};
		var instance = new tempClass();
		var functions = [];
		var instantiate = function(real) {
			for (var i in functions) {
				var func = functions[i];
				delete instance[func]
			}
			instance.initialize = initialize;
			instance.initialize();
			instance.instantiate = function() {};
			var args = Array.prototype.slice.call(arguments, 1);
			return real.apply(instance, args)
		};
		for (var i in instance) {
			if (instance.__lookupGetter__(i) || instance.__lookupSetter__(i)) {
				continue
			}
			var value = instance[i];
			if (typeof(value) == "function") {
				functions.push(i);
				instance[i] = instantiate.bind(this, value)
			}
		}
		instance.instantiate = instantiate.bind(this, function() {});
		return instance
	};
	Class.prototype.bind = function(func) {
		var context = this;
		if (arguments.length < 2) {
			return function() {
				return func.apply(context, arguments)
			}
		} else {
			var args = Array.prototype.slice.call(arguments, 1);
			return function() {
				var finalArgs = args.concat(Array.prototype.slice.call(arguments, 0));
				return func.apply(context, finalArgs)
			}
		}
	};
	Class.prototype.toString = function() {
		return this.constructor.name
	};
	return exports
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Lib/base64"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Shared/Lib/base64"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Lib/base64"] = a;
	var b = (function() {
		var f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
		var d = function(w) {
			var v = {};
			for (var u = 0, s = w.length; u < s; u++) {
				v[w.charAt(u)] = u
			}
			return v
		}(f);
		var o = String.fromCharCode;
		var j = function(s) {
			var t = (s.charCodeAt(0) << 16) | (s.charCodeAt(1) << 8) | (s.charCodeAt(2));
			return f.charAt(t >>> 18) + f.charAt((t >>> 12) & 63) + f.charAt((t >>> 6) & 63) + f.charAt(t & 63)
		};
		var r = function(t) {
			if (t.match(/[^\x00-\xFF]/)) {
				throw "unsupported character found"
			}
			var u = 0;
			while (t.length % 3) {
				t += "\x00";
				u++
			}
			var s = t.replace(/[\x00-\xFF]{3}/g, j);
			if (!u) {
				return s
			}
			s = s.substr(0, s.length - u);
			while (u--) {
				s += "="
			}
			return s
		};
		var g = typeof(btoa) !== "undefined" ? btoa : r;
		var n = function(s) {
			var t = (d[s.charAt(0)] << 18) | (d[s.charAt(1)] << 12) | (d[s.charAt(2)] << 6) | (d[s.charAt(3)]);
			return o(t >> 16) + o((t >> 8) & 255) + o(t & 255)
		};
		var c = function(t) {
			t = t.replace(/[^A-Za-z0-9\+\/]/g, "");
			var u = 0;
			while (t.length % 4) {
				t += "A";
				u++
			}
			var s = t.replace(/[A-Za-z0-9\+\/]{4}/g, n);
			s.length -= [0, 0, 2, 1][u];
			return s
		};
		var k = typeof(atob) !== "undefined" ? atob : c;
		var e = /[^\x00-\xFF]/g;
		var q = function(s) {
			var t = s.charCodeAt(0);
			return t < 2048 ? o(192 | (t >>> 6)) + o(128 | (t & 63)) : o(224 | ((t >>> 12) & 15)) + o(128 | ((t >>> 6) & 63)) + o(128 | (t & 63))
		};
		var m = function(s) {
			return s.replace(e, q)
		};
		var h = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
		var l = function(s) {
			var v = s.charCodeAt(0);
			var u = s.charCodeAt(1);
			if (v < 224) {
				return o(((v & 31) << 6) | (u & 63))
			} else {
				var t = s.charCodeAt(2);
				return o(((v & 15) << 12) | ((u & 63) << 6) | (t & 63))
			}
		};
		var p = function(s) {
			return s.replace(h, l)
		};
		return {
			fromBase64: c,
			toBase64: r,
			atob: k,
			btoa: g,
			utob: m,
			btou: p,
			encode: function(s) {
				if (!s) {
					return ""
				}
				return g(m(new String(s)))
			},
			decode: function(s) {
				if (!s) {
					return ""
				}
				if (s.length % 4 == 1) {
					throw new Error("Invalid Base64 string: " + s)
				}
				return p(k(s.replace(/[\-_]/g, function(t) {
					return t == "-" ? "+" : "/"
				})))
			}
		}
	})();
	a.Base64 = b;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Commands"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/Commands"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Commands"] = b;
	var d = require("NGCore/Client/Core").Core;

	function c() {
		this.animationCurve = "EaseInOut";
		return this
	}
	var a = b.Commands = d.Class.singleton({
		classname: "Commands",
		initialize: function() {
			d.ObjectRegistry.register(this);
			this.initializeNative(this.__objectRegistryId);
			this._tempCBs = {};
			this._tempCBCount = 0
		},
		FitMode: {
			None: 0,
			Inside: 1,
			Fill: 2,
			Stretch: 3,
			AspectWidth: 5,
			AspectHeight: 6,
			InsideNoUpscaling: 7,
		},
		Scaling: {
			Pixels: 0,
			Points: 1,
			Unit: 2,
			Percent: 3,
			iPhone: 4,
		},
		FontStyle: {
			Normal: 0,
			Bold: 1,
			Italic: 2,
			BoldItalic: 3,
		},
		State: {
			Normal: 0,
			Focused: 1,
			Selected: 2,
			Pressed: 4,
			Checked: 8,
			Custom: 16711680,
			Disabled: 1073741824,
		},
		EnterKeyType: {
			Return: 0,
			Done: 1,
			Next: 2,
			Submit: 3,
			Go: 4,
			Search: 5,
			Send: 6,
		},
		InputType: {
			None: 0,
			TextWithCorrection: 1,
			Password: 2,
			Numeric: 4,
			Email: 5,
			URL: 6,
			Date: 7,
			ANDROID_LANDSCAPE_FULLSCREEN: 8,
		},
		ButtonLayout: {
			CenterTextOver: 0,
			StackImageLeft: 1,
			StackImageTop: 2,
			StackImageRight: 3,
			StackImageBottom: 4,
			CenterImageOver: 5,
		},
		SwipeDirection: {
			Left: 1,
			Right: 2,
			Up: 3,
			Down: 4,
		},
		OrientationFlag: {
			Landscape: 1,
			Portrait: 2,
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = d.Proc.parseInt(j.shift());
				if (g > 0) {
					var h = d.Proc.parseInt(j.shift());
					var f = d.ObjectRegistry.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						default:
							NgLogE("Unknown instance method id " + g + " in Commands._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						case -8:
							a._eventOccurredRecv(j);
							break;
						default:
							NgLogE("Unknown static method id " + g + " in Commands._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[337] = e;
			return e
		})(),
		$_eventOccurredRecvGen: function(e, f) {
			if (e.length != 1) {
				NgLogE("Could not parse due to wrong argument count in Commands.eventOccurred from command: " + e);
				return false
			}
			f.eventObject = d.Proc.parseJSONString(e[0]);
			if (f.eventObject === undefined) {
				NgLogE("Could not parse eventObject in Commands.eventOccurred from command: " + e);
				return false
			}
			return true
		},
		$initializeNative: function(e) {
			d.Proc.appendToCommandString(":337,-1," + e)
		},
		$create: function(e, f) {
			d.Proc.appendToCommandString(":337,-2," + e + "," + d.Base64.encode(f))
		},
		destroy: function() {
			d.Proc.appendToCommandString(":337,3," + this.__objectRegistryId)
		},
		setActive: function(e) {
			d.Proc.appendToCommandString(":337,4," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setTouchable: function(e) {
			d.Proc.appendToCommandString(":337,5," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		enableEvent: function(e) {
			d.Proc.appendToCommandString(":337,6," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		disableEvent: function(e) {
			d.Proc.appendToCommandString(":337,7," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setIsVisible: function(e) {
			d.Proc.appendToCommandString(":337,9," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setEnabled: function(e) {
			d.Proc.appendToCommandString(":337,10," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setState: function(e) {
			d.Proc.appendToCommandString(":337,11," + this.__objectRegistryId + "," + e)
		},
		addSubview: function(e, f) {
			d.Proc.appendToCommandString(":337,12," + this.__objectRegistryId + "," + e + "," + f)
		},
		removeFromSuperview: function() {
			d.Proc.appendToCommandString(":337,13," + this.__objectRegistryId)
		},
		$startAnimation: function(e, f) {
			d.Proc.appendToCommandString(":337,-14," + e + "," + d.Base64.encode(f))
		},
		$executeAnimation: function(e) {
			d.Proc.appendToCommandString(":337,-15," + d.Base64.encode(JSON.stringify(e)))
		},
		setFrame: function(e, j, f, g) {
			d.Proc.appendToCommandString(":337,16," + this.__objectRegistryId + "," + e + "," + j + "," + f + "," + g)
		},
		setOrigin: function(e, f) {
			d.Proc.appendToCommandString(":337,17," + this.__objectRegistryId + "," + e + "," + f)
		},
		setAnchor: function(e, f) {
			d.Proc.appendToCommandString(":337,18," + this.__objectRegistryId + "," + e + "," + f)
		},
		setSize: function(e, f) {
			d.Proc.appendToCommandString(":337,19," + this.__objectRegistryId + "," + e + "," + f)
		},
		setTransform: function(h, f, k, j, g, e) {
			d.Proc.appendToCommandString(":337,20," + this.__objectRegistryId + "," + h + "," + f + "," + k + "," + j + "," + g + "," + e)
		},
		setBackgroundColor: function(e) {
			d.Proc.appendToCommandString(":337,21," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setImage: function(f, e) {
			d.Proc.appendToCommandString(":337,22," + this.__objectRegistryId + "," + f + "," + d.Base64.encode(e))
		},
		setImageBorder: function(e, f) {
			d.Proc.appendToCommandString(":337,23," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(JSON.stringify(f)))
		},
		setImageFitMode: function(e) {
			d.Proc.appendToCommandString(":337,24," + this.__objectRegistryId + "," + e)
		},
		setImageGravity: function(e, f) {
			d.Proc.appendToCommandString(":337,25," + this.__objectRegistryId + "," + e + "," + f)
		},
		setImageOrigin: function(e, f) {
			d.Proc.appendToCommandString(":337,26," + this.__objectRegistryId + "," + e + "," + f)
		},
		setImageAnchor: function(e, f) {
			d.Proc.appendToCommandString(":337,27," + this.__objectRegistryId + "," + e + "," + f)
		},
		setImageSize: function(e, f) {
			d.Proc.appendToCommandString(":337,28," + this.__objectRegistryId + "," + e + "," + f)
		},
		setImageInsets: function(g, h, e, f) {
			d.Proc.appendToCommandString(":337,29," + this.__objectRegistryId + "," + g + "," + h + "," + e + "," + f)
		},
		setImageTransform: function(h, f, k, j, g, e) {
			d.Proc.appendToCommandString(":337,30," + this.__objectRegistryId + "," + h + "," + f + "," + k + "," + j + "," + g + "," + e)
		},
		setText: function(e, f) {
			d.Proc.appendToCommandString(":337,31," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(f))
		},
		setTextColor: function(e, f) {
			d.Proc.appendToCommandString(":337,32," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(f))
		},
		setTextFont: function(f, e) {
			d.Proc.appendToCommandString(":337,33," + this.__objectRegistryId + "," + f + "," + d.Base64.encode(e))
		},
		setTextShadow: function(e, f) {
			d.Proc.appendToCommandString(":337,34," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(f))
		},
		setTextSize: function(e) {
			d.Proc.appendToCommandString(":337,35," + this.__objectRegistryId + "," + e)
		},
		setTextGravity: function(e, f) {
			d.Proc.appendToCommandString(":337,36," + this.__objectRegistryId + "," + e + "," + f)
		},
		setTextInsets: function(g, h, e, f) {
			d.Proc.appendToCommandString(":337,37," + this.__objectRegistryId + "," + g + "," + h + "," + e + "," + f)
		},
		setTextOverflow: function(e) {
			d.Proc.appendToCommandString(":337,38," + this.__objectRegistryId + "," + e)
		},
		setTextMaxLines: function(e) {
			d.Proc.appendToCommandString(":337,39," + this.__objectRegistryId + "," + e)
		},
		setTextMinSize: function(e) {
			d.Proc.appendToCommandString(":337,40," + this.__objectRegistryId + "," + e)
		},
		setTitle: function(e, f) {
			d.Proc.appendToCommandString(":337,41," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(f))
		},
		setTitleColor: function(e, f) {
			d.Proc.appendToCommandString(":337,42," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(f))
		},
		setTitleFont: function(f, e) {
			d.Proc.appendToCommandString(":337,43," + this.__objectRegistryId + "," + f + "," + d.Base64.encode(e))
		},
		setTitleShadow: function(e, f) {
			d.Proc.appendToCommandString(":337,44," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(f))
		},
		setTitleSize: function(e) {
			d.Proc.appendToCommandString(":337,45," + this.__objectRegistryId + "," + e)
		},
		setTitleGravity: function(e, f) {
			d.Proc.appendToCommandString(":337,46," + this.__objectRegistryId + "," + e + "," + f)
		},
		setTitleInsets: function(g, h, e, f) {
			d.Proc.appendToCommandString(":337,47," + this.__objectRegistryId + "," + g + "," + h + "," + e + "," + f)
		},
		setTitleOverflow: function(e) {
			d.Proc.appendToCommandString(":337,48," + this.__objectRegistryId + "," + e)
		},
		setTitleMaxLines: function(e) {
			d.Proc.appendToCommandString(":337,49," + this.__objectRegistryId + "," + e)
		},
		setTitleMinSize: function(e) {
			d.Proc.appendToCommandString(":337,50," + this.__objectRegistryId + "," + e)
		},
		setGradient: function(e, f) {
			d.Proc.appendToCommandString(":337,51," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(JSON.stringify(f)))
		},
		setStringValue: function(e) {
			d.Proc.appendToCommandString(":337,52," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setFloatValue: function(e) {
			d.Proc.appendToCommandString(":337,53," + this.__objectRegistryId + "," + e)
		},
		setIntValue: function(e) {
			d.Proc.appendToCommandString(":337,54," + this.__objectRegistryId + "," + e)
		},
		setBoolValue: function(e) {
			d.Proc.appendToCommandString(":337,55," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setButtonLayout: function(e) {
			d.Proc.appendToCommandString(":337,56," + this.__objectRegistryId + "," + e)
		},
		setContentInsets: function(g, h, e, f) {
			d.Proc.appendToCommandString(":337,57," + this.__objectRegistryId + "," + g + "," + h + "," + e + "," + f)
		},
		setBarGradient: function(e, f) {
			d.Proc.appendToCommandString(":337,58," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(JSON.stringify(f)))
		},
		setPlaceholderText: function(e) {
			d.Proc.appendToCommandString(":337,59," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setPlaceholderTextColor: function(e) {
			d.Proc.appendToCommandString(":337,60," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setPlaceholderTextShadow: function(e) {
			d.Proc.appendToCommandString(":337,61," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setEnterKeyType: function(e) {
			d.Proc.appendToCommandString(":337,62," + this.__objectRegistryId + "," + e)
		},
		setInputType: function(e) {
			d.Proc.appendToCommandString(":337,63," + this.__objectRegistryId + "," + e)
		},
		setChecked: function(e) {
			d.Proc.appendToCommandString(":337,64," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setScrollPosition: function(e, f) {
			d.Proc.appendToCommandString(":337,65," + this.__objectRegistryId + "," + e + "," + f)
		},
		setScrollableSize: function(e, f) {
			d.Proc.appendToCommandString(":337,66," + this.__objectRegistryId + "," + e + "," + f)
		},
		setSections: function(e) {
			d.Proc.appendToCommandString(":337,67," + this.__objectRegistryId + "," + d.Base64.encode(JSON.stringify(e)))
		},
		setTitleView: function(e) {
			d.Proc.appendToCommandString(":337,68," + this.__objectRegistryId + "," + e)
		},
		setSourceDocument: function(e) {
			d.Proc.appendToCommandString(":337,69," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setChoices: function(f, g, e) {
			d.Proc.appendToCommandString(":337,70," + this.__objectRegistryId + "," + d.Base64.encode(JSON.stringify(f)) + "," + g + "," + e)
		},
		show: function() {
			d.Proc.appendToCommandString(":337,71," + this.__objectRegistryId)
		},
		hide: function() {
			d.Proc.appendToCommandString(":337,72," + this.__objectRegistryId)
		},
		setPostData: function(e) {
			d.Proc.appendToCommandString(":337,73," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		loadPostURL: function(e) {
			d.Proc.appendToCommandString(":337,74," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		loadGetURL: function(e) {
			d.Proc.appendToCommandString(":337,75," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		loadURL: function(e, g, f) {
			d.Proc.appendToCommandString(":337,76," + this.__objectRegistryId + "," + d.Base64.encode(e) + "," + d.Base64.encode(JSON.stringify(g)) + "," + f)
		},
		stopLoading: function() {
			d.Proc.appendToCommandString(":337,77," + this.__objectRegistryId)
		},
		reload: function() {
			d.Proc.appendToCommandString(":337,78," + this.__objectRegistryId)
		},
		invoke: function(e) {
			d.Proc.appendToCommandString(":337,79," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		goBack: function() {
			d.Proc.appendToCommandString(":337,80," + this.__objectRegistryId)
		},
		goForward: function() {
			d.Proc.appendToCommandString(":337,81," + this.__objectRegistryId)
		},
		setBasicAuthCredentials: function(e) {
			d.Proc.appendToCommandString(":337,82," + this.__objectRegistryId + "," + d.Base64.encode(JSON.stringify(e)))
		},
		setRightImage: function(f, e) {
			d.Proc.appendToCommandString(":337,83," + this.__objectRegistryId + "," + f + "," + d.Base64.encode(e))
		},
		setRightImageBorder: function(e, f) {
			d.Proc.appendToCommandString(":337,84," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(JSON.stringify(f)))
		},
		setRightImageFitMode: function(e) {
			d.Proc.appendToCommandString(":337,85," + this.__objectRegistryId + "," + e)
		},
		setRightImageGravity: function(e, f) {
			d.Proc.appendToCommandString(":337,86," + this.__objectRegistryId + "," + e + "," + f)
		},
		setRightImageOrigin: function(e, f) {
			d.Proc.appendToCommandString(":337,87," + this.__objectRegistryId + "," + e + "," + f)
		},
		setRightImageAnchor: function(e, f) {
			d.Proc.appendToCommandString(":337,88," + this.__objectRegistryId + "," + e + "," + f)
		},
		setRightImageSize: function(e, f) {
			d.Proc.appendToCommandString(":337,89," + this.__objectRegistryId + "," + e + "," + f)
		},
		setRightImageInsets: function(g, h, e, f) {
			d.Proc.appendToCommandString(":337,90," + this.__objectRegistryId + "," + g + "," + h + "," + e + "," + f)
		},
		setRightImageTransform: function(h, f, k, j, g, e) {
			d.Proc.appendToCommandString(":337,91," + this.__objectRegistryId + "," + h + "," + f + "," + k + "," + j + "," + g + "," + e)
		},
		$setStatusBarHidden: function(e) {
			d.Proc.appendToCommandString(":337,-92," + (e ? 1 : 0))
		},
		pauseAds: function() {
			d.Proc.appendToCommandString(":337,93," + this.__objectRegistryId)
		},
		resumeAds: function() {
			d.Proc.appendToCommandString(":337,94," + this.__objectRegistryId)
		},
		setAdRefreshRate: function(e) {
			d.Proc.appendToCommandString(":337,95," + this.__objectRegistryId + "," + e)
		},
		setAdAllowAutoplay: function(e) {
			d.Proc.appendToCommandString(":337,96," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setAlpha: function(e) {
			d.Proc.appendToCommandString(":337,97," + this.__objectRegistryId + "," + e)
		},
		postURL: function(e, f) {
			d.Proc.appendToCommandString(":337,98," + this.__objectRegistryId + "," + d.Base64.encode(e) + "," + d.Base64.encode(f))
		},
		setProgressGradient: function(e, f) {
			d.Proc.appendToCommandString(":337,99," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(JSON.stringify(f)))
		},
		setSecondaryGradient: function(e, f) {
			d.Proc.appendToCommandString(":337,100," + this.__objectRegistryId + "," + e + "," + d.Base64.encode(JSON.stringify(f)))
		},
		setProgress: function(e, f) {
			d.Proc.appendToCommandString(":337,101," + this.__objectRegistryId + "," + e + "," + f)
		},
		useForUpdateProgress: function(e) {
			d.Proc.appendToCommandString(":337,102," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setDarkStyle: function(e) {
			d.Proc.appendToCommandString(":337,103," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		$doCompositeImages: function(e, j, f, g, k) {
			d.Proc.appendToCommandString(":337,-104," + e + "," + j + "," + d.Base64.encode(f) + "," + d.Base64.encode(JSON.stringify(g)) + "," + d.Base64.encode(k))
		},
		$doChooseCamera: function(e, j, f, g, k) {
			d.Proc.appendToCommandString(":337,-106," + e + "," + j + "," + d.Base64.encode(f) + "," + d.Base64.encode(JSON.stringify(g)) + "," + d.Base64.encode(k))
		},
		setScrollable: function(e) {
			d.Proc.appendToCommandString(":337,107," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setZoomable: function(e) {
			d.Proc.appendToCommandString(":337,108," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		addAnnotation: function(e) {
			d.Proc.appendToCommandString(":337,109," + this.__objectRegistryId + "," + e)
		},
		removeAnnotation: function(e) {
			d.Proc.appendToCommandString(":337,110," + this.__objectRegistryId + "," + e)
		},
		selectAnnotation: function(e) {
			d.Proc.appendToCommandString(":337,111," + this.__objectRegistryId + "," + e)
		},
		setRegion: function(j, h, e, f, g) {
			d.Proc.appendToCommandString(":337,112," + this.__objectRegistryId + "," + j + "," + h + "," + e + "," + f + "," + (g ? 1 : 0))
		},
		setView: function(e) {
			d.Proc.appendToCommandString(":337,113," + this.__objectRegistryId + "," + e)
		},
		setCoordinate: function(f, e) {
			d.Proc.appendToCommandString(":337,114," + this.__objectRegistryId + "," + f + "," + e)
		},
		setCalloutTitle: function(e) {
			d.Proc.appendToCommandString(":337,115," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setCalloutSubtitle: function(e) {
			d.Proc.appendToCommandString(":337,116," + this.__objectRegistryId + "," + d.Base64.encode(e))
		},
		setCalloutEnabled: function(e) {
			d.Proc.appendToCommandString(":337,117," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setCalloutLeftView: function(e) {
			d.Proc.appendToCommandString(":337,118," + this.__objectRegistryId + "," + e)
		},
		setCalloutRightView: function(e) {
			d.Proc.appendToCommandString(":337,119," + this.__objectRegistryId + "," + e)
		},
		setCenterOffset: function(e, f) {
			d.Proc.appendToCommandString(":337,120," + this.__objectRegistryId + "," + e + "," + f)
		},
		$doChoosePhoto: function(e, j, f, g, k, l) {
			d.Proc.appendToCommandString(":337,-121," + e + "," + j + "," + d.Base64.encode(f) + "," + d.Base64.encode(JSON.stringify(g)) + "," + d.Base64.encode(k) + "," + l)
		},
		setScrollIndicatorsVisible: function(e) {
			d.Proc.appendToCommandString(":337,122," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		$measureText: function(g, e, j, f, l, k) {
			d.Proc.appendToCommandString(":337,-123," + d.Base64.encode(g) + "," + e + "," + j + "," + d.Base64.encode(f) + "," + l + "," + d.Base64.encode(k))
		},
		setFocus: function(e) {
			d.Proc.appendToCommandString(":337,124," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		setViewportEnabled: function(e) {
			d.Proc.appendToCommandString(":337,125," + this.__objectRegistryId + "," + (e ? 1 : 0))
		},
		clearAnimations: function() {
			d.Proc.appendToCommandString(":337,126," + this.__objectRegistryId)
		},
		setStyle: function(e) {
			d.Proc.appendToCommandString(":337,127," + this.__objectRegistryId + "," + e)
		},
		setVisibleInOrientations: function(e) {
			d.Proc.appendToCommandString(":337,128," + this.__objectRegistryId + "," + e)
		},
		playVideo: function(f, e) {
			d.Proc.appendToCommandString(":337,130," + this.__objectRegistryId + "," + d.Base64.encode(f) + "," + d.Base64.encode(e))
		},
		_eventOccurredRecv: function(e) {
			var f = d.Proc.parseString(e[0]);
			a.Window.doCommand(f)
		},
		registerTemporaryCallback: function(f) {
			if (typeof f != "function") {
				return null
			}
			var e = (++this._tempCBCount).toString(36);
			a._tempCBs[e] = f;
			return e
		},
		takeTemporaryCallback: function(f) {
			var e = a._tempCBs[f];
			delete a._tempCBs[f];
			return e
		},
		animate: function(g, h, j) {
			if (typeof g == "function") {
				var e = (typeof j == "function") ? j : h;
				var h = (typeof h == "number") ? h : j;
				if (typeof h != "number") {
					h = 400
				}
				a.startAnimation(h, a.registerTemporaryCallback(j));
				var f = new c();
				g(f);
				a.executeAnimation(f)
			}
		},
	});
	b.Commands.instantiate();
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Window"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/UI/Window"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Window"] = e;
	var b = require("NGCore/Client/Core/Class").Class;
	var h = require("NGCore/Client/UI/Commands").Commands;
	var f = require("NGCore/Client/Core/Capabilities").Capabilities;
	var d = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var g = require("NGCore/Client/UI/AbstractView").AbstractView;
	var c = require("NGCore/Client/UI/Element").Element;
	var a = require("NGCore/Client/UI/ViewGeometry").Rect;
	var j = require("NGCore/Client/UI/WindowLayer").WindowLayer;
	h.Window = e.Window = b.singleton({
		_outerWidth: 0,
		_outerHeight: 0,
		_width: 0,
		_height: 0,
		initialize: function() {
			if (!this._outerWidth || !this._outerHeight) {
				this.setWidthAndHeight(f.getScreenWidth(), f.getScreenHeight())
			}
			if (!this._width || !this._height) {
				this._setWidthAndHeight(f.getScreenWidth(), f.getScreenHeight())
			}
			h.instantiate();
			var k = Core.MessageListener.subclass({
				initialize: function() {
					Device.LayoutEmitter.addListener(this, this.onUpdate)
				},
				onUpdate: function(m) {
					UI.Window._setWidthAndHeight(m.width, m.height)
				}
			});
			var l = new k();
			NgLogD("window: outer = " + this._outerWidth + " × " + this._outerHeight + " frame = " + this._width + " × " + this._height)
		},
		document: j.singleton({
			type: "document",
			register: function() {
				this.__objectRegistryId = 0
			}
		}),
		_layers: {},
		_getLayer: function(k) {
			return this._layers[k] || (this._layers[k] = new j({
				level: k || 0
			}))
		},
		destroyObject: function(k) {
			k.removeFromParent();
			h.destroy.call(k);
			d.unregister(k)
		},
		handleCommand: function(l) {
			var k = NgParseCommand2(l, NgParseInt, NgParseBase64);
			this.doCommand(k[1])
		},
		setStatusBarHidden: function(k) {
			h.setStatusBarHidden(k);
			this._outerHeight = f.getScreenHeight() - (k ? 0 : (f.getStatusBarHeight() || 0))
		},
		doCommand: function(n) {
			var q = JSON.parse(n);
			if (q.name == "callback") {
				var k = h.takeTemporaryCallback(q.callback_id);
				if (typeof k == "function") {
					k(q)
				}
			} else {
				var l = d.idToObject(q.objId);
				if (l instanceof c) {
					switch (q.name) {
						case "event":
							l.performEventCallback(q);
							break;
						case "update":
							var m = q.properties || {};
							for (var o in m) {
								try {
									var r = l["update" + o.charAt(0).toUpperCase() + o.substr(1)];
									if (typeof r == "function") {
										r.apply(l, [m[o]])
									} else {
										l["_" + o] = m[o]
									}
								} catch (p) {}
							}
							break;
						default:
							l.handleCommand(q)
					}
				} else {
					console.log("Message received for non-element object with id " + q.objId);
					return
				}
			}
		},
		log: function(k) {
			NgLogD(k.toString())
		},
		getWidth: function() {
			return this._width
		},
		getHeight: function() {
			return this._height
		},
		getOuterWidth: function() {
			return this._outerWidth
		},
		getOuterHeight: function() {
			return this._outerHeight
		},
		getFrame: function() {
			return new a(0, 0, this._width, this._height)
		}
	});
	h.Window.__defineGetter__("outerWidth", function() {
		return this.getOuterWidth()
	});
	h.Window.__defineGetter__("outerHeight", function() {
		return this.getOuterHeight()
	});
	h.Window._setWidthAndHeight = function(l, k) {
		console.log("window: set layout size to: " + l + " × " + k);
		this._width = l;
		this._height = k
	};
	h.Window.setWidthAndHeight = function(l, k) {
		console.log("window: set outer size to: " + l + " × " + k);
		this._outerWidth = l;
		this._outerHeight = k
	};
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Element"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/UI/Element"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Element"] = e;
	var d = require("NGCore/Client/Core/Class").Class;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var c = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var b = e.Element = d.subclass({
		$subclass: function() {
			if (typeof this._init == "function") {
				this._init()
			}
			return d.subclass.apply(this, arguments)
		},
		classname: "UI_Element",
		initialize: function(h) {
			if (b._init) {
				b._init()
			}
			this.register();
			var g = this._eventNames;
			if (g) {
				for (var l in g) {
					if (this[g[l]]) {
						a.enableEvent.call(this, l)
					}
				}
			}
			var j = this._setters;
			if (j) {
				for (var f in h) {
					if (typeof j[f] == "function") {
						try {
							j[f].call(this, h[f])
						} catch (l) {
							NgLogD("Unable to set " + this.type + "." + f)
						}
					}
				}
			}
			return this
		},
		register: function() {
			try {
				c.register(this);
				a.create(this.__objectRegistryId, this.type || this.classname)
			} catch (f) {} finally {
				return this.__objectRegistryId
			}
		},
		retain: function() {
			(this.__retainCount) ? ++this.__retainCount: (this.__retainCount = 1);
			return this
		},
		release: function() {
			if (--this.__retainCount === 0) {
				this.destroy()
			}
		},
		getAttribute: function(g) {
			var f = this._getters[g];
			return (typeof f == "function") ? f.call(this) : undefined
		},
		setAttribute: function(f, g) {
			var h = this._setters[f];
			if (typeof h == "function") {
				return h.call(this, g)
			} else {
				NgLogD("Unable to set " + this.type + "." + f)
			}
			return this
		},
		setAttributes: function(j) {
			var g = this._setters;
			if (g) {
				for (var f in j) {
					if (typeof g[f] == "function") {
						try {
							g[f].call(this, j[f])
						} catch (h) {
							NgLogD("Unable to set " + this.type + "." + f)
						}
					}
				}
			}
			return this
		},
		getAttributes: function(j) {
			var f = {};
			if (j instanceof Array) {
				var h;
				for (var g = 0; g < j.length; g++) {
					h = j[g];
					f[h] = this._getters[h].call(this)
				}
			} else {
				for (var h in this._getters) {
					f[h] = this._getters[h].call(this)
				}
			}
			return f
		},
		enableEvent: a.enableEvent,
		toString: function() {
			return this.type + "(" + this.__objectRegistryId + ")"
		},
		destroy: function() {
			a.destroy.call(this);
			c.unregister(this);
			delete this.prototype;
			for (var f in this) {
				if (this.hasOwnProperty(f)) {
					delete this[f]
				}
			}
			this._destroyed = true
		},
		registerCallback: function(g, f) {
			var h = ++this.callbackCounter;
			var j = this;
			this.callbacks[h] = function(m, k) {
				try {
					g(m, k);
					if (f) {
						delete m.callbacks[h]
					}
				} catch (l) {
					NgHandleException(l)
				}
			};
			return h
		},
		performCallback: function(g) {
			var f = this.callbacks[g.callbackId];
			if (f) {
				f(this, g.arguments)
			}
		},
		performEventCallback: function(h) {
			try {
				var f = this._eventNames[h.eventType];
				var g = this["_" + f] || this[f];
				if (typeof g == "function") {
					g.call(this, h)
				}
			} catch (j) {
				NgHandleException(j)
			}
		},
		$registerAccessors: function(k, q, o, m) {
			var n = k.charAt(0).toUpperCase() + k.substr(1);
			var j = Boolean(m || false);
			var h = (this instanceof b) ? this : this.prototype;
			if (typeof q == "function") {
				if (!h.hasOwnProperty("_getters")) {
					try {
						var f = function() {
							return this
						};
						var p = h.superclass._getters;
						if (p) {
							f.prototype = p
						}
						h._getters = new f()
					} catch (l) {}
				}
				if (j) {
					h["get" + n] = function() {
						NgLogD("WARNING: Use of get" + n + "() is deprecated. " + m);
						q.apply(this, arguments)
					}
				} else {
					h["get" + n] = q
				}
				h._getters[k] = q
			}
			if (typeof o == "function") {
				if (!h.hasOwnProperty("_setters")) {
					try {
						var f = function() {
							return this
						};
						var g = h.superclass._setters;
						if (g) {
							f.prototype = g
						}
						h._setters = new f()
					} catch (l) {}
				}
				if (j) {
					h["set" + n] = function() {
						NgLogD("WARNING: Calling set" + n + "() is deprecated. " + m);
						o.apply(this, arguments)
					}
				} else {
					h["set" + n] = o
				}
				h._setters[k] = o
			}
		},
		$registerEventType: function(k) {
			var m = "on" + k.charAt(0).toUpperCase() + k.substr(1);
			var j = "_" + m;
			var h = this.prototype;
			var o = function() {
				return this[j] || this[m]
			};
			var n = function(q) {
				var p = (typeof q == "function");
				if (p) {
					this[j] = q
				} else {
					delete this[j]
				}
				this.enableEvent(k, p)
			};
			if (!h.hasOwnProperty("_eventNames")) {
				try {
					var g = function() {
						return this
					};
					var f = h.superclass._eventNames;
					if (f) {
						g.prototype = f
					}
					h._eventNames = new g()
				} catch (l) {}
			}
			h._eventNames[k] = m;
			this.registerAccessors(m, o, n);
			h.__defineGetter__(m.toLowerCase(), o);
			h.__defineSetter__(m.toLowerCase(), n)
		},
		$synthesizePropertyWithState: function(h, f) {
			var k = "_" + h + "Map";
			var g;
			if (h) {
				g = function(l, m) {
					m |= 0;
					(this[k] || (this[k] = {}))[m] = l;
					f.call(this, m, l);
					return this
				}
			} else {
				g = function(l, m) {
					f.call(this, (m | 0), l);
					return this
				}
			}
			var j = function(l) {
				return (this[k] || 0)[(l | 0)]
			};
			this.registerAccessors(h, j, g)
		},
		$synthesizeCompoundProperty: function(h, f) {
			var j = "_" + h;
			var g;
			if (f) {
				g = function(k) {
					this[j] = (k instanceof Array) ? k : Array.prototype.slice.call(arguments);
					f.apply(this, this[j]);
					return this
				}
			} else {
				g = function(k) {
					this[j] = (k instanceof Array) ? k : Array.prototype.slice.call(arguments);
					return this
				}
			}
			this.registerAccessors(h, function() {
				return this[j]
			}, g)
		},
		$synthesizeProperty: function(h, f) {
			var j = "_" + h;
			var g;
			if (f) {
				g = function(k) {
					this[j] = k;
					f.apply(this, arguments);
					return this
				}
			} else {
				g = function(k) {
					this[j] = k;
					return this
				}
			}
			this.registerAccessors(h, function() {
				return this[j]
			}, g)
		},
		$bindPropertyState: function(h, l, j) {
			var f = h[0].toUpperCase() + h.substr(1);
			var g = "get" + f;
			var m = "set" + f;
			var n = function() {
				return this[g].call(this, j)
			};
			var k = function(o) {
				return this[m].call(this, o, j)
			};
			this.registerAccessors(l + f, n, k)
		}
	});
	b._init = function() {
		delete b._init;
		b.registerEventType("load");
		b.registerEventType("unload")
	};
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/ViewGeometry"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/UI/ViewGeometry"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/ViewGeometry"] = d;
	var c = require("NGCore/Client/Core/Class").Class;
	var b = require("NGCore/Client/UI/Commands").Commands;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var f = d.Scale = c.singleton({
		initialize: function() {
			var h = a.getScreenUnits();
			this.iOSConversion = h;
			this.pointConversion = this.iOSConversion * 160 / 72
		},
		Pixels: b.Scaling.Pixels,
		Points: b.Scaling.Points,
		Unit: b.Scaling.Unit,
		Percent: b.Scaling.Percent,
		iPhone: b.Scaling.iPhone,
		pointConversion: 1,
		iOSConversion: 1,
		getScale: function(h, j) {
			switch (+h) {
				case this.Points:
					return this.pointConversion;
				case this.Unit:
					return j;
				case this.Percent:
					return j / 100;
				case this.iPhone:
					return this.iOSConversion
			}
			return 1
		}
	});
	var g = d.Gravity = {
		TopLeft: [0, 0],
		TopCenter: [0.5, 0],
		TopRight: [1, 0],
		Left: [0, 0.5],
		Center: [0.5, 0.5],
		Right: [1, 0.5],
		BottomLeft: [0, 1],
		BottomCenter: [0.5, 1],
		BottomRight: [1, 1]
	};
	d.FitModes = b.FitMode;
	var e = d.Rect = c.subclass({
		initialize: function(h) {
			if (h instanceof this.constructor) {
				this.x = h.x;
				this.y = h.y;
				this.w = h.w;
				this.h = h.h
			} else {
				if (h instanceof Array) {
					if (arguments.length == 2 && arguments[0].length >= 2 && arguments[1] instanceof Array && arguments[1].length >= 2) {
						this.x = arguments[0][0];
						this.y = arguments[0][1];
						this.w = arguments[1][0];
						this.h = arguments[1][1]
					} else {
						if (arguments.length == 1 && h.length >= 4) {
							this.x = h[0];
							this.y = h[1];
							this.w = h[2];
							this.h = h[3]
						} else {
							NgLogD("UI.ViewGeometry.Rect initialized with unparseable Array(s)")
						}
					}
				} else {
					if (arguments.length == 4) {
						this.x = arguments[0];
						this.y = arguments[1];
						this.w = arguments[2];
						this.h = arguments[3]
					}
				}
			}
			return this
		},
		isEmpty: function() {
			return !(this.w * this.h > 0) || isNaN(this.x) || isNaN(this.y) || isNaN(this.w) || isNaN(this.h)
		},
		copy: function() {
			return new(this).constructor(this)
		},
		array: function() {
			return [this.x, this.y, this.w, this.h]
		},
		inset: function(m, o, h, j, k) {
			if (arguments.length > 4) {
				var p = f.getScale(k, this.w);
				var n = f.getScale(k, this.h);
				m = Math.floor(m * n);
				o = Math.floor(o * p);
				h = Math.floor(h * n);
				j = Math.floor(j * p)
			}
			if (arguments.length < 2) {
				o = m
			}
			if (arguments.length < 4) {
				h = m;
				j = o
			}
			this.y += m;
			this.h -= m + h;
			this.x += j;
			this.w -= j + o;
			return this
		},
		sliceVertical: function(h, j) {
			if (arguments.length > 1) {
				h = Math.floor(h * f.getScale(j, this.h))
			}
			var k = this.copy();
			if (h < 0) {
				k.h = -h;
				this.h += h;
				k.y += this.h
			} else {
				k.h = h;
				this.y += h;
				this.h -= h
			}
			return k
		},
		sliceHorizontal: function(k, h) {
			if (arguments.length > 1) {
				k = Math.floor(k * f.getScale(h, this.w))
			}
			var j = this.copy();
			if (k < 0) {
				j.w = -k;
				this.w += k;
				j.x += this.w
			} else {
				j.w = k;
				this.x += k;
				this.w -= k
			}
			return j
		},
		toString: function() {
			return "Rect: {" + this.array().join(",") + "}"
		},
		getGrid: function(t, n, k) {
			k = (k == true);
			var m = Math.floor(this.w / n);
			var s = Math.floor(this.h / t);
			var l = new Array();
			for (var q = 0; q < t; q++) {
				var p = new Array();
				for (var o = 0; o < n; o++) {
					var h = new this.constructor(this.x + o * m, this.y + q * s, m, s);
					(k ? l : p).push(h)
				}
				if (!k) {
					l.push(p)
				}
			}
			return l
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/View"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/View"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/View"] = b;
	var e = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = require("NGCore/Client/UI/Window").Window;
	var c = require("NGCore/Client/UI/ViewParent").ViewParent;
	var f = b.View = e.subclass({
		type: "view",
		initialize: function($super, g) {
			if (f._init) {
				f._init()
			}
			c.initialize.call(this);
			return $super(g)
		},
		addChild: c.addChild,
		removeChild: c.removeChild,
		getChildCount: c.getChildCount,
		getChildren: c.getChildren,
		layoutSubviews: function() {},
		_setVisible: function($super, k) {
			var j = this._visible;
			$super(k);
			if (this._visible != j) {
				var g = this._children.length;
				for (var h = 0; h < g; h++) {
					this._children[h]._setVisible(k)
				}
			}
		}
	});
	f._init = function() {
		delete f._init;
		if (e._init) {
			e._init()
		}
		f.synthesizePropertyWithState("image", a.setImage);
		f.synthesizePropertyWithState("imageBorder", a.setImageBorder);
		f.synthesizeCompoundProperty("imageGravity", a.setImageGravity);
		f.synthesizeProperty("imageFit", a.setImageFitMode);
		f.synthesizeProperty("visibleInOrientations", a.setVisibleInOrientations)
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Label"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/Label"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Label"] = b;
	var c = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = b.Label = c.subclass({
		type: "label",
		initialize: function($super, e) {
			if (d._init) {
				d._init()
			}
			$super(e)
		}
	});
	d._init = function() {
		delete d._init;
		if (c._init) {
			c._init()
		}
		d.synthesizePropertyWithState("text", a.setText);
		d.synthesizePropertyWithState("textFont", a.setTextFont);
		d.synthesizePropertyWithState("textColor", a.setTextColor);
		d.synthesizePropertyWithState("textShadow", a.setTextShadow);
		d.synthesizeCompoundProperty("textGravity", a.setTextGravity);
		d.synthesizeProperty("textSize", a.setTextSize);
		d.synthesizeCompoundProperty("textInsets", a.setTextInsets)
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Image"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/Image"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Image"] = b;
	var d = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var c = b.Image = d.subclass({
		initialize: function($super, e) {
			if (c._init) {
				c._init()
			}
			$super(e)
		},
		type: "image"
	});
	c._init = function() {
		delete c._init;
		if (d._init) {
			d._init()
		}
		c.synthesizePropertyWithState("image", a.setImage);
		c.synthesizePropertyWithState("imageBorder", a.setImageBorder);
		c.synthesizeCompoundProperty("imageGravity", a.setImageGravity);
		c.synthesizeCompoundProperty("imageTransform", a.setImageTransform);
		c.synthesizeProperty("imageFit", a.setImageFitMode)
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Button"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/Button"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Button"] = c;
	var d = require("NGCore/Client/UI/AbstractView").AbstractView;
	var b = require("NGCore/Client/UI/Commands").Commands;
	var a = c.Button = d.subclass({
		type: "button",
		Layout: b.ButtonLayout,
		initialize: function($super, e) {
			if (a._init) {
				a._init()
			}
			$super(e)
		}
	});
	a._init = function() {
		delete a._init;
		if (d._init) {
			d._init()
		}
		a.synthesizePropertyWithState("image", b.setImage);
		a.synthesizeCompoundProperty("imageInsets", b.setImageInsets);
		a.synthesizeProperty("imageFit", b.setImageFitMode);
		a.synthesizeCompoundProperty("imageGravity", b.setImageGravity);
		a.synthesizeCompoundProperty("imageTransform", b.setImageTransform);
		a.synthesizePropertyWithState("imageBorder", b.setImageBorder);
		a.synthesizePropertyWithState("text", b.setText);
		a.synthesizePropertyWithState("textColor", b.setTextColor);
		a.synthesizePropertyWithState("textFont", b.setTextFont);
		a.synthesizePropertyWithState("textShadow", b.setTextShadow);
		a.synthesizeCompoundProperty("textGravity", b.setTextGravity);
		a.synthesizeProperty("textSize", b.setTextSize);
		a.synthesizeCompoundProperty("textInsets", b.setTextInsets)
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/GLView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/GLView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/GLView"] = b;
	var c = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = b.GLView = c.subclass({
		type: "glview",
		initialize: function($super, e) {
			if (d._init) {
				d._init()
			}
			$super(e)
		}
	});
	d._init = function() {
		delete d._init;
		if (c._init) {
			c._init()
		}
		d.synthesizeProperty("active", a.setActive);
		d.registerAccessors("OGLExtensions", function() {
			return this["_OGLExtensions"]
		}, function() {})
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/NavController"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/UI/NavController"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/NavController"] = e;
	var g = require("NGCore/Client/Core/MessageListener").MessageListener;
	var f = require("NGCore/Client/Device/KeyEmitter").KeyEmitter;
	var k = require("NGCore/Client/UI/Window").Window;
	var j = require("NGCore/Client/Core/Capabilities").Capabilities;
	var c = require("NGCore/Client/Device").Device;
	var d = require("NGCore/Client/UI/Element").Element;
	var b = require("NGCore/Client/UI/View").View;

	function a(m) {
		if (m && m.hasOwnProperty("analyticsName")) {
			return m.analyticsName || undefined
		}
		return undefined
	}
	var l = g.subclass({
		classname: "UI_NavController_KeyListener",
	});
	var h = e.NavController = b.subclass({
		initialize: function($super, n) {
			if (h._init) {
				h._init()
			}
			this.navStack = [];
			var m = j.getPlatformOS() == "Android";
			this._useBackButton = !m;
			this.keyListener = new l();
			f.addListener(this.keyListener, this.onKeyPressed.bind(this));
			$super(n)
		},
		setUseBackButton: function(m) {
			this._useBackButton = m;
			if (m) {
				this._createBackButton()
			} else {
				if (this.backButton) {
					this.backButton.removeFromParent()
				}
			}
		},
		clear: function(m) {
			return this.backToView(undefined)
		},
		logNavEvent: function(r, q, n) {
			var m = a(q);
			var o = a(r);
			var p = a(n);
			if (o || m) {
				Core.Analytics._getPipe().navigationEvent(o, m, p)
			}
		},
		getTopView: function() {
			return (this.navStack.length > 0) ? this.navStack[(this.navStack.length - 1)] : undefined
		},
		navStackDepth: function() {
			return this.navStack.length
		},
		depthOfView: function(n) {
			var m = this.navStack.indexOf(n);
			if (m == -1) {
				return -1
			}
			return this.navStack.length - m - 1
		},
		viewAtDepth: function(m) {
			if (m >= this.navStack.length) {
				return null
			}
			return this.navStack[this.navStack.length - m - 1]
		},
		removeDeepView: function(n) {
			var m = this.navStack.indexOf(n);
			if (m == -1) {
				NgLogE("NavController: trying to remove a nonexistent view from the nav stack!");
				return
			}
			this.navStack.splice(m, 1)
		},
		_viewTransition: function(q, m, p, o) {
			var s = this.getFrame();
			var n = s[2];
			var r = s[3];
			if (m) {
				m.setFrame((p ? -n : n), 0, n, r);
				this.addChild(m)
			}
			UI.animate(function() {
				if (q) {
					q.setFrame((p ? n : -n), 0, n, r)
				}
				if (m) {
					m.setFrame(0, 0, n, r)
				}
			}, 400, function() {
				if (q) {
					q.removeFromParent()
				}
			});
			this.logNavEvent(q, m, o);
			this._createBackButton()
		},
		forwardToView: function(m, n) {
			var o = this.getTopView();
			if (m && (!this._delegate || (this._delegate && typeof this._delegate.navControllerShouldPush == "function" && this._delegate.navControllerShouldPush(this, m)))) {
				m.performEventCallback({
					eventType: "push",
					navController: this
				});
				this.navStack.push(m);
				this._viewTransition(o, m, false, n)
			}
		},
		back: function(n) {
			var m = this.navStack.pop();
			if (m && (!this._delegate || (this._delegate && typeof this._delegate.navControllerShouldPop == "function" && this._delegate.navControllerShouldPop(this, m)))) {
				m.performEventCallback({
					eventType: "pop",
					navController: this
				})
			} else {
				return null
			}
			this._viewTransition(m, this.getTopView(), true, n);
			return m
		},
		backToView: function(n, q) {
			var p = [];
			var o = this.navStack.pop();
			var m = o;
			if (o) {
				do {
					if (o && (!this._delegate || (this._delegate && typeof this._delegate.navControllerShouldPop == "function" && this._delegate.navControllerShouldPop(this, o)))) {
						p.push(o);
						o.performEventCallback({
							eventType: "pop",
							navController: this
						})
					} else {
						break
					}
					if (this.getTopView() == n) {
						break
					}
				} while ((o = this.navStack.pop()))
			}
			if (p.length > 0) {
				this._viewTransition(m, this.getTopView(), true, q)
			}
			return p
		},
		loadApp: function() {},
		onBackPressed: function() {
			if (this.navStack.length > 1) {
				var m = "bcksbtn";
				var n = this.getTopView();
				if (n.analyticsName) {
					m = n.analyticsName + "." + m
				}
				this.back({
					analyticsName: m
				});
				return true
			}
			return false
		},
		onKeyPressed: function(m) {
			if ((m.code === c.KeyEmitter.Keycode.back) && (this.navStack.length > 1)) {
				this.back();
				return true
			}
			return false
		},
		_delegate: null,
		setDelegate: function(m) {
			this._delegate = m
		},
		delegate: function() {
			return this._delegate
		},
		_createBackButton: function() {
			if (!this._useBackButton) {
				return
			}
			if (!this.backButton) {
				this.backButton = new UI.Button({
					normalText: "Back",
					textSize: 13,
					normalTextColor: "FF",
					normalTextShadow: "00 1.5 {0,-1}",
					frame: [-2, 20, k.outerWidth / 5, k.outerHeight / 12],
					normalGradient: {
						corners: "0 8 8 0",
						outerLine: "00 1.5",
						innerShadow: "99FF 2.0 {0,-1}",
						gradient: ["FFCC 0.0", "FF80 1.0"]
					},
					highlightedGradient: {
						corners: "0 8 8 0",
						outerLine: "00 1.5",
						innerLine: "FF00 15 {0,-1}",
						gradient: ["FF50 0.0", "FF80 1.0"]
					}
				});
				this.backButton.onclick = this.bind(this.onBackPressed)
			}
			if (this.navStack.length > 1) {
				if (!this.backButton.getParent()) {
					k.document.addChild(this.backButton)
				}
			} else {
				if (this.backButton.getParent()) {
					this.backButton.removeFromParent()
				}
			}
		}
	});
	h._init = function() {
		delete h._init;
		if (b._init) {
			b._init()
		}
	};
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/WebView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/WebView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/WebView"] = b;
	var c = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = b.WebView = c.subclass({
		type: "webview",
		initialize: function($super, e) {
			if (d._init) {
				d._init()
			}
			this._canGoBack = false;
			this._canGoForward = false;
			return $super(e)
		},
		_onShouldLoad: function(f) {
			NgLogD("Should Load " + f.url + " ???????");
			var e = this.getOnShouldload();
			if (typeof e == "function") {
				if (!Boolean(e.call(this, f))) {
					return
				}
			}
			this.loadUrl(f.url)
		},
		performEventCallback: function($super, f) {
			try {
				if (f.eventType == "shouldload") {
					this._onShouldLoad(f);
					return
				}
				if (f.eventType == "pageload") {
					this._canGoBack = f.canGoBack = Boolean(JSON.parse(f.canGoBack));
					this._canGoForward = f.canGoForward = Boolean(JSON.parse(f.canGoForward))
				}
				$super(f)
			} catch (g) {
				NgHandleException(g)
			}
		},
		invoke: a.invoke,
		loadUrl: function(e, g, f) {
			a.loadURL.call(this, e, g || null, +(f || 0))
		},
		loadDocument: function(e) {
			a.setSourceDocument.call(this, e)
		},
		postUrl: function(f, h) {
			var e;
			if (typeof h == "object") {
				var j = [];
				for (var g in h) {
					j.push(encodeURIComponent(g) + "=" + encodeURIComponent(h[g]))
				}
				e = j.join("&")
			} else {
				e = h
			}
			a.postURL.call(this, f, e)
		},
		stopLoading: a.stopLoading,
		reload: a.reload,
		goBack: a.goBack,
		goForward: a.goForward,
		canGoBack: function() {
			return this._canGoBack
		},
		canGoForward: function() {
			return this._canGoForward
		},
		setBasicAuthCredential: function(g, e, h, f) {
			a.setBasicAuthCredentials.call(this, {
				host: g,
				realm: e,
				username: h,
				password: f
			})
		},
		setViewportEnabled: function(e) {
			a.setViewportEnabled.call(this, e)
		}
	});
	d._init = function() {
		delete d._init;
		if (c._init) {
			c._init()
		}
		d.synthesizeProperty("scrollable", a.setScrollable);
		d.registerEventType("startload");
		d.registerEventType("pageload");
		d.registerEventType("error");
		d.registerEventType("pageevent");
		d.registerEventType("shouldload");
		d.registerEventType("externalLink")
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/ScrollView"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/ScrollView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/ScrollView"] = c;
	var e = require("NGCore/Client/UI/View").View;
	var a = require("NGCore/Client/UI/ViewGeometry");
	var b = require("NGCore/Client/UI/Commands").Commands;
	var d = c.ScrollView = e.subclass({
		type: "scrollview",
		initialize: function($super, f) {
			if (d._init) {
				d._init()
			}
			this._scrollPosition = [0, 0];
			return $super(f)
		},
		updateScrollPosition: function(f) {
			this._scrollPosition = f
		},
		performEventCallback: function($super, f) {
			if (f.eventType == "scroll") {
				this.updateScrollPosition(f.scrollPosition)
			}
			$super(f)
		}
	});
	d._init = function() {
		delete d._init;
		if (e._init) {
			e._init()
		}
		d.synthesizeCompoundProperty("contentSize", b.setScrollableSize);
		d.synthesizeCompoundProperty("scrollPosition", b.setScrollPosition);
		d.synthesizeCompoundProperty("scrollIndicatorsVisible", b.setScrollIndicatorsVisible);
		e.synthesizeProperty("visibleInOrientations", b.setVisibleInOrientations);
		d.registerEventType("scroll");
		d.registerEventType("scrollEnded")
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/ListView"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/ListView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/ListView"] = c;
	var d = require("NGCore/Client/UI/AbstractView").AbstractView;
	var e = require("NGCore/Client/UI/ScrollView").ScrollView;
	var a = require("NGCore/Client/UI/ViewGeometry");
	var b = c.ListView = e.subclass({
		type: "listview",
		initialize: function($super, f) {
			if (b._init) {
				b._init()
			}
			$super(f);
			this._sections = [];
			this._scrollPosition = [0, 0];
			this.enableEvent("scroll", true);
			this._ownedViews = [];
			this._queuedViews = {};
			this._cellDivider = 0;
			return this
		},
		destroy: function($super) {
			var f = this._ownedViews.length;
			for (var g = 0; g < f; g++) {
				this._ownedViews[g].release()
			}
			this._ownedViews = null;
			$super()
		},
		addChild: function($super, g, f) {
			if (f == "cell") {
				f = this._cellDivider++
			} else {
				if ((f || -1) >= 0) {
					f += this._cellDivider
				}
			}
			$super(g, f)
		},
		_viewForItem: function(g) {
			if (g._currentView instanceof d) {
				return g._currentView
			}
			var j = g._reuseId;
			var f = this._queuedViews[j];
			var h = null;
			while (f && f.length > 0) {
				if ((h = f.pop()) instanceof d) {
					break
				}
			}
			if (!(h instanceof d)) {
				h = g._onCreateView(g);
				if (h instanceof d) {
					this._ownedViews.push(h.retain());
					this.addChild(h, "cell")
				} else {
					console.log("Error creating view for list item with reuse id " + j)
				}
			}
			return h
		},
		_queueViewForItem: function(g) {
			var h = g._currentView;
			if (h instanceof d) {
				var j = g._reuseId;
				var f = this._queuedViews[j] || (this._queuedViews[j] = []);
				f.push(h)
			}
			g._setCurrentView()
		},
		_removeQueuedViews: function() {
			for (var h in this._queuedViews) {
				if (!this._queuedViews.hasOwnProperty(h)) {
					continue
				}
				h = this._queuedViews[h];
				for (var g = 0, f = h.length; g < f; g++) {
					h[g].removeFromParent()
				}
			}
			this._cellDivider = 0
		},
		flushSections: function() {
			for (var f in this._sections) {
				if (!this._sections.hasOwnProperty(f)) {
					continue
				}
				var g = this._sections[f];
				g.flush();
				g.calculateItemPositions()
			}
			this._removeQueuedViews()
		},
		reloadData: function() {
			this.flushSections();
			this.calculateSectionPositions();
			this.updateScrollPosition(this._scrollPosition)
		},
		getSections: function() {
			return this._sections
		},
		setSections: function(h) {
			this.flushSections();
			for (var f in this._sections) {
				if (this._sections.hasOwnProperty(f)) {
					this._sections[f].setListView(null)
				}
			}
			this._sections = h;
			var g = new Array();
			for (var f in h) {
				if (h.hasOwnProperty(f)) {
					g.push(0 + (h[f].__objectRegistryId || 0))
				}
			}
			UI.Commands.setSections.call(this, g);
			this.reloadData()
		},
		calculateSectionPositions: function() {
			if (!this.getFrame()) {
				console.log("UI.ListView Warning: You probably called setSections before you actually set a frame.");
				return
			}
			this._stackedSections = {};
			topY = 0;
			var g = this._sections.length;
			for (var j = 0; j < g; j++) {
				var m = this._sections[j];
				this._stackedSections[topY] = m;
				m.setListView(this);
				m.setYPosition(topY);
				var f = this._scrollPosition[1] - topY;
				m.updateVisibleRange(f, f + this._frame[3]);
				var k = m._measureHeight();
				m._setFrame(0, topY, this._frame[2], k);
				topY += k
			}
			this.setContentSize([this._frame[2], topY])
		},
		updateScrollPosition: function(g) {
			if (this._scrollPosition[1] === g[1]) {
				return
			}
			this._scrollPosition = g;
			var f = this._frame[3];
			for (var h in this._stackedSections) {
				if (this._stackedSections.hasOwnProperty(h)) {
					var j = this._stackedSections[h];
					relTopY = g[1] - h;
					j.updateVisibleRange(relTopY, relTopY + f)
				}
			}
		},
		_onScroll: function() {},
		enableEvent: function($super, f, g) {
			if ((f == "scroll") && !g) {
				return
			}
			$super(f, g)
		}
	});
	b._init = function() {
		delete b._init;
		if (e._init) {
			e._init()
		}
		b.synthesizeProperty("header");
		b.synthesizeProperty("footer")
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/ListViewSection"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/UI/ListViewSection"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/ListViewSection"] = e;
	var d = require("NGCore/Client/UI/Element").Element;
	var a = require("NGCore/Client/UI/ViewGeometry");
	var c = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var b = require("NGCore/Client/UI/Commands").Commands;
	var g = require("NGCore/Client/UI/ListViewItem").ListViewItem;
	var f = e.ListViewSection = d.subclass({
		type: "listview-section",
		initialize: function($super, h) {
			if (f._init) {
				f._init()
			}
			this._visibleRange = [0, 0];
			this._headerHeight = 0;
			this._titleHeight = 0;
			delete this._measuredHeight;
			this._needsLayout = false;
			$super(h)
		},
		addItemToVisible: function(h, k) {
			if (!(h instanceof g)) {
				return
			}
			if (h._currentView instanceof d) {
				return
			}
			var l = this._listView._viewForItem(h);
			var j = this._listView.getFrame()[2];
			if (this._rowHeight > 0) {
				l.setFrame(0, this._yPosition + this._titleHeight + k * this._rowHeight, j, this._rowHeight)
			} else {
				l.setFrame(0, this._yPosition + this._cellPositions[k], j, h._height)
			}
			h._setCurrentView(l);
			if (!l.getParent()) {
				this._listView.addChild(l, "cell")
			}
		},
		_setFrame: function(k, m, j, n) {
			UI.Commands.setFrame.call(this, k, m, j, n);
			if (this._titleView) {
				var o = this._titleView.getFrame();
				this._titleView.setFrame(k, m, j, o[3])
			}
		},
		flush: function() {
			for (var j = this._visibleRange[0], h = this._visibleRange[1]; j < h; j++) {
				this._listView._queueViewForItem(this._items[j])
			}
			this._visibleRange = [0, 0]
		},
		updateVisibleRange: function(j, n) {
			var h = this._getMeasuredHeight();
			var m = this._items.length;
			var s = this._rowHeight > 0 ? this._rowHeight : h / m;
			j -= s * 5;
			n += s * 5;
			var k = this._visibleRange[0];
			var q = this._visibleRange[1];
			var r = m > 0 ? Math.max(0, Math.floor(j / s)) : 0;
			var p = m > 0 ? Math.min(m, r + Math.floor((n - j) / s)) : 0;
			if (this._cellPositions) {
				while (r < m && this._cellPositions[r] < j) {
					r++
				}
				while (r > 0 && this._cellPositions[r] > j) {
					r--
				}
				if (r >= m) {
					r = Math.max(0, m - 1)
				}
				while (p < m && this._cellPositions[p] < n) {
					p++
				}
				while (p > r && this._cellPositions[p] > n) {
					p--
				}
				j = this._cellPositions[r];
				n = p == 0 ? j : (this._cellPositions[p - 1] + this._items[p - 1]._height)
			}
			if (n < 0 || j > h) {
				for (var o = this._visibleRange[0]; o < this._visibleRange[1]; o++) {
					this._listView._queueViewForItem(this._items[o])
				}
				this._visibleRange = [0, 0];
				return
			}
			if (k == r && q == p) {
				return
			}
			if (k == q) {
				for (var o = r; o < p; o++) {
					this.addItemToVisible(this._items[o], o)
				}
			} else {
				if (k < r) {
					do {
						this._listView._queueViewForItem(this._items[k])
					} while (++k < r)
				}
				if (q > p) {
					while (q-- > p) {
						this._listView._queueViewForItem(this._items[q])
					}
					q = p
				}
				if (k > r) {
					while (k-- > r) {
						this.addItemToVisible(this._items[k], k)
					}
					k = r
				}
				if (q < p) {
					do {
						this.addItemToVisible(this._items[q], q)
					} while (++q < p)
				}
			}
			this._visibleRange = [r, p]
		},
		setListView: function(h) {
			this._listView = h;
			delete this._measuredHeight;
			return this
		},
		_getMeasuredHeight: function() {
			return this._measuredHeight || this._measureHeight()
		},
		_measureHeight: function() {
			if (this._rowHeight < 0) {
				var m = this._titleHeight + this._headerHeight;
				var h = [];
				var j = this._items.length;
				for (var k = 0; k < j; k++) {
					h.push(m);
					m += this._items[k]._height
				}
				this._cellPositions = h;
				return this._measuredHeight = m
			}
			delete this._cellPositions;
			return this._measuredHeight = this._titleHeight + this._headerHeight + this._rowHeight * this._items.length
		},
		calculateItemPositions: function() {},
	});
	f._init = function() {
		delete f._init;
		if (d._init) {
			d._init()
		}
		var l = function() {
			if (this.listViewMonitor) {
				this.listViewMonitor.setTitleView(this)
			}
			l._superfunc.apply(this, Array.prototype.slice.call(arguments))
		};
		var k = function(n) {
			if (this._titleView && this._titleView.listViewMonitor == this) {
				delete this._titleView.listViewMonitor
			}
			this._titleView = n;
			if (!(n.listViewMonitor == this)) {
				n.listViewMonitor = this;
				if (!l._superfunc) {
					l._superfunc = n.setFrame
				}
				if (n.setFrame != l) {
					n.registerAccessors("frame", null, l)
				}
			}
			this._titleHeight = n.getFrame()[3];
			delete this._measuredHeight;
			b.setTitleView.call(this, c.objectToId(n));
			return this
		};
		var h = function() {
			return this._titleView
		};
		f.registerAccessors("titleView", h, k);
		f.synthesizeProperty("rowHeight");
		var j = function(n) {
			n = (n instanceof Array) ? n : Array.prototype.slice.call(arguments);
			this.flush();
			this._items = n;
			if (!this._listView) {
				return
			}
			this._listView.reloadData();
			delete this._measuredHeight
		};
		var m = function() {
			return this._items
		};
		f.registerAccessors("items", m, j);
		f.synthesizeProperty("yPosition")
	};
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/ListViewItem"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/ListViewItem"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/ListViewItem"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	var c = b.ListViewItem = a.subclass({
		type: "listview-item",
		_reuseId: "__default__",
		_currentView: null,
		_onCreateView: function() {},
		_onReleaseView: function(d) {},
		_onSetView: function(d) {},
		setOnCreateView: function(d) {
			this._onCreateView = d
		},
		setOnReleaseView: function(d) {
			this._onReleaseView = d
		},
		setOnSetView: function(d) {
			this._onSetView = d
		},
		setHeight: function(d) {
			this._height = d
		},
		getHeight: function() {
			return this._height
		},
		_setCurrentView: function(d) {
			if (d instanceof a) {
				this._onSetView(d)
			} else {
				this._onReleaseView(this._currentView)
			}
			this._currentView = d;
			return this
		},
		getCurrentView: function() {
			return this._currentView
		},
		initialize: function(d) {
			if (d) {
				this._reuseId = d
			}
			return this
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/CellView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/CellView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/CellView"] = b;
	var d = require("NGCore/Client/UI/View").View;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var c = b.CellView = d.subclass({
		type: "cell",
		initialize: function($super, e) {
			if (c._init) {
				c._init()
			}
			$super(e)
		}
	});
	c._init = function() {
		delete c._init;
		if (d._init) {
			d._init()
		}
		c.synthesizePropertyWithState("image", a.setImage);
		c.synthesizePropertyWithState("imageBorder", a.setImageBorder);
		c.synthesizeCompoundProperty("imageInsets", a.setImageInsets);
		c.synthesizeProperty("imageFit", a.setImageFitMode);
		c.synthesizeProperty("imageGravity", a.setImageGravity);
		c.synthesizeCompoundProperty("imageTransform", a.setImageTransform);
		c.synthesizePropertyWithState("rightImage", a.setRightImage);
		c.synthesizePropertyWithState("rightImageBorder", a.setRightImageBorder);
		c.synthesizeProperty("rightImageInsets", a.setRightImageInsets);
		c.synthesizeProperty("rightImageFit", a.setRightImageFitMode);
		c.synthesizeProperty("rightImageGravity", a.setRightImageGravity);
		c.synthesizeCompoundProperty("rightImageTransform", a.setRightImageTransform);
		c.synthesizePropertyWithState("title", a.setTitle);
		c.synthesizePropertyWithState("titleColor", a.setTitleColor);
		c.synthesizePropertyWithState("titleFont", a.setTitleFont);
		c.synthesizePropertyWithState("titleShadow", a.setTitleShadow);
		c.synthesizeCompoundProperty("titleGravity", a.setTitleGravity);
		c.synthesizeProperty("titleSize", a.setTitleSize);
		c.synthesizeCompoundProperty("titleInsets", a.setTitleInsets);
		c.synthesizePropertyWithState("text", a.setText);
		c.synthesizePropertyWithState("textColor", a.setTextColor);
		c.synthesizePropertyWithState("textShadow", a.setTextShadow);
		c.synthesizePropertyWithState("textFont", a.setTextFont);
		c.synthesizeCompoundProperty("textGravity", a.setTextGravity);
		c.synthesizeProperty("textSize", a.setTextSize);
		c.synthesizeCompoundProperty("textInsets", a.setTextInsets)
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/CheckBox"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/CheckBox"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/CheckBox"] = c;
	var f = require("NGCore/Client/UI/AbstractView").AbstractView;
	var b = require("NGCore/Client/UI/Commands").Commands;
	var e = require("NGCore/Client/UI/Window");
	var a = {
		normal: {
			gradient: ["FFED 0.000", "FFA4 1.000"],
			insets: "{4.0,4.0,4.0,4.0}",
			outerLine: "FF51 2.0",
			outerShadow: "0000 0.0 {0.0,0.0}",
			corners: "3.0 3.0 3.0 3.0"
		},
		pressed: {
			innerShadow: "FF00 6.0 {0.0,-1.0}",
			gradient: ["FF80 0.000", "FF80 1.000"],
			insets: "{4.0,4.0,4.0,4.0}",
			outerLine: "FF51 2.0",
			outerShadow: "0000 0.0 {0.0,0.0}",
			corners: "3.0 3.0 3.0 3.0"
		},
		checked: {
			innerLine: "FF27A227 2.0",
			corners: "3.0 3.0 3.0 3.0",
			insets: "{4.0,4.0,4.0,4.0}",
			gradient: ["FF2CFF2B 0.000", "FF179117 1.000"],
			outerShadow: "0000 0.0 {0.0,0.0}",
			outerLine: "FF51 3.0",
			innerShadow: "FF97FE97 1.0 {0.0,0.0}"
		},
		checkedpressed: {
			innerShadow: "FF0F610F 5.0 {0.0,-1.0}",
			gradient: ["FF179117 0.000", "FF179117 1.000"],
			insets: "{4.0,4.0,4.0,4.0}",
			outerLine: "FF2B512B 3.0",
			outerShadow: "0000 0.0 {0.0,0.0}",
			corners: "3.0 3.0 3.0 3.0"
		},
		disabled: {
			innerShadow: "0000 0.0 {0.0,0.0}",
			gradient: ["66B6 0.000", "66CA 1.000"],
			insets: "{4.0,4.0,4.0,4.0}",
			outerLine: "7FE0 3.0",
			outerShadow: "0000 0.0 {0.0,0.0}",
			corners: "3.0 3.0 3.0 3.0"
		},
	};
	var d = c.CheckBox = f.subclass({
		type: "checkbox",
		initialize: function($super, g) {
			if (d._init) {
				d._init()
			}
			this._checked = false;
			$super();
			this.setGradient(a.normal, b.State.Normal);
			this.setGradient(a.pressed, b.State.Pressed);
			this.setGradient(a.checked, b.State.Checked);
			this.setGradient(a.checkedpressed, b.State.Checked | b.State.Pressed);
			this.setGradient(a.disabled, b.State.Disabled);
			this.setImageInsets([4, 4, 4, 4]);
			this.setAttributes(g)
		},
		performEventCallback: function($super, g) {
			if (g.eventType == "click") {
				this._checked = g.checked;
				if (this._checked) {
					this._state = this._state | b.State.Checked
				} else {
					this._state = this._state & ~b.State.Checked
				}
			}
			$super(g)
		}
	});
	d._init = function() {
		delete d._init;
		if (f._init) {
			f._init()
		}
		d.synthesizePropertyWithState("image", b.setImage);
		d.synthesizeCompoundProperty("imageInsets", b.setImageInsets);
		d.synthesizePropertyWithState("text", b.setText);
		d.synthesizePropertyWithState("textColor", b.setTextColor);
		d.synthesizePropertyWithState("textShadow", b.setTextShadow);
		d.synthesizeCompoundProperty("textGravity", b.setTextGravity);
		d.synthesizeProperty("textSize", b.setTextSize);
		d.synthesizePropertyWithState("textFont", b.setTextFont);
		d.synthesizeCompoundProperty("textInsets", b.setTextInsets);
		d.synthesizeProperty("checked", b.setChecked)
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/EditText"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/EditText"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/EditText"] = b;
	var c = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = b.EditText = c.subclass({
		type: "edittext",
		initialize: function($super, e) {
			if (d._init) {
				d._init()
			}
			$super(e)
		},
		InputTypes: a.InputType,
		EnterKeyTypes: a.EnterKeyType,
		performEventCallback: function($super, f) {
			try {
				switch (f.eventType) {
					case "change":
						this._text = f.text;
					default:
						$super(f)
				}
			} catch (g) {
				NgHandleException(g)
			}
		},
		getText: function() {
			return this._text || ""
		},
		setText: function(e) {
			this._text = e;
			a.setText.call(this, 0, e)
		},
		focus: function() {
			a.setFocus.call(this, true)
		},
		blur: function() {
			a.setFocus.call(this, false)
		},
		setFocus: function(f) {
			try {
				throw new Error("EditText.setFocus is deprecated and should not be used. Please use .focus() and .blur().")
			} catch (g) {
				NgHandleException(g)
			}
			a.setFocus.call(this, f)
		}
	});
	d._init = function() {
		delete d._init;
		if (c._init) {
			c._init()
		}
		d.registerAccessors("text", d.prototype.getText, d.prototype.setText);
		d.synthesizeProperty("placeholder", a.setPlaceholderText);
		d.synthesizeProperty("placeholderColor", a.setPlaceholderTextColor);
		d.synthesizeProperty("placeholderShadow", a.setPlaceholderTextShadow);
		d.synthesizeProperty("inputType", a.setInputType);
		d.synthesizeProperty("enterKeyType", a.setEnterKeyType);
		d.synthesizePropertyWithState("textColor", a.setTextColor);
		d.synthesizePropertyWithState("textShadow", a.setTextShadow);
		d.synthesizeCompoundProperty("textGravity", a.setTextGravity);
		d.synthesizeProperty("textSize", a.setTextSize);
		d.synthesizePropertyWithState("textFont", a.setTextFont);
		d.registerEventType("change");
		d.registerEventType("focus");
		d.registerEventType("blur");
		d.registerEventType("action")
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/EditTextArea"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/EditTextArea"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/EditTextArea"] = b;
	var d = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var c = b.EditTextArea = d.subclass({
		type: "edittextarea",
		initialize: function($super, e) {
			if (c._init) {
				c._init()
			}
			$super(e)
		},
		performEventCallback: function($super, f) {
			try {
				switch (f.eventType) {
					case "change":
						this._text = f.text;
						$super(f);
						break;
					case "focus":
					case "blur":
						$super(f);
						break
				}
			} catch (g) {
				NgHandleException(g)
			}
		},
		getText: function() {
			return this._text || ""
		},
		setText: function(e) {
			this._text = e;
			a.setText.call(this, 0, e)
		},
		setFocus: function(e) {
			a.setFocus.call(this, e)
		}
	});
	c._init = function() {
		delete c._init;
		if (d._init) {
			d._init()
		}
		c.registerAccessors("text", c.prototype.getText, c.prototype.setText);
		c.synthesizeProperty("placeholder", a.setPlaceholderText);
		c.synthesizeProperty("placeholderColor", a.setPlaceholderTextColor);
		c.synthesizeProperty("placeholderShadow", a.setPlaceholderTextShadow);
		c.synthesizePropertyWithState("textColor", a.setTextColor);
		c.synthesizePropertyWithState("textShadow", a.setTextShadow);
		c.synthesizeCompoundProperty("textGravity", a.setTextGravity);
		c.synthesizeProperty("textSize", a.setTextSize);
		c.synthesizePropertyWithState("textFont", a.setTextFont);
		c.registerEventType("change");
		c.registerEventType("focus");
		c.registerEventType("blur")
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/DateField"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/UI/DateField"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/DateField"] = a;
	var c = require("NGCore/Client/UI/EditText").EditText;

	function b(e) {
		if (!e.getTime) {
			return false
		}
		return !isNaN(e.getTime())
	}

	function d(f, j) {
		j = j || "yyyy-mm-dd";
		var h = f.match(/(\d+)/g),
			g = 0,
			e = {};
		j.replace(/(yyyy|dd|mm)/g, function(k) {
			e[k] = g++
		});
		return new Date(h[e.yyyy], h[e.mm] - 1, h[e.dd])
	}
	a.DateField = c.subclass({
		initialize: function($super, f) {
			var e = $super(f);
			this.setDateFormat("yyyy-mm-dd");
			this.ondatechange = function(g) {};
			this.setInputType(c.InputTypes.Date);
			return e
		},
		performEventCallback: function($super, g) {
			try {
				if (g.eventType == "change") {
					var f = this.getText();
					$super(g);
					this.ondatechange(this.getDate())
				}
			} catch (h) {
				NgHandleException(h)
			}
		},
		_filterAndInsertDashes: function(e, l) {
			var k = l;
			if ((e.length == k.length + 1) && e[e.length - 1] == "-") {
				return k.substring(0, k.length - 1)
			}
			var h = "";
			var f = 0;
			for (var g = 0; g < k.length && h.length < this.formatStr.length; g++, f++) {
				if (f < this.formatStr.length && this.formatStr[f] == "-" && g < k.length) {
					if (k[g] == "-" || k[g] == "/") {
						h += "-";
						continue
					} else {
						h += "-";
						h += k[g];
						continue
					}
				}
				if (g < k.length && (k[g] == "-" || k[g] == "/")) {
					--f;
					continue
				}
				h += k[g]
			}
			if (this.formatStr.length > f && (this.formatStr[f] == "-" || this.formatStr[f] == "/")) {
				h += "-"
			}
			return h
		},
		normalizeDateLayout: function() {
			var f = this.getText();
			var e = this._filterAndInsertDashes(this.getText(), this.getText());
			if (f != e) {
				this.setText(e)
			}
		},
		getDateFormat: function() {
			return this.formatStr
		},
		setDateFormat: function(e) {
			if (e != "yyyy-mm-dd" && e != "mm-yyyy" && e != "yyyy-mm" && e != "mm-dd-yyyy" && e != "dd-mm-yyyy") {
				NgLogD("Error: Invalid Format String set for Birthdate Field!!\n");
				return
			}
			this.formatStr = e;
			this.setPlaceholder(this.formatStr);
			return
		},
		getDate: function() {
			return this._dateFromText(this._filterAndInsertDashes(this.getText(), this.getText()))
		},
		_dateFromText: function(k) {
			var g = null;
			var f = k;
			var h = null;
			var e = null;
			if (this.formatStr == "dd-mm-yyyy") {
				h = f.split("-");
				if (h.length != 3 || h[2].length != 4) {
					return null
				}
				e = [];
				e.push(h.pop());
				e.push(h.pop());
				e.push(h.pop());
				g = d(e.join("-"))
			} else {
				if (this.formatStr == "mm-yyyy") {
					h = f.split("-");
					if (h.length != 2 || h[1].length != 4) {
						return null
					}
					e = [];
					e.push(h.pop());
					e.push(h.pop());
					e.push("01");
					var j = e.join("-");
					g = d(j)
				} else {
					if (this.formatStr == "yyyy-mm") {
						h = f.split("-");
						if (h.length != 2 || h[0].length != 4) {
							return null
						}
						g = d(f + "-01")
					} else {
						if (this.formatStr == "mm-dd-yyyy") {
							h = f.split("-");
							if (h.length != 3 || h[2].length != 4) {
								return null
							}
							e = [];
							e.push(h.pop());
							e.push(h.shift());
							e.push(h.shift());
							g = d(e.join("-"))
						} else {
							g = d(f)
						}
					}
				}
			}
			if (!b(g)) {
				NgLogD("Failed to parse date: " + g + "   -  " + g.toString() + "\n");
				return null
			}
			return g
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/AlertDialog"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/AlertDialog"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/AlertDialog"] = c;
	var b = require("NGCore/Client/UI/Element").Element;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = c.AlertDialog = b.subclass({
		type: "alertdialog",
		initialize: function($super, e) {
			if (d._init) {
				d._init()
			}
			$super(e)
		},
		show: a.show,
		hide: a.hide
	});
	d._init = function() {
		delete d._init;
		if (b._init) {
			b._init()
		}
		d.synthesizePropertyWithState("title", a.setTitle);
		d.synthesizePropertyWithState("text", a.setText);
		d.synthesizeProperty("choices", a.setChoices);
		d.registerEventType("choice")
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/ProgressDialog"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/UI/ProgressDialog"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/ProgressDialog"] = d;
	var c = require("NGCore/Client/UI/Element").Element;
	var b = require("NGCore/Client/UI/Commands").Commands;
	var a = d.ProgressDialog = c.subclass({
		type: "progressdialog",
		initialize: function($super, e) {
			if (a._init) {
				a._init()
			}
			return $super(e)
		},
		show: b.show,
		hide: b.hide
	});
	a._init = function() {
		delete a._init;
		if (c._init) {
			c._init()
		}
		a.synthesizePropertyWithState("title", b.setTitle);
		a.synthesizePropertyWithState("text", b.setText)
	};
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Toast"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/Toast"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Toast"] = c;
	var b = require("NGCore/Client/UI/Element").Element;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = c.Toast = b.subclass({
		type: "toast",
		initialize: function($super, e) {
			if (d._init) {
				d._init()
			}
			$super(e)
		},
		show: a.show
	});
	d._init = function() {
		delete d._init;
		if (b._init) {
			b._init()
		}
		d.synthesizePropertyWithState("text", a.setText);
		d.registerEventType("disappear")
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Style"] = function() {
	var exports = $MODULE_REGISTRY["NGCore/Client/UI/Style"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Style"] = exports;
	var Element = require("NGCore/Client/UI/Element").Element;
	var Commands = require("NGCore/Client/UI/Commands").Commands;
	var stateMap = {
		normal: Commands.State.Normal,
		focused: Commands.State.Focused,
		selected: Commands.State.Selected,
		pressed: Commands.State.Pressed,
		disabled: Commands.State.Disabled
	};
	var Style = exports.Style = Element.subclass({
		type: "style",
		classname: "UI_Style",
		initialize: function($super, properties) {
			if (Style._init) {
				Style._init()
			}
			$super(properties)
		},
		$synthesizePropertyWithState: function(propName, commandsFn) {
			function doSynthesis(caseAdjusted, stateName, stateFlags) {
				var gName = "get" + caseAdjusted;
				var sName = "set" + caseAdjusted;
				var getterFn = function() {
					return this[gName].call(this, stateFlags)
				};
				var setterFn = function(val) {
					return this[sName].call(this, val, stateFlags)
				};
				this.registerAccessors(stateName + caseAdjusted, getterFn, setterFn)
			}
			Element.synthesizePropertyWithState.call(this, propName, commandsFn);
			var caseAdjusted = propName.charAt(0).toUpperCase() + propName.substr(1);
			for (var stateName in stateMap) {
				doSynthesis.call(this, caseAdjusted, stateName, stateMap[stateName])
			}
		}
	});
	Style._init = function() {
		delete Style._init;
		if (Element._init) {
			Element._init()
		}
		with(Style) {
			synthesizePropertyWithState("gradient", Commands.setGradient);
			synthesizePropertyWithState("image", Commands.setImage);
			synthesizePropertyWithState("imageBorder", Commands.setImageBorder);
			synthesizeProperty("imageFit", Commands.setImageFitMode);
			synthesizeCompoundProperty("imageInsets", Commands.setImageInsets);
			synthesizeCompoundProperty("imageGravity", Commands.setImageGravity);
			synthesizeCompoundProperty("imageTransform", Commands.setImageTransform);
			synthesizePropertyWithState("text", Commands.setText);
			synthesizePropertyWithState("textColor", Commands.setTextColor);
			synthesizePropertyWithState("textFont", Commands.setTextFont);
			synthesizePropertyWithState("textShadow", Commands.setTextShadow);
			synthesizeCompoundProperty("textGravity", Commands.setTextGravity);
			synthesizeProperty("textSize", Commands.setTextSize);
			synthesizeCompoundProperty("textInsets", Commands.setTextInsets);
			synthesizePropertyWithState("rightImage", Commands.setRightImage);
			synthesizePropertyWithState("rightImageBorder", Commands.setRightImageBorder);
			synthesizeProperty("rightImageFit", Commands.setRightImageFitMode);
			synthesizeCompoundProperty("rightImageInsets", Commands.setRightImageInsets);
			synthesizeCompoundProperty("rightImageGravity", Commands.setRightImageGravity);
			synthesizeCompoundProperty("rightImageTransform", Commands.setRightImageTransform);
			synthesizePropertyWithState("title", Commands.setTitle);
			synthesizePropertyWithState("titleColor", Commands.setTitleColor);
			synthesizePropertyWithState("titleFont", Commands.setTitleFont);
			synthesizePropertyWithState("titleShadow", Commands.setTitleShadow);
			synthesizeCompoundProperty("titleGravity", Commands.setTitleGravity);
			synthesizeProperty("titleSize", Commands.setTitleSize);
			synthesizeCompoundProperty("titleInsets", Commands.setTitleInsets)
		}
	};
	return exports
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/AdView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/AdView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/AdView"] = b;
	var d = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var c = b.AdView = d.subclass({
		type: "adview",
		initialize: function($super, e) {
			if (c._init) {
				c._init()
			}
			$super(e);
			this.onappear = this.bind(this._onappear);
			this.ondisappear = this.bind(this._ondisappear);
			this.onclick = this.bind(this._onclick)
		},
		onappear: function() {},
		ondisappear: function() {},
		_onappear: function($super, e) {
			($super || function() {})(e);
			visible = true
		},
		_ondisappear: function($super, e) {
			($super || function() {})(e);
			visible = false
		},
		performEventCallback: function($super, e) {
			if (e.eventType == "click") {
				NgLogD("AD WAS CLICKED in AdView wooo!!!!");
				($super || function() {})(e)
			}
			if (e.eventType == "load") {
				NgLogD("AD WAS LOADED in AdView wooo!!!!");
				($super || function() {})(e)
			}
		},
		pauseAds: function() {
			a.pauseAds.call(this)
		},
		resumeAds: function() {
			a.resumeAds.call(this)
		},
		setRefreshRate: function(e) {
			a.setAdRefreshRate.call(this, e)
		},
		setAutoplay: function(e) {
			a.setAdRefreshRate.call(this, e)
		},
		getAdEventMetadata: function() {
			NgLogD("AD EventMetetData was requested!");
			var e = "DefaultAdEventMetaData";
			return e
		}
	});
	c._init = function() {
		delete c._init;
		if (d._init) {
			d._init()
		}
		c.synthesizeProperty("active", a.setActive);
		c.registerEventType("click");
		c.registerEventType("load")
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/DocumentView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/DocumentView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/DocumentView"] = b;
	var c = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = b.DocumentView = c.subclass({
		type: "documentview",
		initialize: function($super, e) {
			if (d._init) {
				d._init()
			}
			$super(e)
		}
	});
	d._init = function() {
		delete d._init;
		if (c._init) {
			c._init()
		}
		d.synthesizeProperty("documentURL", a.setSourceDocument)
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/CheckoutView"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/CheckoutView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/CheckoutView"] = c;
	var e = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/ViewGeometry");
	var b = require("NGCore/Client/UI/Commands").Commands;
	var d = c.CheckoutView = e.subclass({
		type: "checkoutview",
		initialize: function($super, f) {
			if (d._init) {
				d._init()
			}
			$super(f)
		}
	});
	d._init = function() {
		delete d._init;
		if (e._init) {
			e._init()
		}
		d.registerAccessors("postData", null, b.setPostData);
		d.registerAccessors("postURL", null, b.loadPostURL);
		d.registerAccessors("getURL", null, b.loadGetURL)
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/Spinner"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/Spinner"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/Spinner"] = b;
	var d = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var c = b.Spinner = d.subclass({
		type: "spinner",
		initialize: function($super, e) {
			if (c._init) {
				c._init()
			}
			return $super(e)
		}
	});
	c._init = function() {
		delete c._init;
		if (d._init) {
			d._init()
		}
		c.synthesizeProperty("darkStyle", a.setDarkStyle)
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/ProgressBar"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/ProgressBar"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/ProgressBar"] = c;
	var e = require("NGCore/Client/UI/AbstractView").AbstractView;
	var b = require("NGCore/Client/UI/Commands").Commands;
	var d = require("NGCore/Client/UI/Window");
	var a = c.ProgressBar = e.subclass({
		type: "progressbar",
		initialize: function($super, f) {
			if (a._init) {
				a._init()
			}
			return $super(f)
		},
		useForUpdateProgress: b.useForUpdateProgress,
	});
	a._init = function() {
		delete a._init;
		if (e._init) {
			e._init()
		}
		a.synthesizePropertyWithState("progressGradient", b.setProgressGradient);
		a.synthesizePropertyWithState("secondaryGradient", b.setSecondaryGradient);
		var f = function(h) {
			var g = (h instanceof Array) ? h : Array.prototype.slice.call(arguments);
			while (g.length < 2) {
				g.push(0)
			}
			b.setProgress.apply(this, g)
		};
		a.synthesizeCompoundProperty("progress", f)
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/MapView"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/MapView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/MapView"] = c;
	var d = require("NGCore/Client/UI/AbstractView").AbstractView;
	var b = require("NGCore/Client/UI/Commands").Commands;
	var e = require("NGCore/Client/UI/MapAnnotation").MapAnnotation;
	var a = c.MapView = d.subclass({
		type: "mapview",
		initialize: function($super, f) {
			this._annotations = [];
			this._region = [];
			return $super(f)
		},
		getCenterCoordinate: function() {
			return [this._region[0], this._region[1]]
		},
		setCenterCoordinate: function(g, h, f) {
			this._region[0] = g;
			this._region[1] = h;
			if (!this._region[2]) {
				this._region[2] = 0.05
			}
			if (!this._region[3]) {
				this._region[3] = 0.05
			}
			this.setRegion(this._region[0], this._region[1], this._region[2], this._region[3], f)
		},
		getCoordinateSpan: function() {
			return [this._region[2], this._region[3]]
		},
		selectAnnotation: function(f) {
			if (f instanceof e) {
				var g = this._annotations.indexOf(f);
				if (g != -1) {
					b.selectAnnotation.call(this, f.__objectRegistryId);
					return
				}
			}
			b.selectAnnotation.call(this, -1)
		},
		addAnnotation: function(f) {
			if (f instanceof e) {
				this._annotations.push(f);
				b.addAnnotation.call(this, f.__objectRegistryId)
			} else {
				throw {
					message: this.type + ".addAnnotation: " + f + " is not a MapAnnotation!"
				}
			}
			return this
		},
		removeAnnotation: function(f) {
			if (f instanceof e) {
				var g = this._annotations.indexOf(f);
				if (g != -1) {
					this._annotations.splice(g, 1)
				}
				b.removeAnnotation.call(this, f.__objectRegistryId)
			} else {
				throw {
					message: this.type + ".removeAnnotation: " + f + " is not a MapAnnotation!"
				}
			}
			return f
		},
		updateRegionFits: function(g, h, f, j) {
			this._region[0] = g;
			this._region[1] = h;
			this._region[2] = f;
			this._region[3] = j
		},
		performEventCallback: function($super, f) {
			if (f.eventType == "regionchange") {
				this.updateRegionFits(f.latitude, f.longitude, f.latitudeDelta, f.longitudeDelta)
			}
			$super(f)
		}
	});
	(function() {
		a.synthesizeProperty("scrollable", b.setScrollable);
		a.synthesizeProperty("zoomable", b.setZoomable);
		a.synthesizeCompoundProperty("region", b.setRegion);
		a.registerEventType("regionchange")
	})();
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/MapAnnotation"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/MapAnnotation"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/MapAnnotation"] = c;
	var b = require("NGCore/Client/UI/Element").Element;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = c.MapAnnotation = b.subclass({
		type: "mapannotation",
		initialize: function($super, e) {
			return $super(e)
		},
		setCalloutLeftView: function(e) {
			this._calloutLeftView = e;
			a.setCalloutLeftView.call(this, e.__objectRegistryId)
		},
		getCalloutLeftView: function() {
			return this._calloutLeftView
		},
		setCalloutRightView: function(e) {
			this._calloutRightView = e;
			a.setCalloutRightView.call(this, e.__objectRegistryId)
		},
		getCalloutRightView: function() {
			return this._calloutRightView
		},
		setView: function(e) {
			this._view = e;
			a.setView.call(this, e.__objectRegistryId)
		},
		getView: function() {
			return this._view
		},
		setImage: function(f) {
			console.log("WARNING : MapAnnotation.setImage has been deprecated. Use MapAnnotation.setView instead.");
			var e = new UI.Image();
			e.setImage(f);
			e.setFrame([0, 0, 40, 40]);
			this.setView(e)
		},
		performEventCallback: function($super, f) {
			$super(f)
		}
	});
	(function() {
		d.synthesizeCompoundProperty("coordinate", a.setCoordinate);
		d.synthesizeCompoundProperty("centerOffset", a.setCenterOffset);
		d.synthesizeProperty("calloutTitle", a.setCalloutTitle);
		d.synthesizeProperty("calloutSubtitle", a.setCalloutSubtitle);
		d.synthesizeProperty("calloutEnabled", a.setCalloutEnabled);
		d.registerEventType("select");
		d.registerEventType("deselect")
	})();
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/_CutSceneView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/_CutSceneView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/_CutSceneView"] = b;
	var c = require("NGCore/Client/UI/AbstractView").AbstractView;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var d = b.CutSceneView = c.subclass({
		type: "_cutsceneview",
		initialize: function($super, e) {
			if (d._init) {
				d._init()
			}
			return $super(e)
		},
		play: function(f, e) {
			var g = (typeof e == "function") ? a.registerTemporaryCallback(e.bind(this)) : "";
			a.playVideo.call(this, f, g)
		}
	});
	d._init = function() {
		delete d._init;
		if (c._init) {
			c._init()
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Analytics"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Core/Analytics"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Analytics"] = c;
	var b = require("NGCore/Client/Core/Class").Class,
		d = require("NGCore/Shared/NgPipe").NgPipe,
		e = require("NGCore/Shared/NgPipesRemote").NgPipesRemote;
	var a = b.singleton({
		classname: "Analytics",
		initialize: function() {
			if (!this._pipe) {
				this._pipe = new d()
			}
		},
		updateGLEXT: function() {
			try {
				var g = require("NGCore/Client/Core/Capabilities").Capabilities;
				var f = g.getOglExtensions();
				if (f.length > 2) {
					var m = [];
					var p = ["GL_IMG_texture_compression_pvrtc", "GL_AMD_compressed_ATC_texture", "GL_OES_compressed_ETC1_RGB8_texture", "GL_AMD_compressed_3DC_texture"];
					for (var k in p) {
						var o = p[k];
						for (var h in f) {
							if (f[h] === o) {
								var n = {};
								n[g.getDeviceName()] = o;
								m.push(n)
							}
						}
					}
					for (k in m) {
						a.reportGameEvent("openglexts", m[k])
					}
				}
			} catch (l) {
				NgLogException(l)
			}
		},
		enable: function() {
			this._pipe.enable()
		},
		disable: function() {
			this._pipe.disable()
		},
		setUrl: function(f) {
			this._pipe.setRemoteUrl(f)
		},
		reportNavigation: function(h, g, f) {
			if (!(h && g)) {
				return false
			}
			this._pipe.uiEvent("NAV", {
				to: g,
				fro: h,
				btnid: f
			});
			return true
		},
		reportGameEvent: function(f, h, g) {
			if (!f) {
				return false
			}
			this._pipe.gameEvent(f, h, g);
			return true
		},
		reportPlayerStateChange: function(f, h, g) {
			if (f) {
				this._pipe.playerEvent(f, "PLSTCHANGE", h, g);
				return true
			} else {
				return false
			}
		},
		reportFunnelStage: function(k, f, g, j) {
			var h = {};
			if (!(k)) {
				return false
			}
			if (f !== null && f !== undefined) {
				h.stage = f
			} else {
				return false
			}
			if (g) {
				h.stageName = g
			}
			this._pipe.funnelEvent(k, h, j);
			return true
		},
		reportSocialEvent: function(h, f, g) {
			if (h && h.length && f && f.length) {
				this._pipe.socialEvent(h, f, g);
				return true
			}
			return false
		},
		reportError: function(f) {
			if (!f) {
				return false
			}
			this._pipe.gameOpsEvent("ERR", {
				err: f
			});
			return true
		},
		addTag: function(g) {
			if (g) {
				var f = {
					tag: g
				};
				this._pipe.gameEvent("tag", f);
				return true
			}
			return false
		},
		_getPipe: function() {
			return this._pipe
		},
		_setNgPipeSocialAnalytics: function(f) {
			if (this._pipe) {
				this._pipe._setSocialAnalytics(f)
			}
		}
	});
	c.Analytics = a;
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Color"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/Color"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Color"] = a;
	a.Color = require("NGCore/Shared/Color").Color;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Vector"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/Vector"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Vector"] = a;
	a.Vector = require("NGCore/Shared/Vector").Vector;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Point"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/Point"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Point"] = a;
	a.Point = require("NGCore/Shared/Point").Point;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Size"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/Size"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Size"] = a;
	a.Size = require("NGCore/Shared/Size").Size;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Rect"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/Rect"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Rect"] = a;
	a.Rect = require("NGCore/Shared/Rect").Rect;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/MessageEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/MessageEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/MessageEmitter"] = a;
	a.MessageEmitter = require("NGCore/Shared/MessageEmitter").MessageEmitter;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/MessageListener"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/MessageListener"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/MessageListener"] = a;
	a.MessageListener = require("NGCore/Shared/MessageListener").MessageListener;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/ObjectRegistry"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Core/ObjectRegistry"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/ObjectRegistry"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	b.ObjectRegistry = a.singleton({
		classname: "ObjectRegistry",
		initialize: function() {
			this._currentId = 0;
			this._guardId = 0;
			this._objects = {}
		},
		register: function(c) {
			if (c.__objectRegistryId) {
				throw new Error("ObjectRegistry.register: object already registered")
			}
			var d = "" + ++this._currentId;
			c.__objectRegistryId = d;
			this._objects[d] = c
		},
		unregister: function(c) {
			if (!c.__objectRegistryId) {
				throw new Error("ObjectRegistry.unregister: object not registered")
			}
			var d = c.__objectRegistryId;
			c.__objectRegistryId = 0;
			delete this._objects[d]
		},
		isObjectRegistered: function(c) {
			if (c.__objectRegistryId) {
				return true
			} else {
				return false
			}
		},
		isIdRegistered: function(c) {
			if (this._objects[c]) {
				return true
			} else {
				return false
			}
		},
		objectToId: function(c) {
			var d = c.__objectRegistryId;
			if (!d) {
				throw new Error("ObjectRegistry.objectToId: object not registered")
			}
			return d
		},
		idToObject: function(c) {
			return this._objects[c]
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Time"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Core/Time"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Time"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	var d = require("NGCore/Client/Core/Proc").Proc;
	var c = a.singleton({
		classname: "Time",
		mFrameTime: 0,
		mFrameDelta: 0,
		initialize: function() {},
		getFrameTime: function() {
			return this.mFrameTime
		},
		getFrameDelta: function() {
			return this.mFrameDelta
		},
		getRealTime: function() {
			return (new Date()).getTime()
		},
		$_frameTimeRecv: function(e) {
			var f = {};
			this._frameTimeRecvGen(e, f);
			this.mFrameDelta = this.mFrameTime ? f.time - this.mFrameTime : 1;
			this.mFrameTime = f.time
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = d.parseInt(j.shift(), 10);
				if (g > 0) {
					var h = d.parseInt(j.shift(), 10);
					var f = ObjectRegistry.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						default:
							NgLogE("Unknown instance method id " + g + " in Time._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						case -1:
							c._frameTimeRecv(j);
							break;
						default:
							NgLogE("Unknown static method id " + g + " in Time._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[351] = e;
			return e
		})(),
		$_frameTimeRecvGen: function(e, f) {
			if (e.length != 1) {
				NgLogE("Could not parse due to wrong argument count in Time.frameTime from command: " + e);
				return false
			}
			f.time = d.parseInt(e[0]);
			if (f.time === undefined) {
				NgLogE("Could not parse time in Time.frameTime from command: " + e);
				return false
			}
			return true
		},
	});
	b.Time = c;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/toMD5"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/toMD5"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/toMD5"] = a;
	a.toMD5 = require("NGCore/Shared/Lib/md5").toMD5;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/SHA1"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/SHA1"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/SHA1"] = a;
	var b = require("NGCore/Shared/Lib/sha1");
	a.SHA1 = {
		b64_hmac_sha1: b.b64_hmac_sha1,
		hex_sha1: b.hex_sha1,
		b64_sha1: b.b64_sha1
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/UpdateEmitter"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Core/UpdateEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/UpdateEmitter"] = c;
	var a = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var b = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var e = require("NGCore/Client/Core/Proc").Proc;
	var d = require("NGCore/Client/Core/Time").Time;
	c.UpdateEmitter = a.singleton({
		classname: "UpdateEmitter",
		initialize: function() {
			Core.ObjectRegistry.register(this);
			this.__clubObject = new NgEngineEntity();
			this.__clubObject.mIsUpdatable = true;
			this.__clubObject.onUpdate = this._emitTime.bind(this);
			this.__clubObject.register();
			this._createSendGen(this.__objectRegistryId)
		},
		_emitTime: function() {
			this.emit(d.getFrameDelta())
		},
		setTickRate: function(f) {
			this._setTickRateSendGen(f)
		},
		$_commandRecvGen: (function() {
			var f = (function(k) {
				var h = e.parseInt(k.shift(), 10);
				if (h > 0) {
					var j = e.parseInt(k.shift(), 10);
					var g = b.idToObject(j);
					if (!g) {
						NgLogE("Object instance could not be found for command " + k + ". It may have been destroyed this frame.");
						return
					}
					switch (h) {
						default:
							NgLogE("Unknown instance method id " + h + " in UpdateEmitter._commandRecvGen from command: " + k);
							return
					}
				} else {
					switch (h) {
						default:
							NgLogE("Unknown static method id " + h + " in UpdateEmitter._commandRecvGen from command: " + k);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[304] = f;
			return f
		})(),
		$_createSendGen: function(f) {
			e.appendToCommandString(":304,-1," + f)
		},
		_setTickRateSendGen: function(f) {
			e.appendToCommandString(":304,2," + this.__objectRegistryId + "," + f)
		},
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/Proc"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Core/Proc"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/Proc"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	var c = require("NGCore/Client/Core/Base64").Base64;
	b.Proc = a.singleton({
		classname: "Proc",
		initialize: function() {
			this._commandString = ""
		},
		appendToCommandString: function(d) {
			this._commandString += d
		},
		getCommandString: function() {
			return this._commandString
		},
		clearCommandString: function() {
			this._commandString = ""
		},
		parseBool: function(d) {
			return d == 1 ? true : false
		},
		parseInt: function(d) {
			return parseInt(d, 10)
		},
		parseFloat: function(d) {
			return parseFloat(d)
		},
		parseString: function(d) {
			return c.decode(d)
		},
		parseJSONString: function(d) {
			return JSON.parse(c.decode(d))
		},
		setPrivileged: function() {
			this._privileged = true
		},
		isPrivileged: function() {
			return this._privileged ? true : false
		},
		_classRecvGen: function(f) {
			var e = parseInt(f.shift(), 10);
			var d = PROC_DISPATCH_TABLE[e];
			if (d) {
				d(f)
			} else {
				NgLogE("Unknown class id " + e + " in _classRecvGen")
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/_LocalGameList"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Core/_LocalGameList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/_LocalGameList"] = c;
	var a = require("NGCore/Client/Core/Class").Class;
	var j = require("NGCore/Client/Core/Proc").Proc;
	var b = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var g = require("NGCore/Client/Core/Capabilities").Capabilities;
	var e = require("NGCore/Client/Core/Time").Time;
	var f = require("NGCore/Client/Core/toMD5").toMD5;
	var h = require("NGCore/Client/Network/Util").Util;
	var d = require("NGCore/Client/Core/Base64").Base64;
	c._LocalGameList = a.singleton({
		classname: "_LocalGameList",
		initialize: function() {
			b.register(this);
			this._createSendGen(this.__objectRegistryId);
			this.mGameList = [];
			var k = require("NGCore/Client/Storage").Storage;
			this.mFile = k.FileSystem;
			this.mGameStore = k.KeyValueCache.global("Core.GameList");
			this.mLoadingGames = {};
			this.mActiveGameKey = "activeGames";
			this.mRequiredAvailableSpace = 0;
			this.mSpaceAvailable = 0;
			this.mSpaceFreeCallbacks = [];
			this._firstBootGameLaunch = true;
			this._getRepoSpaceSendGen();
			this._setStage(this.ProgressStage.BootFirst);
			this._reloadGameList();
			this._allowDeterminateProgress = true
		},
		ProgressStage: {
			BootFirst: {},
			CheckConfiguration: {},
			CheckManifest: {},
			DownloadFiles: {},
			Launching: {}
		},
		_setStage: function(k) {
			this._progressStage = k;
			switch (k) {
				case this.ProgressStage.BootFirst:
					console.log("setStage BootFirst");
					this._progressMin = -1;
					this._progressRange = 0;
					break;
				case this.ProgressStage.CheckConfiguration:
					console.log("setStage CheckConfiguration");
					this._progressMin = -1;
					this._progressRange = 0;
					break;
				case this.ProgressStage.CheckManifest:
					console.log("setStage CheckManifest");
					this._progressMin = -1;
					this._progressRange = 0;
					break;
				case this.ProgressStage.DownloadFiles:
					console.log("setStage DownloadFiles");
					this._progressMin = 0.1;
					this._progressRange = 0.9;
					break;
				case this.ProgressStage.Launching:
					console.log("setStage Launching");
					this._progressMin = -1;
					this._progressRange = 0;
					break;
				default:
					console.log("setStage ERROR");
					this._progressMin = -1;
					this._progressRange = 0
			}
			console.log("min:", this._progressMin, "range:", this._progressRange);
			this._setProgress(0)
		},
		_nextStage: function() {
			switch (this._progressStage) {
				case this.ProgressStage.BootFirst:
					this._setStage(this.ProgressStage.CheckConfiguration);
					break;
				case this.ProgressStage.CheckConfiguration:
					this._setStage(this.ProgressStage.CheckManifest);
					break;
				case this.ProgressStage.CheckManifest:
					this._setStage(this.ProgressStage.DownloadFiles);
					break;
				case this.ProgressStage.DownloadFiles:
					this._setStage(this.ProgressStage.Launching);
					break
			}
		},
		$_commandRecvGen: (function() {
			var k = (function(o) {
				var m = j.parseInt(o.shift(), 10);
				if (m > 0) {
					var n = j.parseInt(o.shift(), 10);
					var l = b.idToObject(n);
					if (!l) {
						NgLogE("Object instance could not be found for command " + o + ". It may have been destroyed this frame.");
						return
					}
					switch (m) {
						case 2:
							l._updateGameRecv(o);
							break;
						case 5:
							l._repoSpaceRecv(o);
							break;
						case 6:
							l._deleteGameRecv(o);
							break;
						case 8:
							l._pauseUpdateRecv(o);
							break;
						case 9:
							l._resumeUpdateRecv(o);
							break;
						case 10:
							l._cancelUpdateRecv(o);
							break;
						case 12:
							l._allowBGUpdatesRecv(o);
							break;
						case 13:
							l._runGameRecv(o);
							break;
						case 14:
							l._finishGameRecv(o);
							break;
						case 17:
							l._exceptionForwardedRecv(o);
							break;
						default:
							NgLogE("Unknown instance method id " + m + " in _LocalGameList._commandRecvGen from command: " + o);
							return
					}
				} else {
					switch (m) {
						default:
							NgLogE("Unknown static method id " + m + " in _LocalGameList._commandRecvGen from command: " + o);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[303] = k;
			return k
		})(),
		_updateGameRecvGen: function(k, l) {
			if (k.length != 2) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.updateGame from command: " + k);
				return false
			}
			l.url = j.parseString(k[0]);
			if (l.url === undefined) {
				NgLogE("Could not parse url in _LocalGameList.updateGame from command: " + k);
				return false
			}
			l.id = j.parseInt(k[1]);
			if (l.id === undefined) {
				NgLogE("Could not parse id in _LocalGameList.updateGame from command: " + k);
				return false
			}
			return true
		},
		_repoSpaceRecvGen: function(k, l) {
			if (k.length != 1) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.repoSpace from command: " + k);
				return false
			}
			l.space = j.parseInt(k[0]);
			if (l.space === undefined) {
				NgLogE("Could not parse space in _LocalGameList.repoSpace from command: " + k);
				return false
			}
			return true
		},
		_deleteGameRecvGen: function(k, l) {
			if (k.length != 2) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.deleteGame from command: " + k);
				return false
			}
			l.mdFive = j.parseString(k[0]);
			if (l.mdFive === undefined) {
				NgLogE("Could not parse mdFive in _LocalGameList.deleteGame from command: " + k);
				return false
			}
			l.game = j.parseString(k[1]);
			if (l.game === undefined) {
				NgLogE("Could not parse game in _LocalGameList.deleteGame from command: " + k);
				return false
			}
			return true
		},
		_pauseUpdateRecvGen: function(k, l) {
			if (k.length != 1) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.pauseUpdate from command: " + k);
				return false
			}
			l.url = j.parseString(k[0]);
			if (l.url === undefined) {
				NgLogE("Could not parse url in _LocalGameList.pauseUpdate from command: " + k);
				return false
			}
			return true
		},
		_resumeUpdateRecvGen: function(k, l) {
			if (k.length != 1) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.resumeUpdate from command: " + k);
				return false
			}
			l.url = j.parseString(k[0]);
			if (l.url === undefined) {
				NgLogE("Could not parse url in _LocalGameList.resumeUpdate from command: " + k);
				return false
			}
			return true
		},
		_cancelUpdateRecvGen: function(k, l) {
			if (k.length != 1) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.cancelUpdate from command: " + k);
				return false
			}
			l.url = j.parseString(k[0]);
			if (l.url === undefined) {
				NgLogE("Could not parse url in _LocalGameList.cancelUpdate from command: " + k);
				return false
			}
			return true
		},
		_allowBGUpdatesRecvGen: function(k, l) {
			if (k.length != 1) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.allowBGUpdates from command: " + k);
				return false
			}
			l.allow = j.parseBool(k[0]);
			if (l.allow === undefined) {
				NgLogE("Could not parse allow in _LocalGameList.allowBGUpdates from command: " + k);
				return false
			}
			return true
		},
		_runGameRecvGen: function(k, l) {
			if (k.length != 1) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.runGame from command: " + k);
				return false
			}
			l.url = j.parseString(k[0]);
			if (l.url === undefined) {
				NgLogE("Could not parse url in _LocalGameList.runGame from command: " + k);
				return false
			}
			return true
		},
		_finishGameRecvGen: function(k, l) {
			if (k.length != 0) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.finishGame from command: " + k);
				return false
			}
			return true
		},
		_exceptionForwardedRecvGen: function(k, l) {
			if (k.length != 1) {
				NgLogE("Could not parse due to wrong argument count in _LocalGameList.exceptionForwarded from command: " + k);
				return false
			}
			l.exceptionString = j.parseString(k[0]);
			if (l.exceptionString === undefined) {
				NgLogE("Could not parse exceptionString in _LocalGameList.exceptionForwarded from command: " + k);
				return false
			}
			return true
		},
		$_createSendGen: function(k) {
			j.appendToCommandString(":303,-1," + k)
		},
		_updateDoneSendGen: function(l, k) {
			j.appendToCommandString(":303,3," + this.__objectRegistryId + "," + l + "," + d.encode(k))
		},
		_getRepoSpaceSendGen: function() {
			j.appendToCommandString(":303,4," + this.__objectRegistryId)
		},
		_setUpdateProgressSendGen: function(k) {
			j.appendToCommandString(":303,7," + this.__objectRegistryId + "," + k)
		},
		_updateProgressSendGen: function(l, n, m, k) {
			j.appendToCommandString(":303,11," + this.__objectRegistryId + "," + d.encode(l) + "," + n + "," + m + "," + (k ? 1 : 0))
		},
		_setProgressTextSendGen: function(k) {
			NgLogD("@@@ _LocalGameList _setProgressTextSendGen " + k);
			j.appendToCommandString(":303,15," + this.__objectRegistryId + "," + d.encode(k))
		},
		_setSplashVisibleSendGen: function(k) {
			j.appendToCommandString(":303,16," + this.__objectRegistryId + "," + (k ? 1 : 0))
		},
		_updateGameRecv: function(k) {
			this._getRepoSpaceSendGen();
			var l = {};
			this._updateGameRecvGen(k, l);
			if (l.url in this.mLoadingGames) {
				this.mLoadingGames[l.url].id = l.id;
				this.mLoadingGames[l.url].dlman.resume()
			} else {
				this.updateGame(l.url, l.id, (function(m, o, n) {
					l.id = this.mLoadingGames[m].id;
					this._updateDoneSendGen(l.id, n)
				}).bind(this, l.url))
			}
		},
		mobageRunGame: function(k) {
			this._gameRunner = k
		},
		_runGameRecv: function(l) {
			var m = {};
			this._runGameRecvGen(l, m);
			if (this._gameRunner) {
				console.log("_LGL running gameRunner " + m.url);
				this._gameRunner(m.url)
			} else {
				console.log("_LGL running game " + m.url);
				var k = require("NGCore/Client/Core/_int_LGL")._int_LGL;
				k.launch(m.url, k.ProcID.Game)
			}
		},
		setFinishGameHandler: function(k) {
			this._finishGameHandler = k
		},
		_finishGameRecv: function() {
			if (this._finishGameHandler) {
				this._finishGameHandler()
			} else {
				console.log("_LocalGameList: finishGameHandler is not set")
			}
		},
		_repoSpaceRecv: function(l) {
			var m = {};
			this._repoSpaceRecvGen(l, m);
			this.mSpaceAvailable = m.space;
			console.log("SD card space available(b): " + this.mSpaceAvailable);
			var k = this.mSpaceFreeCallbacks.length;
			while (k--) {
				(this.mSpaceFreeCallbacks.pop())()
			}
		},
		_deleteGameRecv: function(o) {
			var n = ["http://10.15.", "http://gamehub.mobage.com/app/1.0s/gamehub", "url of allowed game"];
			var p = {};
			this._deleteGameRecvGen(o, p);
			var m;
			for (m in n) {
				var l = p.game.match(n[m]);
				if (l && !l.index) {
					NgLogD("Deleting " + p.mdFive);
					this.deleteGameFiles(p.mdFive);
					var k = (function() {
						NgLogD("Finished deleting game from " + this.mActiveGameKey + " for " + p.mdFive)
					}).bind(this);
					this._deleteGameFromStorage(p.mdFive, k);
					return
				} else {}
			}
			NgLogE("_LocalGameList unauthorized call to deleteGame from " + p.game + "!")
		},
		_deleteGameFromStorage: function(m, k) {
			var l = this;
			this.mGameStore.getItem(this.mActiveGameKey, function(o, s) {
				var r = JSON.parse(s);
				var p = false;
				var q;
				var n = [];
				for (q = 0; q < r.length; ++q) {
					if (r[q].name == m) {
						p = true
					} else {
						n.push(r[q])
					}
				}
				if (p) {
					NgLogD("_LocalGameList found and removed " + m);
					l.mGameStore.setItem(l.mActiveGameKey, JSON.stringify(n), k)
				} else {
					NgLogD("_LocalGameList failed to find and remove " + m);
					k("Could not remove item: " + o)
				}
			}, true)
		},
		getGameConfig: function(l, k, o) {
			if (typeof k == "function") {
				o = k;
				k = false
			}
			var n;
			if (k) {
				n = l
			} else {
				var p = require("NGCore/Client/Network/Util").Util;
				var m = p.NormalizeUrl(l);
				n = f(m)
			}
			NgLogD("@@@ _LocalGameList.getGameConfig readFile +");
			this.mFile.readFile(n + "/" + g._getConfigFile(), function(s, r) {
				NgLogD("@@@ _LocalGameList.getGameConfig readFile -");
				var q = {};
				if (s || !r) {
					console.log("Could not get config from %s! err: %s", l, s)
				} else {
					q = JSON.parse(r)
				}
				o(q)
			})
		},
		getRepoSpace: function() {
			return this.mSpaceAvailable
		},
		getConfig: function(q, l, p, o) {
			var m = require("NGCore/Client/Network/XHR").XHR;
			var n = require("NGCore/Client/Network/Util").Util;
			var k = 0;
			n.OperationWithRetries(function(r) {
				var s = new m();
				s.onreadystatechange = function() {
					if (s.readyState == 4) {
						k = s.status;
						if (k == 200) {
							p(s.responseText)
						} else {
							if (k == 404) {
								console.log("no configuration file found at %s, using root server", q + l);
								p("{}")
							} else {
								r()
							}
						}
					}
				};
				s.open("GET", q + l + n.getCacheBustingString(), true);
				s.send()
			}, function() {
				p(null, true, k)
			}, o)
		},
		updateGame: function(t, m, n, r, v) {
			var y = new RegExp(".*" + g.getBootGame());
			var s = t.match(y);
			if (s) {
				this._firstBootGameLaunch = false
			}
			var w = require("NGCore/Client/Network/Util").Util;
			t = w.NormalizeUrl(t);
			var l = w.GetMD5HashDirectoryFromUrl(t);
			this.mLoadingGames[t] = {
				id: m
			};
			NgLogI("_LocalGameList.updateGame(): url = " + t + " name = " + l);
			var p = {
				Android: "android",
				"iPhone OS": "ios",
				flash: ""
			};
			var q = require("NGCore/Client/Core/Capabilities").Capabilities;
			var x = "/" + p[q.getPlatformOS()];
			this._setStage(this.ProgressStage.CheckConfiguration);
			var u = "";
			var o = l + "/" + q._getConfigFile();
			this.mFile.readFile(o, function(z, A) {
				if (A) {
					var B = JSON.parse(A);
					u = B.contentUrl
				}
			});
			var k = t + x + "/" + q._getConfigFile();
			NgLogI("_LocalGameList.updateGame(): downloading configuration.json, url = " + k);
			this.getConfig(t + x, "/" + q._getConfigFile(), (function(B, A, z) {
				if (A) {
					NgLogI("_LocalGameList.updateGame(): ERROR downloading configuration.json, url = " + k);
					this._setStage(-1);
					n(0, A);
					delete this.mLoadingGames[t]
				} else {
					var C = JSON.parse(B);
					if (!C.contentUrl) {
						C.contentUrl = t + x
					} else {
						if (C.contentUrl == u) {
							NgLogI("_LocalGameList.updateGame(): Game is up to date! url = " + k);
							this._setStage(this.ProgressStage.Launching);
							this.mFile.writeFile(o, JSON.stringify(C), function(D) {
								console.log(D)
							});
							n(0);
							delete this.mLoadingGames[t];
							return
						}
					}
					NgLogI("_LocalGameList.updateGame(): Downloading game! url = " + k);
					this._setStage(this.ProgressStage.CheckManifest);
					this._callDownloadManifest(C, t, l, r, v, (function(D, E) {
						NgLogI("_LocalGameList.updateGame(): Finished Downloading game! url = " + k);
						if (!E) {
							var F = this;
							this._reloadGameList({
								name: l,
								url: t
							}, function() {
								if (n && (typeof n == "function")) {
									n(D, E);
									delete F.mLoadingGames[t]
								}
							})
						} else {
							n(D, E);
							delete this.mLoadingGames[t]
						}
					}).bind(this))
				}
			}).bind(this), r)
		},
		_allowBGUpdatesRecv: function(k) {
			var l = {};
			this._allowBGUpdatesRecvGen(k, l);
			this._pauseOrResumeAll(l.allow)
		},
		_pauseOrResumeAll: function(k) {
			for (i in this.mLoadingGames) {
				if (k) {
					console.log("Resuming download of " + i);
					this.resumeUpdate(i)
				} else {
					console.log("Pausing download of " + i);
					this.pauseUpdate(i)
				}
			}
		},
		pauseUpdate: function(k) {
			if (this.mLoadingGames[k]) {
				if (this.mLoadingGames[k].dlman) {
					this.mLoadingGames[k].dlman.pause();
					this.mLoadingGames[k].userPause = true
				}
			}
		},
		_pauseUpdateRecv: function(k) {
			var l = {};
			this._pauseUpdateRecvGen(k, l);
			this.pauseUpdate(l.url)
		},
		resumeUpdate: function(k) {
			if (this.mLoadingGames[k]) {
				if (this.mLoadingGames[k].dlman) {
					this.mLoadingGames[k].dlman.resume();
					this.mLoadingGames[k].userPause = false
				}
			}
		},
		_resumeUpdateRecv: function(k) {
			var l = {};
			this._resumeUpdateRecvGen(k, l);
			this.resumeUpdate(l.url)
		},
		cancelUpdate: function(l) {
			if (this.mLoadingGames[l]) {
				if (this.mLoadingGames[l].dlman) {
					this.mLoadingGames[l].dlman.abort()
				}
				delete this.mLoadingGames[l];
				var k = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter;
				this.identification_key = "manifest_download";
				k.cancelEngineKeepAlive(this)
			}
		},
		_cancelUpdateRecv: function(k) {
			var l = {};
			this._cancelUpdateRecvGen(k, l);
			this.cancelUpdate(l.url)
		},
		_setProgress: function(k) {
			if (k > 1) {
				k = 1
			}
			if (k < 0) {
				k = -1
			}
			this._progress = k;
			if (k >= 0 && this._allowDeterminateProgress) {
				this._setUpdateProgressSendGen(this._progressMin + k * this._progressRange)
			} else {
				this._setUpdateProgressSendGen(-1)
			}
		},
		_setAllowDeterminateProgress: function(k) {
			this._allowDeterminateProgress = k;
			this._setProgress(this._progress)
		},
		listenToProgress: function(k) {
			this._privListener = k
		},
		_updateProgress: function(k, n, m, l) {
			if (this._privListener) {
				this._privListener(k, n, m, l)
			}
			if (this.mLoadingGames[k] && this.mLoadingGames[k].id >= 0) {
				this._updateProgressSendGen(k, n, m, l)
			}
		},
		_callDownloadManifest: function(n, r, l, p, s, m) {
			var o = n.contentUrl;
			var q = 0;
			var u = this;
			var v = require("NGCore/Client/Network/DownloadManifest").DownloadManifest;
			var t = require("NGCore/Client/Core/_int_LGL")._int_LGL.getManifestName(n);
			(function k() {
				var x = new v();
				x.mLocalGameList = u;
				var y = true;
				var w = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter;
				this.identification_key = "manifest_download";
				NgLogD("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Manifest Download Request Keep Engine Alive");
				w.requestEngineKeepAlive(this);
				n.omitJsUpdate = n.omitJsUpdate && (g.getPlatformOS() == "iPhone OS");
				x._setConfig(n);
				x.start(o, l, {
					"webgame.ngmanifest": t
				}, function(z, A) {
					if (y) {
						y = false;
						u._setStage(z < A ? u.ProgressStage.DownloadFiles : u.ProgressStage.Launching);
						q = A
					} else {
						u._setProgress(z / A)
					}
					u._updateProgress(r, z, A)
				}, function(A, B, z) {
					if (s) {
						if (m) {
							m(q, A)
						}
					} else {
						if (A) {
							NgLogE("Error: " + A);
							u._updateProgress(r, 0, 0, A);
							m(0, A)
						} else {
							if (m) {
								m(q)
							}
						}
					}
					this.identification_key = "manifest_download";
					w.cancelEngineKeepAlive(this)
				}, false, p);
				u.mLoadingGames[r].dlman = x
			})()
		},
		freeSpace: function(l, k) {
			this.mRequiredAvailableSpace = l;
			this.mSpaceFreeCallbacks.push((function() {
				if (this.mRequiredAvailableSpace > this.mSpaceAvailable) {
					if (this._privListener) {
						this._privListener("", 0, 0, "SD card is full")
					} else {
						console.log("Warning!! Mobage is not handling SD card full error!");
						var m = function() {
							if (this.mRequiredAvailableSpace > this.mSpaceAvailable) {
								this.pruneGames(1);
								this.mSpaceFreeCallbacks.push(m)
							} else {
								k()
							}
						};
						m()
					}
				} else {
					k()
				}
			}).bind(this));
			this._getRepoSpaceSendGen()
		},
		pruneGames: function(m) {
			var k = this;
			var l = function(n, o) {
				return o.lastRun - n.lastRun
			};
			this.mGameStore.getItem(this.mActiveGameKey, function(o, q) {
				var p = JSON.parse(q);
				p.sort(l);
				while (m-- && (p.length - 1)) {
					var n = p.pop();
					if (!(n.name in k.mLoadingGames)) {
						k.deleteGameFiles(n.name)
					} else {
						p.push(n)
					}
				}
				k.mGameStore.setItem(k.mActiveGameKey, JSON.stringify(p))
			}, true)
		},
		deleteGame: function(k, m) {
			var o = require("NGCore/Client/Network/Util").Util;
			var l = o.NormalizeUrl(k);
			var n = f(l);
			this.deleteGameFiles(n);
			this._deleteGameFromStorage(n, m)
		},
		deleteGameKeyValue: function(l) {
			var k = require("NGCore/Client/Storage").KeyValueCache;
			k.global(l).clear()
		},
		deleteGameFiles: function(l) {
			var k = this;
			k.mFile.deleteFile(l, function(m) {
				if (m == "") {
					NgLogI("Deleted")
				} else {
					NgLogD("Could not delete game")
				}
				k._getRepoSpaceSendGen()
			})
		},
		getGameList: function() {
			return this.mGameList
		},
		clearWatch: function() {
			var k = require("NGCore/Client/Storage/FileSystem").FileSystem;
			k.deleteFile(".watch")
		},
		_reloadGameList: function(l, k) {
			this.mGameStore.getItem(this.mActiveGameKey, (function(m, q) {
				var p;
				if (q) {
					p = JSON.parse(q)
				} else {
					p = []
				}
				if (l) {
					var o = true;
					for (var n in p) {
						if (p[n].name == l.name) {
							o = false;
							l.lastRun = p[n].lastRun;
							p[n] = l;
							break
						}
					}
					if (o) {
						p.push(l)
					}
					this.mGameStore.setItem(this.mActiveGameKey, JSON.stringify(p))
				}
				this.mGameList = p;
				if (typeof k == "function") {
					k()
				}
			}).bind(this), true)
		},
		_getRunningGame: function(l) {
			var k = function(m, n) {
				return n.lastRun - m.lastRun
			};
			this._reloadGameList(false, (function(n) {
				var p = this.mGameList;
				p.sort(k);
				var q = null;
				var m = p.length;
				for (var o = 0; o < m; ++o) {
					if (p[o].lastRun) {
						q = p[o];
						break
					}
				}
				if (q && q.url) {
					n(q.url)
				}
			}).bind(this, l))
		},
		_pausingGame: function() {
			this._pauseOrResumeAll(true)
		},
		_resumingGame: function() {
			this._getRunningGame((function(k) {
				this.getGameConfig(k, (function(l) {
					if (l.noBackgroundUpdates) {
						this._pauseOrResumeAll(false)
					}
				}).bind(this))
			}).bind(this))
		},
		setSplashVisible: function(k) {
			this._setSplashVisibleSendGen(k)
		},
		setProgressText: function(k) {
			this._progressText = k;
			this._setProgressTextSendGen(k)
		},
		updateAvailable: function(l, k, m) {
			var n = require("NGCore/Client/Core/_int_LGL")._int_LGL;
			n.updateAvailable(l, k, m)
		},
		setExceptionHandler: function(k) {
			this._exceptionHandler = k
		},
		_exceptionForwardedRecv: function(l) {
			var n = {};
			this._exceptionForwardedRecvGen(l, n);
			try {
				var k = JSON.parse(n.exceptionString)
			} catch (m) {
				console.log("ERROR: Unparseable exception: " + n.exceptionString)
			}
			if (this._exceptionHandler) {
				this._exceptionHandler(k)
			} else {
				NgLogException(k)
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/NativeAppLaunch"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Core/NativeAppLaunch"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/NativeAppLaunch"] = a;
	var b;
	a.NativeAppLaunch = b;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/NgPipe"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Shared/NgPipe"] || {};
	$MODULE_REGISTRY["NGCore/Shared/NgPipe"] = c;
	var b = require("NGCore/Shared/Class").Class;
	var f = require("NGCore/Shared/NgPipesRemote").NgPipesRemote;
	var e = require("NGCore/Shared/Lib/sha1").hex_sha1;
	var d = Object.prototype.hasOwnProperty;
	var a = require("NGCore/Client/Core/Capabilities");
	NgPipe = b.subclass({
		classname: "NgPipe",
		initialize: function(l) {
			l = l || {};
			var h = a.Capabilities;
			this._socAnalytics = require("NGCore/Client/Social").Social.Common.Analytics;
			this._meta = l.meta || {};
			this._queue = null;
			this._isSendQueued = false;
			this._sendDelay = l.sendDelay || 1000;
			this.UTCoffset = l.offset || 0;
			this.timeQueue = [];
			this._meta = l.meta || {};
			this._seqStart = l.seqStart || new Date().getTime();
			this._playerState = l.playerState || null;
			this._seqNumber = l.seqNumber || 0;
			this._allowedLargeValue = {
				msg: 1024 * 5,
				err: 1024 * 5,
				sid: 64,
				udid: 64
			};
			this._waitForUTC = h.meetsBinaryVersion && h.meetsBinaryVersion("1.3.5.8");
			this._sendToRemote = true;
			this._globalKey = "__PipeKey";
			var k = this;
			var g = function(m, o, n) {
				var q = [];
				if (!m) {
					try {
						q = JSON.parse(o)
					} catch (p) {
						q = []
					}
				}
				if (k._queue) {
					q = k._queue.concat(q)
				}
				k._setQueue(q);
				if (k._queue.length > 0) {
					k._drainQueue()
				}
			};
			this._locListener = null;
			this._location = null;
			Storage.KeyValueCache.global(this._globalKey).getItem(this._globalKey, g);
			var j = [].concat(l.queue || []);
			this._queue = j;
			this._sessionEnded = false;
			this._capAlphaNumStringKeys = ["afam", "asku", "srcty", "evcl", "evid", "pltfmsku", "carr", "srv"];
			this.sessionStartEvent();
			this._tagQa();
			this._hookLifetime();
			this._hookGeo();
			return true
		},
		close: function() {
			this._drainQueue();
			return true
		},
		enable: function() {
			this._sendToRemote = true
		},
		disable: function() {
			this._sendToRemote = false
		},
		setRemoteUrl: function(g) {
			f.setUrl(g)
		},
		playerEvent: function(g, h, l, k) {
			var j;
			h || (h = "PLST");
			j = {
				change: l,
				srcty: "GC",
				evid: g,
				evcl: h,
				plst: this._getPlayerStateDiff(k || this._playerState)
			};
			this._queueMessage(j);
			this._setCurrentPlayerState(k);
			return j
		},
		gameEvent: function(g, k, j) {
			var h;
			h = {
				evid: g,
				evpl: k,
				srcty: "GC",
				evcl: "GAME"
			};
			if (j) {
				h.plst = this._getPlayerStateDiff(j || this._playerState)
			}
			this._queueMessage(h);
			return h
		},
		gameOpsEvent: function(g, j) {
			var h;
			h = {
				evid: g,
				evpl: j,
				srcty: "GC",
				evcl: "GAMEOPS"
			};
			this._queueMessage(h);
			return h
		},
		revenueEvent: function(g, j) {
			var h;
			h = {
				evcl: "REV",
				evid: g,
				srcty: "PC",
				evpl: j
			};
			this._queueMessage(h);
			return h
		},
		uiEvent: function(g, j) {
			var h;
			h = {
				evcl: "UI",
				srcty: "GC",
				evid: g,
				evpl: j
			};
			this._queueMessage(h);
			return h
		},
		funnelEvent: function(g, k, j) {
			var h;
			h = {
				evcl: "FUNNEL",
				srcty: "GC",
				evid: g,
				evpl: k
			};
			if (j) {
				h.plst = this._getPlayerStateDiff(j || this._playerState);
				this._setCurrentPlayerState(j)
			}
			this._queueMessage(h);
			return h
		},
		plusEvent: function(h, k, g) {
			var j;
			j = {
				evcl: "PLUS",
				srcty: "PC",
				evid: h,
				evpl: k
			};
			this._queueMessage(j, g);
			return j
		},
		plusUIEvent: function(g, j) {
			var h = {
				evcl: "PLUSUI",
				srcty: "PC",
				evid: g,
				evpl: j
			};
			this._queueMessage(h);
			return h
		},
		navigationEvent: function(j, h, g) {
			var k = {};
			k.fro = j;
			k.to = h;
			if (g) {
				k.btnid = g
			}
			return this.plusUIEvent("NAV", k)
		},
		_setUTC: function(j) {
			this.UTCoffset = j - new Date().getTime();
			this.UTCready = true;
			var h = this.timeQueue.length;
			while (h--) {
				var g = this.timeQueue[h];
				g.msg.evts = g.time + this.UTCoffset;
				this._queueMessage(g.msg)
			}
		},
		sessionEndEvent: function() {
			if (!this.UTCready) {
				this.UTCready = true;
				var j = this.timeQueue.length;
				while (j--) {
					var h = this.timeQueue[j];
					h.msg.evts = h.time;
					this._queueMessage(h.msg)
				}
			}
			if (!(this._sessionEnded)) {
				var k;
				var g = a.Capabilities;
				k = {
					evid: "SFN",
					evcl: "PLUS",
					srcty: "PC",
					hwty: g.getDeviceName(),
					hwrev: g.getPlatformHW(),
					osrev: "" + g.getPlatformOS() + " " + g.getPlatformOSVersion(),
					lang: g.getLanguage()
				};
				k = this._queueMessage(k);
				this._sessionEnded = true;
				return k
			}
			return null
		},
		sessionStartEvent: function() {
			var h;
			var g = a.Capabilities;
			h = {
				evid: "SST",
				evcl: "PLUS",
				srcty: "PC",
				hwty: g.getDeviceName(),
				hwrev: g.getPlatformHW(),
				osrev: "" + g.getPlatformOS() + " " + g.getPlatformOSVersion(),
				lang: g.getLanguage()
			};
			h = this._queueMessage(h);
			this._drainQueue();
			return h
		},
		socialEvent: function(h, g, k) {
			var j;
			j = {
				evcl: "SOCL",
				srcty: "GC",
				frid: g,
				evid: h,
				evpl: k
			};
			return this._queueMessage(j)
		},
		initPlayerState: function(g) {
			this._setCurrentPlayerState(g);
			return true
		},
		updatePlayerState: function(g) {
			this._setCurrentPlayerState(g);
			return true
		},
		reportAdShow: function(g) {
			return this.revenueEvent("ADSHOW", {
				adid: g
			})
		},
		reportAdClick: function(g) {
			return this.revenueEvent("ADCLCK", {
				adid: g
			})
		},
		reportPromoShow: function(g) {
			return this.revenueEvent("PROMOSHOW", {
				promoid: g
			})
		},
		reportPromoClick: function(g) {
			return this.revenueEvent("PROMOCLCK", {
				promoid: g
			})
		},
		reportPromoRedeem: function(g) {
			return this.revenueEvent("PROMOREDM", {
				promoid: g
			})
		},
		reportMoneyIAPIntent: function(m, r, k, h, q, j, p, g, o, n) {
			var l = {
				sku: m,
				itemamt: r,
				productid: h,
				dispmsg: g,
				dispname: q,
				mobabalance: j,
				amt: k,
				cur: o || "USD"
			};
			n ? l.dynamicdata = n : "";
			return this.revenueEvent("IAPINTENT", l)
		},
		reportMoneyIAPCancel: function(m, r, k, h, q, j, p, g, o, n) {
			var l = {
				sku: m,
				itemamt: r,
				productid: h,
				dispmsg: g,
				dispname: q,
				mobabalance: j,
				amt: k,
				cur: o || "USD"
			};
			n ? l.dynamicdata = n : "";
			return this.revenueEvent("IAPCANCEL", l)
		},
		reportMoneyIAPSuccess: function(n, s, l, g, j, r, k, q, h, p, o) {
			var m = {
				sku: n,
				itemamt: s,
				orderid: g,
				productid: j,
				dispmsg: h,
				dispname: r,
				mobabalance: k,
				amt: l,
				cur: p || "USD"
			};
			o ? m.dynamicdata = o : "";
			return this.revenueEvent("IAPSUCCESS", m)
		},
		reportMoneyIAPFail: function(n, s, l, g, j, r, k, q, h, p, o) {
			var m = {
				sku: n,
				itemamt: s,
				productid: j,
				dispmsg: h,
				dispname: r,
				mobabalance: k,
				amt: l,
				cur: p || "USD"
			};
			g ? m.orderid = g : "";
			o ? m.dynamicdata = o : "";
			return this.revenueEvent("IAPFAIL", m)
		},
		reportMoneyIAPShow: function() {
			return this.revenueEvent("IAPSHOW", {})
		},
		reportMobaIAPShow: function() {
			return this.revenueEvent("MOBAIAPSHOW", {})
		},
		reportMobaIAPIntent: function(m, j, h, p, k, o, g, n) {
			var l = {
				sku: m,
				mobaprice: j,
				productid: h,
				dispmsg: g,
				dispname: p,
				mobabalance: k
			};
			n ? l.dynamicdata = n : "";
			return this.revenueEvent("MOBAIAPINTENT", l)
		},
		reportMobaIAPCancel: function(m, j, h, p, k, o, g, n) {
			var l = {
				sku: m,
				mobaprice: j,
				productid: h,
				dispmsg: g,
				dispname: p,
				mobabalance: k
			};
			n ? l.dynamicdata = n : "";
			return this.revenueEvent("MOBAIAPCANCEL", l)
		},
		reportMobaIAPSuccess: function(n, k, g, j, q, l, p, h, o) {
			var m = {
				sku: n,
				mobaprice: k,
				orderid: g,
				productid: j,
				dispmsg: h,
				dispname: q,
				mobabalance: l
			};
			o ? m.dynamicdata = o : "";
			return this.revenueEvent("MOBAIAPSUCCESS", m)
		},
		reportMobaIAPFail: function(n, k, g, j, q, l, p, h, o) {
			var m = {
				sku: n,
				mobaprice: k,
				productid: j,
				dispmsg: h,
				dispname: q,
				mobabalance: l
			};
			g ? m.orderid = g : "";
			o ? m.dynamicdata = o : "";
			return this.revenueEvent("MOBAIAPFAIL", m)
		},
		reportFacebookScrape: function(h, j) {
			var k;
			var g = {};
			j ? g.dynamicdata = j : "";
			k = {
				evcl: "PLUS",
				srcty: "PC",
				extid: h,
				evid: "FBSCRAPE",
				evpl: g
			};
			this._queueMessage(k);
			return k
		},
		reportContactScrape: function(h) {
			var j;
			var g = {};
			h ? g.dynamicdata = h : "";
			j = {
				evcl: "PLUS",
				srcty: "PC",
				evid: "CONTACTSCRAPE",
				evpl: g
			};
			this._queueMessage(j);
			return j
		},
		reportWallPost: function(g, j) {
			var h;
			h = {
				evcl: "SOCL",
				srcty: "PC",
				frid: g,
				evid: "WALLPOST",
				evpl: j
			};
			this._queueMessage(h);
			return h
		},
		reportDownload: function(g, k, l) {
			var j = {};
			j.game = g;
			j.section = k;
			j.slot = l;
			var h;
			h = {
				evcl: "PLUS",
				srcty: "PC",
				evid: "DOWNLOAD",
				evpl: j
			};
			this._queueMessage(h);
			return h
		},
		addTag: function(g) {
			var j = {};
			j.tag = g;
			var h;
			h = {
				evcl: "PLUS",
				evid: "TAG",
				srcty: "PC",
				evpl: j
			};
			this._queueMessage(h);
			return h
		},
		getSeqNumber: function() {
			this._seqNumber += 1;
			return this._seqNumber
		},
		getQueueCount: function() {
			return this._queue.length
		},
		getSendDelay: function() {
			return this._sendDelay
		},
		setSendDelay: function(g) {
			return (this._sendDelay = g)
		},
		setMeta: function(g, h) {
			if (!h) {
				h = g;
				return (this._meta = h)
			} else {
				return (this._meta[g] = h)
			}
		},
		getMeta: function(g) {
			if (g) {
				return this._meta[g]
			} else {
				return this._meta
			}
		},
		_queueMessage: function(k, j) {
			if (!k) {
				return false
			}
			if (this._waitForUTC && !this.UTCready) {
				this.timeQueue.unshift({
					msg: k,
					time: new Date().getTime()
				});
				return true
			}
			var h = this;
			this._setUnsetMetaKeys();
			k.evts = k.evts || this._getUTCTime();
			k = this._mergeMeta(k);
			k = this._addSeqDetails(k);
			k = this._addGeo(k);
			k = this._addGameSku(k, j);
			k = this._addGameRel(k);
			k = this._addCarrier(k);
			k = this._addService(k);
			k = this._addPlatformVersion(k);
			k = this._addUserId(k);
			k = this._addUserName(k);
			k = this._normalizeValues(k);
			var g = this._getQueue();
			g.push(k);
			this._setQueue(g);
			if (!this._isSendQueued) {
				setTimeout(function() {
					h._isSendQueued = false;
					return h._drainQueue()
				}, h._sendDelay)
			}
			return k
		},
		_tagQa: function() {
			var g = require("NGCore/Client/Storage/FileSystem").FileSystem;
			var h = this;
			g.readFile("QA", function(j, k) {
				if (!j) {
					h.addTag("NGMOCOQA")
				}
			})
		},
		_hookGeo: function() {
			var l = require("NGCore/Client/Social").Social;
			if (l.US) {
				var k = require("NGCore/Client/Core/MessageListener").MessageListener;
				var j = require("NGCore/Client/Device").Device,
					h = this;
				var g = k.subclass({
					initialize: function() {
						j.LocationEmitter.addListener(this, this.onUpdate, false)
					},
					onUpdate: function(m) {
						h._location = m;
						j.LocationEmitter.removeListener(this);
						h._locListener = null
					}
				});
				this._locListener = new g()
			}
		},
		_hookLifetime: function() {
			var h = this;
			var k = require("NGCore/Client/Core/MessageListener").MessageListener;
			var j = require("NGCore/Client/Device").Device;
			var g = k.subclass({
				initialize: function() {
					j.LifecycleEmitter.addListener(this, this.onLifecycleUpdate)
				},
				onLifecycleUpdate: function(l) {
					switch (l) {
						case j.LifecycleEmitter.Event.Suspend:
						case j.LifecycleEmitter.Event.Terminate:
							h.sessionEndEvent();
							h._drainQueue();
							break
					}
				}
			});
			if (!this._listener) {
				this._listener = new g()
			}
		},
		_setSocialAnalytics: function(g) {
			this._socAnalytics = g
		},
		_setUnsetMetaKeys: function() {
			var g = a.Capabilities,
				l;
			if ((!this.getMeta("udid")) && (l = g.getUniqueId())) {
				this.setMeta("udid", l)
			}
			if (!this.getMeta("sid")) {
				var j = "" + e(this._seqStart + (this.getMeta("udid") || "UNKNOWN"));
				this.setMeta("sid", j)
			}
			if (!this.getMeta("pltfmsku")) {
				var h = /android/;
				var k = g.getPlatformOS();
				if (k) {
					k = k.toLowerCase();
					if (k.match(h)) {
						k = "android"
					} else {
						if ("flash" === k) {
							k = "flash"
						} else {
							k = "ios"
						}
					}
					this.setMeta("pltfmsku", k)
				}
			}
			if (!this.getMeta("apiver")) {
				this.setMeta("apiver", 5)
			}
			return true
		},
		_getPlayerStateDiff: function(m) {
			var j, g, l, h, k;
			l = {};
			if (!this._playerState) {
				this._setCurrentPlayerState(m)
			}
			for (h in m) {
				if (!d.call(m, h)) {
					continue
				}
				k = m[h];
				if (typeof k === "number") {
					g = (k - this._playerState[h]) || 0;
					if (g < 0) {
						j = "-"
					}
					if (g >= 0) {
						j = "+"
					}
					l[h] = "" + j + "," + Math.abs(g) + "," + (this._playerState[h])
				} else {
					if (typeof k === "string") {
						l[h] = k
					}
				}
			}
			return l
		},
		_setCurrentPlayerState: function(h) {
			var g, j;
			this._playerState = {};
			for (g in h) {
				if (!d.call(h, g)) {
					continue
				}
				j = h[g];
				this._playerState[g] = j
			}
			return true
		},
		_getUTCTime: function() {
			return new Date().getTime() + this.UTCoffset
		},
		_addGeo: function(h) {
			var g;
			if (this._location && (g = this._location.getPosition()) && !isNaN(g.getX()) && !isNaN(g.getY())) {
				h.geo = "" + g.getX() + "," + g.getY()
			}
			return h
		},
		_addCarrier: function(j) {
			var h = a.Capabilities;
			var g = h.getCarrier();
			if (g) {
				j.carr = g
			}
			return j
		},
		_addService: function(h) {
			var g = this._socAnalytics;
			h.srvc = g.getServiceId();
			return h
		},
		_addPlatformVersion: function(h) {
			var g = this._socAnalytics;
			h.pver = g.getPlatformVersion();
			return h
		},
		_addSeqDetails: function(g) {
			this._seqNum += 1;
			g.seq = this.getSeqNumber();
			g.seqdt = new Date().getTime() - this._seqStart;
			return g
		},
		_addUserId: function(j) {
			var g = this._socAnalytics;
			var h = g.getUserId();
			if (h) {
				j.uid = h
			}
			return j
		},
		_addUserName: function(j) {
			var h = this._socAnalytics;
			var g = h.getUsername();
			if (g) {
				j.plus = g
			}
			return j
		},
		_addGameSku: function(j, g) {
			var h = g || (Capabilities.getConfigs() || {})["appId"];
			if (h) {
				j.asku = h
			}
			return j
		},
		_addGameRel: function(h) {
			var g = Capabilities.getAppReleaseVersion();
			if (g) {
				h.arel = g
			}
			return h
		},
		_normalizeValues: function(j) {
			var g, h;
			for (g in j) {
				if (!d.call(j, g)) {
					continue
				}
				h = j[g];
				if (typeof h === "string") {
					h = this._normalizeString(g, h)
				} else {
					if (typeof h === "object") {
						h = this._normalizeValues(h)
					}
				}
				j[g] = h
			}
			return j
		},
		_normalizeString: function(g, h) {
			h = h.substring(0, this._allowedLargeValue[g] || 32);
			if (-1 !== this._capAlphaNumStringKeys.indexOf(g)) {
				h = h.toUpperCase().replace(/[^\w]+/g, "").replace("_", "")
			}
			return h
		},
		_mergeMeta: function(l) {
			var k, m, h, g, j;
			g = {};
			for (h in l) {
				if (!d.call(l, h)) {
					continue
				}
				j = l[h];
				g[h] = j
			}
			for (h in k = this._meta) {
				if (!d.call(k, h)) {
					continue
				}
				j = k[h];
				(m = g[h]) ? m: g[h] = j
			}
			return g
		},
		_drainQueue: function() {
			var g, h, j;
			j = this._getQueue();
			this._setQueue([]);
			h = this;
			if (!this._sendToRemote) {
				return true
			}
			g = function(l, k) {
				if (l === f.possibleStates.error) {
					h._queueMany(k);
					h._storeQueue();
					h._sendDelay = h._sendDelay * 2
				} else {
					if (l === f.possibleStates.finished) {
						h._sendDelay = 1000
					}
				}
				return true
			};
			f.clearQueue(j, g);
			j = null;
			return true
		},
		_exitingApp: function() {
			this.sessionEndEvent();
			this._drainQueue()
		},
		_queueMany: function(g) {
			var k, h, l, j = this;
			this._setQueue((this._getQueue() || []).concat(g));
			if (this._isSendQueued) {
				this._isSendQueued = true;
				setTimeout(function() {
					j._isSendQueued = false;
					return j._drainQueue()
				}, j._sendDelay)
			}
			return true
		},
		_setQueue: function(g) {
			this._queue = g;
			return true
		},
		_storeQueue: function() {
			Storage.KeyValueCache.global(this._globalKey).setItem(this._globalKey, JSON.stringify(this._queue))
		},
		_getQueue: function() {
			return this._queue
		}
	});
	c.NgPipe = NgPipe;
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/NgPipesRemote"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Shared/NgPipesRemote"] || {};
	$MODULE_REGISTRY["NGCore/Shared/NgPipesRemote"] = b;
	var c = require("NGCore/Client/Network").Network;
	var a = 0;
	NgPipesRemote = {
		listeners: [],
		debug: false,
		possibleStates: {
			unknown: {},
			finished: {},
			error: {}
		}
	};
	NgPipesRemote.addListener = function(d) {
		this.listeners.push(d);
		return true
	};
	NgPipesRemote.clearQueue = function(e, k) {
		if (!e) {
			return false
		}
		if (!this.getUrl()) {
			if (k) {
				k(NgPipesRemote.possibleStates.finished, [])
			}
			return false
		}
		var f = e.slice(0, e.length);
		var h, d, j;
		while (f && f.length > 0) {
			var g = f.slice(0, 10);
			f = f.slice(10);
			j = "";
			for (h = 0, d = g.length; h < d; h++) {
				j += JSON.stringify(g[h]);
				if (h + 1 < d) {
					j += "\r\n"
				}
			}
			if (j) {
				NgPipesRemote._makeRequest(j, g, k)
			}
		}
	};
	NgPipesRemote._makeRequest = function(h, j, k) {
		var g = new c.XHR(),
			f = this.getUrl();
		if (this.debug) {
			NgPipesRemote._debugOutput(h)
		}
		a++;
		var e = a;
		var d = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter;
		d.requestEngineKeepAlive(e);
		g.onreadystatechange = function() {
			var l = null;
			try {
				if (this.readyState === 4) {
					d.cancelEngineKeepAlive(e);
					l = NgPipesRemote._handleResponse(g.responseText)
				} else {
					l = NgPipesRemote.possibleStates.unknown
				}
			} catch (m) {
				l = NgPipesRemote.possibleStates.error;
				NgLogException(m)
			}
			if (k) {
				k(l, j)
			}
			NgPipesRemote._notifyListeners(l);
			return true
		};
		g.open("POST", f, true);
		g.setRequestHeader("X-Ngpipes-Api", "1.0");
		g.setRequestHeader("Content-Type", "application/json+batch");
		g.setRequestHeader("If-None-Match", "0");
		g.send(h);
		NgPipesRemote._notifyListeners("started");
		return true
	};
	NgPipesRemote.setUrl = function(d) {
		this.url = d
	};
	NgPipesRemote.getUrl = function() {
		if (this.url) {
			return this.url
		}
		var d = require("NGCore/Client/Core/Capabilities").Capabilities;
		var e = null;
		if (d) {
			e = (d.getConfigs() || {})["analyticsServer"] || null;
			if (e) {
				e = "https://" + e + "/pipes/r.2/bulk_record_stats";
				if (this.debug) {
					NgLogD("Pipes URL => " + e)
				}
			}
		}
		return e
	};
	NgPipesRemote._handleResponse = function(f) {
		var h, d;
		d = NgPipesRemote.possibleStates.unknown;
		if (f && f.length > 0) {
			try {
				h = JSON.parse(f)
			} catch (g) {
				h = null
			}
			if (h && (h.success !== null && h.success !== undefined) && h.success) {
				if (this.debug) {
					NgLogD("[NgPipesRemote] Got Success")
				}
				d = NgPipesRemote.possibleStates.finished
			} else {
				d = NgPipesRemote.possibleStates.error
			}
		} else {
			if (this.debug) {
				NgLogD("[NgPipesRemote] ERROR posting")
			}
			d = NgPipesRemote.possibleStates.error
		}
		return d
	};
	NgPipesRemote._debugOutput = function(j) {
		var g, d, e, h, f;
		f = j.split("\r\n");
		for (g = 0, d = f.length; g < d; g++) {
			h = f[g];
			NgLogD("[NgPipesRemote] Message sent: " + h)
		}
		return false
	};
	NgPipesRemote._notifyListeners = function(h) {
		var g, e, f, d;
		for (g = 0, e = (f = this.listeners).length; g < e; g++) {
			d = f[g];
			d(h)
		}
		return true
	};
	b.NgPipesRemote = NgPipesRemote;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Lib/sha1"] = function() {
	var v = $MODULE_REGISTRY["NGCore/Shared/Lib/sha1"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Lib/sha1"] = v;
	var p = 0;
	var u = "";
	var c = 8;

	function q(w, B) {
		var A = (w & 65535) + (B & 65535);
		var z = (w >> 16) + (B >> 16) + (A >> 16);
		return (z << 16) | (A & 65535)
	}

	function o(w, x) {
		return (w << x) | (w >>> (32 - x))
	}

	function s(x, w, z, y) {
		if (x < 20) {
			return (w & z) | ((~w) & y)
		}
		if (x < 40) {
			return w ^ z ^ y
		}
		if (x < 60) {
			return (w & z) | (w & y) | (z & y)
		}
		return w ^ z ^ y
	}

	function l(w) {
		return (w < 20) ? 1518500249 : (w < 40) ? 1859775393 : (w < 60) ? -1894007588 : -899497514
	}

	function e(L, F) {
		L[F >> 5] |= 128 << (24 - F % 32);
		L[((F + 64 >> 9) << 4) + 15] = F;
		var M = Array(80);
		var K = 1732584193;
		var J = -271733879;
		var I = -1732584194;
		var H = 271733878;
		var G = -1009589776;
		for (var C = 0; C < L.length; C += 16) {
			var E = K;
			var D = J;
			var B = I;
			var A = H;
			var y = G;
			for (var z = 0; z < 80; z++) {
				if (z < 16) {
					M[z] = L[C + z]
				} else {
					M[z] = o(M[z - 3] ^ M[z - 8] ^ M[z - 14] ^ M[z - 16], 1)
				}
				var N = q(q(o(K, 5), s(z, J, I, H)), q(q(G, M[z]), l(z)));
				G = H;
				H = I;
				I = o(J, 30);
				J = K;
				K = N
			}
			K = q(K, E);
			J = q(J, D);
			I = q(I, B);
			H = q(H, A);
			G = q(G, y)
		}
		return Array(K, J, I, H, G)
	}

	function t(z) {
		var y = Array();
		var w = (1 << c) - 1;
		for (var x = 0; x < z.length * c; x += c) {
			y[x >> 5] |= (z.charCodeAt(x / c) & w) << (32 - c - x % 32)
		}
		return y
	}

	function g(y, B) {
		var A = t(y);
		if (A.length > 16) {
			A = e(A, y.length * c)
		}
		var w = Array(16),
			z = Array(16);
		for (var x = 0; x < 16; x++) {
			w[x] = A[x] ^ 909522486;
			z[x] = A[x] ^ 1549556828
		}
		var C = e(w.concat(t(B)), 512 + B.length * c);
		return e(z.concat(C), 512 + 160)
	}

	function r(y) {
		var z = "";
		var w = (1 << c) - 1;
		for (var x = 0; x < y.length * 32; x += c) {
			z += String.fromCharCode((y[x >> 5] >>> (32 - c - x % 32)) & w)
		}
		return z
	}

	function j(y) {
		var x = p ? "0123456789ABCDEF" : "0123456789abcdef";
		var z = "";
		for (var w = 0; w < y.length * 4; w++) {
			z += x.charAt((y[w >> 2] >> ((3 - w % 4) * 8 + 4)) & 15) + x.charAt((y[w >> 2] >> ((3 - w % 4) * 8)) & 15)
		}
		return z
	}

	function n(z) {
		var y = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
		var B = "";
		for (var x = 0; x < z.length * 4; x += 3) {
			var A = (((z[x >> 2] >> 8 * (3 - x % 4)) & 255) << 16) | (((z[x + 1 >> 2] >> 8 * (3 - (x + 1) % 4)) & 255) << 8) | ((z[x + 2 >> 2] >> 8 * (3 - (x + 2) % 4)) & 255);
			for (var w = 0; w < 4; w++) {
				if (x * 8 + w * 6 > z.length * 32) {
					B += u
				} else {
					B += y.charAt((A >> 6 * (3 - w)) & 63)
				}
			}
		}
		return B
	}

	function k(w) {
		return j(e(t(w), w.length * c))
	}

	function h(w) {
		return n(e(t(w), w.length * c))
	}

	function d(w) {
		return r(e(t(w), w.length * c))
	}

	function m(w, x) {
		return r(g(w, x))
	}

	function b(w, x) {
		return j(g(w, x))
	}

	function f(w, x, y) {
		if ((typeof y != "undefined") && y) {
			u = y
		}
		return n(g(w, x))
	}

	function a() {
		return k("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d"
	}
	if ((typeof v != "undefined") && v) {
		v.b64_hmac_sha1 = f;
		v.hex_sha1 = k;
		v.b64_sha1 = h
	}
	return v
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social"] = a;
	a.Social = {};
	a.Social.Common = new(require("NGCore/Client/Social/US/_Internal/_RequireLoader").RequireLoader)({
		Appdata: function() {
			return require("NGCore/Client/Social/US/Common/Appdata").Appdata
		},
		Auth: function() {
			return require("NGCore/Client/Social/US/Common/Auth").Auth
		},
		Blacklist: function() {
			return require("NGCore/Client/Social/US/Common/Blacklist").Blacklist
		},
		Config: function() {
			return require("NGCore/Client/Social/US/Common/Config").Config
		},
		People: function() {
			return require("NGCore/Client/Social/US/Common/People").People
		},
		Profanity: function() {
			return require("NGCore/Client/Social/US/Common/Profanity").Profanity
		},
		Request: function() {
			return require("NGCore/Client/Social/US/Common/Request").Request
		},
		Service: function() {
			return require("NGCore/Client/Social/US/Common/Service").Service
		},
		Analytics: function() {
			return require("NGCore/Client/Social/US/Common/Analytics").Analytics
		}
	});
	a.Social.US = new(require("NGCore/Client/Social/US/_Internal/_RequireLoader").RequireLoader)({
		DataModel: function() {
			return require("NGCore/Client/Social/US/Models/DataModel").DataModel
		},
		User: function() {
			return require("NGCore/Client/Social/US/Models/User").User
		},
		Game: function() {
			return require("NGCore/Client/Social/US/Models/Game").Game
		},
		Leaderboard: function() {
			return require("NGCore/Client/Social/US/Models/Leaderboard").Leaderboard
		},
		Score: function() {
			return require("NGCore/Client/Social/US/Models/Score").Score
		},
		AppData: function() {
			return require("NGCore/Client/Social/US/Models/AppData").AppData
		},
		Cache: function() {
			return require("NGCore/Client/Social/US/Models/Cache").Cache
		},
		Session: function() {
			return require("NGCore/Client/Social/US/Data/Session").Session
		},
		Dispatcher: function() {
			return require("NGCore/Client/Social/US/Data/Dispatcher").Dispatcher
		}
	});
	a.Social.US.Service = new(require("NGCore/Client/Social/US/_Internal/_RequireLoader").RequireLoader)({
		Friends: function() {
			return require("NGCore/Client/Social/US/Service/Friends").Friends
		},
		Profile: function() {
			return require("NGCore/Client/Social/US/Service/Profile").Profile
		},
		ButtonOverlays: function() {
			return require("NGCore/Client/Social/US/Service/ButtonOverlays").ButtonOverlays
		},
		GameLaunchPayload: function() {
			return require("NGCore/Client/Social/US/Service/GameLaunchPayload").GameLaunchPayload
		}
	});
	a.Bank = require("NGCore/Client/Social/US/Service/Bank").Bank;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Storage/FileSystem"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Storage/FileSystem"] || {};
	$MODULE_REGISTRY["NGCore/Client/Storage/FileSystem"] = c;
	var b = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var a = require("NGCore/Client/Core/Class").Class;
	c.FileSystem = a.singleton({
		classname: "FileSystem",
		_options: {
			blocking: 1,
			binary: 2,
			returnFiles: 256
		},
		initialize: function() {
			this.readRequests = {};
			this.writeRequests = {};
			this.cbIdCounter = 1;
			b.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		readFile: function(f, e, d) {
			this.readFileIn(this.Store.Local, f, e, d)
		},
		readFileIn: function(e, k, f, d) {
			var g = 0;
			if (typeof(f) !== "object") {
				NgLogW("FileSystem.readFile/readFileIn(): using deprecated function signature");
				var j = f;
				if (typeof(j) == "function") {
					d = j;
					j = false
				}
				j = j || false;
				if (d) {
					g = this.cbIdCounter++;
					this.readRequests[g] = d
				}
				this._readFileSendGen(g, e, k, j)
			} else {
				var h = 0;
				if (f.blocking) {
					h |= this._options.blocking
				}
				if (f.binary) {
					h |= this._options.binary
				}
				if (d) {
					g = this.cbIdCounter++;
					this.readRequests[g] = d
				}
				this._readFileAsyncSendGen(g, e, k, h)
			}
		},
		writeFile: function(g, f, e, d) {
			this.writeFileIn(this.Store.Local, g, f, e, d)
		},
		writeFileIn: function(e, l, h, f, d) {
			var g = 0;
			if (typeof(f) !== "object") {
				NgLogW("FileSystem.writeFile/writeFileIn(): using deprecated function signature");
				var k = f;
				if (typeof(k) == "function") {
					d = k;
					k = false
				}
				k = k || false;
				if (d) {
					g = this.cbIdCounter++;
					this.writeRequests[g] = d
				}
				this._writeFileSendGen(g, e, l, h, k)
			} else {
				var j = 0;
				if (f.blocking) {
					j |= this._options.blocking
				}
				if (f.binary) {
					j |= this._options.binary
				}
				if (d) {
					g = this.cbIdCounter++;
					this.writeRequests[g] = d
				}
				this._writeFileAsyncSendGen(g, e, l, h, j)
			}
		},
		deleteFile: function(f, e, d) {
			this.deleteFileIn(this.Store.Local, f, e, d)
		},
		deleteFileIn: function(e, j, f, d) {
			var g = 0;
			if (typeof(f) !== "object") {
				NgLogW("FileSystem.deleteFile/deleteFileIn(): using deprecated function signature");
				d = f;
				if (d) {
					g = this.cbIdCounter++;
					this.writeRequests[g] = d
				}
				this._deleteFileSendGen(g, e, j)
			} else {
				var h = 0;
				if (f.blocking) {
					h |= this._options.blocking
				}
				if (d) {
					g = this.cbIdCounter++;
					this.writeRequests[g] = d
				}
				this._deleteFileAsyncSendGen(g, e, j, h)
			}
		},
		decompressFile: function(g, e, f, d) {
			this.decompressFileIn(this.Store.Local, g, e, f, d)
		},
		decompressFileIn: function(f, l, e, g, d) {
			var j = 0;
			if (typeof(g) !== "object") {
				NgLogW("FileSystem.decompressFile/decompressFileIn(): using deprecated function signature");
				var h = g;
				if (d) {
					j = this.cbIdCounter++;
					this.writeRequests[j] = d
				}
				this._decompressFileSendGen(j, f, l, e, h)
			} else {
				var k = 0;
				if (g.blocking) {
					k |= this._options.blocking
				}
				if (g.returnFiles) {
					k |= this._options.returnFiles
				}
				if (d) {
					j = this.cbIdCounter++;
					this.writeRequests[j] = d
				}
				this._decompressFileAsyncSendGen(j, f, l, e, k)
			}
		},
		_readFileCbRecv: function(h) {
			var j = {};
			if (!this._readFileCbRecvGen(h, j)) {
				return
			}
			var e = j.callbackId;
			var g = j.data;
			var f = j.error;
			if (!e) {
				NgLogE("FileSystem.onReadFile: No cbId");
				return
			}
			var d = this.readRequests[e];
			if (!d) {
				NgLogE("FileSystem.onReadFile: No registered cb found..cbId is :" + e);
				return
			}
			delete this.readRequests[e];
			d(f, g)
		},
		_writeFileCbRecv: function(g) {
			var h = {};
			if (!this._writeFileCbRecvGen(g, h)) {
				return
			}
			var e = h.callbackId;
			var f = h.error;
			if (!e) {
				return
			}
			var d = this.writeRequests[e];
			if (!d) {
				NgLogE("FileSystem command : No registered cb found..cbId is :" + e);
				return
			}
			delete this.writeRequests[e];
			d(f)
		},
		_deleteFileCbRecv: function(g) {
			var h = {};
			if (!this._deleteFileCbRecvGen(g, h)) {
				return
			}
			var e = h.callbackId;
			var f = h.error;
			if (!e) {
				return
			}
			var d = this.writeRequests[e];
			if (!d) {
				NgLogE("FileSystem command : No registered cb found..cbId is :" + e);
				return
			}
			delete this.writeRequests[e];
			d(f)
		},
		_decompressFileCbRecv: function(j) {
			var l = {};
			if (!this._decompressFileCbRecvGen(j, l)) {
				return
			}
			var f = l.callbackId;
			var h = l.files;
			var g = l.error;
			if (!f) {
				return
			}
			var d = this.writeRequests[f];
			if (!d) {
				NgLogE("FileSystem command : No registered cb found..cbId is :" + f);
				return
			}
			try {
				h = JSON.parse(h)
			} catch (k) {
				NgLogE("FileSystem command : Could not parse response :" + h);
				g = "Could not parse files"
			}
			delete this.writeRequests[f];
			d(g, h)
		},
		Store: {
			Temp: 0,
			Local: 1,
		},
		$_commandRecvGen: (function() {
			var d = (function(h) {
				var f = Core.Proc.parseInt(h.shift(), 10);
				if (f > 0) {
					var g = Core.Proc.parseInt(h.shift(), 10);
					var e = Core.ObjectRegistry.idToObject(g);
					if (!e) {
						NgLogE("Object instance could not be found for command " + h + ". It may have been destroyed this frame.");
						return
					}
					switch (f) {
						case 6:
							e._readFileCbRecv(h);
							break;
						case 7:
							e._writeFileCbRecv(h);
							break;
						case 8:
							e._deleteFileCbRecv(h);
							break;
						case 9:
							e._decompressFileCbRecv(h);
							break;
						default:
							NgLogE("Unknown instance method id " + f + " in FileSystem._commandRecvGen from command: " + h);
							return
					}
				} else {
					switch (f) {
						default:
							NgLogE("Unknown static method id " + f + " in FileSystem._commandRecvGen from command: " + h);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[338] = d;
			return d
		})(),
		_readFileCbRecvGen: function(d, e) {
			if (d.length != 3) {
				NgLogE("Could not parse due to wrong argument count in FileSystem.readFileCb from command: " + d);
				return false
			}
			e.callbackId = Core.Proc.parseInt(d[0]);
			if (e.callbackId === undefined) {
				NgLogE("Could not parse callbackId in FileSystem.readFileCb from command: " + d);
				return false
			}
			e.data = Core.Proc.parseString(d[1]);
			if (e.data === undefined) {
				NgLogE("Could not parse data in FileSystem.readFileCb from command: " + d);
				return false
			}
			e.error = Core.Proc.parseString(d[2]);
			if (e.error === undefined) {
				NgLogE("Could not parse error in FileSystem.readFileCb from command: " + d);
				return false
			}
			return true
		},
		_writeFileCbRecvGen: function(d, e) {
			if (d.length != 2) {
				NgLogE("Could not parse due to wrong argument count in FileSystem.writeFileCb from command: " + d);
				return false
			}
			e.callbackId = Core.Proc.parseInt(d[0]);
			if (e.callbackId === undefined) {
				NgLogE("Could not parse callbackId in FileSystem.writeFileCb from command: " + d);
				return false
			}
			e.error = Core.Proc.parseString(d[1]);
			if (e.error === undefined) {
				NgLogE("Could not parse error in FileSystem.writeFileCb from command: " + d);
				return false
			}
			return true
		},
		_deleteFileCbRecvGen: function(d, e) {
			if (d.length != 2) {
				NgLogE("Could not parse due to wrong argument count in FileSystem.deleteFileCb from command: " + d);
				return false
			}
			e.callbackId = Core.Proc.parseInt(d[0]);
			if (e.callbackId === undefined) {
				NgLogE("Could not parse callbackId in FileSystem.deleteFileCb from command: " + d);
				return false
			}
			e.error = Core.Proc.parseString(d[1]);
			if (e.error === undefined) {
				NgLogE("Could not parse error in FileSystem.deleteFileCb from command: " + d);
				return false
			}
			return true
		},
		_decompressFileCbRecvGen: function(d, e) {
			if (d.length != 3) {
				NgLogE("Could not parse due to wrong argument count in FileSystem.decompressFileCb from command: " + d);
				return false
			}
			e.callbackId = Core.Proc.parseInt(d[0]);
			if (e.callbackId === undefined) {
				NgLogE("Could not parse callbackId in FileSystem.decompressFileCb from command: " + d);
				return false
			}
			e.files = Core.Proc.parseString(d[1]);
			if (e.files === undefined) {
				NgLogE("Could not parse files in FileSystem.decompressFileCb from command: " + d);
				return false
			}
			e.error = Core.Proc.parseString(d[2]);
			if (e.error === undefined) {
				NgLogE("Could not parse error in FileSystem.decompressFileCb from command: " + d);
				return false
			}
			return true
		},
		$_createSendGen: function(d) {
			Core.Proc.appendToCommandString(":338,-1," + d)
		},
		_readFileSendGen: function(f, d, e, g) {
			Core.Proc.appendToCommandString(":338,2," + this.__objectRegistryId + "," + f + "," + d + "," + Core.Base64.encode(e) + "," + (g ? 1 : 0))
		},
		_writeFileSendGen: function(g, d, e, f, h) {
			Core.Proc.appendToCommandString(":338,3," + this.__objectRegistryId + "," + g + "," + d + "," + Core.Base64.encode(e) + "," + Core.Base64.encode(f) + "," + (h ? 1 : 0))
		},
		_deleteFileSendGen: function(f, d, e) {
			Core.Proc.appendToCommandString(":338,4," + this.__objectRegistryId + "," + f + "," + d + "," + Core.Base64.encode(e))
		},
		_decompressFileSendGen: function(h, e, f, d, g) {
			Core.Proc.appendToCommandString(":338,5," + this.__objectRegistryId + "," + h + "," + e + "," + Core.Base64.encode(f) + "," + Core.Base64.encode(d) + "," + (g ? 1 : 0))
		},
		_readFileAsyncSendGen: function(g, d, e, f) {
			Core.Proc.appendToCommandString(":338,10," + this.__objectRegistryId + "," + g + "," + d + "," + Core.Base64.encode(e) + "," + f)
		},
		_writeFileAsyncSendGen: function(h, d, e, g, f) {
			Core.Proc.appendToCommandString(":338,11," + this.__objectRegistryId + "," + h + "," + d + "," + Core.Base64.encode(e) + "," + Core.Base64.encode(g) + "," + f)
		},
		_deleteFileAsyncSendGen: function(g, d, e, f) {
			Core.Proc.appendToCommandString(":338,12," + this.__objectRegistryId + "," + g + "," + d + "," + Core.Base64.encode(e) + "," + f)
		},
		_decompressFileAsyncSendGen: function(h, e, f, d, g) {
			Core.Proc.appendToCommandString(":338,13," + this.__objectRegistryId + "," + h + "," + e + "," + Core.Base64.encode(f) + "," + Core.Base64.encode(d) + "," + g)
		},
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Network"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Network"] || {};
	$MODULE_REGISTRY["NGCore/Client/Network"] = a;
	a.Network = {};
	a.Network.__defineGetter__("XHR", function() {
		delete this.XHR;
		return this.XHR = require("NGCore/Client/Network/XHR").XHR
	});
	a.Network.__defineGetter__("DownloadFile", function() {
		delete this.DownloadFile;
		return this.DownloadFile = require("NGCore/Client/Network/DownloadFile").DownloadFile
	});
	a.Network.__defineGetter__("DownloadManifest", function() {
		delete this.DownloadManifest;
		return this.DownloadManifest = require("NGCore/Client/Network/DownloadManifest").DownloadManifest
	});
	a.Network.__defineGetter__("Util", function() {
		delete this.Util;
		return this.Util = require("NGCore/Client/Network/Util").Util
	});
	a.Network.__defineGetter__("_int_Util", function() {
		delete this._int_Util;
		return this._int_Util = require("NGCore/Client/Network/_int_Util")._int_Util
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/LifecycleEmitter"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Device/LifecycleEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/LifecycleEmitter"] = c;
	var a = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var b = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var d = require("NGCore/Client/Core/Proc").Proc;
	c.LifecycleEmitter = a.singleton({
		classname: "LifecycleEmitter",
		initialize: function() {
			b.register(this);
			this._createSendGen(this.__objectRegistryId);
			this.identificationCache = {};
			this.numEngineRequests = 0
		},
		_lifecycleEventRecv: function(e) {
			var f = {};
			if (!this._lifecycleEventRecvGen(e, f)) {
				return
			}
			this.emit(f.event);
			this._lifecycleEventSendGen(f.event)
		},
		$exitProcess: function() {
			var e = require("NGCore/Client/Core/Analytics").Analytics._getPipe();
			e._exitingApp();
			this._exitProcessSendGen()
		},
		$_bgMe: function() {
			this.__bgMeSendGen()
		},
		$pauseGame: function() {
			NgLogD("+++++++++++++++++++++++++++++++++++++++++Pausing Game");
			this._pauseGameSendGen();
			var e = require("NGCore/Client/Core/_LocalGameList")._LocalGameList;
			e._pausingGame()
		},
		$resumeGame: function() {
			NgLogD("+++++++++++++++++++++++++++++++++++++++++Resuming Game");
			this._resumeGameSendGen();
			var e = require("NGCore/Client/Core/_LocalGameList")._LocalGameList;
			e._resumingGame()
		},
		requestEngineKeepAlive: function(f) {
			var e = f;
			if (f.identification_key !== undefined) {
				e = f.identification_key
			}
			this.identificationCache[e] = true;
			++this.numEngineRequests;
			this.incrementEngineAlive()
		},
		cancelEngineKeepAlive: function(f) {
			var e = f;
			if (f.identification_key !== undefined) {
				e = f.identification_key
			}
			if (this.identificationCache[e]) {
				delete this.identificationCache[e];
				--this.numEngineRequests;
				this.decrementEngineAlive()
			} else {
				NgLogW("LifecycleEmitter.cancelEngineKeepAlive() Identification Key not found")
			}
		},
		incrementEngineAlive: function() {
			this._incrementEngineAliveSendGen()
		},
		decrementEngineAlive: function() {
			this._decrementEngineAliveSendGen()
		},
		cancelAllEngineRequests: function() {
			this._cancelAllEngineRequestsSendGen()
		},
		_killGameProc: function() {
			this.__killGameProcSendGen()
		},
		Event: {
			Suspend: 0,
			Resume: 1,
			Terminate: 2,
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = Core.Proc.parseInt(j.shift(), 10);
				if (g > 0) {
					var h = Core.Proc.parseInt(j.shift(), 10);
					var f = Core.ObjectRegistry.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						case 2:
							f._lifecycleEventRecv(j);
							break;
						default:
							NgLogE("Unknown instance method id " + g + " in LifecycleEmitter._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						default:
							NgLogE("Unknown static method id " + g + " in LifecycleEmitter._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[334] = e;
			return e
		})(),
		_lifecycleEventRecvGen: function(e, f) {
			if (e.length != 1) {
				NgLogE("Could not parse due to wrong argument count in LifecycleEmitter.lifecycleEvent from command: " + e);
				return false
			}
			f.event = Core.Proc.parseInt(e[0]);
			if (f.event === undefined) {
				NgLogE("Could not parse event in LifecycleEmitter.lifecycleEvent from command: " + e);
				return false
			}
			return true
		},
		$_createSendGen: function(e) {
			Core.Proc.appendToCommandString(":334,-1," + e)
		},
		_lifecycleEventSendGen: function(e) {
			Core.Proc.appendToCommandString(":334,2," + this.__objectRegistryId + "," + e)
		},
		$_exitProcessSendGen: function() {
			Core.Proc.appendToCommandString(":334," + -3)
		},
		$_pauseGameSendGen: function() {
			Core.Proc.appendToCommandString(":334," + -4)
		},
		$_resumeGameSendGen: function() {
			Core.Proc.appendToCommandString(":334," + -5)
		},
		_incrementEngineAliveSendGen: function() {
			Core.Proc.appendToCommandString(":334,6," + this.__objectRegistryId)
		},
		_decrementEngineAliveSendGen: function() {
			Core.Proc.appendToCommandString(":334,7," + this.__objectRegistryId)
		},
		_cancelAllEngineRequestsSendGen: function() {
			Core.Proc.appendToCommandString(":334,8," + this.__objectRegistryId)
		},
		$__killGameProcSendGen: function() {
			Core.Proc.appendToCommandString(":334," + -9)
		},
		$__bgMeSendGen: function() {
			Core.Proc.appendToCommandString(":334," + -10)
		},
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Network/XHR"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Network/XHR"] || {};
	$MODULE_REGISTRY["NGCore/Client/Network/XHR"] = f;
	var b = require("NGCore/Client/Core/Class").Class;
	var d = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var k = require("NGCore/Client/Network/Util").Util;
	var g = require("NGCore/Client/Core/Capabilities").Capabilities;
	var j = function(n, m) {
		this.item = n;
		this.content = m
	};
	var e = /(.*?): (.*)/;
	var l = {
		UNSENT: 0,
		OPENED: 1,
		HEADERS_RECEIVED: 2,
		LOADING: 3,
		DONE: 4
	};
	var c = ["OPTIONS", "GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "CONNECT"];
	var h = ["CONNECT", "TRACE", "TRACK"];
	var a = function(m) {
		if (!m) {
			return "GET"
		}
		m = m.toString();
		if (m in h) {
			throw "SECURITY_ERROR " + m + " not allowed."
		}
		if (m.toUpperCase() in c) {
			return m.toUpperCase()
		}
		return m
	};
	f.XHR = b.subclass({
		classname: "XHR",
		initialize: function() {
			this.request;
			this.respHeaders = {};
			this.settings = {};
			this.headers = [];
			this.sendFlag = false;
			this.errorFlag = false;
			this.readyState = l.UNSENT;
			this.responseText = null;
			this.responseXML = null;
			this.status = 0;
			this.statusText = ""
		},
		$_commandRecvGen: (function() {
			var m = (function(q) {
				var o = Core.Proc.parseInt(q.shift(), 10);
				if (o > 0) {
					var p = Core.Proc.parseInt(q.shift(), 10);
					var n = Core.ObjectRegistry.idToObject(p);
					if (!n) {
						NgLogE("Object instance could not be found for command " + q + ". It may have been destroyed this frame.");
						return
					}
					switch (o) {
						case 3:
							n._sendStatusRecv(q);
							break;
						case 4:
							n._sendHeadersRecv(q);
							break;
						case 5:
							n._sendDataRecv(q);
							break;
						case 6:
							n._onFinishRecv(q);
							break;
						default:
							NgLogE("Unknown instance method id " + o + " in XHR._commandRecvGen from command: " + q);
							return
					}
				} else {
					switch (o) {
						default:
							NgLogE("Unknown static method id " + o + " in XHR._commandRecvGen from command: " + q);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[340] = m;
			return m
		})(),
		_sendStatusRecvGen: function(m, n) {
			if (m.length != 2) {
				NgLogE("Could not parse due to wrong argument count in XHR.sendStatus from command: " + m);
				return false
			}
			n.statNum = Core.Proc.parseInt(m[0]);
			if (n.statNum === undefined) {
				NgLogE("Could not parse statNum in XHR.sendStatus from command: " + m);
				return false
			}
			n.statStr = Core.Proc.parseString(m[1]);
			if (n.statStr === undefined) {
				NgLogE("Could not parse statStr in XHR.sendStatus from command: " + m);
				return false
			}
			return true
		},
		_sendHeadersRecvGen: function(m, n) {
			if (m.length != 1) {
				NgLogE("Could not parse due to wrong argument count in XHR.sendHeaders from command: " + m);
				return false
			}
			n.headers = Core.Proc.parseString(m[0]);
			if (n.headers === undefined) {
				NgLogE("Could not parse headers in XHR.sendHeaders from command: " + m);
				return false
			}
			return true
		},
		_sendDataRecvGen: function(m, n) {
			if (m.length != 1) {
				NgLogE("Could not parse due to wrong argument count in XHR.sendData from command: " + m);
				return false
			}
			n.data = Core.Proc.parseString(m[0]);
			if (n.data === undefined) {
				NgLogE("Could not parse data in XHR.sendData from command: " + m);
				return false
			}
			return true
		},
		_onFinishRecvGen: function(m, n) {
			if (m.length != 1) {
				NgLogE("Could not parse due to wrong argument count in XHR.onFinish from command: " + m);
				return false
			}
			n.error = Core.Proc.parseBool(m[0]);
			if (n.error === undefined) {
				NgLogE("Could not parse error in XHR.onFinish from command: " + m);
				return false
			}
			return true
		},
		$_createSendGen: function(m) {
			Core.Proc.appendToCommandString(":340,-1," + m)
		},
		_destroySendGen: function() {
			Core.Proc.appendToCommandString(":340,2," + this.__objectRegistryId)
		},
		_startSendGen: function(p, m, n, o) {
			Core.Proc.appendToCommandString(":340,7," + this.__objectRegistryId + "," + Core.Base64.encode(p) + "," + Core.Base64.encode(m) + "," + Core.Base64.encode(n) + "," + o)
		},
		_headerSendGen: function(n, m) {
			Core.Proc.appendToCommandString("," + Core.Base64.encode(n) + "," + Core.Base64.encode(m))
		},
		_setCompositionSendGen: function() {
			Core.Proc.appendToCommandString(":340,9," + this.__objectRegistryId)
		},
		open: function(q, o, p, m, n) {
			o = o.split(" ").join("%20");
			this.settings = {
				method: a(q),
				url: k.buildRelativeUrl(o),
				async: p,
				user: m,
				password: n
			};
			if (this.me && this.sendFlag) {
				http.abort(this.me)
			}
			this.reset();
			this.setState(l.OPENED)
		},
		sendComposition: function(m) {
			this.composing = true;
			this.send(JSON.stringify(m))
		},
		send: function(p) {
			if (this.readyState != l.OPENED || this.sendFlag) {
				throw "INVALID_STATE_ERR: " + (this.sendFlag ? "Already sending" : "in state " + this.readyState)
			}
			this.sendFlag = true;
			if (p && this.settings.method != "GET" && this.settings.method != "HEAD") {}
			this.errorFlag = false;
			if (this.settings.method == "GET" || this.settings.method == "HEAD") {
				p = null
			} else {
				if (p) {
					var o = false;
					for (var m in this.headers) {
						if (this.headers[m].item == "Content-Type") {
							o = true;
							break
						}
					}
					if (!o) {
						this.setRequestHeader("Content-Type", "text/plain;charset=UTF-8")
					}
				}
			}
			this.responseText = "";
			if (!p) {
				p = ""
			}
			d.register(this);
			this._createSendGen(this.__objectRegistryId);
			if (this.NXS) {
				this.me = http.create(this);
				for (var m in this.headers) {
					var n = this.headers[m];
					http.addHeader(this.me, n.item + ": " + n.content)
				}
				http.send(this.me, this.settings.method, this.settings.url, p)
			} else {
				if (this.composing) {
					this._setCompositionSendGen()
				}
				this._startSendGen(this.settings.method, this.settings.url, p, this.headers.length);
				for (var m in this.headers) {
					var q = this.headers[m];
					this._headerSendGen(q.item, q.content)
				}
			}
		},
		abort: function() {
			this.responseText = null;
			this.errorFlag = true;
			this.headers = [];
			if (this.sendFlag) {
				if (this.NXS) {
					http.abort(this.me)
				}
				if (this.readyState != l.DONE) {
					this.sendFlag = false;
					this.setState(l.DONE)
				}
			}
			this.readyState = l.UNSENT
		},
		getResponseHeader: function(m) {
			if (this.readyState > l.OPENED) {
				return this.respHeaders[m.toLowerCase()]
			}
			return null
		},
		getUnflattenedResponseHeaders: function() {
			return this.respHeaders
		},
		getAllResponseHeaders: function() {
			if (this.readyState < l.HEADERS_RECEIVED || this.errorFlag) {
				return ""
			}
			var m = "";
			for (var n in this.respHeaders) {
				m += n + ": " + this.respHeaders[n] + "\r\n"
			}
			return m.substr(0, m.length - 2)
		},
		setRequestHeader: function(n, m) {
			this.headers.push(new j(n, m))
		},
		getRequestHeader: function(o) {
			var m = null;
			for (var n in this.headers) {
				if (this.headers[n].item == o) {
					m = this.headers[n].content;
					break
				}
			}
			return m
		},
		onStatus: function(m, n) {
			this.status = m;
			this.statusText = n
		},
		_sendStatusRecv: function(m) {
			var n = {};
			this._sendStatusRecvGen(m, n);
			this.onStatus(n.statNum, n.statStr)
		},
		onHeaders: function(p) {
			var m = p.split("\n");
			m.pop();
			for (var o in m) {
				var n = e.exec(m[o]);
				if (n) {
					this.respHeaders[n[1].toLowerCase()] = n[2]
				}
			}
			this.setState(l.HEADERS_RECEIVED)
		},
		_sendHeadersRecv: function(m) {
			var n = {};
			this._sendHeadersRecvGen(m, n);
			this.onHeaders(n.headers)
		},
		onData: function(m) {
			this.responseText += m;
			this.setState(l.LOADING)
		},
		_sendDataRecv: function(m) {
			var n = {};
			this._sendDataRecvGen(m, n);
			this.onData(n.data)
		},
		onFinish: function(m) {
			this.sendFlag = false;
			if (m) {
				this.responseText = null;
				this.error = "Network Error";
				this.errorFlag = true;
				this.status = 0
			}
			this.setState(l.DONE)
		},
		_onFinishRecv: function(m) {
			var n = {};
			this._onFinishRecvGen(m, n);
			this.onFinish(n.error)
		},
		reset: function() {
			this.headers = [];
			this.readyState = l.UNSENT;
			this.responseText = null;
			this.responseXML = null;
			this.composing = false
		},
		setState: function(m) {
			this.readyState = m;
			if (m == l.DONE) {
				this._destroySendGen();
				d.unregister(this)
			}
			if (typeof this.onreadystatechange != "undefined") {
				try {
					this.onreadystatechange()
				} catch (n) {
					NgLogException(n)
				}
			}
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Network/DownloadFile"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Network/DownloadFile"] || {};
	$MODULE_REGISTRY["NGCore/Client/Network/DownloadFile"] = c;
	var b = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var a = require("NGCore/Client/Core/Class").Class;
	c.DownloadFile = a.subclass({
		classname: "DownloadFile",
		initialize: function() {},
		start: function(d, j, e, g, h) {
			b.register(this);
			this._createSendGen(this.__objectRegistryId);
			e = e.split(" ").join("%20");
			if (!(g instanceof Array)) {
				if (g) {
					NgLogE("Improper headers sent(" + g + '). Need an array, ex: [{item:"Content-Easter", content:"egg"}]')
				}
				g = []
			}
			this.__sendSendGen(d, j, e, g.length);
			for (var f in g) {
				this.__headerSendGen(g[f].item, g[f].content)
			}
			this.mCB = h
		},
		abort: function() {
			this._destroySendGen();
			b.unregister(this)
		},
		$_commandRecvGen: (function() {
			var d = (function(h) {
				var f = Core.Proc.parseInt(h.shift(), 10);
				if (f > 0) {
					var g = Core.Proc.parseInt(h.shift(), 10);
					var e = Core.ObjectRegistry.idToObject(g);
					if (!e) {
						NgLogE("Object instance could not be found for command " + h + ". It may have been destroyed this frame.");
						return
					}
					switch (f) {
						case 5:
							e._finishRecv(h);
							break;
						default:
							NgLogE("Unknown instance method id " + f + " in DownloadFile._commandRecvGen from command: " + h);
							return
					}
				} else {
					switch (f) {
						default:
							NgLogE("Unknown static method id " + f + " in DownloadFile._commandRecvGen from command: " + h);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[341] = d;
			return d
		})(),
		_finishRecvGen: function(d, e) {
			if (d.length != 2) {
				NgLogE("Could not parse due to wrong argument count in DownloadFile.finish from command: " + d);
				return false
			}
			e.status = Core.Proc.parseInt(d[0]);
			if (e.status === undefined) {
				NgLogE("Could not parse status in DownloadFile.finish from command: " + d);
				return false
			}
			e.signature = Core.Proc.parseString(d[1]);
			if (e.signature === undefined) {
				NgLogE("Could not parse signature in DownloadFile.finish from command: " + d);
				return false
			}
			return true
		},
		$_createSendGen: function(d) {
			Core.Proc.appendToCommandString(":341,-1," + d)
		},
		_destroySendGen: function() {
			Core.Proc.appendToCommandString(":341,2," + this.__objectRegistryId)
		},
		__sendSendGen: function(g, f, d, e) {
			Core.Proc.appendToCommandString(":341,3," + this.__objectRegistryId + "," + Core.Base64.encode(g) + "," + Core.Base64.encode(f) + "," + Core.Base64.encode(d) + "," + e)
		},
		__headerSendGen: function(e, d) {
			Core.Proc.appendToCommandString("," + Core.Base64.encode(e) + "," + Core.Base64.encode(d))
		},
		_finishRecv: function(d) {
			this._destroySendGen();
			var e = {};
			this._finishRecvGen(d, e);
			if (this.mCB) {
				this.mCB(e.status, e.signature)
			}
			b.unregister(this)
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Network/Util"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Network/Util"] || {};
	$MODULE_REGISTRY["NGCore/Client/Network/Util"] = b;
	var c = require("NGCore/Client/Core/Capabilities").Capabilities;
	var d = require("NGCore/Client/Core/Time").Time;
	var a = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter;
	var f = require("NGCore/Client/UI/AlertDialog").AlertDialog;
	var e = /^(https?:\/\/)?([^\/]*)(.*[^\/])?.?/i;
	var g = b.Util = {
		NormalizeUrl: function(j, k) {
			j = g.buildRelativeUrl(j);
			var h = j.match(e);
			if (h && h[1]) {
				j = h[1].toLowerCase() + h[2].toLowerCase() + (h[3] ? h[3] : "")
			} else {
				j = j.toLowerCase()
			}
			return j
		},
		GetMD5HashDirectoryFromUrl: function(j) {
			var h;
			if (j === Capabilities._getBootServer() + "/" + Capabilities._getBoot()) {
				h = Capabilities.getBootDir()
			} else {
				h = require("NGCore/Shared/Lib/md5").toMD5(j)
			}
			return h
		},
		buildRelativeUrl: function(h) {
			if (!h.match(/^(https?:\/\/)/)) {
				if (h.charAt(0) == "/" || !h.length) {
					h = c.getServer() + h
				} else {
					h = c.getServer() + "/" + c.getGame() + "/" + h
				}
			}
			return h
		},
		RetrySchedule: function(j, l) {
			var k = Math.floor(Math.log(l / j));
			var m = [j];
			for (var h = 0; h < k + 1; ++h) {
				j *= 2;
				m.push(j)
			}
			return m
		},
		OperationWithRetries: function(r, l, m) {
			var k;
			var j;
			var p;
			if (m) {
				k = 3;
				j = 10000;
				p = 1
			} else {
				k = Infinity;
				j = 30000;
				p = 6
			}
			j = Core.Time.getRealTime() + j;
			var q = 250;
			var t = 1;
			var n = false;
			var h = true;
			var o = function() {
				if (u) {
					return
				}
				if (!h) {
					console.log("OperationWithRetries: failureParam called when not armed");
					return
				}
				h = false;
				if (t >= k) {
					console.log("OperationWithRetries: too many retry attempts");
					var u = true;
					l();
					return
				}
				if (Core.Time.getRealTime() >= j && t >= p) {
					console.log("OperationWithRetries: retries took too long");
					console.log("OperationWithRetries: abortTime:", j, "realTime:", Core.Time.getRealTime());
					console.log("OperationWithRetries: attemptCount:", t, "abortTimeAttempts:", p);
					var u = true;
					l();
					return
				}
				console.log("OperationWithRetries: Failure, will retry in " + q + "ms");
				setTimeout(function() {
					if (u) {
						return
					}
					h = true;
					r(o, s)
				}, q);
				t += 1;
				q *= 2
			};
			var s = function() {
				var u = true;
				l()
			};
			r(o, s);
			return s
		},
		showFatalErrorDialog: function(j) {
			var k = new f();
			k.setTitle(Core.Localization.getString("Network failure"));
			k.setChoices([Core.Localization.getString("Exit")]);
			k.onchoice = function(l) {
				k.hide();
				a.exitProcess()
			};
			var h = {
				"302": "File location has changed (302)",
				"400": "Bad request to server (400)",
				"401": "Authorization failed (401)",
				"403": "Server permissions error (403)",
				"404": "Resource not found (404)",
				"408": "Request timed out (408)",
				"500": "Internal server error (500)",
				"501": "Cannot process request (501)",
				"502": "Bad Gateway (502)",
				"503": "Service overloaded / down for maintenance (503)",
				"504": "Timeout at intervening gateway (504)"
			};
			k.setText(Core.Localization.getString(h[j] || "This application requires a working data connection."));
			k.show()
		},
		showSimpleNetworkError: function(j) {
			var l = new f();
			l.setTitle(Core.Localization.getString("Network failure"));
			l.setChoices([Core.Localization.getString("OK")]);
			l.onchoice = function(m) {
				l.hide()
			};
			var h = {
				"302": " File location has changed (302)",
				"400": " Bad request to server (400)",
				"401": " Authorization failed (401)",
				"403": " Server permissions error (403)",
				"404": " Resource not found (404)",
				"408": " Request timed out (408)",
				"500": " Internal server error (500)",
				"501": " Cannot process request (501)",
				"502": " Bad Gateway (502)",
				"503": " Service overloaded / down for maintenance (503)",
				"504": " Timeout at intervening gateway (504)"
			};
			var k = "Cannot download game without network connection.";
			if (h[j]) {
				k += h[j]
			}
			l.setText(Core.Localization.getString(k));
			l.show()
		},
		getCacheBustingString: function() {
			return "?t=" + (new Date()).getTime()
		},
		Ad: {
			Tapjoy: {
				sendActionComplete: function(j) {
					var h = require("NGCore/Client/Network/_int_Util")._int_Util;
					h.adTapjoySendActionComplete(j)
				}
			}
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Network/_int_Util"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Network/_int_Util"] || {};
	$MODULE_REGISTRY["NGCore/Client/Network/_int_Util"] = d;
	var c = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var b = require("NGCore/Client/Core/Class").Class;
	var a = d._int_Util = b.singleton({
		classname: "_int_Util",
		initialize: function() {
			this._callbackID = 0;
			this._callbacks = [];
			this.valid = !Core.Capabilities.meetsBinaryVersion("1.3.5.10");
			Core.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		ProcID: {
			Persist: -1,
			Game: -2,
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = Core.Proc.parseInt(j.shift(), 10);
				if (g > 0) {
					var h = Core.Proc.parseInt(j.shift(), 10);
					var f = Core.ObjectRegistry.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						case 4:
							f._signCallbackRecv(j);
							break;
						default:
							NgLogE("Unknown instance method id " + g + " in _int_Util._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						case -6:
							a._verifiedRecv(j);
							break;
						default:
							NgLogE("Unknown static method id " + g + " in _int_Util._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[350] = e;
			return e
		})(),
		_signCallbackRecvGen: function(e, f) {
			if (e.length != 2) {
				NgLogE("Could not parse due to wrong argument count in _int_Util.signCallback from command: " + e);
				return false
			}
			f.signature = Core.Proc.parseString(e[0]);
			if (f.signature === undefined) {
				NgLogE("Could not parse signature in _int_Util.signCallback from command: " + e);
				return false
			}
			f.callbackID = Core.Proc.parseInt(e[1]);
			if (f.callbackID === undefined) {
				NgLogE("Could not parse callbackID in _int_Util.signCallback from command: " + e);
				return false
			}
			return true
		},
		$_verifiedRecvGen: function(e, f) {
			if (e.length != 1) {
				NgLogE("Could not parse due to wrong argument count in _int_Util.verified from command: " + e);
				return false
			}
			f.b = Core.Proc.parseInt(e[0]);
			if (f.b === undefined) {
				NgLogE("Could not parse b in _int_Util.verified from command: " + e);
				return false
			}
			return true
		},
		$_createSendGen: function(e) {
			Core.Proc.appendToCommandString(":350,-1," + e)
		},
		_destroySendGen: function() {
			Core.Proc.appendToCommandString(":350,2," + this.__objectRegistryId)
		},
		_signSendGen: function(f, g, e) {
			Core.Proc.appendToCommandString(":350,3," + this.__objectRegistryId + "," + Core.Base64.encode(f) + "," + g + "," + Core.Base64.encode(e))
		},
		$_adTapjoySendActionCompleteSendGen: function(e) {
			Core.Proc.appendToCommandString(":350,-5," + Core.Base64.encode(e))
		},
		$_verifiedRecv: function(f) {
			this.valid = true;
			for (var e in this._callbacks) {
				var g = this._callbacks[e];
				if (typeof g === "object") {
					this._signSendGen(g.str, e, g.e);
					this._callbacks[e] = g.cb
				}
			}
		},
		sign: function(f, e, g) {
			if (this.valid) {
				this._callbacks[this._callbackID] = g;
				this._signSendGen(f, this._callbackID++, e)
			} else {
				this._callbacks[this._callbackID++] = {
					str: f,
					e: e,
					cb: g
				}
			}
		},
		_signCallbackRecv: function(f) {
			var g = {};
			if (!this._signCallbackRecvGen(f, g)) {
				return
			}
			var e = this._callbacks[parseInt(g.callbackID)];
			if (e) {
				e(g.signature)
			}
		},
		$adTapjoySendActionComplete: function(e) {
			console.log("_int_Util.adTapjoysendActionComplete: " + e);
			this._adTapjoySendActionCompleteSendGen(e)
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Lib/md5"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Shared/Lib/md5"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Lib/md5"] = d;

	function e(r) {
		return q(k(f(r), r.length * 8))
	}

	function n(t) {
		var v = "0123456789abcdef";
		var s = "";
		var r;
		for (var u = 0; u < t.length; u++) {
			r = t.charCodeAt(u);
			s += v.charAt((r >>> 4) & 15) + v.charAt(r & 15)
		}
		return s
	}

	function h(t) {
		var s = "";
		var u = -1;
		var r, v;
		while (++u < t.length) {
			r = t.charCodeAt(u);
			v = u + 1 < t.length ? t.charCodeAt(u + 1) : 0;
			if (55296 <= r && r <= 56319 && 56320 <= v && v <= 57343) {
				r = 65536 + ((r & 1023) << 10) + (v & 1023);
				u++
			}
			if (r <= 127) {
				s += String.fromCharCode(r)
			} else {
				if (r <= 2047) {
					s += String.fromCharCode(192 | ((r >>> 6) & 31), 128 | (r & 63))
				} else {
					if (r <= 65535) {
						s += String.fromCharCode(224 | ((r >>> 12) & 15), 128 | ((r >>> 6) & 63), 128 | (r & 63))
					} else {
						if (r <= 2097151) {
							s += String.fromCharCode(240 | ((r >>> 18) & 7), 128 | ((r >>> 12) & 63), 128 | ((r >>> 6) & 63), 128 | (r & 63))
						}
					}
				}
			}
		}
		return s
	}

	function f(s) {
		var r = Array(s.length >> 2);
		for (var t = 0; t < r.length; t++) {
			r[t] = 0
		}
		for (var t = 0; t < s.length * 8; t += 8) {
			r[t >> 5] |= (s.charCodeAt(t / 8) & 255) << (t % 32)
		}
		return r
	}

	function q(s) {
		var r = "";
		for (var t = 0; t < s.length * 32; t += 8) {
			r += String.fromCharCode((s[t >> 5] >>> (t % 32)) & 255)
		}
		return r
	}

	function k(C, w) {
		C[w >> 5] |= 128 << ((w) % 32);
		C[(((w + 64) >>> 9) << 4) + 14] = w;
		var B = 1732584193;
		var A = -271733879;
		var z = -1732584194;
		var y = 271733878;
		for (var t = 0; t < C.length; t += 16) {
			var v = B;
			var u = A;
			var s = z;
			var r = y;
			B = l(B, A, z, y, C[t + 0], 7, -680876936);
			y = l(y, B, A, z, C[t + 1], 12, -389564586);
			z = l(z, y, B, A, C[t + 2], 17, 606105819);
			A = l(A, z, y, B, C[t + 3], 22, -1044525330);
			B = l(B, A, z, y, C[t + 4], 7, -176418897);
			y = l(y, B, A, z, C[t + 5], 12, 1200080426);
			z = l(z, y, B, A, C[t + 6], 17, -1473231341);
			A = l(A, z, y, B, C[t + 7], 22, -45705983);
			B = l(B, A, z, y, C[t + 8], 7, 1770035416);
			y = l(y, B, A, z, C[t + 9], 12, -1958414417);
			z = l(z, y, B, A, C[t + 10], 17, -42063);
			A = l(A, z, y, B, C[t + 11], 22, -1990404162);
			B = l(B, A, z, y, C[t + 12], 7, 1804603682);
			y = l(y, B, A, z, C[t + 13], 12, -40341101);
			z = l(z, y, B, A, C[t + 14], 17, -1502002290);
			A = l(A, z, y, B, C[t + 15], 22, 1236535329);
			B = a(B, A, z, y, C[t + 1], 5, -165796510);
			y = a(y, B, A, z, C[t + 6], 9, -1069501632);
			z = a(z, y, B, A, C[t + 11], 14, 643717713);
			A = a(A, z, y, B, C[t + 0], 20, -373897302);
			B = a(B, A, z, y, C[t + 5], 5, -701558691);
			y = a(y, B, A, z, C[t + 10], 9, 38016083);
			z = a(z, y, B, A, C[t + 15], 14, -660478335);
			A = a(A, z, y, B, C[t + 4], 20, -405537848);
			B = a(B, A, z, y, C[t + 9], 5, 568446438);
			y = a(y, B, A, z, C[t + 14], 9, -1019803690);
			z = a(z, y, B, A, C[t + 3], 14, -187363961);
			A = a(A, z, y, B, C[t + 8], 20, 1163531501);
			B = a(B, A, z, y, C[t + 13], 5, -1444681467);
			y = a(y, B, A, z, C[t + 2], 9, -51403784);
			z = a(z, y, B, A, C[t + 7], 14, 1735328473);
			A = a(A, z, y, B, C[t + 12], 20, -1926607734);
			B = p(B, A, z, y, C[t + 5], 4, -378558);
			y = p(y, B, A, z, C[t + 8], 11, -2022574463);
			z = p(z, y, B, A, C[t + 11], 16, 1839030562);
			A = p(A, z, y, B, C[t + 14], 23, -35309556);
			B = p(B, A, z, y, C[t + 1], 4, -1530992060);
			y = p(y, B, A, z, C[t + 4], 11, 1272893353);
			z = p(z, y, B, A, C[t + 7], 16, -155497632);
			A = p(A, z, y, B, C[t + 10], 23, -1094730640);
			B = p(B, A, z, y, C[t + 13], 4, 681279174);
			y = p(y, B, A, z, C[t + 0], 11, -358537222);
			z = p(z, y, B, A, C[t + 3], 16, -722521979);
			A = p(A, z, y, B, C[t + 6], 23, 76029189);
			B = p(B, A, z, y, C[t + 9], 4, -640364487);
			y = p(y, B, A, z, C[t + 12], 11, -421815835);
			z = p(z, y, B, A, C[t + 15], 16, 530742520);
			A = p(A, z, y, B, C[t + 2], 23, -995338651);
			B = g(B, A, z, y, C[t + 0], 6, -198630844);
			y = g(y, B, A, z, C[t + 7], 10, 1126891415);
			z = g(z, y, B, A, C[t + 14], 15, -1416354905);
			A = g(A, z, y, B, C[t + 5], 21, -57434055);
			B = g(B, A, z, y, C[t + 12], 6, 1700485571);
			y = g(y, B, A, z, C[t + 3], 10, -1894986606);
			z = g(z, y, B, A, C[t + 10], 15, -1051523);
			A = g(A, z, y, B, C[t + 1], 21, -2054922799);
			B = g(B, A, z, y, C[t + 8], 6, 1873313359);
			y = g(y, B, A, z, C[t + 15], 10, -30611744);
			z = g(z, y, B, A, C[t + 6], 15, -1560198380);
			A = g(A, z, y, B, C[t + 13], 21, 1309151649);
			B = g(B, A, z, y, C[t + 4], 6, -145523070);
			y = g(y, B, A, z, C[t + 11], 10, -1120210379);
			z = g(z, y, B, A, C[t + 2], 15, 718787259);
			A = g(A, z, y, B, C[t + 9], 21, -343485551);
			B = j(B, v);
			A = j(A, u);
			z = j(z, s);
			y = j(y, r)
		}
		return Array(B, A, z, y)
	}

	function b(z, v, u, r, y, w) {
		return j(o(j(j(v, z), j(r, w)), y), u)
	}

	function l(v, u, A, z, r, y, w) {
		return b((u & A) | ((~u) & z), v, u, r, y, w)
	}

	function a(v, u, A, z, r, y, w) {
		return b((u & z) | (A & (~z)), v, u, r, y, w)
	}

	function p(v, u, A, z, r, y, w) {
		return b(u ^ A ^ z, v, u, r, y, w)
	}

	function g(v, u, A, z, r, y, w) {
		return b(A ^ (u | (~z)), v, u, r, y, w)
	}

	function j(r, u) {
		var t = (r & 65535) + (u & 65535);
		var s = (r >> 16) + (u >> 16) + (t >> 16);
		return (s << 16) | (t & 65535)
	}

	function o(r, s) {
		return (r << s) | (r >>> (32 - s))
	}
	var m = function(r) {
		return n(e(h(r)))
	};

	function c() {
		return m("abc").toLowerCase() == "900150983cd24fb0d6963f7d28e17f72"
	}
	d.toMD5 = m;
	d.testMD5 = c;
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/MessageEmitter"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Shared/MessageEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Shared/MessageEmitter"] = b;
	var a = require("NGCore/Shared/Class").Class;
	var c = require("NGCore/Shared/MessageListener").MessageListener;
	b.MessageEmitter = a.subclass({
		classname: "MessageEmitter",
		initialize: function() {
			this._messageListenersCount = 0;
			this._messageListenerRecords = [];
			this._messageDeferredWork = [];
			this._messageShouldDefer = false
		},
		destroy: function($super) {
			if (this._messageShouldDefer) {
				this._messageDeferredWork.push(this._destroyActual.bind(this, $super))
			} else {
				this._destroyActual($super)
			}
		},
		_destroyActual: function(e) {
			var d = this._messageListenerRecords;
			while (d.length) {
				this.removeListener(d[0].l)
			}
			if (e) {
				e()
			}
		},
		getListenerCount: function() {
			return this._messageListenersCount
		},
		addListener: function(f, e, d) {
			if (!f instanceof c) {
				throw new Error("MessageEmitter.addListener: listener must be instances of MessageListener")
			}
			if (!f._startListeningEmitter(this)) {
				throw new Error("MessageEmitter.addListener: listener is already listening")
			}
			if (!d) {
				d = 0
			}
			this._messageListenersCount++;
			if (this._messageShouldDefer) {
				this._messageDeferredWork.push(this._addListenerActual.bind(this, f, e, d))
			} else {
				this._addListenerActual(f, e, d)
			}
		},
		_addListenerActual: function(j, h, g) {
			if ((typeof g) == "undefined") {
				g = 0
			}
			var e = this._messageListenerRecords;
			var d = e.length;
			for (var f = 0; f < d; ++f) {
				if (e[f].p <= g) {
					break
				}
			}
			e.splice(f, 0, {
				l: j,
				f: h,
				p: g
			})
		},
		removeListener: function(h) {
			if (!h._stopListeningEmitter(this)) {
				return false
			}
			this._messageListenersCount--;
			if (this._messageShouldDefer) {
				var f = this._messageListenerRecords;
				var d = f.length;
				for (var g = 0; g < d; ++g) {
					var e = f[g];
					if (e.l == h) {
						e.f = null;
						break
					}
				}
				this._messageDeferredWork.push(this._removeListenerActual.bind(this, h))
			} else {
				this._removeListenerActual(h)
			}
			return true
		},
		_removeListenerActual: function(h) {
			var f = this._messageListenerRecords;
			var d = f.length;
			for (var g = 0; g < d; ++g) {
				var e = f[g];
				if (e.l == h) {
					f.splice(g, 1);
					break
				}
			}
		},
		emit: function(e) {
			var d = false;
			if (this._messageShouldDefer) {
				this._messageDeferredWork.push(this._emitActual.bind(this, arguments, false))
			} else {
				d = this._emitActual(arguments, true)
			}
			return d
		},
		_emitActual: function(k, h) {
			this._messageShouldDefer = true;
			var f = this._messageListenerRecords;
			var d = f.length;
			var j = false;
			for (var g = 0; g < d; ++g) {
				var e = f[g];
				if (!e.f) {
					continue
				}
				if (e.f.apply(e.l, k)) {
					j = true
				}
			}
			if (!j) {}
			this._messageShouldDefer = false;
			if (this._messageDeferredWork.length && h) {
				this._executeDeferred()
			}
			return j
		},
		chain: function(d) {
			if (this._messageShouldDefer) {
				this._messageDeferredWork.push(this._chainActual.bind(this, arguments, false));
				return undefined
			} else {
				return this._chainActual(arguments, true)
			}
		},
		_chainActual: function(k, j) {
			var e = false;
			this._messageShouldDefer = true;
			var g = this._messageListenerRecords;
			var d = g.length;
			for (var h = 0; h < d; ++h) {
				var f = g[h];
				if (!f.f) {
					continue
				}
				if (f.f.apply(f.l, k)) {
					e = true;
					break
				}
			}
			this._messageShouldDefer = false;
			if (this._messageDeferredWork.length && j) {
				this._executeDeferred()
			}
			return e
		},
		_executeDeferred: function() {
			var d = this._messageDeferredWork;
			for (var e = 0; e < d.length; ++e) {
				d[e]()
			}
			this._messageDeferredWork = []
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/MessageListener"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Shared/MessageListener"] || {};
	$MODULE_REGISTRY["NGCore/Shared/MessageListener"] = b;
	var a = require("NGCore/Shared/Class").Class;
	b.MessageListener = a.subclass({
		classname: "MessageListener",
		initialize: function() {
			this._messageEmitters = []
		},
		destroy: function() {
			var c = this._messageEmitters;
			while (c.length) {
				c[0].removeListener(this)
			}
		},
		_startListeningEmitter: function(e) {
			var d = this._messageEmitters;
			var c = d.indexOf(e);
			if (c !== -1) {
				return false
			}
			d.push(e);
			return true
		},
		_stopListeningEmitter: function(e) {
			var d = this._messageEmitters;
			var c = d.indexOf(e);
			if (c === -1) {
				return false
			}
			d.splice(c, 1);
			return true
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Core/_int_LGL"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Core/_int_LGL"] || {};
	$MODULE_REGISTRY["NGCore/Client/Core/_int_LGL"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	var h = require("NGCore/Client/Core/Proc").Proc;
	var g = require("NGCore/Client/Core/Base64").Base64;

	function d() {
		var j = Capabilities.getPlatformOS();
		switch (j) {
			case "Android":
				return "android";
			case "iPhone OS":
				return "ios"
		}
		return j
	}

	function c(j) {
		var k = {
			pvr: "GL_IMG_texture_compression_pvrtc",
			atc: "GL_AMD_compressed_ATC_texture",
			etc1: "GL_OES_compressed_ETC1_RGB8_texture",
			"3dc": "GL_AMD_compressed_3DC_texture"
		};
		return k[j] || j
	}
	var f = {
		isMatch: function(l, k) {
			var j;
			switch (l.charAt(0)) {
				case ">":
					j = (l.charAt(1) == "=") ? ">=" : ">";
					break;
				case "<":
					j = (l.charAt(1) == "=") ? "<=" : "<";
					break
			}
			if (j) {
				l = l.slice(j.length)
			} else {
				j = "="
			}
			if (l == k) {
				return (j == "=" || j == "<=" || j == ">=")
			} else {
				if (l < k) {
					return (j == "<" || j == "<=")
				} else {
					return (j == ">" || j == ">=")
				}
			}
		},
		isVersionMatch: function(q, o) {
			var n;
			if (q.length > 0) {
				switch (q.charAt(0)) {
					case ">":
						n = (q.charAt(1) == "=") ? ">=" : ">";
						break;
					case "<":
						n = (q.charAt(1) == "=") ? "<=" : "<";
						break;
					case "=":
						n = (q.charAt(1) == "=") ? "==" : "=";
						break
				}
			}
			if (n) {
				q = q.slice(n.length)
			} else {
				n = "="
			}
			var q = q.split(".");
			var o = o.split(".");
			var j = Math.max(q.length, o.length);
			for (var m = 0; m < j; m++) {
				var k = "0." + (q[m] || 0);
				var p = "0." + (o[m] || 0);
				if (k == p) {
					continue
				}
				if (k < p) {
					return (n == "<" || n == "<=")
				} else {
					return (n == ">" || n == ">=")
				}
			}
			return true
		},
		sdkVersion: function(j) {
			return this.isVersionMatch("" + j, Capabilities.getSDKVersion())
		},
		binaryVersion: function(j) {
			return this.isVersionMatch("" + j, Capabilities.getBinaryVersion())
		},
		platformOS: function(j) {
			return j == d()
		},
		platformOSVersion: function(j) {
			return this.isVersionMatch("" + j, Capabilities.getPlatformOSVersion())
		},
		platformHW: function(j) {
			return j == Capabilities.getPlatformHW()
		},
		physicalMem: function(j) {
			return this.isMatch(j, Capabilities.getPhysicalMem())
		},
		physicalCpus: function(j) {
			return this.isMatch(j, Capabilities.getPhysicalCpus())
		},
		activeCpus: function(j) {
			return this.isMatch(j, Capabilities.getActiveCpus())
		},
		language: function(j) {
			return j == Capabilities.getLanguage()
		},
		textureMatch: "none",
		textureCompression: function(k) {
			var j = Capabilities.getOglExtensions().indexOf(c(k)) > -1;
			if (j) {
				this.textureMatch = k
			}
			return j
		},
		screenWidth: function(j) {
			return this.isMatch(j, Capabilities.getScreenWidth())
		},
		screenHeight: function(j) {
			return this.isMatch(j, Capabilities.getScreenHeight())
		},
		screenResolution: function(j) {
			return j == (Capabilities.getScreenWidth() + "x" + Capabilities.getScreenHeight())
		},
		screenUnits: function(j) {
			return this.isMatch(j, Capabilities.getScreenUnits())
		},
		screenPixelUnits: function(j) {
			return this.isMatch(j, Capabilities.getScreenPixelUnits())
		},
		maxTextureSize: function(j) {
			return this.isMatch(j, Capabilities.getMaxTextureSize())
		},
		reset: function(j) {
			this.textureMatch = "none"
		}
	};
	var e = a.singleton({
		classname: "_int_LGL",
		launch: function(k, j) {
			var m = require("NGCore/Client/Network/Util").Util;
			if (!j) {
				j = e.ProcID.Game
			}
			k = m.NormalizeUrl(k);
			var l = (function() {
				gNgShutdownPending = true;
				this._launchSendGen(k, j)
			}).bind(this);
			if (j == e.ProcID.Game) {
				this.updateGameUse(k, l)
			} else {
				l()
			}
		},
		updateAvailable: function(t, l, q) {
			var j = t;
			if (!j.match(/^\//) && !j.match(/https?:\/\//)) {
				j = "/" + j
			}
			var o = require("NGCore/Client/Core/Capabilities").Capabilities;
			var k = "";
			if (o.getUrl() != t) {
				var r = require("NGCore/Client/Network/Util").Util;
				j = r.NormalizeUrl(j);
				k = r.GetMD5HashDirectoryFromUrl(j)
			}
			var m = {
				Android: "android",
				"iPhone OS": "ios",
				flash: ""
			};
			var s = "/" + m[o.getPlatformOS()];
			var n = require("NGCore/Client/Network/DownloadManifest").DownloadManifest;
			var p = new n();
			p.isUpdated(j + s, k, false, l, q)
		},
		updateGameUse: function(l, j) {
			var p = require("NGCore/Client/Network/Util").Util;
			var n = p.NormalizeUrl(l);
			var m = p.GetMD5HashDirectoryFromUrl(n);
			var k = this;
			var o = require("NGCore/Client/Storage/KeyValue").KeyValueCache;
			this.mGameStore = o.global("Core.GameList");
			this.mActiveGameKey = "activeGames";
			this.mGameStore.getItem(this.mActiveGameKey, function(q, u) {
				var t;
				if (u) {
					t = JSON.parse(u)
				} else {
					t = []
				}
				var s;
				for (var r in t) {
					if (t[r].name == m) {
						s = t[r];
						break
					}
				}
				if (!s) {
					s = {
						name: m
					};
					t.push(s)
				}
				s.lastRun = (new Date()).getTime();
				s.url = l;
				k.mGameStore.setItem(k.mActiveGameKey, JSON.stringify(t));
				LocalGameList.updateGameList(t);
				j()
			}, true)
		},
		getManifestName: function(k) {
			var x = "webgame.ngmanifest";
			if (k && k.manifestOverrides) {
				try {
					var t = k.manifestOverrides;
					for (var m = 0; m < t.length; m++) {
						var j = t[m];
						if (j && j.criteria) {
							f.reset();
							var q = j.criteria;
							var p = true;
							for (var u in q) {
								if (!q.hasOwnProperty(u)) {
									continue
								}
								var s = q[u];
								var n = f[u];
								if (typeof n != "function") {
									console.log("ERROR! Undefined criterion " + u + " in configuration.json");
									p = false;
									break
								}
								var l = false;
								if (s instanceof Array) {
									for (vi = 0; vi < s.length; vi++) {
										l |= n.call(f, s[vi]);
										if (l) {
											break
										}
									}
								} else {
									l = n(s)
								}
								if (!l) {
									p = false;
									break
								}
							}
							if (p) {
								console.log("MATCHED Override: " + JSON.stringify(j));
								var r = j.manifest.slice(0);
								for (var w = 1; w < r.length; w++) {
									var u = r[w];
									switch (u) {
										case "textureCompression":
											r[w] = f.textureMatch;
											break;
										case "platformOS":
											r[w] = d();
											break;
										default:
											var v = Capabilities["get" + u.charAt(0).toUpperCase() + u.slice(1)]();
											r[w] = v.replace(" ", "_")
									}
								}
								return require("NGCore/Shared/Lib/sprintf").sprintf(r)
							} else {
								console.log("DID NOT MATCH Override: " + JSON.stringify(j))
							}
						}
					}
				} catch (o) {
					console.log("ERROR! Exception occurred in manifest overrides: " + o)
				}
			}
			return x
		},
		ProcID: {
			Persist: -1,
			Game: -2,
		},
		$_commandRecvGen: (function() {
			var j = (function(n) {
				var l = h.parseInt(n.shift(), 10);
				if (l > 0) {
					var m = h.parseInt(n.shift(), 10);
					var k = ObjectRegistry.idToObject(m);
					if (!k) {
						NgLogE("Object instance could not be found for command " + n + ". It may have been destroyed this frame.");
						return
					}
					switch (l) {
						default:
							NgLogE("Unknown instance method id " + l + " in _int_LGL._commandRecvGen from command: " + n);
							return
					}
				} else {
					switch (l) {
						default:
							NgLogE("Unknown static method id " + l + " in _int_LGL._commandRecvGen from command: " + n);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[342] = j;
			return j
		})(),
		$_launchSendGen: function(k, j) {
			h.appendToCommandString(":342,-1," + g.encode(k) + "," + j)
		},
	});
	b._int_LGL = e;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Storage/KeyValue"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Storage/KeyValue"] || {};
	$MODULE_REGISTRY["NGCore/Client/Storage/KeyValue"] = b;
	var d = require("NGCore/Client/Core").Core;

	function c() {}
	b.KeyValueCache = c;
	c.lruMeanCacheSize = 100;
	c.instanceMap = {};
	var a = [];
	c.optimizeCaches = function() {
		for (var e in c.instanceMap) {
			if (c.instanceMap.hasOwnProperty(e)) {
				c.instanceMap[e].optimize()
			}
		}
	};
	c.lowMemoryWarning = function() {
		for (var h in c.instanceMap) {
			if (c.instanceMap.hasOwnProperty(h)) {
				var e = c.instanceMap[h];
				e.data = {};
				var f = {};
				f.uidGenerator = e.callbacks.uidGenerator;
				for (var g in e.callbacks) {
					if (e.callbacks.hasOwnProperty(g)) {
						if (e.callbacks[g]) {
							f = e.callbacks[g]
						}
					}
				}
				e.callbacks = f
			}
		}
	};
	c.init = function() {
		c.local = new Storage.KeyValue();
		c.local.registerForKey("local")
	};
	c.global = function(e) {
		if (a[e]) {
			return a[e]
		}
		var f = new Storage.KeyValue();
		f.registerForKey(e);
		a[e] = f;
		return f
	};
	b.KeyValue = d.Class.subclass({
		classname: "KeyValue",
		initialize: function() {
			this.initialized = false;
			this.origin = null;
			this.callbacks = {};
			this.callbacks.uidGenerator = 0;
			this.local = false;
			this.lruCacheShrinkCounter = 0;
			this.data = {};
			this.usage = {};
			d.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		destroy: function() {
			this._destroySendGen();
			d.ObjectRegistry.unregister(this)
		},
		registerForKey: function(e) {
			this.origin = e;
			c.instanceMap[e] = this;
			this._registerCommandSendGen(this.origin, c.lruMeanCacheSize);
			return this
		},
		getItem: function(f, e, h) {
			if (!h) {
				if (this.data[f]) {
					e(null, this.data[f], f);
					this.usage[f]++;
					return
				} else {
					NgLogD("Value not found in cache for..falling back to native")
				}
			}
			var g = this.callbacks.uidGenerator++;
			if (!!!e) {
				e = function() {}
			}
			this.callbacks[g] = e;
			this._getItemSendGen(this.origin, g, f)
		},
		setItem: function(f, h, e) {
			var h = h;
			this.data[f] = h;
			var g = this.callbacks.uidGenerator++;
			if (!e) {
				e = function() {}
			}
			this.callbacks[g] = e;
			this._setItemSendGen(this.origin, g, f, h)
		},
		removeItem: function(f, e) {
			var g = this.callbacks.uidGenerator++;
			if (!!!e) {
				e = function() {}
			}
			this.callbacks[g] = e;
			this._removeItemSendGen(this.origin, g, f)
		},
		clear: function(e) {
			var f = this.callbacks.uidGenerator++;
			if (!!!e) {
				e = function() {}
			}
			this.callbacks[f] = e;
			this._clearSendGen(this.origin, f)
		},
		enforceLRUCacheSize: function() {
			NgLogD("Enforcing KeyValue Cache Size");
			var g = [];
			for (var e in this.data) {
				if (this.data.hasOwnProperty(e)) {
					g.push(e)
				}
			}
			var h = this.usage;
			g.sort(function(m, k) {
				var o = h[m];
				if (!o) {
					o = 0
				}
				var n = h[k];
				if (!n) {
					n = 0
				}
				if (o == n) {
					return 0
				}
				return o < n ? 1 : -1
			});
			var j = this.data;
			this.data = {};
			var l = c.lruMeanCacheSize;
			for (var f = 0; f < l && f < g.length; f++) {
				if (!j[g[f]]) {
					l++
				} else {
					this.data[g[f]] = j[g[f]]
				}
			}
		},
		_getInstanceRecv: function(g) {
			var h = {};
			if (!this._getInstanceRecvGen(g, h)) {
				return
			}
			var f = h.storeKey;
			var e = c.instanceMap[f];
			return e
		},
		_registerCommandCbRecv: function(g) {
			var h = {};
			if (!this._registerCommandCbRecvGen(g, h)) {
				return
			}
			if (h.error) {
				console.log("Storage: Error registering for KeyValue location '" + h.error + "'");
				if (!this.initialized) {
					delete a[h.originalStoreKey]
				}
				return
			}
			if (this.origin == "local") {
				this.local = true;
				a[this.origin] = this
			}
			this.origin = h.storeKey;
			this.initialized = true;
			for (var f = 0; f < h.preloadDataCount; ++f) {
				var e = {};
				if (!this._preloadDataRecvGen(g, e)) {
					return
				}
				this.data[e.key] = e.value
			}
		},
		_getItemCommandCbRecv: function(j) {
			var k = {};
			if (!this._getItemCommandCbRecvGen(j, k)) {
				return
			}
			var g = k.callbackId;
			var e = k.error;
			var f = k.key;
			var h = k.value;
			if (e) {
				h = null
			}
			this.data[f] = h;
			if (!this.usage[f]) {
				this.usage[f] = 1
			} else {
				this.usage[f]++
			}
			cb = this.callbacks[g];
			if (typeof cb == "function") {
				cb(e, h, f);
				this.callbacks[g] = null
			}
			if (((this.lruCacheShrinkCounter++) % c.lruMeanCacheSize) === 0) {
				this.enforceLRUCacheSize()
			}
			return this
		},
		_setItemCommandCbRecv: function(h) {
			var j = {};
			if (!this._setItemCommandCbRecvGen(h, j)) {
				return
			}
			var g = j.callbackId;
			var e = j.error;
			var f = j.key;
			if (!this.usage[f]) {
				this.usage[f] = 1
			} else {
				this.usage[f]++
			}
			cb = this.callbacks[g];
			if (typeof cb == "function") {
				cb(e, f);
				this.callbacks[g] = null
			}
			if (((this.lruCacheShrinkCounter++) % c.lruMeanCacheSize) === 0) {
				this.enforceLRUCacheSize()
			}
		},
		_removeItemCbRecv: function(h) {
			var j = {};
			if (!this._removeItemCbRecvGen(h, j)) {
				return
			}
			var g = j.callbackId;
			var e = j.error;
			var f = j.key;
			delete this.usage[f];
			delete this.data[f];
			cb = this.callbacks[g];
			if (typeof cb == "function") {
				cb(e, f);
				this.callbacks[g] = null
			}
		},
		_clearCommandCbRecv: function(g) {
			var h = {};
			if (!this._clearCommandCbRecvGen(g, h)) {
				return
			}
			var f = h.callbackId;
			var e = h.error;
			this.data = {};
			this.usage = {};
			cb = this.callbacks[f];
			if (typeof cb == "function") {
				cb(e, this.origin);
				this.callbacks[f] = null
			}
		},
		Responses: {
			Register: 0,
			GetItem: 1,
			SetItem: 2,
			RemoveItem: 3,
			Clear: 4,
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = d.Proc.parseInt(j.shift(), 10);
				if (g > 0) {
					var h = d.Proc.parseInt(j.shift(), 10);
					var f = d.ObjectRegistry.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						case 8:
							f._getInstanceRecv(j);
							break;
						case 9:
							f._registerCommandCbRecv(j);
							break;
						case 10:
							f._preloadDataRecv(j);
							break;
						case 11:
							f._getItemCommandCbRecv(j);
							break;
						case 12:
							f._setItemCommandCbRecv(j);
							break;
						case 13:
							f._removeItemCbRecv(j);
							break;
						case 14:
							f._clearCommandCbRecv(j);
							break;
						default:
							NgLogE("Unknown instance method id " + g + " in KeyValue._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						default:
							NgLogE("Unknown static method id " + g + " in KeyValue._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[339] = e;
			return e
		})(),
		_getInstanceRecvGen: function(e, f) {
			if (e.length != 3) {
				NgLogE("Could not parse due to wrong argument count in KeyValue.getInstance from command: " + e);
				return false
			}
			f.response = d.Proc.parseInt(e[0]);
			if (f.response === undefined) {
				NgLogE("Could not parse response in KeyValue.getInstance from command: " + e);
				return false
			}
			f.storeKey = d.Proc.parseString(e[1]);
			if (f.storeKey === undefined) {
				NgLogE("Could not parse storeKey in KeyValue.getInstance from command: " + e);
				return false
			}
			f.key = d.Proc.parseString(e[2]);
			if (f.key === undefined) {
				NgLogE("Could not parse key in KeyValue.getInstance from command: " + e);
				return false
			}
			return true
		},
		_registerCommandCbRecvGen: function(e, f) {
			if (e.length < 5) {
				NgLogE("Could not parse due to wrong argument count in KeyValue.registerCommandCb from command: " + e);
				return false
			}
			f.response = d.Proc.parseInt(e[0]);
			if (f.response === undefined) {
				NgLogE("Could not parse response in KeyValue.registerCommandCb from command: " + e);
				return false
			}
			f.originalStoreKey = d.Proc.parseString(e[1]);
			if (f.originalStoreKey === undefined) {
				NgLogE("Could not parse originalStoreKey in KeyValue.registerCommandCb from command: " + e);
				return false
			}
			f.error = d.Proc.parseString(e[2]);
			if (f.error === undefined) {
				NgLogE("Could not parse error in KeyValue.registerCommandCb from command: " + e);
				return false
			}
			f.storeKey = d.Proc.parseString(e[3]);
			if (f.storeKey === undefined) {
				NgLogE("Could not parse storeKey in KeyValue.registerCommandCb from command: " + e);
				return false
			}
			f.preloadDataCount = d.Proc.parseInt(e[4]);
			if (f.preloadDataCount === undefined) {
				NgLogE("Could not parse preloadDataCount in KeyValue.registerCommandCb from command: " + e);
				return false
			}
			e.splice(0, 5);
			return true
		},
		_preloadDataRecvGen: function(e, f) {
			if (e.length < 2) {
				NgLogE("Could not parse due to wrong argument count in KeyValue.preloadData from command: " + e);
				return false
			}
			f.key = d.Proc.parseString(e[0]);
			if (f.key === undefined) {
				NgLogE("Could not parse key in KeyValue.preloadData from command: " + e);
				return false
			}
			f.value = d.Proc.parseString(e[1]);
			if (f.value === undefined) {
				NgLogE("Could not parse value in KeyValue.preloadData from command: " + e);
				return false
			}
			e.splice(0, 2);
			return true
		},
		_getItemCommandCbRecvGen: function(e, f) {
			if (e.length != 6) {
				NgLogE("Could not parse due to wrong argument count in KeyValue.getItemCommandCb from command: " + e);
				return false
			}
			f.response = d.Proc.parseInt(e[0]);
			if (f.response === undefined) {
				NgLogE("Could not parse response in KeyValue.getItemCommandCb from command: " + e);
				return false
			}
			f.storeKey = d.Proc.parseString(e[1]);
			if (f.storeKey === undefined) {
				NgLogE("Could not parse storeKey in KeyValue.getItemCommandCb from command: " + e);
				return false
			}
			f.callbackId = d.Proc.parseInt(e[2]);
			if (f.callbackId === undefined) {
				NgLogE("Could not parse callbackId in KeyValue.getItemCommandCb from command: " + e);
				return false
			}
			f.error = d.Proc.parseString(e[3]);
			if (f.error === undefined) {
				NgLogE("Could not parse error in KeyValue.getItemCommandCb from command: " + e);
				return false
			}
			f.key = d.Proc.parseString(e[4]);
			if (f.key === undefined) {
				NgLogE("Could not parse key in KeyValue.getItemCommandCb from command: " + e);
				return false
			}
			f.value = d.Proc.parseString(e[5]);
			if (f.value === undefined) {
				NgLogE("Could not parse value in KeyValue.getItemCommandCb from command: " + e);
				return false
			}
			return true
		},
		_setItemCommandCbRecvGen: function(e, f) {
			if (e.length != 6) {
				NgLogE("Could not parse due to wrong argument count in KeyValue.setItemCommandCb from command: " + e);
				return false
			}
			f.response = d.Proc.parseInt(e[0]);
			if (f.response === undefined) {
				NgLogE("Could not parse response in KeyValue.setItemCommandCb from command: " + e);
				return false
			}
			f.storeKey = d.Proc.parseString(e[1]);
			if (f.storeKey === undefined) {
				NgLogE("Could not parse storeKey in KeyValue.setItemCommandCb from command: " + e);
				return false
			}
			f.callbackId = d.Proc.parseInt(e[2]);
			if (f.callbackId === undefined) {
				NgLogE("Could not parse callbackId in KeyValue.setItemCommandCb from command: " + e);
				return false
			}
			f.error = d.Proc.parseString(e[3]);
			if (f.error === undefined) {
				NgLogE("Could not parse error in KeyValue.setItemCommandCb from command: " + e);
				return false
			}
			f.key = d.Proc.parseString(e[4]);
			if (f.key === undefined) {
				NgLogE("Could not parse key in KeyValue.setItemCommandCb from command: " + e);
				return false
			}
			f.value = d.Proc.parseString(e[5]);
			if (f.value === undefined) {
				NgLogE("Could not parse value in KeyValue.setItemCommandCb from command: " + e);
				return false
			}
			return true
		},
		_removeItemCbRecvGen: function(e, f) {
			if (e.length != 5) {
				NgLogE("Could not parse due to wrong argument count in KeyValue.removeItemCb from command: " + e);
				return false
			}
			f.response = d.Proc.parseInt(e[0]);
			if (f.response === undefined) {
				NgLogE("Could not parse response in KeyValue.removeItemCb from command: " + e);
				return false
			}
			f.storeKey = d.Proc.parseString(e[1]);
			if (f.storeKey === undefined) {
				NgLogE("Could not parse storeKey in KeyValue.removeItemCb from command: " + e);
				return false
			}
			f.callbackId = d.Proc.parseInt(e[2]);
			if (f.callbackId === undefined) {
				NgLogE("Could not parse callbackId in KeyValue.removeItemCb from command: " + e);
				return false
			}
			f.error = d.Proc.parseString(e[3]);
			if (f.error === undefined) {
				NgLogE("Could not parse error in KeyValue.removeItemCb from command: " + e);
				return false
			}
			f.key = d.Proc.parseString(e[4]);
			if (f.key === undefined) {
				NgLogE("Could not parse key in KeyValue.removeItemCb from command: " + e);
				return false
			}
			return true
		},
		_clearCommandCbRecvGen: function(e, f) {
			if (e.length != 4) {
				NgLogE("Could not parse due to wrong argument count in KeyValue.clearCommandCb from command: " + e);
				return false
			}
			f.response = d.Proc.parseInt(e[0]);
			if (f.response === undefined) {
				NgLogE("Could not parse response in KeyValue.clearCommandCb from command: " + e);
				return false
			}
			f.storeKey = d.Proc.parseString(e[1]);
			if (f.storeKey === undefined) {
				NgLogE("Could not parse storeKey in KeyValue.clearCommandCb from command: " + e);
				return false
			}
			f.callbackId = d.Proc.parseInt(e[2]);
			if (f.callbackId === undefined) {
				NgLogE("Could not parse callbackId in KeyValue.clearCommandCb from command: " + e);
				return false
			}
			f.error = d.Proc.parseString(e[3]);
			if (f.error === undefined) {
				NgLogE("Could not parse error in KeyValue.clearCommandCb from command: " + e);
				return false
			}
			return true
		},
		$_createSendGen: function(e) {
			d.Proc.appendToCommandString(":339,-1," + e)
		},
		_destroySendGen: function() {
			d.Proc.appendToCommandString(":339,2," + this.__objectRegistryId)
		},
		_registerCommandSendGen: function(f, e) {
			d.Proc.appendToCommandString(":339,3," + this.__objectRegistryId + "," + d.Base64.encode(f) + "," + e)
		},
		_getItemSendGen: function(f, g, e) {
			d.Proc.appendToCommandString(":339,4," + this.__objectRegistryId + "," + d.Base64.encode(f) + "," + g + "," + d.Base64.encode(e))
		},
		_setItemSendGen: function(f, h, e, g) {
			d.Proc.appendToCommandString(":339,5," + this.__objectRegistryId + "," + d.Base64.encode(f) + "," + h + "," + d.Base64.encode(e) + "," + d.Base64.encode(g))
		},
		_removeItemSendGen: function(f, g, e) {
			d.Proc.appendToCommandString(":339,6," + this.__objectRegistryId + "," + d.Base64.encode(f) + "," + g + "," + d.Base64.encode(e))
		},
		_clearSendGen: function(e, f) {
			d.Proc.appendToCommandString(":339,7," + this.__objectRegistryId + "," + d.Base64.encode(e) + "," + f)
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Lib/sprintf"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Shared/Lib/sprintf"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Lib/sprintf"] = a;
	a.sprintf = function() {
		str_repeat = function(f, c) {
			for (var p = []; c > 0; p[--c] = f) {}
			return p.join("")
		};
		var g = new Array();
		var j = false;
		var k = 1;
		if (typeof(arguments[0]) == "object" && arguments[0].length) {
			j = true;
			for (var h = 0; h < arguments[0].length; ++h) {
				g[h] = arguments[0][h]
			}
		} else {
			for (var h = 0; h < arguments.length; ++h) {
				g[h] = arguments[h]
			}
		}
		var h = 0,
			r, l = g[h++],
			d = [],
			e, b, n, q, t = "";
		while (l) {
			if (e = /^[^\x25]+/.exec(l)) {
				d.push(e[0])
			} else {
				if (e = /^\x25{2}/.exec(l)) {
					d.push("%")
				} else {
					if (e = /^\x25(?:(\d+)\$)?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(l)) {
						if (((r = g[e[1] || h++]) == null) || (r == undefined)) {
							throw ("Too few arguments.")
						}
						if (/[^s]/.test(e[7]) && (typeof(r) != "number")) {
							throw ("Expecting number but found " + typeof(r))
						}
						switch (e[7]) {
							case "b":
								r = r.toString(2);
								break;
							case "c":
								r = String.fromCharCode(r);
								break;
							case "d":
								r = parseInt(r);
								break;
							case "e":
								r = e[6] ? r.toExponential(e[6]) : r.toExponential();
								break;
							case "f":
								r = e[6] ? parseFloat(r).toFixed(e[6]) : parseFloat(r);
								break;
							case "o":
								r = r.toString(8);
								break;
							case "s":
								r = ((r = String(r)) && e[6] ? r.substring(0, e[6]) : r);
								break;
							case "u":
								r = Math.abs(r);
								break;
							case "x":
								r = r.toString(16);
								break;
							case "X":
								r = r.toString(16).toUpperCase();
								break
						}
						r = (/[def]/.test(e[7]) && e[2] && r >= 0 ? "+" + r : r);
						n = e[3] ? e[3] == "0" ? "0" : e[3].charAt(1) : " ";
						q = e[5] - String(r).length - t.length;
						b = e[5] ? str_repeat(n, q) : "";
						d.push(t + (e[4] ? r + b : b + r));
						if (j) {
							++k
						}
					} else {
						throw ("Huh ?!")
					}
				}
			}
			l = l.substring(e[0].length)
		}
		if (j && k > 0) {
			arguments[0].splice(0, k)
		}
		return d.join("")
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/LocationEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/LocationEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/LocationEmitter"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.LocationEmitter = b.MessageEmitter.singleton({
		classname: "LocationEmitter",
		Accuracy: {
			LOW: 0,
			MEDIUM: 1,
			HIGH: 2
		},
		Elements: {
			LATITUDE: 1,
			LONGITUDE: 2,
			ALTITUDE: 4,
			HEADING: 8
		},
		initialize: function() {
			b.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId);
			this._lastLocation = undefined;
			this._forceListeners = []
		},
		setProperties: function(d, c) {
			if (!d) {
				d = this.Accuracy.HIGH
			}
			if (!c) {
				c = this.Elements.LATITUDE | this.Elements.LONGITUDE | this.Elements.ALTITUDE | this.Elements.HEADING
			}
			this.accuracy = d;
			this.elements = c;
			this._setPropertiesSendGen(d, c)
		},
		addListener: function($super, e, d, f, c) {
			if (f == undefined) {
				this._startUpdatingSendGen(true);
				this._forceListeners.push(e)
			} else {
				this._startUpdatingSendGen(f);
				if (f == true) {
					this._forceListeners.push(e)
				}
			}
			$super(e, d, c)
		},
		removeListener: function($super, d) {
			$super(d);
			var c = this._forceListeners.indexOf(d);
			if (c != -1) {
				this._forceListeners.splice(c, 1);
				if (this._forceListeners.length == 0) {
					this._stopUpdatingSendGen()
				}
			}
		},
		getLastLocation: function() {
			if (this._lastLocation == undefined || !this._lastLocation.getPosition()) {
				return undefined
			}
			return this._lastLocation
		},
		_locationUpdatedRecv: function(c) {
			var d = {};
			if (!this._locationUpdatedRecvGen(c, d)) {
				return
			}
			if (((this.elements & this.Elements.LATITUDE) == 0) && ((this.elements & this.Elements.LONGITUDE) == 0) && ((this.Elements & this.Elements.ALTITUDE) == 0)) {
				return
			}
			this._lastLocation = new this.Location(new b.Point(d.latitude, d.longitude), d.altitude, undefined, d.accuracy, d.timestamp);
			this.emit(this._lastLocation)
		},
		_headingUpdatedRecv: function(c) {
			var d = {};
			if (!this._headingUpdatedRecvGen(c, d)) {
				return
			}
			if ((this.elements & this.Elements.HEADING) == 0) {
				return
			}
			this._lastLocation = new this.Location(this._lastLocation ? this._lastLocation.getPosition() : undefined, this._lastLocation ? this._lastLocation.getAltitude() : undefined, d.magneticHeading, this._lastLocation ? this._lastLocation.getAccuracy() : undefined, d.timestamp);
			if (d.magneticHeading) {
				this.emit(this._lastLocation)
			}
		},
		Location: b.Class.subclass({
			classname: "Location",
			initialize: function(d, c, g, f, e) {
				this._position = d;
				this._altitude = c;
				this._accuracy = f;
				this._heading = g;
				this._timestamp = e
			},
			getPosition: function() {
				return this._position
			},
			getAltitude: function() {
				return this._altitude
			},
			getHeading: function() {
				return this._heading
			},
			getAccuracy: function() {
				return this._accuracy
			},
			getTimestamp: function() {
				return this._timestamp
			},
		}),
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = b.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = b.Proc.parseInt(g.shift(), 10);
					var d = b.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						case 5:
							d._locationUpdatedRecv(g);
							break;
						case 8:
							d._headingUpdatedRecv(g);
							break;
						default:
							NgLogE("Unknown instance method id " + e + " in LocationEmitter._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in LocationEmitter._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[333] = c;
			return c
		})(),
		_locationUpdatedRecvGen: function(c, d) {
			if (c.length != 5) {
				NgLogE("Could not parse due to wrong argument count in LocationEmitter.locationUpdated from command: " + c);
				return false
			}
			d.timestamp = b.Proc.parseInt(c[0]);
			if (d.timestamp === undefined) {
				NgLogE("Could not parse timestamp in LocationEmitter.locationUpdated from command: " + c);
				return false
			}
			d.latitude = b.Proc.parseFloat(c[1]);
			if (d.latitude === undefined) {
				NgLogE("Could not parse latitude in LocationEmitter.locationUpdated from command: " + c);
				return false
			}
			d.longitude = b.Proc.parseFloat(c[2]);
			if (d.longitude === undefined) {
				NgLogE("Could not parse longitude in LocationEmitter.locationUpdated from command: " + c);
				return false
			}
			d.altitude = b.Proc.parseFloat(c[3]);
			if (d.altitude === undefined) {
				NgLogE("Could not parse altitude in LocationEmitter.locationUpdated from command: " + c);
				return false
			}
			d.accuracy = b.Proc.parseFloat(c[4]);
			if (d.accuracy === undefined) {
				NgLogE("Could not parse accuracy in LocationEmitter.locationUpdated from command: " + c);
				return false
			}
			return true
		},
		_headingUpdatedRecvGen: function(c, d) {
			if (c.length != 4) {
				NgLogE("Could not parse due to wrong argument count in LocationEmitter.headingUpdated from command: " + c);
				return false
			}
			d.timestamp = b.Proc.parseInt(c[0]);
			if (d.timestamp === undefined) {
				NgLogE("Could not parse timestamp in LocationEmitter.headingUpdated from command: " + c);
				return false
			}
			d.magneticHeading = b.Proc.parseFloat(c[1]);
			if (d.magneticHeading === undefined) {
				NgLogE("Could not parse magneticHeading in LocationEmitter.headingUpdated from command: " + c);
				return false
			}
			d.trueHeading = b.Proc.parseFloat(c[2]);
			if (d.trueHeading === undefined) {
				NgLogE("Could not parse trueHeading in LocationEmitter.headingUpdated from command: " + c);
				return false
			}
			d.accuracy = b.Proc.parseFloat(c[3]);
			if (d.accuracy === undefined) {
				NgLogE("Could not parse accuracy in LocationEmitter.headingUpdated from command: " + c);
				return false
			}
			return true
		},
		$_createSendGen: function(c) {
			b.Proc.appendToCommandString(":333,-1," + c)
		},
		_destroySendGen: function() {
			b.Proc.appendToCommandString(":333,2," + this.__objectRegistryId)
		},
		_startUpdatingLocationSendGen: function(d, c) {
			b.Proc.appendToCommandString(":333,3," + this.__objectRegistryId + "," + d + "," + c)
		},
		_stopUpdatingLocationSendGen: function() {
			b.Proc.appendToCommandString(":333,4," + this.__objectRegistryId)
		},
		_locationUpdatedSendGen: function(e, g, d, c, f) {
			b.Proc.appendToCommandString(":333,5," + this.__objectRegistryId + "," + e + "," + g + "," + d + "," + c + "," + f)
		},
		_startUpdatingHeadingSendGen: function(c, d) {
			b.Proc.appendToCommandString(":333,6," + this.__objectRegistryId + "," + c + "," + d)
		},
		_stopUpdatingHeadingSendGen: function() {
			b.Proc.appendToCommandString(":333,7," + this.__objectRegistryId)
		},
		_headingUpdatedSendGen: function(e, c, d, f) {
			b.Proc.appendToCommandString(":333,8," + this.__objectRegistryId + "," + e + "," + c + "," + d + "," + f)
		},
		_setPropertiesSendGen: function(d, c) {
			b.Proc.appendToCommandString(":333,9," + this.__objectRegistryId + "," + d + "," + c)
		},
		_startUpdatingSendGen: function(c) {
			b.Proc.appendToCommandString(":333,10," + this.__objectRegistryId + "," + (c ? 1 : 0))
		},
		_stopUpdatingSendGen: function() {
			b.Proc.appendToCommandString(":333,11," + this.__objectRegistryId)
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/MemoryEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/MemoryEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/MemoryEmitter"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.MemoryEmitter = b.MessageEmitter.singleton({
		classname: "MemoryEmitter",
		initialize: function() {
			b.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		_memoryEventRecv: function(c) {
			this.emit();
			this._memoryEventSendGen()
		},
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = b.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = b.Proc.parseInt(g.shift(), 10);
					var d = b.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						case 2:
							d._memoryEventRecv(g);
							break;
						default:
							NgLogE("Unknown instance method id " + e + " in MemoryEmitter._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in MemoryEmitter._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[331] = c;
			return c
		})(),
		_memoryEventRecvGen: function(c, d) {
			if (c.length != 0) {
				NgLogE("Could not parse due to wrong argument count in MemoryEmitter.memoryEvent from command: " + c);
				return false
			}
			return true
		},
		$_createSendGen: function(c) {
			b.Proc.appendToCommandString(":331,-1," + c)
		},
		_memoryEventSendGen: function() {
			b.Proc.appendToCommandString(":331,2," + this.__objectRegistryId)
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/MotionEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/MotionEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/MotionEmitter"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.MotionEmitter = b.MessageEmitter.singleton({
		classname: "MotionEmitter",
		initialize: function() {
			b.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId);
			this._lastAccel = null;
			this._lastGyro = null;
			this._lastCompass = null
		},
		Motion: b.Class.subclass({
			classname: "Motion",
			initialize: function(c, d, e) {
				this._accel = c;
				this._gyro = d;
				this._compass = e
			},
			getAccelData: function() {
				return this._accel
			},
			getGyroData: function() {
				return this._gyro
			},
			getCompassData: function() {
				return this._compass
			},
		}),
		addListener: function($super, e, d, c) {
			if (this.getListenerCount() == 0) {
				this._startMotionSendGen()
			}
			$super(e, d, c)
		},
		removeListener: function($super, c) {
			$super(c);
			if (this.getListenerCount() == 0) {
				this._stopMotionSendGen()
			}
		},
		_emitMotion: function() {
			var c = new Device.MotionEmitter.Motion(this._lastAccel, this._lastGyro, this._lastCompass);
			this.emit(c)
		},
		_accelChangedRecv: function(c) {
			var d = {};
			if (!this._accelChangedRecvGen(c, d)) {
				return
			}
			this._lastAccel = d;
			this._emitMotion();
			this._accelChangedSendGen(d.x, d.y, d.z)
		},
		_gyroChangedRecv: function(c) {
			var d = {};
			if (!this._gyroChangedRecvGen(c, d)) {
				return
			}
			this._lastGyro = d;
			this._emitMotion();
			this._gyroChangedSendGen(d.x, d.y, d.z)
		},
		_magneticChangedRecv: function(c) {
			var d = {};
			if (!this._magneticChangedRecvGen(c, d)) {
				return
			}
			this._lastCompass = d;
			this._emitMotion();
			this._magneticChangedSendGen(d.x, d.y, d.z)
		},
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = b.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = b.Proc.parseInt(g.shift(), 10);
					var d = b.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						case 2:
							d._accelChangedRecv(g);
							break;
						case 3:
							d._gyroChangedRecv(g);
							break;
						case 4:
							d._magneticChangedRecv(g);
							break;
						default:
							NgLogE("Unknown instance method id " + e + " in MotionEmitter._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in MotionEmitter._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[330] = c;
			return c
		})(),
		_accelChangedRecvGen: function(c, d) {
			if (c.length != 3) {
				NgLogE("Could not parse due to wrong argument count in MotionEmitter.accelChanged from command: " + c);
				return false
			}
			d.x = b.Proc.parseFloat(c[0]);
			if (d.x === undefined) {
				NgLogE("Could not parse x in MotionEmitter.accelChanged from command: " + c);
				return false
			}
			d.y = b.Proc.parseFloat(c[1]);
			if (d.y === undefined) {
				NgLogE("Could not parse y in MotionEmitter.accelChanged from command: " + c);
				return false
			}
			d.z = b.Proc.parseFloat(c[2]);
			if (d.z === undefined) {
				NgLogE("Could not parse z in MotionEmitter.accelChanged from command: " + c);
				return false
			}
			return true
		},
		_gyroChangedRecvGen: function(c, d) {
			if (c.length != 3) {
				NgLogE("Could not parse due to wrong argument count in MotionEmitter.gyroChanged from command: " + c);
				return false
			}
			d.x = b.Proc.parseFloat(c[0]);
			if (d.x === undefined) {
				NgLogE("Could not parse x in MotionEmitter.gyroChanged from command: " + c);
				return false
			}
			d.y = b.Proc.parseFloat(c[1]);
			if (d.y === undefined) {
				NgLogE("Could not parse y in MotionEmitter.gyroChanged from command: " + c);
				return false
			}
			d.z = b.Proc.parseFloat(c[2]);
			if (d.z === undefined) {
				NgLogE("Could not parse z in MotionEmitter.gyroChanged from command: " + c);
				return false
			}
			return true
		},
		_magneticChangedRecvGen: function(c, d) {
			if (c.length != 3) {
				NgLogE("Could not parse due to wrong argument count in MotionEmitter.magneticChanged from command: " + c);
				return false
			}
			d.x = b.Proc.parseFloat(c[0]);
			if (d.x === undefined) {
				NgLogE("Could not parse x in MotionEmitter.magneticChanged from command: " + c);
				return false
			}
			d.y = b.Proc.parseFloat(c[1]);
			if (d.y === undefined) {
				NgLogE("Could not parse y in MotionEmitter.magneticChanged from command: " + c);
				return false
			}
			d.z = b.Proc.parseFloat(c[2]);
			if (d.z === undefined) {
				NgLogE("Could not parse z in MotionEmitter.magneticChanged from command: " + c);
				return false
			}
			return true
		},
		$_createSendGen: function(c) {
			b.Proc.appendToCommandString(":330,-1," + c)
		},
		_accelChangedSendGen: function(c, e, d) {
			b.Proc.appendToCommandString(":330,2," + this.__objectRegistryId + "," + c + "," + e + "," + d)
		},
		_gyroChangedSendGen: function(c, e, d) {
			b.Proc.appendToCommandString(":330,3," + this.__objectRegistryId + "," + c + "," + e + "," + d)
		},
		_magneticChangedSendGen: function(c, e, d) {
			b.Proc.appendToCommandString(":330,4," + this.__objectRegistryId + "," + c + "," + e + "," + d)
		},
		_startMotionSendGen: function() {
			b.Proc.appendToCommandString(":330,5," + this.__objectRegistryId)
		},
		_stopMotionSendGen: function() {
			b.Proc.appendToCommandString(":330,6," + this.__objectRegistryId)
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/NetworkEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/NetworkEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/NetworkEmitter"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.NetworkEmitter = b.MessageEmitter.singleton({
		classname: "NetworkEmitter",
		initialize: function() {
			b.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId);
			this._lastStatus = null;
			this._perfEmitter = null;
			this._connEmitter = null;
			this._minRate = 5 * 1024;
			this._duration = 5000;
			this._samples = [];
			this._sum = 0;
			this._unconformFor = 0;
			this._lastSampleAt = 0;
			this._maxConnTime = 5000
		},
		getLastStatus: function() {
			return this._lastStatus
		},
		Status: {
			None: 0,
			Cellular: 1,
			Wifi: 2,
		},
		_flags: {
			enable: 1
		},
		addPerformanceListener: function(d, c) {
			if (!this._perfEmitter) {
				this._perfEmitter = new b.MessageEmitter()
			}
			this._perfEmitter.addListener(d, c);
			NgLogD("addPerformanceListener: count=" + this._perfEmitter.getListenerCount());
			if (this._perfEmitter.getListenerCount() == 1) {
				this._enablePerfEmitterSendGen(this._flags.enable, this._minRate, this._duration)
			}
		},
		removePerformanceListener: function(c) {
			if (this._perfEmitter) {
				this._perfEmitter.removeListener(c);
				NgLogD("removePerformanceListener: count=" + this._perfEmitter.getListenerCount());
				if (this._perfEmitter.getListenerCount() == 0) {
					this._enablePerfEmitterSendGen(0, 0, 0);
					this._perfEmitter = null
				}
			} else {
				NgLogD("removePerformanceListener: perf-emitter does not exist")
			}
		},
		addConnectionListener: function(c, d) {
			if (!this._connEmitter) {
				this._connEmitter = new b.MessageEmitter()
			}
			this._connEmitter.addListener(c, d);
			NgLogD("addConnectionListener: count=" + this._connEmitter.getListenerCount());
			if (this._connEmitter.getListenerCount() == 1) {
				this._enableConnEmitterSendGen(this._flags.enable, this._maxConnTime)
			}
		},
		removeConnectionListener: function(c) {
			if (this._connEmitter) {
				this._connEmitter.removeListener(c);
				NgLogD("removeConnormanceListener: count=" + this._connEmitter.getListenerCount());
				if (this._connEmitter.getListenerCount() == 0) {
					this._enableConnEmitterSendGen(0, 0);
					this._connEmitter = null
				}
			} else {
				NgLogD("removeConnectionListener: already removed")
			}
		},
		setPerformanceThreshold: function(c) {
			if (c.minRate) {
				this._minRate = c.minRate
			}
			if (c.duration) {
				this._duration = c.duration
			}
			if (this._perfEmitter) {
				this._enablePerfEmitterSendGen(this._flags.enable, this._minRate, this._duration)
			}
		},
		setConnectionThreshold: function(c) {
			if (c.maxConnTime) {
				this._maxConnTime = c.maxConnTime
			}
			if (this._connEmitter) {
				this._enableConnEmitterSendGen(this._flags.enable, this._maxConnTime)
			}
		},
		_statusChangedRecv: function(c) {
			var d = {};
			if (!this._statusChangedRecvGen(c, d)) {
				return
			}
			this._lastStatus = d.status;
			this.emit(this._lastStatus)
		},
		_activityRecv: function(j) {
			var h = {};
			if (!this._activityRecvGen(j, h)) {
				return
			}
			var g = h.numActiveReqs;
			var q = h.numActiveConns;
			var p = h.numOpens;
			var c = h.numConns;
			var r = h.numCloses;
			var o = h.bytesSent;
			var l = h.bytesRcvd;
			var f = h.maxConnTime;
			var d = b.Time.getRealTime();
			if (q == c || !q) {
				if (d - this._lastSampleAt >= this._duration) {
					this._samples = [];
					this._sum = 0;
					this._unconformFor = 0
				}
			}
			if (q > 0) {
				var k = 0;
				if (this._samples.length == 150) {
					k = this._samples.shift();
					if (this._sum >= k) {
						this._sum -= k
					}
				}
				var e = b.Time.getFrameDelta();
				var m = (o + l) / (e / 1000);
				this._samples.push(m);
				this._sum += m;
				this._lastSampleAt = d;
				var n = this._sum / this._samples.length;
				if (n < this._minRate) {
					this._unconformFor += e;
					if (this._unconformFor >= this._duration) {
						if (this._perfEmitter) {
							NgLogD("NetworkEmitter::_activityRecv: emitting performance event");
							this._unconformFor = 0;
							this._perfEmitter.emit({
								actReqs: g,
								actConns: q,
								aveRate: n
							})
						}
					}
				} else {
					this._unconformFor = 0
				}
			}
			if (f >= this._maxConnTime) {
				if (this._connEmitter) {
					NgLogD("NetworkEmitter::_activityRecv: emitting connection event");
					this._connEmitter.emit(f)
				}
			}
		},
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = b.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = b.Proc.parseInt(g.shift(), 10);
					var d = b.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						case 2:
							d._statusChangedRecv(g);
							break;
						case 3:
							d._activityRecv(g);
							break;
						default:
							NgLogE("Unknown instance method id " + e + " in NetworkEmitter._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in NetworkEmitter._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[336] = c;
			return c
		})(),
		_statusChangedRecvGen: function(c, d) {
			if (c.length != 1) {
				NgLogE("Could not parse due to wrong argument count in NetworkEmitter.statusChanged from command: " + c);
				return false
			}
			d.status = b.Proc.parseInt(c[0]);
			if (d.status === undefined) {
				NgLogE("Could not parse status in NetworkEmitter.statusChanged from command: " + c);
				return false
			}
			return true
		},
		_activityRecvGen: function(c, d) {
			if (c.length != 8) {
				NgLogE("Could not parse due to wrong argument count in NetworkEmitter.activity from command: " + c);
				return false
			}
			d.numActiveReqs = b.Proc.parseInt(c[0]);
			if (d.numActiveReqs === undefined) {
				NgLogE("Could not parse numActiveReqs in NetworkEmitter.activity from command: " + c);
				return false
			}
			d.numActiveConns = b.Proc.parseInt(c[1]);
			if (d.numActiveConns === undefined) {
				NgLogE("Could not parse numActiveConns in NetworkEmitter.activity from command: " + c);
				return false
			}
			d.numOpens = b.Proc.parseInt(c[2]);
			if (d.numOpens === undefined) {
				NgLogE("Could not parse numOpens in NetworkEmitter.activity from command: " + c);
				return false
			}
			d.numConns = b.Proc.parseInt(c[3]);
			if (d.numConns === undefined) {
				NgLogE("Could not parse numConns in NetworkEmitter.activity from command: " + c);
				return false
			}
			d.numCloses = b.Proc.parseInt(c[4]);
			if (d.numCloses === undefined) {
				NgLogE("Could not parse numCloses in NetworkEmitter.activity from command: " + c);
				return false
			}
			d.bytesSent = b.Proc.parseInt(c[5]);
			if (d.bytesSent === undefined) {
				NgLogE("Could not parse bytesSent in NetworkEmitter.activity from command: " + c);
				return false
			}
			d.bytesRcvd = b.Proc.parseInt(c[6]);
			if (d.bytesRcvd === undefined) {
				NgLogE("Could not parse bytesRcvd in NetworkEmitter.activity from command: " + c);
				return false
			}
			d.maxConnTime = b.Proc.parseInt(c[7]);
			if (d.maxConnTime === undefined) {
				NgLogE("Could not parse maxConnTime in NetworkEmitter.activity from command: " + c);
				return false
			}
			return true
		},
		$_createSendGen: function(c) {
			b.Proc.appendToCommandString(":336,-1," + c)
		},
		_enablePerfEmitterSendGen: function(c, e, d) {
			b.Proc.appendToCommandString(":336,4," + this.__objectRegistryId + "," + c + "," + e + "," + d)
		},
		_enableConnEmitterSendGen: function(c, d) {
			b.Proc.appendToCommandString(":336,5," + this.__objectRegistryId + "," + c + "," + d)
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/OrientationEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/OrientationEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/OrientationEmitter"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.OrientationEmitter = b.MessageEmitter.singleton({
		classname: "OrientationEmitter",
		initialize: function() {
			b.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId);
			this._lastDeviceOrientation = this.Orientation.Portrait;
			this._lastInterfaceOrientation = this.Orientation.Portrait
		},
		getDeviceOrientation: function() {
			return this._lastDeviceOrientation
		},
		getInterfaceOrientation: function() {
			return this._lastInterfaceOrientation
		},
		setInterfaceOrientation: function(c, d) {
			if (c != this._lastInterfaceOrientation) {
				NgLogD("setInterfaceOrientation to " + c);
				this._setInterfaceOrientationSendGen(c, d);
				this._lastInterfaceOrientation = c
			}
		},
		Orientation: {
			Portrait: 0,
			PortraitUpsideDown: 1,
			LandscapeLeft: 2,
			LandscapeRight: 3,
			FaceUp: 4,
			FaceDown: 5,
		},
		OrientationType: {
			Device: 0,
			Interface: 1
		},
		_orientationChangedRecv: function(c) {
			var d = {};
			if (!this._orientationChangedRecvGen(c, d)) {
				return
			}
			this._lastDeviceOrientation = d.orientation;
			this.emit({
				type: this.OrientationType.Device,
				orientation: d.orientation
			});
			this._orientationChangedSendGen(d.orientation)
		},
		_interfaceOrientationChangedRecv: function(c) {
			var d = {};
			if (!this._interfaceOrientationChangedRecvGen(c, d)) {
				return
			}
			this._lastInterfaceOrientation = d.orientation;
			this.emit({
				type: this.OrientationType.Interface,
				orientation: d.orientation
			});
			this._interfaceOrientationChangedSendGen(d.orientation)
		},
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = b.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = b.Proc.parseInt(g.shift(), 10);
					var d = b.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						case 2:
							d._orientationChangedRecv(g);
							break;
						case 4:
							d._interfaceOrientationChangedRecv(g);
							break;
						default:
							NgLogE("Unknown instance method id " + e + " in OrientationEmitter._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in OrientationEmitter._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[335] = c;
			return c
		})(),
		_orientationChangedRecvGen: function(c, d) {
			if (c.length != 1) {
				NgLogE("Could not parse due to wrong argument count in OrientationEmitter.orientationChanged from command: " + c);
				return false
			}
			d.orientation = b.Proc.parseInt(c[0]);
			if (d.orientation === undefined) {
				NgLogE("Could not parse orientation in OrientationEmitter.orientationChanged from command: " + c);
				return false
			}
			return true
		},
		_interfaceOrientationChangedRecvGen: function(c, d) {
			if (c.length != 1) {
				NgLogE("Could not parse due to wrong argument count in OrientationEmitter.interfaceOrientationChanged from command: " + c);
				return false
			}
			d.orientation = b.Proc.parseInt(c[0]);
			if (d.orientation === undefined) {
				NgLogE("Could not parse orientation in OrientationEmitter.interfaceOrientationChanged from command: " + c);
				return false
			}
			return true
		},
		$_createSendGen: function(c) {
			b.Proc.appendToCommandString(":335,-1," + c)
		},
		_orientationChangedSendGen: function(c) {
			b.Proc.appendToCommandString(":335,2," + this.__objectRegistryId + "," + c)
		},
		_setInterfaceOrientationSendGen: function(c, d) {
			b.Proc.appendToCommandString(":335,3," + this.__objectRegistryId + "," + c + "," + (d ? 1 : 0))
		},
		_interfaceOrientationChangedSendGen: function(c) {
			b.Proc.appendToCommandString(":335,4," + this.__objectRegistryId + "," + c)
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/ShakeEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/ShakeEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/ShakeEmitter"] = a;
	var d = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/Device/MotionEmitter").MotionEmitter;
	var b = d.MessageListener.subclass({
		onUpdate: function() {}
	});
	a.ShakeEmitter = d.MessageEmitter.singleton({
		classname: "ShakeEmitter",
		initialize: function() {
			d.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId);
			this._proxyListener = new b()
		},
		addListener: function($super, g, f, e) {
			if (this.getListenerCount() == 0) {
				c.addListener(this._proxyListener, function() {})
			}
			$super(g, f, e)
		},
		removeListener: function($super, e) {
			$super(e);
			if (this.getListenerCount() == 0) {
				c.removeListener(this._proxyListener)
			}
		},
		_shakeRecv: function(e) {
			this.emit();
			this._shakeSendGen()
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = d.Proc.parseInt(j.shift(), 10);
				if (g > 0) {
					var h = d.Proc.parseInt(j.shift(), 10);
					var f = d.ObjectRegistry.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						case 2:
							f._shakeRecv(j);
							break;
						default:
							NgLogE("Unknown instance method id " + g + " in ShakeEmitter._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						default:
							NgLogE("Unknown static method id " + g + " in ShakeEmitter._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[332] = e;
			return e
		})(),
		_shakeRecvGen: function(e, f) {
			if (e.length != 0) {
				NgLogE("Could not parse due to wrong argument count in ShakeEmitter.shake from command: " + e);
				return false
			}
			return true
		},
		$_createSendGen: function(e) {
			d.Proc.appendToCommandString(":332,-1," + e)
		},
		_shakeSendGen: function() {
			d.Proc.appendToCommandString(":332,2," + this.__objectRegistryId)
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/KeyEmitter"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Device/KeyEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/KeyEmitter"] = b;
	var d = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/UI").UI;
	var a = null;
	b.KeyEmitter = d.MessageEmitter.singleton({
		classname: "KeyEmitter",
		initialize: function() {
			d.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		keyCodeToSymbol: function(f) {
			if (!a) {
				a = {};
				for (var e in this.Keycode) {
					a[this.Keycode[e]] = e
				}
			}
			return a[f] || ""
		},
		KeyEvent: d.Class.subclass({
			classname: "KeyEvent",
			initialize: function(f, e, g) {
				this.type = f;
				this.modifiers = e;
				this.code = g
			}
		}),
		_onKeyEventRecv: function(f) {
			var g = {};
			if (!this._onKeyEventRecvGen(f, g)) {
				return
			}
			var e = new Device.KeyEmitter.KeyEvent(g.type, g.modifiers, g.code);
			if (!this.chain(e)) {
				this._onKeyEventSendGen(g.type, g.modifiers, g.code)
			}
		},
		EventType: {
			onUp: 0,
			onDown: 1,
		},
		Modifier: {
			NONE: 0,
			SYMBOL: 1 << 0,
			ALT: 1 << 1,
			ALT_LEFT: 1 << 2,
			ALT_RIGHT: 1 << 3,
			SHIFT: 1 << 4,
			SHIFT_LEFT: 1 << 5,
			SHIFT_RIGHT: 1 << 6,
		},
		Keycode: {
			a: 29,
			b: 30,
			c: 31,
			d: 32,
			e: 33,
			f: 34,
			g: 35,
			h: 36,
			i: 37,
			j: 38,
			k: 39,
			l: 40,
			m: 41,
			n: 42,
			o: 43,
			p: 44,
			q: 45,
			r: 46,
			s: 47,
			t: 48,
			u: 49,
			v: 50,
			w: 51,
			x: 52,
			y: 53,
			z: 54,
			up: 19,
			down: 20,
			left: 21,
			right: 22,
			enter: 66,
			backspace: 67,
			back: 4,
			backunhandled: 84,
			menu: 82,
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = d.Proc.parseInt(j.shift(), 10);
				if (g > 0) {
					var h = d.Proc.parseInt(j.shift(), 10);
					var f = d.ObjectRegistry.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						case 2:
							f._onKeyEventRecv(j);
							break;
						default:
							NgLogE("Unknown instance method id " + g + " in KeyEmitter._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						default:
							NgLogE("Unknown static method id " + g + " in KeyEmitter._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[343] = e;
			return e
		})(),
		_onKeyEventRecvGen: function(e, f) {
			if (e.length != 3) {
				NgLogE("Could not parse due to wrong argument count in KeyEmitter.onKeyEvent from command: " + e);
				return false
			}
			f.type = d.Proc.parseInt(e[0]);
			if (f.type === undefined) {
				NgLogE("Could not parse type in KeyEmitter.onKeyEvent from command: " + e);
				return false
			}
			f.modifiers = d.Proc.parseInt(e[1]);
			if (f.modifiers === undefined) {
				NgLogE("Could not parse modifiers in KeyEmitter.onKeyEvent from command: " + e);
				return false
			}
			f.code = d.Proc.parseInt(e[2]);
			if (f.code === undefined) {
				NgLogE("Could not parse code in KeyEmitter.onKeyEvent from command: " + e);
				return false
			}
			return true
		},
		$_createSendGen: function(e) {
			d.Proc.appendToCommandString(":343,-1," + e)
		},
		_onKeyEventSendGen: function(f, e, g) {
			d.Proc.appendToCommandString(":343,2," + this.__objectRegistryId + "," + f + "," + e + "," + g)
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/_PushNotificationEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/_PushNotificationEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/_PushNotificationEmitter"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.PushNotificationEmitter = b.MessageEmitter.singleton({
		classname: "PushNotificationEmitter",
		initialize: function() {
			b.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		_onPushNotificationRecv: function(c) {
			var d = {};
			if (!this._onPushNotificationRecvGen(c, d)) {
				return
			}
			this._lastMsgPayload = d.msgPayload;
			if (!this.chain(d.msgPayload)) {
				this._onPushNotificationSendGen(d.msgPayload)
			}
		},
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = b.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = b.Proc.parseInt(g.shift(), 10);
					var d = b.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						case 2:
							d._onPushNotificationRecv(g);
							break;
						default:
							NgLogE("Unknown instance method id " + e + " in PushNotificationEmitter._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in PushNotificationEmitter._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[345] = c;
			return c
		})(),
		_onPushNotificationRecvGen: function(c, d) {
			if (c.length != 1) {
				NgLogE("Could not parse due to wrong argument count in PushNotificationEmitter.onPushNotification from command: " + c);
				return false
			}
			d.msgPayload = b.Proc.parseString(c[0]);
			if (d.msgPayload === undefined) {
				NgLogE("Could not parse msgPayload in PushNotificationEmitter.onPushNotification from command: " + c);
				return false
			}
			return true
		},
		$_createSendGen: function(c) {
			b.Proc.appendToCommandString(":345,-1," + c)
		},
		_onPushNotificationSendGen: function(c) {
			b.Proc.appendToCommandString(":345,2," + this.__objectRegistryId + "," + b.Base64.encode(c))
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/_InAppPurchaseEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/_InAppPurchaseEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/_InAppPurchaseEmitter"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.InAppPurchaseEmitter = b.MessageEmitter.singleton({
		classname: "InAppPurchaseEmitter",
		initialize: function() {
			b.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		_onPurchaseEventRecv: function(c) {
			var d = {};
			if (!this._onPurchaseEventRecvGen(c, d)) {
				return
			}
			if (!this.chain(d.err, d.data, d.verificationToken)) {
				this._onPurchaseEventSendGen(d.err, d.data, d.verificationToken)
			}
		},
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = b.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = b.Proc.parseInt(g.shift(), 10);
					var d = b.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						case 2:
							d._onPurchaseEventRecv(g);
							break;
						default:
							NgLogE("Unknown instance method id " + e + " in InAppPurchaseEmitter._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in InAppPurchaseEmitter._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[347] = c;
			return c
		})(),
		_onPurchaseEventRecvGen: function(c, d) {
			if (c.length != 3) {
				NgLogE("Could not parse due to wrong argument count in InAppPurchaseEmitter.onPurchaseEvent from command: " + c);
				return false
			}
			d.err = b.Proc.parseString(c[0]);
			if (d.err === undefined) {
				NgLogE("Could not parse err in InAppPurchaseEmitter.onPurchaseEvent from command: " + c);
				return false
			}
			d.data = b.Proc.parseString(c[1]);
			if (d.data === undefined) {
				NgLogE("Could not parse data in InAppPurchaseEmitter.onPurchaseEvent from command: " + c);
				return false
			}
			d.verificationToken = b.Proc.parseString(c[2]);
			if (d.verificationToken === undefined) {
				NgLogE("Could not parse verificationToken in InAppPurchaseEmitter.onPurchaseEvent from command: " + c);
				return false
			}
			return true
		},
		$_createSendGen: function(c) {
			b.Proc.appendToCommandString(":347,-1," + c)
		},
		_onPurchaseEventSendGen: function(c, d, e) {
			b.Proc.appendToCommandString(":347,2," + this.__objectRegistryId + "," + b.Base64.encode(c) + "," + b.Base64.encode(d) + "," + b.Base64.encode(e))
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/_InAppPurchase"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Device/_InAppPurchase"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/_InAppPurchase"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	var c = require("NGCore/Client/Device");
	var d = require("NGCore/Client/Core/Localization").Localization;
	b.InAppPurchase = a.singleton({
		classname: "InAppPurchase",
		initialize: function() {
			Core.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		initService: function(h, g) {
			if ((!this._isIOS()) && (!this._isAndroid())) {
				NgLogE("ERROR: Neither Android nor iOS platform, IAP will not work");
				g();
				return
			}
			if (!this._iapInited) {
				var f = Core.MessageListener.subclass({
					onPurchaseEvent: this._iapCallback.bind(this)
				});
				this.listener = new f();
				c.Device.InAppPurchaseEmitter.addListener(this.listener, this.listener.onPurchaseEvent)
			}
			this._initDonecb = g;
			this._initOrdercb = h;
			if (this._isAndroid()) {
				this._iapCallback("morenonces", "", "");
				var e = this;
				Storage.KeyValueCache.local.getItem(this._IAB_ORPHANED, function(k, l) {
					if (l && (l.length > 0)) {
						var j = JSON.parse(l);
						e._restoreOrders(j)
					} else {
						e._initService()
					}
				})
			} else {
				this._initService()
			}
		},
		launchPurchaseView: function(f, g, e, j, h) {
			if (!this._iapInited) {
				NgLogE("ERROR: function initService must be called and its donecb called back, before launchPurchaseView may be used.");
				j(false, "failed:initservice_not_done");
				return
			}
			this._currentOrderProductID = f;
			this._currentOrderCancelcb = h;
			this._currentOrderFailcb = j;
			this._currentOrderPurchasecb = e;
			if (g !== 1 && this._isAndroid()) {
				j(false, "failed:unsupported_quantity");
				return
			}
			if (this._isIOS()) {
				this._currentOrderProgressDialog = (new UI.ProgressDialog()).retain();
				this._currentOrderProgressDialog.setText(d.getString("Processing Order"))
			} else {
				if (!this._isIOS()) {
					this._currentOrderProgressDialog = (new UI.AlertDialog()).retain();
					this._currentOrderProgressDialog.setTitle(d.getString("Processing Order"));
					this._currentOrderProgressDialog.setText(d.getString("Your order is being processed. You will receive a confirmation momentarily."));
					this._currentOrderProgressDialog.setChoices([d.getString("OK")]);
					this._currentOrderProgressDialog.onchoice = function(k) {
						this._currentOrderProgressDialog.release();
						this._currentOrderProgressDialog = null
					}
				}
			}
			this._currentOrderProgressDialog.show();
			if (this._isIOS() || this._isAndroid()) {
				c.Device.InAppPurchase._requestPurchase(f, g);
				return
			}
			this._currentOrderProgressDialog.hide();
			this._currentOrderProgressDialog.release();
			this._currentOrderProgressDialog = undefined;
			NgLogE("launchPurchaseView failed: only Android and iOS platforms are currently supported.");
			j(false, "failed:unsupported_platform");
			return
		},
		pushSingleNonce: function(f) {
			var e = [];
			e.push(f);
			this._fillIABNoncePool(JSON.stringify(e))
		},
		getProductInformation: function(e, f) {
			this._getProductInformationCB = f;
			this._getProductInformationSendGen(e)
		},
		_IAB_PURCHASED: 0,
		_IAB_CANCELED: 1,
		_IAB_REFUNDED: 2,
		_IAB_ORPHANED: "com.ngmoco.in_app_purchase.iab_orphaned_orders",
		_capIsAndroid: undefined,
		_capIsIOS: undefined,
		_currentOrderCancelcb: undefined,
		_currentOrderFailcb: undefined,
		_currentOrderProductID: undefined,
		_currentOrderProgressDialog: undefined,
		_currentOrderPurchasecb: undefined,
		_initDonecb: undefined,
		_initOrdercb: undefined,
		_iapInited: false,
		_generateIABNonce: function() {
			var g = new Date().getTime();
			var f = Math.floor(Math.random() * 1000);
			var e = (g * 1000) + f;
			NgLogD("Generated nonce: " + e);
			return e
		},
		_iapCallback: function(k, m, e) {
			NgLogD("8 _iapCallback with err: " + k + " data: " + m);
			if (k == "morenonces") {
				var p = 10;
				var u = [];
				while (u.length < p) {
					u.push(this._generateIABNonce())
				}
				this._fillIABNoncePool(JSON.stringify(u));
				return true
			}
			if ((k == "initdone") || (k == "initcheckdone")) {
				if (typeof this._initDonecb == "function") {
					this._iapInited = true;
					this._initDonecb();
					this._initDonecb = undefined;
					this._initOrdercb = undefined
				} else {
					NgLogW("WARN: " + k + " callback with empty donecb")
				}
				return true
			}
			if (k == "getProductInformationDone") {
				if (m && m.length > 0) {
					var h = JSON.parse(m);
					this._getProductInformationCB(h.productId)
				} else {
					this._getProductInformationCB("", "no information on this product")
				}
				this._getProductInformationCB = undefined;
				return true
			}
			var j = undefined;
			var o = "";
			var s = undefined;
			var r = undefined;
			if (m && m.length > 0) {
				r = JSON.parse(m);
				if ((typeof r.orders == "undefined") || (r.orders.length <= 0)) {
					if (!this._isAndroid()) {
						if (typeof r.productId != "undefined") {
							o = r.productId.toUpperCase()
						}
					}
				} else {
					if (this._isAndroid() && (typeof this._currentOrderProgressDialog == "undefined")) {
						var g = this._filterSuccessOrders(r, e, m);
						if (g.length > 0) {
							this._persistOrphanedOrders(g)
						}
						return true
					} else {
						if (r.orders.length === 1) {
							s = r.orders[0];
							if (!this._isAndroid()) {
								o = s.productId.toUpperCase()
							}
							j = s.orderId
						} else {
							var l = this._filterSuccessOrders(r, e, m);
							if (l.length > 0) {
								s = l.shift();
								if (!this._isAndroid()) {
									o = s.productId.toUpperCase()
								}
								j = s.orderId;
								if (l.length > 0) {
									this._persistOrphanedOrders(l)
								}
							}
						}
					}
				}
			}
			if (this._currentOrderProductID != o) {
				NgLogW("iapCallback: product id mismatch in callback.  Req: '" + this._currentOrderProductID + "' CB:'" + o + "'")
			}
			if ((k && (k.length > 0)) || (s && s.purchaseState && (s.purchaseState !== this._IAB_PURCHASED))) {
				if (s && s.purchaseState && (s.purchaseState === this._IAB_REFUNDED)) {
					NgLogD("iapCallback: ignoring refunded order: " + JSON.stringify(s));
					return true
				}
				if (typeof this._currentOrderProgressDialog != "undefined") {
					this._currentOrderProgressDialog.hide();
					this._currentOrderProgressDialog.release();
					this._currentOrderProgressDialog = undefined
				}
				if (k == "cancelled") {
					if ((typeof this._currentOrderCancelcb) == "function") {
						this._currentOrderCancelcb();
						this._currentOrderCancelcb = undefined
					}
				} else {
					if (k) {
						NgLogD("DEBUG: iapCallback: got error: " + k)
					} else {
						NgLogD("DEBUG: iapCallback: got canceled purchaseState.")
					}
					if ((typeof this._currentOrderFailcb) == "function") {
						this._currentOrderFailcb(false, k);
						this._currentOrderFailcb = undefined
					}
				}
				return true
			}
			if (typeof s == "undefined") {
				return true
			}
			var f = function(v) {
				if (typeof this._currentOrderProgressDialog != "undefined") {
					this._currentOrderProgressDialog.hide();
					this._currentOrderProgressDialog.release();
					this._currentOrderProgressDialog = undefined
				}
				if (v !== false) {
					return
				}
				if ((typeof this._currentOrderFailcb) == "function") {
					this._currentOrderFailcb(true, "failed:no_more_retry");
					this._currentOrderFailcb = undefined
				}
			};
			if ((typeof this._currentOrderPurchasecb) == "function") {
				var q = e;
				if (this._isAndroid()) {
					var t = {
						data: m,
						signature: e
					};
					q = JSON.stringify(t)
				}
				this._currentOrderPurchasecb(o, j, q, s, f.bind(this));
				this._currentOrderPurchasecb = undefined
			} else {
				if ((!this._iapInited) && ((typeof this._initOrdercb) == "function")) {
					var n = function() {};
					this._initOrdercb(o, j, e, s, n)
				}
			}
			return true
		},
		_isAndroid: function() {
			if (typeof this._capIsAndroid != "undefined") {
				return this._capIsAndroid
			}
			var e = Core.Capabilities;
			if ((typeof e.getPlatformOS() != "undefined") && (e.getPlatformOS().toLowerCase() == "android")) {
				this._capIsAndroid = true
			} else {
				this._capIsAndroid = false
			}
			return this._capIsAndroid
		},
		_isIOS: function() {
			if (typeof this._capIsIOS != "undefined") {
				return this._capIsIOS
			}
			var e = Core.Capabilities;
			if ((typeof e.getPlatformOS() != "undefined") && (e.getPlatformOS().toLowerCase() == "iphone os")) {
				this._capIsIOS = true
			} else {
				this._capIsIOS = false
			}
			return this._capIsIOS
		},
		_fillIABNoncePool: function(e) {
			this._fillIABNoncePoolSendGen(e)
		},
		_filterSuccessOrders: function(h, l, j) {
			var e = [];
			for (var g in h.orders) {
				if (h.orders[g].purchaseState === this._IAB_PURCHASED) {
					var k = h.orders[g];
					if (this._isAndroid()) {
						var f = {
							data: j,
							signature: l
						};
						k.receipt = JSON.stringify(f)
					} else {
						k.verificationToken = l
					}
					e.push(k)
				}
			}
			NgLogD("successOrders length = " + e.length);
			return e
		},
		_persistOrphanedOrders: function(e) {
			Storage.KeyValueCache.local.getItem(this._IAB_ORPHANED, (function(g, j) {
				if (j && (j.length > 0)) {
					var h = JSON.parse(j);
					for (var f in h) {
						e.push(h[f])
					}
				}
				Storage.KeyValueCache.local.setItem(this._IAB_ORPHANED, JSON.stringify(e), function() {
					NgLogD("Orphaned orders added to persistent store: " + JSON.stringify(e))
				})
			}).bind(this))
		},
		_initService: function() {
			this._initServiceSendGen()
		},
		_requestPurchase: function(f, e) {
			this._requestPurchaseSendGen(f, e)
		},
		_restoreOrders: function(h) {
			var g = this;
			if (h.length <= 0) {
				Storage.KeyValueCache.local.removeItem(this._IAB_ORPHANED, function() {
					g._initService()
				});
				return
			}
			var f = h.pop();
			var e = function() {
				g._restoreOrders(h)
			};
			NgLogD("restore persist order");
			if (this._isAndroid()) {
				this._initOrdercb(f.productId, f.orderId, f.receipt, f, e.bind(this))
			} else {
				this._initOrdercb(f.productId.toUpperCase(), f.orderId, f.verificationToken, f, e.bind(this))
			}
		},
		$_commandRecvGen: (function() {
			var e = (function(j) {
				var g = Core.Proc.parseInt(j.shift(), 10);
				if (g > 0) {
					var h = Core.Proc.parseInt(j.shift(), 10);
					var f = Core.ObjectRegistry.idToObject(h);
					if (!f) {
						NgLogE("Object instance could not be found for command " + j + ". It may have been destroyed this frame.");
						return
					}
					switch (g) {
						default:
							NgLogE("Unknown instance method id " + g + " in InAppPurchase._commandRecvGen from command: " + j);
							return
					}
				} else {
					switch (g) {
						default:
							NgLogE("Unknown static method id " + g + " in InAppPurchase._commandRecvGen from command: " + j);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[348] = e;
			return e
		})(),
		$_createSendGen: function(e) {
			Core.Proc.appendToCommandString(":348,-1," + e)
		},
		_initServiceSendGen: function() {
			Core.Proc.appendToCommandString(":348,2," + this.__objectRegistryId)
		},
		_requestPurchaseSendGen: function(f, e) {
			Core.Proc.appendToCommandString(":348,3," + this.__objectRegistryId + "," + Core.Base64.encode(f) + "," + e)
		},
		_fillIABNoncePoolSendGen: function(e) {
			Core.Proc.appendToCommandString(":348,4," + this.__objectRegistryId + "," + Core.Base64.encode(e))
		},
		_getProductInformationSendGen: function(e) {
			Core.Proc.appendToCommandString(":348,5," + this.__objectRegistryId + "," + Core.Base64.encode(e))
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/IPCEmitter"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Device/IPCEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/IPCEmitter"] = d;
	var f = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Core/Class").Class;
	var k = require("NGCore/Client/Core/Proc").Proc;
	var c = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var e = require("NGCore/Client/Core/Base64").Base64;
	var j = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var a = require("NGCore/Client/Network/DownloadFile").DownloadFile;
	var h = require("NGCore/Client/Network/Util").Util;
	var g = require("NGCore/Client/Storage/FileSystem").FileSystem;
	d.IPCEmitter = j.singleton({
		classname: "IPCEmitter",
		initialize: function() {
			console.log("IPCEmitter.initialize");
			this._callbackID = 0;
			this._callbacks = [];
			this._shouldEmitIntents = false;
			c.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		canLaunch: function(l, m) {
			this._callbacks[this._callbackID] = m;
			this._canLaunchSendGen(l, this._callbackID);
			this._callbackID++
		},
		launch: function(l, m) {
			this._callbacks[this._callbackID] = m;
			this._launchSendGen(l, this._callbackID);
			this._callbackID++
		},
		launchIntent: function(o, n, m) {
			if (typeof(m) == "string") {
				var l;
				if (typeof(n) == "string") {
					l = JSON.parse(n)
				} else {
					l = {}
				}
				l.packageName = m;
				n = JSON.stringify(l)
			}
			this._launchIntentSendGen(o, n)
		},
		launchService: function(o, n, m) {
			if (typeof(m) == "string") {
				var l;
				if (typeof(n) == "string") {
					l = JSON.parse(n)
				} else {
					l = {}
				}
				l.packageName = m;
				n = JSON.stringify(l)
			}
			this._launchServiceSendGen(o, n)
		},
		launchForSSO: function(l, m) {
			l += "&sso_auth";
			this.launch(l, m)
		},
		getAppSignatures: function(l, m) {
			this._callbacks[this._callbackID] = m;
			this._getAppSignaturesSendGen(l, this._callbackID);
			this._callbackID++
		},
		getCallingPackage: function(l) {
			this._callbacks[this._callbackID] = l;
			this._getCallingPackageSendGen(this._callbackID);
			this._callbackID++
		},
		getIsServiceRunning: function(m, l) {
			this._callbacks[this._callbackID] = l;
			this._getIsServiceRunningSendGen(m, this._callbackID);
			this._callbackID++
		},
		app: function() {
			return this._app
		},
		App: b.subclass({
			classname: "App",
			initialize: function(l, m) {
				this._sourceAppID = l;
				this._intentURL = m
			},
			getID: function() {
				return this._sourceAppID
			},
			getURL: function() {
				return this._intentURL
			}
		}),
		Intent: b.subclass({
			classname: "Intent",
			initialize: function(m, l) {
				this._action = m;
				this._extras = l
			},
			getAction: function() {
				return this._action
			},
			getExtras: function() {
				return this._extras
			}
		}),
		createShortcut: function(m, l, n) {
			this._createShortcutSendGen(m, l, n)
		},
		createShortcutByIconUrl: function(p, o, n, r) {
			NgLogD("createShortcutByIconUrl called", p, o, n);
			var q = new a();
			var m = "shortcut_icon_image" + (new Date().getTime());
			var l = this;
			NgLogD("Icon download begin");
			h.OperationWithRetries(function(s, t) {
				q.start(m, "GET", n, [], function(v, u) {
					NgLogD("Icon download finished status=" + v);
					if (v == 200) {
						l.createShortcut(p, o, m);
						g.deleteFile(m, function() {
							if (r) {
								r(false)
							}
						})
					} else {
						if (v == 404) {
							NgLogE("Unable download icon file: icon_url=" + n + ", status=" + v);
							t()
						} else {
							NgLogE("Unable download icon file: icon_url=" + n + ", status=" + v);
							s()
						}
					}
				})
			}, function() {
				NgLogE("Unable download icon file");
				if (r) {
					r(true)
				}
			}, true)
		},
		_onResumedFromOthers: function(l, m) {
			this._app = new Device.IPCEmitter.App(m, l);
			this.emit(this._app);
			this._onResumeFromOthersSendGen(l, m)
		},
		_setEmitIntents: function(l) {
			this._shouldEmitIntents = Boolean(l)
		},
		_onIntentReceived: function(m, l) {
			console.log("On IntentReceived: " + m + " / " + JSON.stringify(l));
			if (this._shouldEmitIntents) {
				this.emit(new d.IPCEmitter.Intent(m, l))
			}
		},
		_canLaunchCallbackRecv: function(m) {
			var n = {};
			if (!this._canLaunchCallbackRecvGen(m, n)) {
				return
			}
			var l = this._callbacks[parseInt(n.callbackID, 10)];
			if (l) {
				l(n.canLaunch)
			}
		},
		_onResumeFromOthersRecv: function(l) {
			var m = {};
			if (!this._onResumeFromOthersRecvGen(l, m)) {
				return
			}
			this._onResumedFromOthers(m.url, m.sourceAppID)
		},
		_launchFailedRecv: function(m) {
			var n = {};
			if (!this._launchFailedRecvGen(m, n)) {
				return
			}
			var l = this._callbacks[parseInt(n.callbackID, 10)];
			if (l) {
				l(n.canLaunch)
			}
		},
		_getAppSignaturesCallbackRecv: function(m) {
			var n = {};
			if (!this._getAppSignaturesCallbackRecvGen(m, n)) {
				return
			}
			var l = this._callbacks[parseInt(n.callbackID, 10)];
			if (l) {
				l(n.signatures.split(","))
			}
		},
		_getCallingPackageCallbackRecv: function(m) {
			var n = {};
			if (!this._getCallingPackageCallbackRecvGen(m, n)) {
				return
			}
			var l = this._callbacks[parseInt(n.callbackID, 10)];
			if (l) {
				l(n.packageName)
			}
		},
		_getIsServiceRunningCallbackRecv: function(m) {
			var n = {};
			if (!this._getIsServiceRunningCallbackRecvGen(m, n)) {
				return
			}
			var l = this._callbacks[parseInt(n.callbackID, 10)];
			if (l) {
				l(n.running)
			}
		},
		_onIntentReceivedRecv: function(l) {
			var m = {};
			if (!this._onIntentReceivedRecvGen(l, m)) {
				return
			}
			this._onIntentReceived(m.action, JSON.parse(m.extras, 10))
		},
		Service: {
			SystemDownloadProvider: 1,
		},
		$_commandRecvGen: (function() {
			var l = (function(p) {
				var n = f.Proc.parseInt(p.shift(), 10);
				if (n > 0) {
					var o = f.Proc.parseInt(p.shift(), 10);
					var m = f.ObjectRegistry.idToObject(o);
					if (!m) {
						NgLogE("Object instance could not be found for command " + p + ". It may have been destroyed this frame.");
						return
					}
					switch (n) {
						case 4:
							m._onResumeFromOthersRecv(p);
							break;
						case 5:
							m._launchFailedRecv(p);
							break;
						case 6:
							m._canLaunchCallbackRecv(p);
							break;
						case 8:
							m._getAppSignaturesCallbackRecv(p);
							break;
						case 10:
							m._getCallingPackageCallbackRecv(p);
							break;
						case 13:
							m._onIntentReceivedRecv(p);
							break;
						case 15:
							m._getIsServiceRunningCallbackRecv(p);
							break;
						default:
							NgLogE("Unknown instance method id " + n + " in IPCEmitter._commandRecvGen from command: " + p);
							return
					}
				} else {
					switch (n) {
						default:
							NgLogE("Unknown static method id " + n + " in IPCEmitter._commandRecvGen from command: " + p);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[349] = l;
			return l
		})(),
		_onResumeFromOthersRecvGen: function(l, m) {
			if (l.length != 2) {
				NgLogE("Could not parse due to wrong argument count in IPCEmitter.onResumeFromOthers from command: " + l);
				return false
			}
			m.url = f.Proc.parseString(l[0]);
			if (m.url === undefined) {
				NgLogE("Could not parse url in IPCEmitter.onResumeFromOthers from command: " + l);
				return false
			}
			m.sourceAppID = f.Proc.parseString(l[1]);
			if (m.sourceAppID === undefined) {
				NgLogE("Could not parse sourceAppID in IPCEmitter.onResumeFromOthers from command: " + l);
				return false
			}
			return true
		},
		_launchFailedRecvGen: function(l, m) {
			if (l.length != 2) {
				NgLogE("Could not parse due to wrong argument count in IPCEmitter.launchFailed from command: " + l);
				return false
			}
			m.error = f.Proc.parseString(l[0]);
			if (m.error === undefined) {
				NgLogE("Could not parse error in IPCEmitter.launchFailed from command: " + l);
				return false
			}
			m.callbackID = f.Proc.parseInt(l[1]);
			if (m.callbackID === undefined) {
				NgLogE("Could not parse callbackID in IPCEmitter.launchFailed from command: " + l);
				return false
			}
			return true
		},
		_canLaunchCallbackRecvGen: function(l, m) {
			if (l.length != 2) {
				NgLogE("Could not parse due to wrong argument count in IPCEmitter.canLaunchCallback from command: " + l);
				return false
			}
			m.canLaunch = f.Proc.parseBool(l[0]);
			if (m.canLaunch === undefined) {
				NgLogE("Could not parse canLaunch in IPCEmitter.canLaunchCallback from command: " + l);
				return false
			}
			m.callbackID = f.Proc.parseInt(l[1]);
			if (m.callbackID === undefined) {
				NgLogE("Could not parse callbackID in IPCEmitter.canLaunchCallback from command: " + l);
				return false
			}
			return true
		},
		_getAppSignaturesCallbackRecvGen: function(l, m) {
			if (l.length != 2) {
				NgLogE("Could not parse due to wrong argument count in IPCEmitter.getAppSignaturesCallback from command: " + l);
				return false
			}
			m.signatures = f.Proc.parseString(l[0]);
			if (m.signatures === undefined) {
				NgLogE("Could not parse signatures in IPCEmitter.getAppSignaturesCallback from command: " + l);
				return false
			}
			m.callbackID = f.Proc.parseInt(l[1]);
			if (m.callbackID === undefined) {
				NgLogE("Could not parse callbackID in IPCEmitter.getAppSignaturesCallback from command: " + l);
				return false
			}
			return true
		},
		_getCallingPackageCallbackRecvGen: function(l, m) {
			if (l.length != 2) {
				NgLogE("Could not parse due to wrong argument count in IPCEmitter.getCallingPackageCallback from command: " + l);
				return false
			}
			m.packageName = f.Proc.parseString(l[0]);
			if (m.packageName === undefined) {
				NgLogE("Could not parse packageName in IPCEmitter.getCallingPackageCallback from command: " + l);
				return false
			}
			m.callbackID = f.Proc.parseInt(l[1]);
			if (m.callbackID === undefined) {
				NgLogE("Could not parse callbackID in IPCEmitter.getCallingPackageCallback from command: " + l);
				return false
			}
			return true
		},
		_onIntentReceivedRecvGen: function(l, m) {
			if (l.length != 2) {
				NgLogE("Could not parse due to wrong argument count in IPCEmitter.onIntentReceived from command: " + l);
				return false
			}
			m.action = f.Proc.parseString(l[0]);
			if (m.action === undefined) {
				NgLogE("Could not parse action in IPCEmitter.onIntentReceived from command: " + l);
				return false
			}
			m.extras = f.Proc.parseString(l[1]);
			if (m.extras === undefined) {
				NgLogE("Could not parse extras in IPCEmitter.onIntentReceived from command: " + l);
				return false
			}
			return true
		},
		_getIsServiceRunningCallbackRecvGen: function(l, m) {
			if (l.length != 2) {
				NgLogE("Could not parse due to wrong argument count in IPCEmitter.getIsServiceRunningCallback from command: " + l);
				return false
			}
			m.running = f.Proc.parseBool(l[0]);
			if (m.running === undefined) {
				NgLogE("Could not parse running in IPCEmitter.getIsServiceRunningCallback from command: " + l);
				return false
			}
			m.callbackID = f.Proc.parseInt(l[1]);
			if (m.callbackID === undefined) {
				NgLogE("Could not parse callbackID in IPCEmitter.getIsServiceRunningCallback from command: " + l);
				return false
			}
			return true
		},
		$_createSendGen: function(l) {
			f.Proc.appendToCommandString(":349,-1," + l)
		},
		_canLaunchSendGen: function(l, m) {
			f.Proc.appendToCommandString(":349,2," + this.__objectRegistryId + "," + f.Base64.encode(l) + "," + m)
		},
		_launchSendGen: function(l, m) {
			f.Proc.appendToCommandString(":349,3," + this.__objectRegistryId + "," + f.Base64.encode(l) + "," + m)
		},
		_onResumeFromOthersSendGen: function(l, m) {
			f.Proc.appendToCommandString(":349,4," + this.__objectRegistryId + "," + f.Base64.encode(l) + "," + f.Base64.encode(m))
		},
		_getAppSignaturesSendGen: function(l, m) {
			f.Proc.appendToCommandString(":349,7," + this.__objectRegistryId + "," + f.Base64.encode(l) + "," + m)
		},
		_getCallingPackageSendGen: function(l) {
			f.Proc.appendToCommandString(":349,9," + this.__objectRegistryId + "," + l)
		},
		_launchIntentSendGen: function(m, l) {
			f.Proc.appendToCommandString(":349,11," + this.__objectRegistryId + "," + f.Base64.encode(m) + "," + f.Base64.encode(l))
		},
		_launchServiceSendGen: function(m, l) {
			f.Proc.appendToCommandString(":349,12," + this.__objectRegistryId + "," + f.Base64.encode(m) + "," + f.Base64.encode(l))
		},
		_getIsServiceRunningSendGen: function(m, l) {
			f.Proc.appendToCommandString(":349,14," + this.__objectRegistryId + "," + m + "," + l)
		},
		_createShortcutSendGen: function(m, l, n) {
			f.Proc.appendToCommandString(":349,16," + this.__objectRegistryId + "," + f.Base64.encode(m) + "," + f.Base64.encode(l) + "," + f.Base64.encode(n))
		},
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/LayoutEmitter"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Device/LayoutEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/LayoutEmitter"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.LayoutEmitter = b.MessageEmitter.singleton({
		classname: "LayoutEmitter",
		initialize: function() {
			b.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		_layoutChangedRecv: function(c) {
			var d = {};
			if (!this._layoutChangedRecvGen(c, d)) {
				return
			}
			this._width = d.width;
			this._height = d.height;
			this.emit(d);
			this._layoutChangedSendGen(d.width, d.height)
		},
		$getWidth: function() {
			return this._width
		},
		$getHeight: function() {
			return this._height
		},
		setWidthAndHeight: function(d, c) {
			this._width = d;
			this._width = c
		},
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = b.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = b.Proc.parseInt(g.shift(), 10);
					var d = b.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						case 2:
							d._layoutChangedRecv(g);
							break;
						default:
							NgLogE("Unknown instance method id " + e + " in LayoutEmitter._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in LayoutEmitter._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[352] = c;
			return c
		})(),
		_layoutChangedRecvGen: function(c, d) {
			if (c.length != 2) {
				NgLogE("Could not parse due to wrong argument count in LayoutEmitter.layoutChanged from command: " + c);
				return false
			}
			d.width = b.Proc.parseInt(c[0]);
			if (d.width === undefined) {
				NgLogE("Could not parse width in LayoutEmitter.layoutChanged from command: " + c);
				return false
			}
			d.height = b.Proc.parseInt(c[1]);
			if (d.height === undefined) {
				NgLogE("Could not parse height in LayoutEmitter.layoutChanged from command: " + c);
				return false
			}
			return true
		},
		$_createSendGen: function(c) {
			b.Proc.appendToCommandString(":352,-1," + c)
		},
		_layoutChangedSendGen: function(d, c) {
			b.Proc.appendToCommandString(":352,2," + this.__objectRegistryId + "," + d + "," + c)
		},
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Device/_LocalNotification"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Device/_LocalNotification"] || {};
	$MODULE_REGISTRY["NGCore/Client/Device/_LocalNotification"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	b.LocalNotification = a.singleton({
		classname: "LocalNotification",
		initialize: function() {
			Core.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		showLocalNotification: function(c) {
			this._showLocalNotificationSendGen(c)
		},
		$_commandRecvGen: (function() {
			var c = (function(g) {
				var e = Core.Proc.parseInt(g.shift(), 10);
				if (e > 0) {
					var f = Core.Proc.parseInt(g.shift(), 10);
					var d = Core.ObjectRegistry.idToObject(f);
					if (!d) {
						NgLogE("Object instance could not be found for command " + g + ". It may have been destroyed this frame.");
						return
					}
					switch (e) {
						default:
							NgLogE("Unknown instance method id " + e + " in LocalNotification._commandRecvGen from command: " + g);
							return
					}
				} else {
					switch (e) {
						default:
							NgLogE("Unknown static method id " + e + " in LocalNotification._commandRecvGen from command: " + g);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[354] = c;
			return c
		})(),
		$_createSendGen: function(c) {
			Core.Proc.appendToCommandString(":354,-1," + c)
		},
		_destroySendGen: function() {
			Core.Proc.appendToCommandString(":354,2," + this.__objectRegistryId)
		},
		_showLocalNotificationSendGen: function(c) {
			Core.Proc.appendToCommandString(":354,3," + this.__objectRegistryId + "," + Core.Base64.encode(JSON.stringify(c)))
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/_Internal/_RequireLoader"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/US/_Internal/_RequireLoader"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/_Internal/_RequireLoader"] = a;

	function b(d, c) {
		return function() {
			delete this[d];
			return this[d] = c()
		}
	}
	a.RequireLoader = function(d) {
		if (d instanceof Object) {
			for (var c in d) {
				this.__defineGetter__(c, b(c, d[c]))
			}
		}
		return this
	};
	a.RequireLoader.prototype = {
		load: function(c) {
			this[c]
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/Appdata"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/Appdata"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/Appdata"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	b.Appdata = {
		getEntries: function(c, e) {
			var d = {
				apiURL: "Common.Appdata.getEntries",
				keys: c,
				callbackFunc: e
			};
			a.getRouterInstance().sendCommandToGameService(d)
		},
		updateEntries: function(c, e) {
			if (c) {
				var d = {
					apiURL: "Common.Appdata.updateEntries",
					entries: c,
					callbackFunc: e
				};
				a.getRouterInstance().sendCommandToGameService(d)
			} else {
				if (typeof e === "function") {
					e({
						errorCode: 400,
						description: "Entries to update are a required parameter"
					}, null)
				}
			}
		},
		deleteEntries: function(c, e) {
			if (c && c.length > 0) {
				var d = {
					apiURL: "Common.Appdata.deleteEntries",
					keys: c,
					callbackFunc: e
				};
				a.getRouterInstance().sendCommandToGameService(d)
			} else {
				if (typeof e === "function") {
					e({
						errorCode: 400,
						description: "Keys to delete are a required parameter"
					}, null)
				}
			}
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/Auth"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/Auth"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/Auth"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	b.Auth = {
		authorizeToken: function(c, e) {
			var d = {
				apiURL: "Common.Auth.authorizeToken",
				token: c,
				callbackFunc: e
			};
			a.getRouterInstance().sendCommandToGameService(d)
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/Blacklist"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/Blacklist"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/Blacklist"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	b.Blacklist = {
		checkBlacklist: function(e, d, c, g) {
			var f = {
				apiURL: "Common.Blacklist.checkBlacklist",
				userId: e,
				targetUserId: d,
				opt: c,
				callbackFunc: function(j, h) {
					g(j, h.users, h.result)
				}
			};
			a.getRouterInstance().sendCommandToGameService(f)
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/Config"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/Config"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/Config"] = a;
	var b = require("NGCore/Client/Social/US/Data/Session").Session;
	a.Config = {
		getServerEnvironment: function() {
			var d = b.getCurrentSession();
			if (!d) {
				return "unknown"
			}
			var c = b.getCurrentSession().serverMode();
			if (c == b.serverModes.production) {
				return "production"
			} else {
				if (c == b.serverModes.sandbox) {
					return "sandbox"
				} else {
					return "unknown"
				}
			}
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/People"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/People"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/People"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	b.People = {
		getUser: function(d, c, f) {
			var e = {
				apiURL: "Common.People.getUser",
				userId: d,
				fields: c,
				callbackFunc: f
			};
			a.getRouterInstance().sendCommandToGameService(e)
		},
		getUsers: function(e, c, f) {
			var d = {
				apiURL: "Common.People.getUsers",
				userIds: e,
				fields: c,
				callbackFunc: function(h, g) {
					f(h, g.users, g.results)
				}
			};
			a.getRouterInstance().sendCommandToGameService(d)
		},
		getCurrentUser: function(c, e) {
			var d = {
				apiURL: "Common.People.getCurrentUser",
				fields: c,
				callbackFunc: e
			};
			a.getRouterInstance().sendCommandToGameService(d)
		},
		getFriends: function(e, c, d, g) {
			var f = {
				apiURL: "Common.People.getFriends",
				userId: e,
				fields: c,
				opt: d,
				callbackFunc: function(j, h) {
					g(j, h.users, h.results)
				}
			};
			a.getRouterInstance().sendCommandToGameService(f)
		},
		getFriendsWithGame: function(e, c, d, g) {
			var f = {
				apiURL: "Common.People.getFriendsWithGame",
				userId: e,
				fields: c,
				opt: d,
				callbackFunc: function(j, h) {
					g(j, h.users, h.results)
				}
			};
			a.getRouterInstance().sendCommandToGameService(f)
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/Profanity"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/Profanity"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/Profanity"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	b.Profanity = {
		checkProfanity: function(d, e) {
			var c = {
				apiURL: "Common.Profanity.checkProfanity",
				text: d,
				callbackFunc: function(g, f) {
					e(g, f.profanity)
				}
			};
			a.getRouterInstance().sendCommandToGameService(c)
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/Request"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/Request"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/Request"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	b.Request = a.subclass({
		execute: function(c) {}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/Service"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/Service"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/Service"] = b;
	var a = require("NGCore/Client/UI").UI;
	var d = require("NGCore/Client/Social/_Internal/RouterInit");
	var g = require("NGCore/Client/Social/_Internal/GSGlobals");
	var h = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var c = require("NGCore/Client/Social/US/Service/ButtonOverlays").ButtonOverlays;
	var e = require("NGCore/Client/Social/US/Service/Friends").Friends;
	var j = require("NGCore/Client/Social/US/Service/Profile").Profile;
	var f = require("NGCore/Client/Social/US/Models/User").User;
	b.Service = {
		openUserFinder: function() {
			e.showFindFriends(undefined)
		},
		openFriendPicker: function(k, l) {
			e.showFriendPicker(k, function(p, o) {
				var n = [];
				o = o || [];
				for (var m = 0; m < o.length; m++) {
					n.push(o[m].recordID)
				}
				l(n)
			})
		},
		openUserProfile: function(k, l) {
			if (typeof k == "string") {
				if (k.match(/[^0-9]/) === null) {
					k = parseInt(k, 10)
				} else {
					k = null
				}
			}
			if (!k) {
				l({
					errorCode: 400,
					description: "userid is invalid"
				})
			} else {
				f.getUserWithID(k, function(n, m) {
					if (n) {
						if (n === "Sorry, we can't find anyone with that name.") {
							l({
								errorCode: 404,
								description: n
							})
						} else {
							l({
								errorCode: 500,
								description: n
							})
						}
					} else {
						if (!m) {
							l({
								errorCode: 404,
								description: "User not found"
							})
						} else {
							j.showUserProfile(m, undefined)
						}
					}
				})
			}
		},
		showCommunityButton: function(m, k, l) {
			c.showCommunityButton(m, l)
		},
		hideCommunityButton: function(k) {
			c.hideCommunityButton(k)
		},
		invitedUserEmitter: new h(),
		showBalanceButton: function(k, l) {
			c.showBalanceButton(k, l)
		},
		hideBalanceButton: function(k) {
			c.hideBalanceButton(k)
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Common/Analytics"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/US/Common/Analytics"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Common/Analytics"] = a;
	var b = require("NGCore/Client/Social/US/Data/Session");
	a.Analytics = {
		getUserId: function() {
			var d = this._getSession(),
				c = null;
			if (d) {
				c = (d.user() || {}).recordID
			}
			return c
		},
		getUsername: function() {
			var d = this._getSession(),
				c = null;
			if (d) {
				c = (d.user() || {}).gamertag
			}
			return c
		},
		getPlatformVersion: function() {
			var c = this._getSession(),
				d = null;
			if (c) {
				d = c.platformVersion()
			}
			return d
		},
		getServiceId: function() {
			return "US"
		},
		_getSession: function() {
			return b.Session.getCurrentSession()
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Models/DataModel"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/US/Models/DataModel"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Models/DataModel"] = d;
	var c = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var f = require("NGCore/Client/Social");
	var a = require("NGCore/Client/Social/US/Data/Session");
	var b = require("NGCore/Client/Social/US/Data/Dispatcher");
	var e = d.DataModel = c.subclass({
		initialize: function(g) {
			this.recordID = g;
			this._cache()
		},
		beginChanges: function() {
			b.Dispatcher.beginBatching()
		},
		endChanges: function() {
			b.Dispatcher.endBatching()
		},
		_classname: function() {
			var g = this.classname;
			return g
		},
		_cache: function() {
			if (!this._dataCache) {
				var h = a.Session.getCurrentSession();
				if (h) {
					var g = h.dataCache();
					if (g) {
						g.addObject(this);
						this._dataCache = g
					}
				}
			}
			return this._dataCache
		},
		$_serializedDataModel: function(g) {
			if (g instanceof(e)) {
				g = {
					classname: g.classname,
					recordID: g.recordID
				}
			}
			return g
		},
		$_deserializedDataModel: function(l, j) {
			if (l && l.hasOwnProperty && l.hasOwnProperty("classname") && l.hasOwnProperty("recordID")) {
				var h = l.classname;
				var m = f.Social.US[h];
				var g = l.recordID;
				if (m && g) {
					var k = j.getObjectWithRecordID(h, g);
					if (!k) {
						k = new m(g)
					}
					k._deserializeFromHash(l.data);
					j.addObject(k);
					l = k
				}
			}
			return l
		},
		_serializedHash: function(l) {
			var o = this.constructor;
			var n = {
				classname: o.classname,
				recordID: this.recordID
			};
			if (l === false) {
				return n
			}
			n.data = {};
			var k = this.constructor.properties || [];
			for (var g = 0; g < k.length; g++) {
				var j = k[g];
				var h = this[j];
				if (h instanceof(Array)) {
					for (var m = 0; m < h.length; m++) {
						h[m] = e._serializedDataModel(h[m])
					}
				} else {
					h = e._serializedDataModel(h)
				}
				n.data[j] = h
			}
			return n
		},
		_deserializeFromHash: function(k) {
			if (!k) {
				NgLogD("No public hash data for " + this.classname + " " + this.recordID);
				return
			}
			var g = this._cache();
			for (var h in k) {
				var j = k[h];
				if (j instanceof(Array)) {
					for (var l = 0; l < j.length; l++) {
						j[l] = e._deserializedDataModel(j[l], g)
					}
				} else {
					j = e._deserializedDataModel(j, g)
				}
				this[h] = j
			}
		}
	});
	e._oldSubclass = e.subclass;
	e.subclass = function(k) {
		var l = e._oldSubclass(k);
		var j = k.properties || [];
		for (var g = 0; g < j.length; g++) {
			var h = j[g];
			(function(m) {
				l.prototype.__defineSetter__(m, function(n) {
					this["___" + m] = n;
					var o = {};
					o["" + m] = n;
					this.emit(o)
				});
				l.prototype.__defineGetter__(m, function(n) {
					return this["___" + m]
				})
			})(h)
		}
		return l
	};
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Models/User"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Models/User"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Models/User"] = b;
	var d = require("NGCore/Client/Social/US/Models/DataModel");
	var a = require("NGCore/Client/Social/US/Data/Dispatcher").Dispatcher;
	var e = require("NGCore/Client/Social/US/Models/OrderedList").OrderedList;
	var c = require("NGCore/Client/Social").Social;
	var f = b.User = d.DataModel.subclass({
		classname: "User",
		properties: ["gamertag", "avatarId", "motto", "relation", "sparse", "photoId", "emailHash", "ageRestricted", "isMutualFriend", "phoneNumber", "password", "firstName", "lastName", "hideFullName", "emailAddress", "isNewRelationship", "showsPresence", "onlyShowFriendNotifications", "capabilities", "gamerscore", "gamerLevel", "gamerLevelName", "gamerLevelScore", "gamerNextLevelScore", "games"],
		initialize: function($super, g) {
			$super(g);
			NgLogD("User Public! " + g + " " + this.recordID)
		},
		addBuddy: function(h, g) {
			a.callMethodOnRemoteObject(this, "addBuddy", [h, g])
		},
		removeBuddy: function(h, g) {
			a.callMethodOnRemoteObject(this, "deleteBuddy", [h, g])
		},
		getUserDetails: function(g) {
			a.callMethodOnRemoteObject(this, "getUserDetails", [g])
		},
		getMobageFriendRequestsList: function() {
			return e.getObjectPublicInterface(this, "getInvitesList", "_followersListInterface")
		},
		getMobageFriendsList: function() {
			return e.getObjectPublicInterface(this, "getFriendsList", "_friendsListInterface")
		},
		getMobageBlockedUserList: function() {
			return e.getObjectPublicInterface(this, "getBlockedUserList", "_enemyListInterface")
		},
		getOwnedGamesList: function() {
			return e.getObjectPublicInterface(this, "getOwnedGamesList", "_ownedGamesListInterface")
		},
		getFeaturedUsersList: function() {
			return e.getObjectPublicInterface(this, "getFeaturedUsersList", "_featuredUsersListInterface")
		},
		inviteToCurrentGame: function(g) {
			var h = this;
			a.callMethodOnRemoteObject(this, "inviteToCurrentGame", [function(j) {
				if (!j) {
					c.Common.Service.invitedUserEmitter.emit({
						userId: h.recordID
					});
					c.US.Service.Friends.invitedUserEmitter.emit({
						user: h
					})
				}
				g.apply(this, Array.apply(null, arguments))
			}])
		},
		sendNotificationToUser: function(k, g, j, h) {
			a.callMethodOnRemoteObject(this, "sendNotificationToUser", [k, g, j, h])
		},
		addFriend: function(h, j, g) {
			if (typeof arguments[1] == "function" && !arguments[2]) {
				g = arguments[1];
				j = undefined
			}
			a.callMethodOnRemoteObject(this, "addGameFriend", [h, j, g])
		},
		removeFriend: function(h, g) {
			a.callMethodOnRemoteObject(this, "removeGameFriend", [h, g])
		},
		report: function(h, g) {
			a.callMethodOnRemoteObject(this, "report", [h, g])
		},
		getFriendsList: function(g) {
			return e.getObjectPublicInterface(this, "getGameFriendsList", (g ? ("_gameFriendsList-friends-" + g) : "_gameFriendsList-friends"), "friends", g)
		},
		getMutualFriendsList: function(g) {
			return e.getObjectPublicInterface(this, "getGameFriendsList", (g ? ("_gameFriendsList-mutual-" + g) : "_gameFriendsList-mutual"), "mutual", g)
		},
		getFriendRequestsList: function(g) {
			return e.getObjectPublicInterface(this, "getGameFriendsList", (g ? ("_gameFriendsList-invitation-" + g) : "_gameFriendsList-invitation"), "invitation", g)
		},
		setEmailAddress: function(h, g) {
			a.callMethodOnRemoteObject(this, "setEmailAddress", [h, g])
		},
		setOnlyShowFriendNotifications: function(h, g) {
			a.callMethodOnRemoteObject(this, "setOnlyShowFriendNotifications", [h, g])
		},
		setOptsIn: function(h, g) {
			a.callMethodOnRemoteObject(this, "setOptsIn", [h, g])
		},
		setMotto: function(h, g) {
			a.callMethodOnRemoteObject(this, "setMotto", [h, g])
		},
		setFirstName: function(h, g) {
			a.callMethodOnRemoteObject(this, "setFirstName", [h, g])
		},
		setLastName: function(h, g) {
			a.callMethodOnRemoteObject(this, "setLastName", [h, g])
		},
		setPassword: function(h, j, g) {
			a.callMethodOnRemoteObject(this, "setPassword", [h, j, g])
		},
		setBlocked: function(h, g) {
			a.callMethodOnRemoteObject(this, "setBlocked", [h, g])
		},
		getOriginOfRegistration: function(g) {
			a.callMethodOnRemoteObject(this, "getOriginOfRegistration", [g])
		}
	});
	f.GamertagKey = "gamertag";
	f.AvatarKey = "badge_id";
	f.MottoKey = "motto";
	f.RelationKey = "relation";
	f.FirstNameKey = "first_name";
	f.LastNameKey = "last_name";
	f.BirthdateKey = "birth_date";
	f.GenderKey = "gender";
	f.PrivacyKey = "fullname_privacy";
	f.PhotoKey = "photo_url";
	f.EmailAddressKey = "email";
	f.EmailHashKey = "email_hash";
	f.PhoneNumberKey = "phone_number";
	f.AgeRangeKey = "age_restricted";
	f.SpamKey = "opt_in";
	f.PasswordKey = "password";
	f.PasswordConfirmKey = "password_confirmation";
	f.GamesKey = "games";
	f.CapabilitiesKey = "capabilities";
	f.NewBuddyKey = "new_buddy";
	f.IsMutualFriendKey = "mutual_friends";
	f.HidePresenceKey = "hide_presence";
	f.OnlyShowFriendNotificationsKey = "friend_only_notification";
	f.GamerScoreKey = "gamerscore";
	f.LevelNumberKey = "level_position";
	f.LevelNameKey = "level_name";
	f.CurrentLevelScoreKey = "level_points";
	f.NextLevelScoreKey = "level_next_points";
	f.NonSparseKeys = [f.PhotoKey, f.EmailAddressKey, f.EmailHashKey, f.PhoneNumberKey, f.PasswordKey, f.FirstNameKey, f.LastNameKey, f.PrivacyKey, f.NewBuddyKey, f.CapabilitiesKey, f.HidePresenceKey, f.OnlyShowFriendNotificationsKey, f.GamerScoreKey, f.LevelNumberKey, f.LevelNameKey, f.CurrentLevelScoreKey, f.NextLevelScoreKey, f.GamesKey];
	f.getUserWithID = function(h, g) {
		a.callClassMethodOnRemoteObject(f, "getUserWithID", [h, g])
	};
	f.getUserWithGamertag = function(h, g) {
		a.callClassMethodOnRemoteObject(f, "getUserWithGamertag", [h, g])
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Models/Game"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Models/Game"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Models/Game"] = b;
	var c = require("NGCore/Client/Social/US/Models/DataModel");
	var d = require("NGCore/Client/Social/US/Models/OrderedList").OrderedList;
	var a = require("NGCore/Client/Social/US/Data/Dispatcher").Dispatcher;
	var e = b.Game = c.DataModel.subclass({
		classname: "Game",
		properties: ["name", "publisher", "category", "numberOfLeaderboards", "iconURL", "numberOfAchievements", "featured", "masterProductID", "appStoreURL", "feedURL", "catalogURL", "description", "phone_screenshot_urls", "ngcore_url"]
	});
	e.getAllGamesList = function() {
		return d.getClassPublicInterface(e, "getAllGamesList", "_allGamesInterface")
	};
	e.getCurrentGame = function(f) {
		a.callClassMethodOnRemoteObject(e, "getCurrentGame", [f])
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Models/Leaderboard"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/US/Models/Leaderboard"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Models/Leaderboard"] = c;
	var d = require("NGCore/Client/Social/US/Models/DataModel");
	var a = require("NGCore/Client/Social/US/Data/Dispatcher").Dispatcher;
	var e = require("NGCore/Client/Social/US/Models/OrderedList").OrderedList;
	var b = c.Leaderboard = d.DataModel.subclass({
		classname: "Leaderboard",
		properties: ["level", "title", "game", "iconURL"],
		initialize: function($super, f) {
			$super(f);
			NgLogD("Leaderboard Public! " + f + " " + this.recordID)
		},
		submitScore: function(g, f) {
			a.callMethodOnRemoteObject(this, "submitScoreWithPoints", [g, f])
		},
		getTopScoresList: function() {
			return e.getObjectPublicInterface(this, "getTopScoresList", "_leaderboardTopScoresInterface")
		},
		getFriendsScoresList: function() {
			return e.getObjectPublicInterface(this, "getFriendsScoresList", "_leaderboardFriendsScoresInterface")
		}
	});
	b.getLeaderboards = function(f) {
		a.callClassMethodOnRemoteObject(b, "getLeaderboards", [f])
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Models/Score"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/US/Models/Score"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Models/Score"] = a;
	var c = require("NGCore/Client/Social/US/Models/DataModel").DataModel;
	var b = a.Score = c.subclass({
		classname: "Score",
		properties: ["points", "displayScore", "rank", "level", "user"]
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Models/AppData"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/US/Models/AppData"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Models/AppData"] = d;
	var c = require("NGCore/Client/Social/US/Models/DataModel");
	var a = require("NGCore/Client/Social/US/Data/Dispatcher").Dispatcher;
	var b = d.AppData = c.DataModel.subclass({
		classname: "AppData",
		properties: ["data", "key", "user", "permissions"],
		initialize: function($super, e) {
			$super(e)
		}
	});
	b.getKeysForUser = function(f, e) {
		a.callClassMethodOnRemoteObject(b, "getKeysForUser", [f, e])
	};
	b.getDataForUserWithKey = function(f, g, e) {
		a.callClassMethodOnRemoteObject(b, "getDataForUserWithKey", [f, g, e])
	};
	b.setDataForUserWithKeyAndPermissions = function(j, f, g, h, e) {
		a.callClassMethodOnRemoteObject(b, "setDataForUserWithKeyAndPermissions", [j, f, g, h, e])
	};
	b.Permissions = {
		Private: 0,
		FriendsReadOnly: 1,
		PublicReadOnly: 2
	};
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Models/Cache"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Models/Cache"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Models/Cache"] = b;
	var a = require("NGCore/Client/Core/Class").Class;
	var c = require("NGCore/Client/Social");
	var d = b.Cache = a.subclass({
		classname: "Cache",
		inMemoryObjects: {},
		caches: {},
		initialize: function() {},
		getObjectWithRecordID: function(g, e) {
			var f = this.inMemoryObjects[g];
			if (f) {
				return f[e] || null
			} else {
				return null
			}
		},
		addObject: function(h) {
			var g = h._classname();
			var f = this.inMemoryObjects[g];
			if (!f) {
				f = {};
				this.inMemoryObjects[g] = f
			}
			var e = f[h.recordID];
			if (e) {
				return e
			} else {
				f[h.recordID] = h;
				return h
			}
		},
		removeObject: function(g) {
			var f = g._classname();
			var e = this.inMemoryObjects[f];
			if (e) {
				delete e[g.recordID]
			}
		},
		isObjectCached: function(g) {
			var f = g._classname();
			var e = this.inMemoryObjects[f];
			return (e && (e[g.recordID] == g))
		},
		saveCache: function() {},
		loadCache: function() {},
		loadCacheFromJSONArray: function(j, e) {
			var n = [];
			for (var m = 0; m < j.length; m++) {
				var f = j[m];
				if (f && f.hasOwnProperty("classname") && f.hasOwnProperty("recordID")) {
					var g = f.classname;
					var l = c.Social.US[g];
					var k = f.recordID;
					if (l && k) {
						var h = this.getObjectWithRecordID(g, k);
						if (!h) {
							h = new l(k, {})
						}
						h._deserializeFromHash(f);
						this.addObject(h)
					}
				}
			}
			e(null, this)
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Data/Session"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/US/Data/Session"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Data/Session"] = d;
	var c = require("NGCore/Client/Core");
	var f = require("NGCore/Client/Core/MessageEmitter");
	var b = require("NGCore/Client/Social/US/Models/Cache");
	var a = require("NGCore/Client/Social/US/Data/Dispatcher").Dispatcher;
	var e = d.Session = f.MessageEmitter.subclass({
		classname: "Session",
		initialize: function(g) {
			if (g) {
				this._loadSessionData(g)
			}
		},
		_loadSessionData: function(g) {
			this._appKey = g.appId || this._appKey || null;
			this._appVersion = g.appVersion || this._appVersion || null;
			this._platformVersion = g.platformVersion || this._platformVersion || "1.0";
			this._serverMode = g.serverMode || this._serverMode || null;
			this._user = (g.userID ? this.dataCache().getObjectWithRecordID("User", g.userID) : null);
			this.emit({
				user: this._user
			})
		},
		dataCache: function() {
			if (!this._cache) {
				this._cache = new b.Cache();
				this._cache.loadCache(function(g) {
					NgLogD("Loaded cache: " + g)
				})
			}
			return this._cache
		},
		user: function() {
			return this._user
		},
		appKey: function() {
			return this._appKey
		},
		appVersion: function() {
			return this._appVersion
		},
		serverMode: function() {
			return this._serverMode
		},
		platformVersion: function() {
			return this._platformVersion
		},
		getSessionTokensForConsumerKey: function(h, g) {
			a.callClassMethodOnRemoteObject("Session", ["getCurrentSession", "getSessionTokensForConsumerKey"], [
				[],
				[h, g]
			])
		}
	});
	e.serverModes = {
		staging: "staging",
		integration: "integration",
		partner: "sandbox",
		sandbox: "sandbox",
		production: "production",
		unknown: "unknown"
	};
	e.getCurrentSession = function() {
		return e._currentSession
	};
	e._emitter = null;
	e.addCurrentSessionListener = function(h, j, g) {
		if (!e._emitter) {
			e._emitter = new f.MessageEmitter()
		}
		e._emitter.addListener(h, j, g)
	};
	e.removeCurrentSessionListener = function(g) {
		if (e._emitter) {
			e._emitter.removeListener(g)
		}
	};
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Data/Dispatcher"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/US/Data/Dispatcher"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Data/Dispatcher"] = d;
	var b = require("NGCore/Client/Social/_Internal/GSGlobals");
	var g = require("NGCore/Client/Core").Core;
	var f = require("NGCore/Client/Social/US/Models/Cache");
	var e = require("NGCore/Client/Social");
	var a = require("NGCore/Client/Social/US/Data/Session");
	var c = d.Dispatcher = {
		classname: "Dispatcher",
		callbackUIDCounter: 0,
		callbacks: {
			"-2": {},
			"-1": {}
		},
		cache: function() {
			try {
				return a.Session.getCurrentSession().dataCache()
			} catch (h) {
				NgLogD("Mobage/Dispatcher/cache-Warning: cannot get cache. NOTE: This may be expected behavior if early on in initialization. Err=" + h);
				return null
			}
		},
		receiveSession: function(k) {
			var j = a.Session.getCurrentSession();
			if (!j) {
				j = new a.Session();
				a.Session._currentSession = j
			}
			var h = k.data.userData;
			if (h) {
				c.receiveObject({
					data: h
				})
			}
			j._loadSessionData(k.data);
			if (a.Session._emitter) {
				a.Session._emitter.emit({
					session: j
				})
			}
		},
		callMethodOnLocalObject: function(l) {
			var n = l.recordID;
			var k = l.classname;
			var m = c.cache().getObjectWithRecordID(k, n);
			if (m) {
				var r = l.methodName;
				var p = false;
				var o;
				var h;
				if (r instanceof Array) {
					var j = m;
					for (var q = 0; q < r.length; q++) {
						if (typeof j[r[q]] == "function") {
							o = c.convertArgumentsArrayFromJSON(l.arguments[q] || []);
							h = j[r[q]].apply(j, o);
							j = h
						} else {
							p = true;
							break
						}
					}
				} else {
					if (typeof m[r] == "function") {
						o = c.convertArgumentsArrayFromJSON(l.arguments || []);
						h = m[r].apply(m, o)
					} else {
						p = true
					}
				}
				if (p) {
					NgLogD("ERROR: Invalid methods for calling on local object: " + l.recordID + " " + r)
				} else {
					if (l.callback) {
						var s = c.convertFunctionFromJSON({
							callbackUID: l.callback
						});
						if (s) {
							s(h)
						}
					}
				}
			}
		},
		callMethodOnRemoteObject: function(k, m, j, h) {
			if (!k || !m) {
				NgLogD("Public.Dispatcher.callMethodOnRemoteObject - bailing");
				if (h) {
					h()
				}
				return
			}
			j = c.convertArgumentsArrayToJSON(j || []);
			var l = {
				apiURL: "US.Dispatcher.callMethodOnLocalObject",
				recordID: k.recordID,
				classname: k._classname(),
				methodName: m,
				arguments: j,
				callback: c.convertFunctionToJSON(h)
			};
			b.getRouterInstance().sendCommandToGameService(l)
		},
		callClassMethodOnLocalObject: function(l) {
			c.beginBatching();
			var k = l.classname;
			var q = l.methodName;
			if (k && q) {
				var m = e.Social.US[k];
				if (!m) {
					m = e.Social.US.Service[k]
				}
				if (m) {
					var o = false;
					var n;
					var h;
					if (q instanceof Array) {
						var j = m;
						for (var p = 0; p < q.length; p++) {
							if (typeof j[q[p]] == "function") {
								n = c.convertArgumentsArrayFromJSON(l.arguments[p] || []);
								h = j[q[p]].apply(j, n);
								j = h
							} else {
								o = true;
								break
							}
						}
					} else {
						if (typeof m[q] == "function") {
							n = c.convertArgumentsArrayFromJSON(l.arguments || []);
							h = m[q].apply(m, n)
						} else {
							o = true
						}
					}
					if (o) {
						NgLogD("ERROR: Invalid methods for calling on local Class: " + k + " " + q)
					} else {
						if (l.callback) {
							var r = c.convertFunctionFromJSON({
								callbackUID: l.callback
							});
							if (r) {
								r(h)
							}
						}
					}
				}
			}
			c.endBatching()
		},
		callClassMethodOnRemoteObject: function(m, j, k, h) {
			if (!m || !j) {
				NgLogD("Public.Dispatcher.callClassMethodOnRemoteObject - bailing");
				if (h) {
					h()
				}
				return
			}
			k = c.convertArgumentsArrayToJSON(k || []);
			var l = {
				apiURL: "US.Dispatcher.callClassMethodOnLocalObject",
				classname: (m.classname ? m.classname : m),
				methodName: j,
				arguments: k,
				callback: (h ? c.convertFunctionToJSON(h) : null)
			};
			b.getRouterInstance().sendCommandToGameService(l)
		},
		sendCallbackToRemote: function(h, j) {
			j = c.convertArgumentsArrayToJSON(j || []);
			var k = {
				apiURL: "US.Dispatcher.receiveCallbackFromRemote",
				callbackUID: h,
				arguments: j,
				zone: b.getRouterInstance().zone
			};
			b.getRouterInstance().sendCommandToGameService(k)
		},
		receiveCallbackFromRemote: function(j) {
			var k = c.callbacks[b.getRouterInstance().zone][j.callbackUID];
			if (!k) {
				return
			}
			var h = c.convertArgumentsArrayFromJSON(j.arguments || []);
			k.apply(k, h)
		},
		convertArgumentsArrayFromJSON: function(l) {
			var k = [];
			for (var j = 0; j < l.length; j++) {
				var h = l[j];
				if (h && ((h.recordID && h.classname) || h instanceof Array)) {
					k[j] = c.convertModelObjectFromJSON(h)
				} else {
					if (h && h.callbackUID) {
						k[j] = c.convertFunctionFromJSON(h)
					} else {
						k[j] = h
					}
				}
			}
			return k
		},
		convertArgumentsArrayToJSON: function(l) {
			var k = [];
			for (var j = 0; j < l.length; j++) {
				var h = l[j];
				if (h && (h.recordID && h._classname && typeof h._classname == "function" && h._classname())) {
					c.sendObjectImmediately(h);
					h = c.convertModelObjectToJSON(h);
					k[j] = h
				} else {
					if (h && h instanceof Array) {
						h = c.convertArgumentsArrayToJSON(h);
						k[j] = h
					} else {
						if (h && typeof h == "function") {
							k[j] = c.convertFunctionToJSON(h)
						} else {
							k[j] = h
						}
					}
				}
			}
			return k
		},
		convertModelObjectToJSON: function(h) {
			if (h && h.recordID && h._classname()) {
				h = {
					classname: h._classname(),
					recordID: h.recordID
				}
			}
			return h
		},
		convertModelObjectFromJSON: function(l) {
			var k = l;
			if (l.recordID && l.classname) {
				var m = c.cache().getObjectWithRecordID(l.classname, l.recordID);
				if (m) {
					k = m;
					if (l.data) {
						k._deserializeFromHash(l.data)
					}
				}
			} else {
				if (l instanceof Array) {
					for (var j = 0; j < l.length; j++) {
						var h = l[j];
						l[j] = c.convertModelObjectFromJSON(h)
					}
				}
			}
			return k
		},
		convertFunctionToJSON: function(k) {
			if (k && typeof k == "function") {
				var j = ++c.callbackUIDCounter;
				var h = b.getRouterInstance().zone;
				c.callbacks[h][j] = k;
				k = {
					callbackUID: j,
					zone: h
				}
			}
			return k
		},
		convertFunctionFromJSON: function(k) {
			var l = k;
			var j = l.callbackUID;
			var h = l.zone;
			if (j) {
				var m = c.callbacks[h][j];
				if (m) {
					l = m;
					delete c.callbacks[h][j]
				} else {
					l = c.generateCallbackForUID(j)
				}
			}
			return l
		},
		generateCallbackForUID: function(h) {
			if (h.callbackUID) {
				h = h.callbackUID
			}
			return function() {
				c.sendCallbackToRemote(h, arguments)
			}
		},
		_batchCount: 0,
		_queuedObjects: [],
		beginBatching: function() {
			++c._batchCount
		},
		endBatching: function() {
			if ((--c._batchCount) === 0) {
				for (var h in c._queuedObjects) {
					var j = c._queuedObjects[h];
					c._queuedObjects[h] = undefined;
					c.sendObjectImmediately(j)
				}
			}
		},
		sendObject: function(j) {
			if (c._queuedObjects.indexOf(j) == -1) {
				c.beginBatching();
				var h = "" + j.classname + "---" + j.recordID;
				c._queuedObjects[h] = j;
				c.endBatching()
			}
		},
		sendObjectImmediately: function(j) {
			if (!j) {
				return
			}
			var h = {
				apiURL: "US.Dispatcher.receiveObject",
				data: j._serializedHash()
			};
			b.getRouterInstance().sendCommandToGameService(h)
		},
		receiveObject: function(n) {
			var l = n.data;
			var j = l.recordID;
			var k = l.classname;
			var h = l.data;
			if (j && k && c.cache()) {
				var m = c.cache().getObjectWithRecordID(k, j);
				if (!m) {
					var o = e.Social.US[k];
					m = new o(j);
					c.cache().addObject(m)
				}
				if (h) {
					m._deserializeFromHash(h)
				}
			}
		}
	};
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Service/Friends"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/US/Service/Friends"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Service/Friends"] = e;
	var f = require("NGCore/Client/Social/_Internal/RouterInit");
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var c = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var g = require("NGCore/Client/Social/US/Models/DataModel");
	var b = require("NGCore/Client/Social/US/Data/Dispatcher").Dispatcher;
	var d = e.Friends = g.DataModel.subclass({
		classname: "Friends"
	});
	d.showFindFriends = function(h) {
		NgLogD("Public call showFindFriends");
		var j = {
			apiURL: "US.Service.Friends.showFindFriends"
		};
		if (h) {
			j.data = {};
			j.data.tab = h
		}
		a.getRouterInstance().sendCommandToGameService(j)
	};
	d.showFriendPicker = function(h, j) {
		b.callClassMethodOnRemoteObject(d, "showFriendPicker", [h, j])
	};
	d.invitedUserEmitter = new c();
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Service/Profile"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Service/Profile"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Service/Profile"] = b;
	var c = require("NGCore/Client/Social/_Internal/RouterInit");
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	b.Profile = {
		showUserProfile: function(e, d) {
			var f = {
				apiURL: "US.Service.Profile.showUserProfile",
				data: {
					user: e
				}
			};
			if (d) {
				f.tab = d
			}
			a.getRouterInstance().sendCommandToGameService(f)
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Service/ButtonOverlays"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/US/Service/ButtonOverlays"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Service/ButtonOverlays"] = d;
	var g = require("NGCore/Client/UI").UI;
	var f = require("NGCore/Client/Social/_Internal/RouterInit");
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var b = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var c = require("NGCore/Client/Social/US/Service/Friends").Friends;
	var e = require("NGCore/Client/Social/US/Service/Profile").Profile;
	var h = require("NGCore/Client/Social/US/Models/User").User;
	d.ButtonOverlays = {
		showCommunityButton: function(l, k) {
			NgLogD("Public - showCommunityButton");
			var j = {
				apiURL: "US.Service.ButtonOverlays.showCommunityButton"
			};
			j.gravity = l;
			if (k != undefined && typeof k == "function") {
				j.callbackFunc = k
			} else {
				j.callbackFunc = null
			}
			a.getRouterInstance().sendCommandToGameService(j)
		},
		hideCommunityButton: function(k) {
			NgLogD("Public - hideCommunityButton");
			var j = {
				apiURL: "US.Service.ButtonOverlays.hideCommunityButton"
			};
			if (k != undefined && typeof k == "function") {
				j.callbackFunc = k
			} else {
				j.callbackFunc = null
			}
			a.getRouterInstance().sendCommandToGameService(j)
		},
		showBalanceButton: function(j, l) {
			NgLogD("Public - showBalanceButton");
			var k = {
				apiURL: "US.Service.ButtonOverlays.showBalanceButton"
			};
			if (j != undefined) {
				k.rect = j
			} else {
				k.rect = new g.ViewGeometry.Rect(50, 50, 0, 0)
			}
			if (l != undefined && typeof l == "function") {
				k.callbackFunc = l
			} else {
				k.callbackFunc = null
			}
			a.getRouterInstance().sendCommandToGameService(k)
		},
		hideBalanceButton: function(k) {
			NgLogD("Public - hideBalanceButton");
			var j = {
				apiURL: "US.Service.ButtonOverlays.hideBalanceButton"
			};
			if (k != undefined && typeof k == "function") {
				j.callbackFunc = k
			} else {
				j.callbackFunc = null
			}
			a.getRouterInstance().sendCommandToGameService(j)
		}
	};
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Service/GameLaunchPayload"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/US/Service/GameLaunchPayload"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Service/GameLaunchPayload"] = d;
	var e = require("NGCore/Client/Social/_Internal/RouterInit");
	var b = require("NGCore/Client/Social/_Internal/GSGlobals");
	var c = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	var a = d.GameLaunchPayload = {
		getLastPayload: function(g) {
			if (g != undefined && typeof g == "function") {
				var f = {
					apiURL: "US.Service.GameLaunchPayload.getLastPayload"
				};
				f.callbackFunc = g;
				b.getRouterInstance().sendCommandToGameService(f)
			}
		},
		onGameLaunchPayload: function(f) {
			a.newGamePayloadEmitter.emit(f)
		}
	};
	a.newGamePayloadEmitter = new c();
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Service/Bank"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Service/Bank"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Service/Bank"] = b;
	var c = require("NGCore/Client/Social/_Internal/RouterInit");
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var d = require("NGCore/Client/UI").UI;
	b.Bank = {};
	b.Bank.Debit = {
		createTransaction: function(e, j, h) {
			NgLogD("Public call createTransaction");
			var g = {
				billingItems: e,
				comment: j
			};
			var f = {
				apiURL: "US.Service.Banking.Purchase.createTransaction",
				data: g
			};
			if (h != undefined && typeof h == "function") {
				f.callbackFunc = this._getCallBackFunc(h)
			}
			a.getRouterInstance().sendCommandToGameService(f)
		},
		openTransaction: function(g, f) {
			NgLogD("Public call openTransaction");
			var e = {
				apiURL: "US.Service.Banking.Purchase.openTransaction",
				data: {}
			};
			if (g) {
				e.data.transactionId = g
			}
			if (f != undefined && typeof f == "function") {
				e.callbackFunc = this._getCallBackFunc(f)
			}
			a.getRouterInstance().sendCommandToGameService(e)
		},
		continueTransaction: function(g, f) {
			NgLogD("Public call continueTransaction");
			var e = {
				apiURL: "US.Service.Banking.Purchase.continueTransaction",
				data: {}
			};
			if (g) {
				e.data.transactionId = g
			}
			if (f != undefined && typeof f == "function") {
				e.callbackFunc = f
			}
			a.getRouterInstance().sendCommandToGameService(e)
		},
		cancelTransaction: function(g, f) {
			NgLogD("Public call cancelTransaction");
			var e = {
				apiURL: "US.Service.Banking.Purchase.cancelTransaction",
				data: {}
			};
			if (g) {
				e.data.transactionId = g
			}
			if (f != undefined && typeof f == "function") {
				e.callbackFunc = f
			}
			a.getRouterInstance().sendCommandToGameService(e)
		},
		closeTransaction: function(g, f) {
			NgLogD("Public call closeTransaction");
			var e = {
				apiURL: "US.Service.Banking.Purchase.closeTransaction",
				data: {}
			};
			if (g) {
				e.data.transactionId = g
			}
			if (f != undefined && typeof f == "function") {
				e.callbackFunc = this._getCallBackFunc(f)
			}
			a.getRouterInstance().sendCommandToGameService(e)
		},
		getTransaction: function(g, f) {
			NgLogD("Public call getTransaction");
			var e = {
				apiURL: "US.Service.Banking.Purchase.getTransaction",
				data: {}
			};
			if (g) {
				e.data.transactionId = g
			}
			if (f != undefined && typeof f == "function") {
				e.callbackFunc = this._getCallBackFunc(f)
			}
			a.getRouterInstance().sendCommandToGameService(e)
		},
		getPendingTransactions: function(f) {
			NgLogD("Public call getPendingTransactions");
			var e = {
				apiURL: "US.Service.Banking.Purchase.getPendingTransactions",
				data: {}
			};
			if (f != undefined && typeof f == "function") {
				e.callbackFunc = function(g, h) {
					f(g.error, h.openTransactions)
				}
			}
			a.getRouterInstance().sendCommandToGameService(e)
		},
		_getCallBackFunc: function(e) {
			return function(f, g) {
				if (f) {
					e(f, undefined)
				} else {
					e(f, g.transaction)
				}
			}
		}
	};
	b.Bank.Inventory = {
		getItem: function(g, h) {
			NgLogD("Public call Inventory getItem");
			var f = {
				itemId: g
			};
			var e = {
				apiURL: "US.Service.Banking.Purchase.getItem",
				data: f
			};
			if (h != undefined && typeof h == "function") {
				e.callbackFunc = function(j, k) {
					if (j) {
						h(j, undefined)
					} else {
						h(j, k.item)
					}
				}
			}
			a.getRouterInstance().sendCommandToGameService(e)
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/GSGlobals"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/GSGlobals"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/GSGlobals"] = b;
	var a = null;
	b.setRouterInstance = function(c) {
		a = c
	};
	b.getRouterInstance = function() {
		return a
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/RouterInit"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/RouterInit"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/RouterInit"] = c;
	var b = require("NGCore/Client/Social/_Internal/_Router").Router;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	a.setRouterInstance(new b());
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/_Router"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/_Router"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/_Router"] = b;
	var a = require("NGCore/Shared/Class").Class;
	var f = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/Social/_Internal/GSCommand");
	var e = require("NGCore/Client/Social").Social;
	var d = false;
	b.Router = a.subclass({
		classname: "Router",
		initialize: function() {
			f.ObjectRegistry.register(this);
			this._createSendGen(this.__objectRegistryId)
		},
		zone: -2,
		Zone: {
			Public: -2,
			GameService: -1,
		},
		$_commandRecvGen: (function() {
			var g = (function(l) {
				var j = f.Proc.parseInt(l.shift(), 10);
				if (j > 0) {
					var k = f.Proc.parseInt(l.shift(), 10);
					var h = f.ObjectRegistry.idToObject(k);
					if (!h) {
						NgLogE("Object instance could not be found for command " + l + ". It may have been destroyed this frame.");
						return
					}
					switch (j) {
						case 2:
							h._sendToOtherProcessRecv(l);
							break;
						case 3:
							h._onCreateRecv(l);
							break;
						default:
							NgLogE("Unknown instance method id " + j + " in Router._commandRecvGen from command: " + l);
							return
					}
				} else {
					switch (j) {
						default:
							NgLogE("Unknown static method id " + j + " in Router._commandRecvGen from command: " + l);
							return
					}
				}
			});
			if (typeof(PROC_DISPATCH_TABLE) == "undefined") {
				PROC_DISPATCH_TABLE = {}
			}
			PROC_DISPATCH_TABLE[346] = g;
			return g
		})(),
		_sendToOtherProcessRecvGen: function(g, h) {
			if (g.length != 1) {
				NgLogE("Could not parse due to wrong argument count in Router.sendToOtherProcess from command: " + g);
				return false
			}
			h.gsCommand = f.Proc.parseJSONString(g[0]);
			if (h.gsCommand === undefined) {
				NgLogE("Could not parse gsCommand in Router.sendToOtherProcess from command: " + g);
				return false
			}
			return true
		},
		_onCreateRecvGen: function(g, h) {
			if (g.length != 1) {
				NgLogE("Could not parse due to wrong argument count in Router.onCreate from command: " + g);
				return false
			}
			h.zone = f.Proc.parseInt(g[0]);
			if (h.zone === undefined) {
				NgLogE("Could not parse zone in Router.onCreate from command: " + g);
				return false
			}
			return true
		},
		$_createSendGen: function(g) {
			f.Proc.appendToCommandString(":346,-1," + g)
		},
		_sendToOtherProcessSendGen: function(g) {
			f.Proc.appendToCommandString(":346,2," + this.__objectRegistryId + "," + f.Base64.encode(JSON.stringify(g)))
		},
		_onCreateRecv: function(g) {
			if (!this._onCreateRecvGen(g, this)) {
				return
			}
			NgLogD("_Router/_onCreateRecv: " + this.zone)
		},
		_sendToOtherProcessRecv: function(j) {
			var h = {};
			if (!this._sendToOtherProcessRecvGen(j, h)) {
				NgLogE("Decode of data for router, failed.");
				return
			}
			var g = h.gsCommand;
			if (this.zone == this.Zone.Public) {
				if (d) {
					NgLogD("_Router/_sendToOtherProcessRecv - in public")
				}
				this.dispatchGameCommand(g)
			} else {
				if (this.zone == this.Zone.GameService) {
					if (d) {
						NgLogD("_Router/ _sendToOtherProcessRecv - in privileged")
					}
					this.dispatchGameServiceCommand(g)
				} else {
					NgLogE("Unknown Command Zone for the GameService Router.");
					this.dispatchGameCommand(g)
				}
			}
		},
		sendToOtherProcess: function(g) {
			var h = c.makeSafe(g);
			if (!h) {
				NgLogD("Couldn't prep GSCommand message for sending!");
				return
			}
			if (d) {
				NgLogD("_Router.js/sendToOtherProcess: " + JSON.stringify(h))
			}
			this._sendToOtherProcessSendGen(h)
		},
		sendCommandToGameService: function(g) {
			if (this.zone == this.Zone.Public) {
				if (d) {
					NgLogD("_Router: sendCommandToGameService - in public")
				}
				this.sendToOtherProcess(g)
			} else {
				if (this.zone == this.Zone.GameService) {
					if (d) {
						NgLogD("_Router: sendCommandToGameService - in privileged")
					}
					this.dispatchGameServiceCommand(g)
				} else {
					NgLogE("Unknown Command Zone for the GameService Router.");
					this.sendToOtherProcess(g)
				}
			}
		},
		sendCommandToGame: function(g) {
			if (this.zone == this.Zone.GameService) {
				this.sendToOtherProcess(g)
			} else {
				if (this.zone == this.Zone.Public) {
					this.dispatchGameCommand(g)
				} else {
					NgLogE("Unknown Command Zone for the GameService Router.");
					this.sendToOtherProcess(g)
				}
			}
		},
		dispatchGameCommand: function(m) {
			var n = c.makeExecutable(m);
			if (n && n.hasOwnProperty("callbackFunc")) {
				if (typeof n.callbackFunc == "function") {
					var j = null;
					var h = null;
					if (n.hasOwnProperty("error")) {
						h = n.error
					}
					if (n.hasOwnProperty("callbackData")) {
						j = n.callbackData
					}
					n.callbackFunc(h, j)
				}
			} else {
				if (n) {
					var o = null;
					if (n && n.hasOwnProperty("apiURL")) {
						o = n.apiURL;
						var l = o.split(".");
						var g = e;
						for (var k = 0; k < l.length; k++) {
							if (g.hasOwnProperty(l[k])) {
								g = g[l[k]]
							} else {
								NgLogE("Cannot find namespace " + o + " in GameService");
								g = null;
								break
							}
						}
						if (g && typeof g == "function") {
							g(n);
							return
						} else {
							NgLogE("GameService Public cannot dispatch game command " + JSON.stringify(n))
						}
					}
				}
			}
		},
		dispatchGameServiceCommand: function(l) {
			var m = null;
			if (l && l.hasOwnProperty("apiURL")) {
				m = l.apiURL;
				var k = m.split(".");
				var h = require("NGCore/Client/Social/_Internal/Privileged").Social;
				for (var j = 0; j < k.length; j++) {
					if (h.hasOwnProperty(k[j])) {
						h = h[k[j]]
					} else {
						NgLogE("Cannot find namespace " + m + " in GameService");
						h = null;
						break
					}
				}
				if (h && typeof h == "function") {
					try {
						h(l)
					} catch (g) {
						NgLogException(g)
					}
					return
				}
			} else {
				NgLogE("Someone called GameService without the proper parameters.\n")
			}
		},
		setVerboseLogging: function(g) {
			d = g
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/GSCommand"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/GSCommand"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/GSCommand"] = a;
	var d = {};
	d.uidGenerator = 0;
	var b = function(f) {
		var g = d.uidGenerator++;
		d[g] = f;
		return g
	};
	var e = function(g) {
		if (d.hasOwnProperty(g)) {
			var f = d[g];
			delete d[g];
			return f
		}
		return null
	};
	var c = function(f) {
		if (typeof f == "object") {
			if (f.hasOwnProperty("callbackFunc")) {
				f.callbackId = b(f.callbackFunc);
				delete f.callbackFunc
			} else {
				if (f.hasOwnProperty("callbackId")) {
					f.callbackFunc = e(f.callbackId);
					delete f.callbackId
				}
			}
			return f
		}
		NgLogD("Error: invalid or non-object passed to gsCmdConvert.");
		return null
	};
	a.makeSafe = function(f) {
		if (f && typeof f == "object" && f.hasOwnProperty("callbackFunc")) {
			return c(f)
		}
		return f
	};
	a.makeExecutable = function(f) {
		if (f && typeof f == "object" && f.hasOwnProperty("callbackId")) {
			return c(f)
		}
		return f
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/Privileged"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/Privileged"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/Privileged"] = a;
	a.Social = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Main: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Main").Main
		},
		CheckBinaryVersion: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/CheckBinaryVersion").CheckBinaryVersion
		}
	});
	a.Social.Common = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Appdata: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Appdata").Appdata
		},
		Auth: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Auth").Auth
		},
		Blacklist: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Blacklist").Blacklist
		},
		Config: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Config").Config
		},
		People: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/People").People
		},
		Profanity: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Profanity").Profanity
		},
		Request: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Request").Request
		}
	});
	a.Social.US = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		DataModel: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel").DataModel
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		Game: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game
		},
		Leaderboard: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Leaderboard").Leaderboard
		},
		Score: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Score").Score
		},
		AppData: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AppData").AppData
		},
		Cache: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Cache").Cache
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		Dispatcher: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher
		}
	});
	a.Social.US.Service = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Banking: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Banking").Banking
		},
		Friends: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Friends").Friends
		},
		Games: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Games").Games
		},
		Home: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Home").Home
		},
		Profile: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Profile").Profile
		},
		ButtonOverlays: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/ButtonOverlays").ButtonOverlays
		},
		Tests: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Tests").Tests
		},
		GameLaunchPayload: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/GameLaunchPayload").GameLaunchPayload
		}
	});
	a.Bank = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Bank").Bank;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader"] = a;

	function b(d, c) {
		return function() {
			delete this[d];
			return this[d] = c()
		}
	}
	a.RequireLoader = function(d) {
		if (d instanceof Object) {
			for (var c in d) {
				this.__defineGetter__(c, b(c, d[c]))
			}
		}
		return this
	};
	a.RequireLoader.prototype = {
		load: function(c) {
			this[c]
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Main"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Main"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Main"] = c;
	var f = require("NGCore/Client/UI").UI;
	var g = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/Device").Device;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Analytics: function() {
			return require("NGCore/Client/Core/Analytics").Analytics
		},
		PrivAnalytics: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Analytics").Analytics
		},
		_LocalGameList: function() {
			return require("NGCore/Client/Core/_LocalGameList")._LocalGameList
		},
		_int_LGL: function() {
			return require("NGCore/Client/Core/_int_LGL")._int_LGL
		},
		Game: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game
		},
		Dispatcher: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		GameLaunchedEmitter: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter
		},
		SystemMessagesStack: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemMessagesStack").SystemMessagesStack
		},
		AppConfig: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig
		},
		AppUpdater: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/AppUpdater").AppUpdater
		},
		CheckBinaryVersion: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/CheckBinaryVersion").CheckBinaryVersion
		},
		ButtonOverlays: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/ButtonOverlays").ButtonOverlays
		},
		Credentials: function() {
			return (require("NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials").Credentials)
		},
		CredentialsHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost
		},
		GameCarouselCache: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RemoteFileCache").GameCarouselCache
		},
		Logger: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger
		},
		MobageBrandSlideIn: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MobageBrandSlideIn").MobageBrandSlideIn
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		ServiceLinkEmitter: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking").ServiceLinkEmitter
		},
		Purchase: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase
		},
		Push: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Push").Push
		},
		QuitOnBackListener: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/QuitOnBackListener").QuitOnBackListener
		},
		Storage: function() {
			return require("NGCore/Client/Storage").Storage
		},
		Localization: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Localization").Localization
		},
		LocText: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString
		},
		isWhitelisted: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Whitelist").isWhitelisted
		},
		MobageAnalytics: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics
		}
	});
	var e = c.Main = {
		gameServiceMain: function(j, h) {
			e._gameServiceMain(j, h)
		},
		_gameServiceMain: function(m, j) {
			NgLogD("@@@ mobage Main.js _gameServiceMain +");
			NgLogD("Mobage/Main: Executing Game Service Main, isDisaggregated = " + g.Capabilities.getIsDisaggregated());
			a.Logger._privInit();
			NgLogD("@@- mobage Main.js _gameServiceMain before Analytics._setNgPipeSocialAnalytics");
			if ((typeof a.Analytics._setNgPipeSocialAnalytics) == "function") {
				NgLogD("Mobage/Main: Setting ngCore Analytics to use Privileged Social imports.Analytics");
				a.Analytics._setNgPipeSocialAnalytics(a.PrivAnalytics)
			}
			NgLogD("@@- mobage Main.js _gameServiceMain after Analytics._setNgPipeSocialAnalytics");
			NgLogD("@@- mobage Main.js _gameServiceMain do handleFirstLaunchIntent");
			e.handleFirstLaunchIntent();
			var k = g.Capabilities.getConfigs();
			if (!k.hasOwnProperty("disablePushNotifications") || !k.disablePushNotifications) {
				NgLogD("Mobage/Main: Register for push & listen.");
				a.Push.enablePushRegistration()
			}
			NgLogD("Mobage/Main: Instantiate Quit Key Listener");
			a.QuitOnBackListener.instantiate();
			NgLogD("Mobage/Main: Instantiate ServiceLinkEmitter");
			a.ServiceLinkEmitter.instantiate();
			NgLogD("Mobage/Main: Instantiate SystemMessagesStack");
			a.SystemMessagesStack.instantiate();
			NgLogD("@@- mobage Main.js _gameServiceMain before GameCarouselCache.instantiate");
			a.GameCarouselCache.instantiate();
			a.GameLaunchedEmitter.instantiate();
			if (d.IPCEmitter._setEmitIntents) {
				d.IPCEmitter._setEmitIntents(true)
			}
			d.IPCEmitter.addListener(new g.MessageListener(), function(n) {
				NgLogD("Mobage/Main: Received an intent!" + JSON.stringify(n));
				e.onIntentEmit(n)
			});
			d.LifecycleEmitter.addListener(new g.MessageListener(), function(n) {
				NgLogD("Mobage/Main: DEBUG - lifecycle emitter got event " + n)
			});
			var h = new g.MessageListener();
			a.GameLaunchedEmitter.addListener(h, function() {
				if (a._LocalGameList.clearWatch) {
					a._LocalGameList.clearWatch()
				}
				if (!a.Session._isLocalDevelopmentMode()) {
					setTimeout(function() {
						a.AppUpdater.updateServiceJS(e.getGameServiceUrl())
					}, a.AppConfig.getJSUpdateWaitPeriodInMS())
				} else {
					a.CheckBinaryVersion.checkForBinaryUpdates(e.getGameServiceUrl())
				}
			});
			NgLogD("Mobage/Main: Instantiating our localization system.");
			NgLogD("@@@ mobage Main.js _gameServiceMain Localization.instantiate +");
			var l = new g.MessageListener();
			a.Localization.instantiate();
			NgLogD("@@@ mobage Main.js _gameServiceMain Localization.instantiate -");
			a.Localization.addListener(l, function(o) {
				NgLogD("Mobage/Main: Instantiating hosts");
				NgLogD("@@@ mobage Main.js _gameServiceMain ServiceHost instantiate +");
				a.ServiceHost.instantiate();
				NgLogD("@@@ mobage Main.js _gameServiceMain ServiceHost instantiate -");
				NgLogD("@@@ mobage Main.js _gameServiceMain CredentialsHost instantiate +");
				a.CredentialsHost.instantiate();
				NgLogD("@@@ mobage Main.js _gameServiceMain CredentialsHost instantiate -");
				if (!m || m === "") {
					var n = g.Capabilities.getConfigs();
					NgLogD("Mobage/Main: Booting session with service, config=" + JSON.stringify(n));
					e._setupSessionAndLaunchApp(n, j, false)
				} else {
					NgLogD("@@@ mobage Main.js _gameServiceMain getGameConfig +");
					a._LocalGameList.getGameConfig(m, false, function(p) {
						NgLogD("@@@ mobage Main.js _gameServiceMain getGameConfig -");
						NgLogD("Mobage/Main: Booting session with game, url=" + m + ", config=" + JSON.stringify(p));
						e._setupSessionAndLaunchApp(p, j, true)
					})
				}
			});
			NgLogD("@@@ mobage Main.js _gameServiceMain -")
		},
		onIntentEmit: function(l) {
			NgLogD("Mobage/Main/onIntentEmit: Intent emit: " + JSON.stringify(l));
			if (l) {
				var j = l instanceof d.IPCEmitter.Intent && l.getExtras && l.getAction;
				var h = j ? l.getExtras() : null;
				if (j && l.getAction() == "com.mobage.ww.RUN" && h && h.callingPackage) {
					NgLogD("Mobage/Main/onIntentEmit: Handling as old market app intent");
					e._handleOldMarketAppIntent(h.callingPackage);
					return
				}
				var k = a.Session.getCurrentSession();
				if (k && !k.isSomeoneLoggedIn()) {
					NgLogD("Mobage/Main/onIntentEmit: Hit early out on no login case...");
					return
				}
				if (j && h && h.isMobagePush) {
					NgLogD("Mobage/Main/onIntentEmit: Intent wants us to show service UI");
					a.ServiceHost.showService();
					return
				}
				if (j && l.getAction() == "com.mobage.ww.PLAY") {
					NgLogD("Mobage/Main/onIntentEmit: Intent was game launched, hiding service");
					a.ServiceHost.hideService();
					return
				}
				if (l._intentURL) {
					NgLogD("Mobage/Main/onIntentEmit: Handling _intentURL on intent: " + l._intentURL);
					e.handleIntentWithUrl(l._intentURL)
				}
			}
		},
		handleIntentWithUrl: function(h) {
			if (h == this._mobageShortcutIntentUrl) {
				a.ServiceHost.navController.pushViewController(new b.Home())
			}
		},
		handleFirstLaunchIntent: function() {
			if (e._isLaunch) {
				d.IPCEmitter.getCallingPackage(function(h) {
					NgLogD("Mobage: Main.handleFirstLaunchIntent (" + g.Capabilities.getIntentAction() + ", " + h + ")");
					if (g.Capabilities.getIntentAction() == "com.mobage.ww.RUN") {
						NgLogE("Old Market App First-launch, sending users to marketplace for an update!");
						e._handleOldMarketAppIntent(h)
					}
				});
				if (g.Capabilities.getIntentUrl() == e._mobageShortcutIntentUrl) {
					NgLogD("Mobage: Main.handleFirstLaunchIntent Detected shortcut launch");
					e._isLaunchIntoServiceUI = true
				}
				e._isLaunch = false
			}
		},
		_handleOldMarketAppIntent: function(h) {
			var j = new f.AlertDialog();
			j.setTitle(a.LocText("This version is so last week."));
			j.setText(a.LocText("Hop over to the Market and update to get the new goodness"));
			j.setChoices([a.LocText("Quit"), a.LocText("Update Now")]);
			j.show();
			j.onchoice = function(k) {
				if (k.choice === 0) {
					d.LifecycleEmitter.exitProcess()
				} else {
					NgLogD("GSMain: Going to Market");
					a.Game._getGameWithAndroidPackageName(h, function(m, l) {
						if (!m && l) {
							d.IPCEmitter.launchIntent(l._androidMarketIntentURL())
						}
					})
				}
				j.hide()
			}
		},
		_showStartupFailureDialog: function(h) {
			var j = new f.AlertDialog();
			j.setTitle(a.LocText("We're not able to connect"));
			j.setText(a.LocText("Please check your network settings and try again."));
			j.setChoices([a.LocText("Quit"), a.LocText("Try Again")]);
			j.show();
			j.onchoice = function(k) {
				if (k.choice === 0) {
					d.LifecycleEmitter.exitProcess()
				} else {
					h()
				}
			}
		},
		_setupSessionAndLaunchApp: function(j, h, l) {
			if (!j) {
				j = {}
			}
			a._LocalGameList.setProgressText(a.LocText("Connecting to network…"));
			if (!j.requireMobageLogin) {
				var k = new f.Toast();
				k.setText("Skipping mobage login");
				k.show();
				h();
				return
			}
			a.MobageAnalytics.logStartupFlowEvent("InitialSetupSession");
			var m = function() {
				NgLogD("@@@ mobage Main.js _setupSessionAndLaunchApp beginGameSessionWithConfig +");
				a.Session.beginGameSessionWithConfig(j, function(n, o) {
					NgLogD("@@@ mobage Main.js _setupSessionAndLaunchApp beginGameSessionWithConfig -");
					NgLogD("Began session. " + n + " " + o + " " + (o ? o._user : "[session was undefined, so is _user]"));
					if (o && n != a.Session.NO_KEYS_ERR && o.appKey() != "default-Dev") {
						g.Analytics._getPipe().sessionStartEvent();
						NgLogD("Mobage/Main: retry failed credits");
						NgLogD("@@@ mobage Main.js _setupSessionAndLaunchApp Purchase.retryFailedCredits +");
						a.Purchase.retryFailedCredits();
						NgLogD("@@@ mobage Main.js _setupSessionAndLaunchApp Purchase.retryFailedCredits -");
						NgLogD("@@@ mobage Main.js _setupSessionAndLaunchApp _checkSessionStatusSecure +");
						a.Session._checkSessionStatusSecure(function() {
							NgLogD("@@@ mobage Main.js _setupSessionAndLaunchApp _checkSessionStatusSecure -");
							if (!o.isSomeoneLoggedIn()) {
								if (l) {
									g.LocalGameList._setProgressVisible(false);
									var q = function() {
										var r = new a.MobageBrandSlideIn({}, f.Window.document);
										r.slideInAndOut(function() {
											r.removeFromParent();
											r.destroy();
											a.Credentials.showRegistration(function() {
												if (h) {
													h();
													g.LocalGameList._setProgressVisible(true)
												}
											})
										})
									};
									if (!a.isWhitelisted(g.Capabilities.getDeviceName())) {
										a.MobageAnalytics.logStartupFlowEvent("GreyListDeviceDialog");
										var p = (new f.AlertDialog({
											title: a.LocText("Have Fun!"),
											text: a.LocText("The game isn't fully tested on this device yet. If you run into trouble, let us know in Support > Devices or email us at support@mobage.com", g.Capabilities.getProductName()),
											choices: [a.LocText("OK")]
										})).retain();
										p.onchoice = function(r) {
											p.release();
											p = null;
											q()
										};
										p.show()
									} else {
										q()
									}
								} else {
									if (h) {
										h()
									}
								}
							} else {
								NgLogD("Initialize with menu");
								a.MobageAnalytics.logStartupFlowEvent("ReturningUserLoggedIn");
								a.ServiceHost.closeMenuDrawer(false, false);
								if (h) {
									h()
								}
							}
						})
					} else {
						e._showStartupFailureDialog(m)
					}
				})
			};
			m()
		},
		getGameServiceUrl: function() {
			var h = g.Capabilities._getBootServer();
			if (!h.match(/.*\/$/)) {
				h += "/"
			}
			return h + g.Capabilities._getBoot()
		},
		switchToGame: function(j, h) {
			a.ButtonOverlays.hideAllButtons();
			a.ServiceHost.setIsRunningActiveGame(true);
			a._LocalGameList.getGameConfig(j, function(k) {
				if (!k || !k.appId || !k.requireMobageLogin) {
					NgLogD("Mobage: Skipping session switch because configuration.json does not indicate a use of the Social components.");
					a._int_LGL.launch(j);
					h(null)
				} else {
					a.Session.switchToSessionWithConfig(k, function(p, r) {
						if (p) {
							NgLogD("Mobage: Error running game! Couldn't begin game imports.Session: " + p);
							h(p)
						} else {
							NgLogD("Mobage: Launching game at url " + j + " with appID: " + r.appKey());
							var m = "com.mobage.ww.local_last_played_game.";
							var q = a.Storage.KeyValueCache.local;
							if (!q) {
								a.Storage.KeyValueCache.init();
								q = a.Storage.KeyValueCache.local
							}
							var s = a.Session.getCurrentSession();
							var l = s ? s.user() : null;
							var n = l ? l.gamertag : "nobody";
							var o = m + n;
							q.setItem(o, r.appKey());
							a._int_LGL.launch(j);
							if (!r.isSomeoneLoggedIn()) {
								a.Session._forceLogin(function() {
									NgLogD("Mobage: Got login")
								})
							} else {
								NgLogD("Initialize with menu");
								a.ServiceHost.closeMenuDrawer(false, false)
							}
							h(null)
						}
					})
				}
			})
		},
		_isLaunchIntoServiceUI: false,
		_delayedLaunchGameCb: null,
		_delayedLaunchGameUrl: null,
		isLaunchIntoServiceUI: function() {
			return e._isLaunchIntoServiceUI
		},
		finishShortcutLaunch: function(h, j) {
			a.ServiceHost.navController.pushViewController(new b.Home());
			e._delayedLaunchGameCb = h;
			e._delayedLaunchGameUrl = j
		},
		onGameStart: function() {
			NgLogD("Mobage: onGameStart called, session=" + a.Session.getCurrentSession());
			if (a.Session.getCurrentSession()) {
				a.Dispatcher.sendSession(a.Session.getCurrentSession())
			}(a.GameLaunchedEmitter).onGameLaunched()
		},
		_isLaunch: true,
		_newLaunchGame: null,
		_mobageShortcutIntentUrl: "mobage-service:home",
		getNewLaunchGame: function() {
			return this._newLaunchGame
		},
		setNewLaunchGame: function(h) {
			this._newLaunchGame = h
		}
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/CheckBinaryVersion"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/CheckBinaryVersion"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/CheckBinaryVersion"] = a;
	var b = a.CheckBinaryVersion = {
		classname: "CheckBinaryVersion",
		checkForBinaryUpdates: function(d) {
			NgLogD("Mobage/checkForBinaryUpdates - Checking...");
			if (!d) {
				var c = require("NGCore/Client/Core/Capabilities").Capabilities;
				var e = c._getBootServer();
				if (!e.match(/.*\/$/)) {
					e += "/"
				}
				d = e + c._getBoot()
			}
			if (!b._doesBinaryMeetMinimumVersion()) {
				b._initForcedBinaryUpdateButton(d);
				return true
			}
			return false
		},
		_doesBinaryMeetMinimumVersion: function() {
			var g = require("NGCore/Client/Core/Capabilities").Capabilities.getBinaryVersion();
			NgLogD("Mobage/CheckBinaryVersion: current binary version=" + g);
			var f = require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig.getMinBinaryVersion();
			NgLogD("Mobage/CheckBinaryVersion: minVersion=" + f);
			if (g && g.length > 0 && f && f.length > 0) {
				var d = g.split("-");
				var c = d[d.length - 1];
				var k = c.split(".");
				var j = f.split(".");
				var h = Math.min(k.length, j.length);
				for (var e = 0; e < h; e++) {
					if (j[e] > k[e]) {
						return false
					} else {
						if (j[e] < k[e]) {
							return true
						}
					}
				}
				return j.length <= k.length
			}
			return true
		},
		_initForcedBinaryUpdateButton: function(e) {
			require("NGCore/Client/Core");
			require("NGCore/Client/Core/Class");
			var f = require("NGCore/Client/UI").UI;
			var c = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
			var d = require("NGCore/Client/Core/Analytics").Analytics;
			var g = new f.AlertDialog();
			g.setTitle(c("Update Available"));
			g.setText(c("A critical Mobage update is available in the Android Market. Please update to continue using the service."));
			g.setChoices([c("Get the Update"), c("Quit")]);
			g.onchoice = function(k) {
				if (k.choice === 0) {
					d.reportGameEvent("MobageForcedBinaryUpdateDialogGetUpdateClicked");
					var j = require("NGCore/Client/Device/IPCEmitter").IPCEmitter;
					var h = require("NGCore/Client/Core/Capabilities").Capabilities;
					j.launchIntent("market://details?id=" + h.getBundleIdentifier())
				} else {
					d.reportGameEvent("MobageForcedBinaryUpdateDialogQuitClicked")
				}
				require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter.exitProcess()
			};
			g.show();
			d.reportGameEvent("MobageForcedBinaryUpdateDialogShow")
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Appdata"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Appdata"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Appdata"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyRequest").DonkeyRequest;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/OpenSocial").OpenSocial;
	b.Appdata = {
		getEntries: function(g) {
			var f = new c("opensocial/appdata/@me/@self/@app", "GET");
			var e = g.keys;
			if (e && e.length > 0) {
				f.setQueryParams({
					fields: e.join(",")
				})
			}
			f.send(function(l, n, o, j) {
				var k = d.populateErrors(l, n, o, j);
				var h = null;
				if (j === 200) {
					var m = d.keys(n.entry)[0];
					h = n.entry[m]
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: g.callbackId,
					error: k.error,
					callbackData: h
				})
			})
		},
		updateEntries: function(g) {
			var e = g.entries;
			var f = new c("opensocial/appdata/@me/@self/@app", "POST");
			f.setHttpHeaders({
				"Content-Type": "application/json"
			});
			if (e) {
				f.setQueryParams({
					fields: d.keys(e).join(",")
				});
				f.setPostBody(JSON.stringify(e))
			}
			f.send(function(k, l, n, h) {
				var j = d.populateErrors(k, l, n, h);
				var m = null;
				if ((h === 201) && (typeof e === "object")) {
					m = d.keys(e)
				} else {
					if (h === 201) {
						m = []
					}
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: g.callbackId,
					error: j.error,
					callbackData: m
				})
			})
		},
		deleteEntries: function(g) {
			var f = g.keys;
			var e = new c("opensocial/appdata/@me/@self/@app", "DELETE");
			if (f && f.length > 0) {
				e.setQueryParams({
					fields: f.join(",")
				})
			} else {
				a.getRouterInstance().sendCommandToGame({
					callbackId: g.callbackId,
					error: "Keys to delete are a required parameter",
					callbackData: null
				})
			}
			e.send(function(k, l, n, h) {
				var j = d.populateErrors(k, l, n, h);
				var m = null;
				if (h === 202) {
					m = f
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: g.callbackId,
					error: j.error,
					callbackData: m
				})
			})
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Auth"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Auth"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Auth"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyRequest").DonkeyRequest;
	b.Auth = {
		authorizeToken: function(g) {
			var e = g.token;
			var d = "oauth/authorize";
			var f = new c(d, "POST");
			f.setPostBody({
				authorize: 1,
				oauth_token: e
			});
			f.send(function(j, k, l, h) {
				if (!k || !k.success) {
					NgLogD("DATA: " + JSON.stringify(k));
					NgLogD("ERRO: " + JSON.stringify(j))
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: g.callbackId,
					error: j,
					callbackData: k && k.success ? k.oauth_verifier : false
				})
			})
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Blacklist"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Blacklist"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Blacklist"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyRequest").DonkeyRequest;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/OpenSocial").OpenSocial;
	b.Blacklist = {
		checkBlacklist: function(l) {
			var j = l.userId;
			var g = l.targetUserId;
			var h = l.opt;
			var m = {};
			var f = "opensocial/blacklist/" + j + "/@all";
			if (g) {
				f += "/" + g
			} else {
				if (h && h.count) {
					m.count = h.count
				}
				if (h && h.start) {
					m.startIndex = h.start
				}
			}
			var k = new c(f, "GET");
			if (d.keys(m).length > 0) {
				k.setQueryParams(m)
			}
			k.send(function(q, r, t, o) {
				var p = {
					error: null
				};
				var s = [];
				var n = {
					total: 0,
					start: 1,
					count: 0
				};
				if (o === 404) {
					q = null
				} else {
					p = d.populateErrors(q, r, t, o);
					s = d.stripBlacklist(p.data);
					n = {
						total: r.totalResults || s.length,
						start: r.startIndex || 1,
						count: r.itemsPerPage || s.length
					}
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: l.callbackId,
					error: p.error,
					callbackData: {
						users: s,
						result: n
					}
				})
			})
		},
		isBlockedUser: function(j, h, f) {
			var g = "opensocial/blacklist/" + j + "/@all/" + h;
			var k = new c(g, "GET");
			k.send(function(n, o, q, l) {
				var m = {
					error: null
				};
				var p = [];
				if (l === 404) {
					f(n, false)
				} else {
					m = d.populateErrors(n, o, q, l);
					p = d.stripBlacklist(m.data);
					f(undefined, p.length > 0)
				}
			})
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Config"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Config"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Config"] = a;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	a.Config = {
		getServerEnvironment: function() {
			var d = b.getCurrentSession();
			if (!d) {
				return "unknown"
			}
			var c = b.getCurrentSession().serverMode();
			if (c == b.serverModes.production) {
				return "production"
			} else {
				if (c == b.serverModes.sandbox) {
					return "sandbox"
				} else {
					return "unknown"
				}
			}
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/People"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/People"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/People"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/OpenSocial").OpenSocial;
	b.People = {
		getUser: function(h) {
			var g = new d.PlusRequest();
			var f = h.userId;
			g.setApiMethod("opensocial/people/" + f + "/@self");
			g.setHttpMethod("GET");
			var e = c.populatePeopleFields(h.fields);
			g.setPostBody({
				fields: e.join(",")
			});
			g.send(function(m, n, o, j) {
				var l = c.populateErrors(m, n, o, j);
				var k = null;
				if (j === 200) {
					k = n
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: h.callbackId,
					error: l.error,
					callbackData: k
				})
			})
		},
		getUsers: function(p) {
			var j = new d.PlusRequest();
			var e = [];
			var f = p.userIds;
			j.setHttpMethod("GET");
			var m = c.populatePeopleFields(p.fields);
			j.setPostBody({
				fields: m.join(",")
			});
			var l = f.length;
			if (l > 25) {
				l = 25
			}
			var h = null;
			var o = null;
			var g = l;
			var n = null;
			for (var k = 0; k < l; k++) {
				n = f[k];
				j.setApiMethod("opensocial/people/" + n + "/@self");
				var q = null;
				j.send(function(t, u, v, r) {
					g--;
					var s = null;
					q = c.populateErrors(t, u, v, r);
					if (q.error) {
						o = q.error
					}
					if (r === 200) {
						s = u;
						e.push(s)
					}
					if (g === 0) {
						a.getRouterInstance().sendCommandToGame({
							callbackId: p.callbackId,
							error: o,
							callbackData: {
								users: e,
								results: null
							}
						})
					}
				})
			}
		},
		getCurrentUser: function(g) {
			var f = new d.PlusRequest();
			f.setApiMethod("opensocial/people/@me/@self");
			f.setHttpMethod("GET");
			var e = c.populatePeopleFields(g.fields);
			f.setPostBody({
				fields: e.join(",")
			});
			f.send(function(l, m, n, h) {
				var k = c.populateErrors(l, m, n, h);
				var j = null;
				if (h === 200) {
					j = m
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: g.callbackId,
					error: k.error,
					callbackData: j
				})
			})
		},
		getFriends: function(j) {
			var h = new d.PlusRequest();
			var g = j.userId;
			var l = null;
			h.setApiMethod("opensocial/people/" + g + "/@friends");
			h.setHttpMethod("GET");
			var e = c.populatePeopleFields(j.fields);
			var f = j.opt;
			var k = {};
			if (e && e.length > 0) {
				k.fields = e.join(",")
			}
			if (f && f.count) {
				k.count = f.count
			}
			if (f && f.start) {
				k.startIndex = f.start
			}
			if (c.keys(k).length > 0) {
				h.setPostBody(k)
			}
			h.send(function(p, q, r, n) {
				var o = c.populateErrors(p, q, r, n);
				var m = null;
				if (n === 200) {
					l = q.entry;
					m = {
						total: q.totalResults,
						start: q.startIndex,
						count: q.itemsPerPage
					}
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: j.callbackId,
					error: o.error,
					callbackData: {
						users: l,
						result: m
					}
				})
			})
		},
		getFriendsWithGame: function(j) {
			var h = new d.PlusRequest();
			var g = j.userId;
			h.setApiMethod("opensocial/people/" + g + "/@friends");
			h.setHttpMethod("GET");
			var e = c.populatePeopleFields(j.fields);
			var f = j.opt;
			var k = k = {
				filterBy: "hasApp",
				filterOp: "equals",
				filterValue: "true"
			};
			if (e && e.length > 0) {
				k.fields = e.join(",")
			}
			if (f && f.count) {
				k.count = f.count
			}
			if (f && f.start) {
				k.startIndex = f.start
			}
			h.setPostBody(k);
			h.send(function(o, p, q, m) {
				var r = null;
				var l = null;
				var n = c.populateErrors(o, p, q, m);
				if (m === 200) {
					r = p.entry;
					l = {
						total: p.totalResults,
						start: p.startIndex,
						count: p.itemsPerPage
					}
				}
				a.getRouterInstance().sendCommandToGame({
					callbackId: j.callbackId,
					error: n.error,
					callbackData: {
						users: r,
						result: l
					}
				})
			})
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Profanity"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Profanity"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Profanity"] = b;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/OpenSocial").OpenSocial;
	b.Profanity = {
		checkProfanity: function(f) {
			var e = new d.PlusRequest();
			e.setApiMethod("opensocial/ngword");
			e.setHttpMethod("GET");
			var g = f.text;
			e.setPostBody({
				data: g
			});
			e.send(function(l, n, o, h) {
				var m = null;
				var j = c.populateErrors(l, n, o, h);
				if (h === 200) {
					m = n.valid
				}
				var k = m;
				a.getRouterInstance().sendCommandToGame({
					callbackId: f.callbackId,
					error: j.error,
					callbackData: {
						profanity: k
					}
				})
			})
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Request"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Request"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Request"] = a;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel"] = e;
	var h = require("NGCore/Client/Social/_Internal/RouterInit");
	var k = require("NGCore/Client/Social/_Internal/GSGlobals");
	var j = require("NGCore/Client/Core").Core;
	var m = require("NGCore/Client/Social");
	var a = j;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher");
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var g = e.DMLogD = function(n) {
		if (c.shouldLog(null, "DataModel")) {
			var o = Array.prototype.slice.call(arguments);
			o.unshift("DataModel: ");
			c.debug.apply(c, o)
		}
	};
	var f = e.DMLogE = function(n) {
		var o = Array.prototype.slice.call(arguments);
		o.unshift("DataModel: ");
		c.error.apply(c, o)
	};
	var l = e.DataModel = a.MessageEmitter.subclass({
		initialize: function(n) {
			this.recordID = n;
			this.entityTag = null;
			this._cache()
		},
		beginChanges: function() {
			d.Dispatcher.beginBatching()
		},
		endChanges: function() {
			d.Dispatcher.endBatching()
		},
		is: function(n) {
			if (n && n.classname && n.recordID) {
				return ((n.classname === this.classname) && (n.recordID === this.recordID))
			}
			return false
		},
		_cache: function() {
			if (!this._dataCache) {
				var o = b.Session.getCurrentSession();
				if (o) {
					var n = o.dataCache();
					if (n) {
						n.addObject(this);
						this._dataCache = n
					}
				}
			}
			return this._dataCache
		},
		_classname: function() {
			var n = this.classname;
			return n
		},
		$_serializedDataModel: function(n) {
			if (n instanceof(l)) {
				n = {
					classname: n.classname,
					recordID: n.recordID
				}
			}
			return n
		},
		$_deserializedDataModel: function(r, p) {
			if (r && r.hasOwnProperty && r.hasOwnProperty("classname") && r.hasOwnProperty("recordID")) {
				var o = r.classname;
				var s = m.Social.US[o];
				var n = r.recordID;
				if (s && n) {
					var q = p.getObjectWithRecordID(o, n);
					if (!q) {
						q = new s(n)
					}
					q._deserializeFromHash(r.data);
					p.addObject(q);
					r = q
				}
			}
			return r
		},
		_serializedHash: function() {
			var t = this.constructor;
			var s = {
				classname: t.classname,
				recordID: this.recordID
			};
			s.data = {};
			var q = this.constructor._serializableProperties || [];
			for (var n = 0; n < q.length; n++) {
				var p = q[n];
				var o = this[p];
				if (o instanceof(Array)) {
					for (var r = 0; r < o.length; r++) {
						o[r] = l._serializedDataModel(o[r])
					}
				} else {
					o = l._serializedDataModel(o)
				}
				s.data[p] = o
			}
			g("Serialized from privileged!");
			if (this.entityTag) {
				s._entityTag = this.entityTag
			}
			return s
		},
		_deserializeFromHash: function(q) {
			if (!q) {
				return
			}
			this.beginChanges();
			this.entityTag = q._entityTag;
			var n = this._cache();
			for (var o in q) {
				var p = q[o];
				if (p instanceof(Array)) {
					for (var r = 0; r < p.length; r++) {
						p[r] = l._deserializedDataModel(p[r], n)
					}
				} else {
					p = l._deserializedDataModel(p, n)
				}
				this[o] = p
			}
			this.endChanges()
		}
	});
	l.defineSetterCallbacks = function(q, p) {
		for (var n = 0; n < p.length; n++) {
			var o = p[n];
			(function(r) {
				q.prototype.__defineSetter__(r, function(s) {
					this["___" + r] = s;
					var t = {};
					t["" + r] = s;
					this.emit(t);
					d.Dispatcher.sendObject(this)
				});
				q.prototype.__defineGetter__(r, function(s) {
					return this["___" + r]
				})
			})(o)
		}
		q._serializableProperties = p
	};
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User"] = function() {
	var D = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User"] = D;
	var z = require("NGCore/Client/Social/_Internal/GSGlobals");
	var x = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var n = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel");
	var k = require("NGCore/Shared/MessageEmitter");
	var t = require("NGCore/Client/Core/SHA1").SHA1;
	var s = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var l = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game");
	var v = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserBuddiesList").UserBuddiesList;
	var A = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserGameFriendsList").UserGameFriendsList;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/FeaturedUsersList").FeaturedUsersList;
	var C = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OwnedGamesList").OwnedGamesList;
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var b = "com.ngmoco.authentication.auth_key";
	var q = "com.ngmoco.authentication.username";
	var u = "com.ngmoco.authentication.avatar_id";
	var y = "com.ngmoco.authentication.lastUserObject";
	var a = "CurrentUser";
	var f = "CurrentUserFriends";
	var g = "CurrentUserFollowers";
	var e = "user";
	var B = "error";
	var m = "list";
	var w = "target";
	var E = "action";
	var r = "user_id";
	var p = n.DMLogD;
	var o = n.DMLogE;
	var h = n.DataModel.subclass({
		classname: "User",
		initialize: function($super, F, G) {
			$super(F);
			this.gamertag = null;
			this.avatarId = null;
			this.motto = "";
			this.relation = null;
			this.photoId = null;
			this.emailAddress = "";
			this.emailHash = "";
			this.phoneNumber = "";
			this.password = null;
			this.firstName = null;
			this.lastName = null;
			this.hideFullName = false;
			this.ageRestricted = false;
			this.isNewRelationship = false;
			this.isMutualFriend = false;
			this.showsPresence = false;
			this.onlyShowFriendNotifications = false;
			this.optsIn = false;
			this.isMobageUser = false;
			this.isGameHubUser = false;
			this.gamerscore = 0;
			this.gamerLevel = 0;
			this.gamerLevelName = null;
			this.gamerLevelScore = 0;
			this.gamerNextLevelScore = 0;
			this.games = [];
			this.lastPlayedGame = null;
			this.unreadWallPostCount = 0;
			this.entityTag = null;
			this.sparse = true;
			this._loadData(G, {})
		},
		_loadData: function(K, J) {
			K = K || {};
			J = J || {};
			this.beginChanges();
			this.gamertag = K[h.GamertagKey] || this.gamertag;
			this.avatarId = K[h.AvatarKey] || this.avatarId;
			this.relation = K[h.RelationKey] || this.relation;
			this.photoId = K[h.PhotoKey] || this.photoId;
			this.emailAddress = K[h.EmailAddressKey] || this.emailAddress;
			this.emailHash = h.EmailHashKey in K ? K[h.EmailHashKey].toLowerCase() : this.emailHash;
			this.phoneNumber = K[h.PhoneNumberKey] || this.phoneNumber;
			this.password = K[h.PasswordKey] || this.password;
			this.firstName = K[h.FirstNameKey] || this.firstName;
			this.lastName = K[h.LastNameKey] || this.lastName;
			this.hideFullName = h.PrivacyKey in K ? K[h.PrivacyKey] : this.hidesFullName;
			this.ageRestricted = h.AgeRangeKey in K ? K[h.AgeRangeKey] : this.ageRestricted;
			this.isNewRelationship = h.NewBuddyKey in K ? K[h.NewBuddyKey] : this.isNewRelationship;
			this.isMutualFriend = h.IsMutualFriendKey in K ? K[h.IsMutualFriendKey] : this.isMutualFriend;
			if (this.ageRestricted) {
				this.motto = ""
			} else {
				this.motto = K[h.MottoKey] || this.motto
			}
			p("Got some user stuff: " + this.hideFullName + " " + this.ageRestricted + " " + this.isNewRelationship + " " + h.PrivacyKey + " " + h.AgeRangeKey + " " + h.NewBuddyKey + " " + K[h.PrivacyKey] + " " + K[h.AgeRangeKey] + " " + K[h.NewBuddyKey]);
			this.showsPresence = h.HidePresenceKey in K ? !K[h.HidePresenceKey] : this.showsPresence;
			this.onlyShowFriendNotifications = h.OnlyShowFriendNotificationsKey in K ? K[h.OnlyShowFriendNotificationsKey] : this.onlyShowFriendNotifications;
			this.optsIn = h.SpamKey in K ? K[h.SpamKey] : this.optsIn;
			this.isMobageUser = h.IsMobageUser in K ? K[h.IsMobageUser] : this.isMobageUser;
			this.isGameHubUser = h.IsGameHubUser in K ? K[h.IsGameHubUser] : this.isGameHubUser;
			this.gamerscore = h.GamerScoreKey in K ? K[h.GamerScoreKey] : this.gamerscore;
			this.gamerLevel = h.LevelNumberKey in K ? K[h.LevelNumberKey] : this.gamerLevel;
			this.gamerLevelName = h.LevelNameKey in K ? K[h.LevelNameKey] : this.gamerLevelName;
			this.gamerLevelScore = h.CurrentLevelScoreKey in K ? K[h.CurrentLevelScoreKey] : this.gamerLevelScore;
			this.gamerNextLevelScore = h.NextLevelScoreKey in K ? K[h.NextLevelScoreKey] : this.gamerNextLevelScore;
			this.unreadWallPostCount = h.UnreadWallPostCountKey in K ? K[h.UnreadWallPostCountKey] : this.unreadWallPostCount;
			if (K[h.GamesKey]) {
				var I = [];
				this.games = this.games || [];
				for (var H in K[h.GamesKey]) {
					if (K[h.GamesKey].hasOwnProperty(H)) {
						var G = K[h.GamesKey][H];
						var F = (G && G.hasOwnProperty("product")) ? l.Game.getGameWithData(G.product) : l.Game.getGameWithData(G);
						if (this.games.indexOf(F) !== -1) {
							this.games.splice(this.games.indexOf(F), 1)
						}
						if (F) {
							I.push(F)
						}
					}
				}
				this.games = I.concat(this.games);
				this.lastPlayedGame = (this.games.length) ? this.games[0] : null
			}
			this.entityTag = J.etag || this.entityTag;
			this._updateSparseFlag();
			this.endChanges()
		},
		_updateSparseFlag: function() {
			if (this.photoId !== null && this.firstName !== null && this.lastName !== null && this.gamerLevelName !== null) {
				this.sparse = false
			} else {
				this.sparse = true
			}
		},
		getFullName: function() {
			var F = [];
			if (this.firstName) {
				F.push(this.firstName)
			}
			if (this.lastName) {
				F.push(this.lastName)
			}
			return F.join(" ")
		},
		addBuddy: function(I, F) {
			F = F || x.PlusRequest.noOp;
			if (!I) {
				F("No user", null);
				return null
			}
			if (!this._invitingList) {
				this._invitingList = {}
			}
			this._invitingList[I.recordID] = I;
			var G = this;
			var H = new x.PlusRequest();
			H.setApiMethod("users/" + G.recordID + "/buddies");
			H.setHttpMethod("POST");
			H.setPostBody({
				id: I.recordID,
				enemy: "false"
			});
			H.send(function(J, K) {
				delete G._invitingList[I.recordID];
				if (!J) {
					G.emit({
						buddies: 1
					})
				}
				F(J, K)
			});
			return H
		},
		isInviting: function(F) {
			return this._invitingList && this._invitingList[F.recordID]
		},
		getAvatars: function(F) {
			F = F || x.PlusRequest.noOp;
			var G = this;
			var H = new x.PlusRequest();
			H.setApiMethod("badges");
			H.setHttpMethod("GET");
			H.send(function(L, M) {
				var O = [];
				if (!L) {
					var N = M ? M.success : false;
					if (N) {
						for (var I in M.list) {
							if (M.list.hasOwnProperty(I)) {
								var K = M.list[I];
								if (K.name === "Mobage" || K.name === "General") {
									for (var J in K.badges) {
										O.push(K.badges[J].icon_url)
									}
								}
							}
						}
					}
				}
				F(L, O)
			})
		},
		deleteBuddy: function(I, F) {
			F = F || x.PlusRequest.noOp;
			if (!I) {
				F("No user", null);
				return null
			}
			var G = this;
			var H = new x.PlusRequest();
			H.setApiMethod("users/" + G.recordID + "/buddies/" + I.recordID);
			H.setHttpMethod("DELETE");
			H.send(function(J, K) {
				if (!J) {
					I.isMutualFriend = false;
					G.emit({
						buddies: 1
					})
				}
				F(J, K)
			});
			return H
		},
		getUserDetails: function(F) {
			F = F || x.PlusRequest.noOp;
			var H = this;
			var G = s.Session.getCurrentSession().dataCache().getObjectWithRecordID(h.classname, H.recordID);
			if (G !== null && G.sparse === false) {
				F(undefined, G);
				return null
			}
			var I = new x.PlusRequest();
			I.setApiMethod("users/" + H.recordID);
			I.setHttpMethod("GET");
			I.setEntityTag(this.entityTag);
			I.send(function(L, M, J, N) {
				var K = null;
				if (!L) {
					if (J == 304) {
						K = h.getUserWithRecordID(H.recordID)
					} else {
						K = h.getUserWithData(M);
						K._loadData(M)
					}
					if (F) {
						F(null, K)
					}
				}
			});
			return I
		},
		getUnreadWallPostCount: function(F) {
			F = F || x.PlusRequest.noOp;
			if (this != s.Session.getCurrentSession().user()) {
				F("Cannot get unread wall post count for non-logged-in users", false);
				return null
			}
			var G = this;
			var H = new x.PlusRequest();
			H.setApiMethod("users/unread_wall_count");
			H.setHttpMethod("GET");
			H.send(function(I, J) {
				if (I) {
					F(I, null);
					return
				} else {
					if (J && J.success === true) {
						NgLogD("Got data: " + JSON.stringify(J));
						G.unreadWallPostCount = J.count;
						F(null, G.unreadWallPostCount)
					} else {
						F("Error connecting to server", null)
					}
				}
			});
			return H
		},
		clearUnreadWallPostCount: function(F) {
			F = F || x.PlusRequest.noOp;
			if (this != s.Session.getCurrentSession().user()) {
				F("Cannot clear unread wall post count for non-logged-in users", false);
				return null
			}
			var G = this;
			var H = new x.PlusRequest();
			H.setApiMethod("users/clear_unread_wall_count");
			H.setHttpMethod("PUT");
			H.send(function(I, J) {
				if (I) {
					F(I, false);
					return
				} else {
					if (J && J.success === true) {
						G.unreadWallPostCount = 0;
						F(null, true)
					} else {
						F("Error connecting to server", false)
					}
				}
			});
			return H
		},
		inviteToCurrentGame: function(F) {
			F = F || x.PlusRequest.noOp;
			var G = new x.PlusRequest();
			G.setHttpMethod("POST");
			G.setApiMethod("invitations");
			G.setPostBody({
				recipient_id: this.recordID
			});
			G.send(F)
		},
		getInvitesList: function() {
			if (!this._followersList) {
				this._followersList = new v(h, this.recordID, "followers")
			}
			return this._followersList
		},
		getFriendsList: function() {
			if (!this._buddiesList) {
				this._buddiesList = new v(h, this.recordID, "buddies")
			}
			return this._buddiesList
		},
		getMutualFriendsList: function() {
			if (!this._mutualFriendsList) {
				this._mutualFriendsList = new v(h, this.recordID, "mutual")
			}
			return this._mutualFriendsList
		},
		getFriendsListForGame: function(F) {
			return new v(h, this.recordID, "mutual", F)
		},
		getBlockedUserList: function() {
			if (!this._enemiesList) {
				this._enemiesList = new v(h, this.recordID, "enemies")
			}
			return this._enemiesList
		},
		getFollowersList: function() {
			if (!this._friendsList) {
				this._friendsList = new v(h, this.recordID, "friends")
			}
			return this._friendsList
		},
		getFeaturedUsersList: function() {
			if (!this._featuredUsersList) {
				this._featuredUsersList = new c(h, this.recordID)
			}
			return this._featuredUsersList
		},
		getOwnedGamesList: function() {
			if (!this._ownedGamesList) {
				this._ownedGamesList = new C(l.Game, this.recordID)
			}
			return this._ownedGamesList
		},
		getGameFriendsList: function(G, H) {
			if (!this._gameFriendsLists) {
				this._gameFriendsLists = {}
			}
			if (!G) {
				G = "friends"
			}
			var F = (H || "___unnamedGroup") + "-" + G;
			if (!this._gameFriendsLists[F]) {
				this._gameFriendsLists[F] = new A(h, this.recordID, G, H)
			}
			return this._gameFriendsLists[F]
		},
		addGameFriend: function(J, K, G) {
			G = G || x.PlusRequest.noOp;
			if (!J) {
				G("No user", null);
				return null
			}
			var F = {
				gamertag: J.gamertag
			};
			if (K) {
				F.group = K
			}
			var H = this;
			var I = new x.PlusRequest();
			I.setApiMethod("users/" + H.recordID + "/friends");
			I.setHttpMethod("POST");
			I.setPostBody(F);
			I.send(function(L, M) {
				if (!L) {
					H.emit({
						buddies: 1
					})
				}
				G(L, M)
			});
			return I
		},
		removeGameFriend: function(I, F) {
			F = F || x.PlusRequest.noOp;
			if (!I) {
				F("No user", null);
				return null
			}
			var G = this;
			var H = new x.PlusRequest();
			H.setApiMethod("users/" + G.recordID + "/friends/" + I.gamertag);
			H.setHttpMethod("DELETE");
			H.send(function(J, K) {
				if (!J) {
					G.emit({
						buddies: 1
					})
				}
				F(J, K)
			});
			return H
		},
		report: function(I, F, J) {
			F = F || x.PlusRequest.noOp;
			if (!I || I.length === 0) {
				F("No reason to report this user", null);
				return null
			}
			var G = this;
			var H = new x.PlusRequest();
			H.setApiMethod("users/" + G.recordID + "/flags");
			H.setHttpMethod("POST");
			if (J) {
				J.reason = I;
				H.setPostBody(J)
			} else {
				H.setPostBody({
					reason: I
				})
			}
			H.send(function(K, L) {
				p("Reporting user: " + JSON.stringify(K) + " " + JSON.stringify(L));
				F(K, (L && L.success === true))
			});
			return H
		},
		sendNotificationToUser: function(J, F, I, G) {
			var H = new x.PlusRequest();
			H.setApiMethod("notifications");
			H.setHttpMethod("POST");
			H.setPostBody({
				user_id: this.recordID,
				payload: {
					alert: J,
					badge: F,
					sound: I,
					extra_data: G
				}
			});
			H.send(function(L, M, K, N) {
				if (L || typeof M === "undefined") {
					if (!L || L === "") {
						L = "<No error information! :( >"
					}
					o("GameService: sendPushNotificationToUser: Error sending push request:" + JSON.stringify(L))
				} else {
					if (M.success === false) {
						o("GameService: sendPushNotificationToUser: Failed sending push request:" + JSON.stringify(M))
					} else {
						p("GameService: sendPushNotificationToUser: Success.")
					}
				}
			});
			return H
		},
		setEmailAddress: function(G, F) {
			if (!h.emailAddressLooksValid(G)) {
				F(d("Please enter a valid email address"), null);
				return null
			}
			return this._updateValues({
				email: G
			}, F, {
				emailAddress: G,
				emailHash: h.hashForEmail(G)
			}, "GameService: setEmailAddress: Error setting email address:")
		},
		setOnlyShowFriendNotifications: function(G, F) {
			return this._updateValues({
				friend_only_notification: G
			}, F, {
				onlyShowFriendNotifications: G
			}, "GameService: setOnlyShowFriendNotifications: Error setting notifications as friends only:")
		},
		setOptsIn: function(G, F) {
			return this._updateValues({
				opt_in: G
			}, F, {
				optsIn: G
			}, "GameService: setOpsIn: Error setting opts in:")
		},
		setAvatarImage: function(G, F) {
			return this._updateValues({
				badge_id: G
			}, function(I, J) {
				if (!I && this.photoId) {
					F = F || x.PlusRequest.noOp;
					var H = new x.PlusRequest();
					H.setHttpMethod("DELETE");
					H.setApiMethod("users/" + this.recordID + "/photo");
					H.setPostBody({});
					H.send(this.bind(function(M, K, N, L) {
						if (!M) {
							this.photoId = null
						}
						F(M, K)
					}))
				} else {
					F(I, J)
				}
			}.bind(this), {
				avatarId: G
			}, "GameService: setAvatarImage: Error setting avatarImage:")
		},
		setMotto: function(G, F) {
			return this._updateValues({
				motto: G
			}, F, {
				motto: G
			}, "GameService: setMotto: Error setting motto:")
		},
		setFirstName: function(G, F) {
			return this._updateValues({
				first_name: G
			}, F, {
				firstName: G
			}, "GameService: setFirstName: Error setting first name:")
		},
		setLastName: function(G, F) {
			return this._updateValues({
				last_name: G
			}, F, {
				lastName: G
			}, "GameService: setLastName: Error setting last name:")
		},
		setPassword: function(H, G, F) {
			return this._updateValues({
				password: H,
				password_confirmation: G
			}, F, {
				password: H
			}, "GameService: setPassword: Error setting password:")
		},
		updatePassword: function(I, H, G, F) {
			return this._updateValues({
				current_password: I,
				password: H,
				password_confirmation: G
			}, F, {
				password: H
			}, "GameService: setPassword: Error setting password:")
		},
		setBlocked: function(H, F) {
			F = F || x.PlusRequest.noOp;
			var G = this;
			if (!G) {
				F("No user", null);
				return null
			}
			var I = new x.PlusRequest();
			I.setApiMethod("users/" + s.Session.getCurrentSession().user().recordID + "/buddies");
			I.setHttpMethod("POST");
			I.setPostBody({
				id: G.recordID,
				enemy: (H ? "true" : "false")
			});
			I.send(function(K, L) {
				if (L && L.buddy) {
					var J = h.getUserWithData(L.buddy);
					F(K, J)
				} else {
					F(K, null)
				}
			});
			return I
		},
		getOriginOfRegistration: function(F) {
			F = F || x.PlusRequest.noOp;
			var H = this;
			var G = null;
			var I = null;
			if (H) {
				if (H.isGameHubUser) {
					G = "SamsungGameHub"
				} else {
					if (H.isMobageUser) {
						G = "MobageFromAndroidMarket"
					} else {
						G = "UNKNOWN"
					}
				}
			} else {
				I = "No user"
			}
			F(I, G)
		},
		_updateValues: function(H, F, J, G) {
			F = F || x.PlusRequest.noOp;
			var I = new x.PlusRequest();
			I.setHttpMethod("PUT");
			I.setApiMethod("users/" + this.recordID);
			I.setPostBody(H);
			I.send(this.bind(function(L, M) {
				p("err = " + JSON.stringify(L));
				p("data = " + JSON.stringify(M));
				if (h._callBackIsOK(L, M, G)) {
					if (J) {
						var K;
						for (K in J) {
							if (K != "password") {
								this[K] = J[K]
							}
						}
					}
				}
				F(L, M)
			}));
			return I
		},
		getDefinedIcon: function() {
			return this.photoId || this.avatarId || j.image("no-user-icon.png")
		},
		setPhoto: function(H, F) {
			F = F || x.PlusRequest.noOp;
			var G = new x.PlusRequest();
			G.setHttpMethod("POST");
			G.setApiMethod("users/" + this.recordID + "/photo");
			G.setPostBody({});
			G.addAttachmentWithNameAndFilenameOfType(null, "photo", H, null);
			G.send(this.bind(function(J, K, L, I) {
				if (!J) {
					if (K.photo_url === "") {
						J = "Did not upload photo"
					}
					if (h._callBackIsOK(J, K, "Failed photo upload")) {
						this.photoId = K.photo_url
					}
				}
				F(J, K)
			}));
			return G
		}
	});
	n.DataModel.defineSetterCallbacks(h, ["gamertag", "avatarId", "motto", "relation", "sparse", "photoId", "emailAddress", "emailHash", "phoneNumber", "password", "firstName", "lastName", "hideFullName", "ageRestricted", "isNewRelationship", "isMutualFriend", "showsPresence", "onlyShowFriendNotifications", "capabilities", "gamerscore", "gamerLevel", "gamerLevelName", "gamerLevelScore", "gamerNextLevelScore", "games", "isMobageUser", "isGameHubUser", "optsIn", "motto", "firstName", "lastName", "password", "unreadWallPostCount"]);
	h.getUserWithID = function(I, F) {
		F = F || x.PlusRequest.noOp;
		if (!I) {
			F("No user ID", null);
			return null
		}
		var H = s.Session.getCurrentSession().dataCache();
		var G = H.getObjectWithRecordID(h.classname, I);
		if (G) {
			F(null, G);
			return null
		}
		var J = new x.PlusRequest();
		J.setApiMethod("users/" + I);
		J.setHttpMethod("GET");
		J.send(function(L, M, N, K) {
			if (!L && M) {
				G = h.getUserWithData(M);
				F(null, G)
			} else {
				F(L, M)
			}
		});
		return J
	};
	h.getUserWithGamertag = h.getUserWithID;
	h._loopUsersDetails = function(H, I, N, L, J, G, K) {
		if (G.length <= 0) {
			H(I, K, N, L, J);
			return
		}
		var M = G.pop();
		if (M.sparse) {
			var F = function(O, P) {
				if (!O) {
					K.unshift(P);
					h._loopUsersDetails(H, I, N, L, J, G, K)
				} else {
					K.unshift(M);
					h._loopUsersDetails(H, O, N, L, J, G, K)
				}
			};
			M.getUserDetails(F)
		} else {
			K.unshift(M);
			h._loopUsersDetails(H, I, N, L, J, G, K)
		}
	};
	h.findUsersWithEmailHashes = function(M, G) {
		G = G || x.PlusRequest.noOp;
		var H = [];
		M = M || [];
		while (M.length > 0) {
			if (M.length > 100) {
				H.push(M.splice(0, 100))
			} else {
				H.push(M.splice(0, M.length))
			}
		}
		var F = 0;
		var I = [];
		var N = function(P, Q) {
			F--;
			for (var O = 0; O < Q.length; O++) {
				I[Q.offset + O] = Q[O]
			}
			if (F === 0) {
				G(P, I)
			}
		};
		for (var L = 0; L < H.length; L++) {
			var J = H[L];
			var K = J.join(",");
			F++;
			h.findUsersWithEmail(K, N)
		}
	};
	h.findUsersWithEmail = function(G, F) {
		F = F || x.PlusRequest.noOp;
		if (!G) {
			F("No email", null);
			return null
		}
		var H = new x.PlusRequest();
		H.setHttpMethod("GET");
		H.setApiMethod("users/search");
		H.setPostBody({
			email_hash: h.emailAddressLooksValid(G) ? h.hashForEmail(G) : G
		});
		H.send(function(M, N) {
			if (!(N && !M && N.success === true)) {
				N = {
					profiles: [],
					total: 0,
					offset: 0
				}
			}
			var J = N.list;
			var O = [];
			for (var I in J) {
				var L = J[I];
				var K = h.getUserWithData(L);
				O.push(K)
			}
			O.offset = N.offset;
			O.total = N.total;
			F(M, O)
		});
		return H
	};
	h.findUsersWithFuzzySearch = function(G, F) {
		F = F || x.PlusRequest.noOp;
		if (!G) {
			F("No search string", null);
			return null
		}
		var H = new x.PlusRequest();
		H.setHttpMethod("GET");
		H.setApiMethod("users/search");
		if (h.emailAddressLooksValid(G)) {
			H.setPostBody({
				email_hash: h.hashForEmail(G)
			})
		} else {
			H.setPostBody({
				combined: G
			})
		}
		H.send(function(M, O) {
			var N = M;
			if ((!M) && O && (!O.success)) {
				N = O.error_msg
			}
			if (!(O && !N && O.success === true)) {
				O = {
					profiles: [],
					total: 0,
					offset: 0
				}
			}
			var J = O.list;
			var P = [];
			for (var I in J) {
				var L = J[I];
				var K = h.getUserWithData(L);
				P.push(K)
			}
			P.offset = O.offset;
			P.total = O.total;
			F(N, P)
		});
		return H
	};
	h.findUsersFromContactList = function(N, G) {
		G = G || x.PlusRequest.noOp;
		if (!N) {
			G("No contacts", null, null);
			return
		}
		var O = [];
		var F = {};
		for (var M in N) {
			var K = N[M];
			var J = K.lowercaseEmails || [];
			for (var H = 0; H < J.length; H++) {
				var L = J[H];
				var I = h.hashForEmail(L);
				if (!F[I]) {
					F[I] = [];
					O.push(I)
				}
				F[I].push(K)
			}
		}
		h.findUsersWithEmailHashes(O, function(S, W) {
			for (var P = 0; P < W.length; P++) {
				var Q = W[P];
				var T = Q.emailHash;
				var U = F[T];
				for (var V = 0; V < U.length; V++) {
					var R = U[V];
					Q.displayName = R.displayName;
					N.splice(N.indexOf(R), 1)
				}
			}
			G(S, N, W)
		})
	};
	h.emailAddressLooksValid = function(F) {
		return ((F || "").toUpperCase().match(/\b[A-Z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/) !== null)
	};
	h.hashForEmail = function(F) {
		if (!F) {
			return null
		}
		return t.hex_sha1(F)
	};
	h.sendFriendInviteToEmail = function(G, F) {
		F = F || x.PlusRequest.noOp;
		if (!G) {
			F("No email", null);
			return null
		}
		var H = new x.PlusRequest();
		H.setHttpMethod("POST");
		H.setApiMethod("invitations");
		H.setPostBody({
			email: G
		});
		H.send(F);
		return H
	};
	h._callBackIsOK = function(G, H, F) {
		if ((G && G.length > 0) || typeof H === "undefined") {
			if (F) {
				p(F + "'" + JSON.stringify(G) + "'");
				p("In error, data is :" + JSON.stringify(H))
			}
			return false
		}
		if (H.success === false) {
			if (F) {
				o(F, JSON.stringify(H.error))
			}
			return false
		}
		return true
	};
	h.GamertagKey = "gamertag";
	h.AvatarKey = "badge_id";
	h.MottoKey = "motto";
	h.RelationKey = "relation";
	h.FirstNameKey = "first_name";
	h.LastNameKey = "last_name";
	h.BirthdateKey = "birth_date";
	h.GenderKey = "gender";
	h.PrivacyKey = "fullname_privacy";
	h.PhotoKey = "photo_url";
	h.EmailAddressKey = "email";
	h.EmailHashKey = "email_hash";
	h.PhoneNumberKey = "phone_number";
	h.AgeRangeKey = "age_restricted";
	h.SpamKey = "opt_in";
	h.IsMobageUser = "mobage_user";
	h.IsGameHubUser = "gamehub_user";
	h.PasswordKey = "password";
	h.PasswordConfirmKey = "password_confirmation";
	h.GamesKey = "games";
	h.CapabilitiesKey = "capabilities";
	h.NewBuddyKey = "new_buddy";
	h.IsMutualFriendKey = "mutual_friends";
	h.HidePresenceKey = "hide_presence";
	h.OnlyShowFriendNotificationsKey = "friend_only_notification";
	h.GamerScoreKey = "gamerscore";
	h.LevelNumberKey = "level_position";
	h.LevelNameKey = "level_name";
	h.CurrentLevelScoreKey = "level_points";
	h.NextLevelScoreKey = "level_next_points";
	h.UnreadWallPostCountKey = "unread_wall_count";
	h.NonSparseKeys = [h.PhotoKey, h.EmailAddressKey, h.EmailHashKey, h.PhoneNumberKey, h.PasswordKey, h.FirstNameKey, h.LastNameKey, h.PrivacyKey, h.NewBuddyKey, h.CapabilitiesKey, h.HidePresenceKey, h.OnlyShowFriendNotificationsKey, h.GamerScoreKey, h.LevelNumberKey, h.LevelNameKey, h.CurrentLevelScoreKey, h.NextLevelScoreKey, h.GamesKey];
	h.ContextSensitiveKeys = [h.IsMutualFriendKey];
	h.currentUser = function() {
		return s.Session.getCurrentSession().user()
	};
	h.setCurrentUser = function(F) {
		o("*** User.setCurrentUser is DEPRECATED, do not use it! ***")
	};
	h.getFeaturedUsersList = function() {
		if (!h._featuredUsersList) {
			h._featuredUsersList = new c(h)
		}
		return h._featuredUsersList
	};
	h.addCurrentUserListener = function(G, H, F) {
		s.Session.getCurrentSession.addListener(G, H, F)
	};
	h.removeCurrentUserListener = function(F) {
		s.Session.getCurrentSession.removeListener(F)
	};
	h.getUserWithData = function(J) {
		var I = J[r];
		var H = s.Session.getCurrentSession().dataCache();
		var G = H.getObjectWithRecordID(h.classname, I);
		if (G !== null) {
			G._loadData(J);
			return G
		}
		var F = new h(I, J);
		G = H.addObject(F);
		return G
	};
	h.purgeContextSensitiveKeysFromDictionary = function(G) {
		if (!G || !(G instanceof Object)) {
			return
		}
		for (var F in h.ContextSensitiveKeys) {
			if (h.ContextSensitiveKeys.hasOwnProperty(F)) {
				delete G[h.ContextSensitiveKeys[F]]
			}
		}
	};
	D.User = h;
	return D
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game"] = f;
	var h = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Device").Device;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		DataModel: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel").DataModel
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		PlusRequest: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest
		},
		AllGamesList: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AllGamesList").AllGamesList
		},
		FeaturedGamesList: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/FeaturedGamesList").FeaturedGamesList
		},
		_LocalGameList: function() {
			return require("NGCore/Client/Core/_LocalGameList")._LocalGameList
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		AppConfig: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig
		},
		GameLaunchingProgress: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchingProgress").GameLaunchingProgress
		},
		GameLaunchedEmitter: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter
		},
		AlertDialog: function() {
			return require("NGCore/Client/UI/AlertDialog").AlertDialog
		},
		LifecycleManagedTimeout: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/LifecycleManagedTimeout").LifecycleManagedTimeout
		},
		UIUtils: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/UIUtils").UIUtils
		}
	});
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = 50 * 1024 * 1024;
	var e = f.Game = a.DataModel.subclass({
		classname: "Game",
		etagsToGames: {},
		initialize: function($super, l) {
			$super(l);
			this._availableLocally = undefined;
			this._downloading = false;
			this._downloadProgress = 0;
			this._downloadListeners = [];
			this._queryingUpdate = false;
			this._updateInfoReceived = false;
			this._updateAvailable = false;
			this._downloadSize = -1;
			this._updateListeners = [];
			this._marketAppDownloadListeners = [];
			this._marketAppDownloadWatchId = null;
			this._marketAppDownloadWatchTime = 1000
		},
		loadData: function(l, m) {
			this.beginChanges();
			l = l || {};
			m = m || {};
			this.name = l.name || this.name;
			this.publisher = l.publisher || this.publisher;
			this.category = l.category || this.category;
			this.featured = l.featured || this.featured;
			this.numberOfLeaderboards = l.leaderboards_count || this.numberOfLeaderboards || 0;
			this.numberOfAchievements = l.achievements_count || this.numberOfAchievements || 0;
			this.productID = l.id || this.productID;
			this.masterProductID = l.master_product_id || this.masterProductID;
			this.iconURL = l.icon_url || this.iconURL;
			this.appStoreURL = l.app_store_url || this.appStoreURL;
			this.feedURL = l.feed_url || this.feedURL;
			this.catalogURL = l.catalog_url || this.catalogURL;
			this.description = l.description || this.description;
			this.phone_screenshot_urls = l.phone_screenshot_urls || this.phone_screenshot_urls;
			this.phone_thumbnail_urls = l.phone_thumbnail_urls || this.phone_thumbnail_urls;
			this.ngcore_url = l.ngcore_url || this.ngcore_url;
			this.promotionalImage = l.promotion_image_url || this.promotionalImage;
			this.endChanges()
		},
		getGameData: function(l) {
			var m = new a.PlusRequest();
			m.setApiMethod("games/" + this.recordID);
			m.setHttpMethod("GET");
			m.setEntityTag(this.entityTag);
			m.send(e._responderWithCallback(l))
		},
		getGameURL: function() {
			var p = h.Capabilities.getStartingServer();
			if (!p || p === "") {
				p = h.Capabilities._getBootServer()
			}
			var o;
			var n;
			if (a.Session._isLocalDevelopmentMode() && a.Session.getGamesFromLocal() && (this.ngcore_url)) {
				var r = this.ngcore_url;
				var l = this.ngcore_url.lastIndexOf("/sandbox/latest");
				if (l > 0) {
					r = this.ngcore_url.substring(0, l)
				}
				var m = r.lastIndexOf("/");
				var q = r.substring(m + 1);
				if (q == "mobageTest1-Dev") {
					o = "Tests/Social/MobageTestGame/Instance1"
				} else {
					if (q == "mobageTest2-Dev") {
						o = "Tests/Social/MobageTestGame/Instance2"
					} else {
						o = "Tests/Social/" + q
					}
				}
				n = p + "/" + o;
				NgLogD("mobage/Game: overriding url in development mode: " + this.ngcore_url + " to " + n);
				return n
			}
			NgLogD("mobage/Game: ngcore url for game: " + this.ngcore_url);
			return this.ngcore_url
		},
		isAvailableLocally: function() {
			if (this._availableLocally !== undefined) {
				return this._availableLocally
			}
			var n = this.getGameURL();
			var q = require("NGCore/Client/Network/Util").Util;
			var m = q.GetMD5HashDirectoryFromUrl(n);
			var o = a._LocalGameList.getGameList();
			for (var p in o) {
				var l = o[p];
				if (m == l.name) {
					return true
				}
			}
			return false
		},
		queryUpdateInfo: function() {
			if (!this._queryingUpdate) {
				a._LocalGameList.updateAvailable(this.getGameURL(), function(n, m) {
					this._updateAvailable = n;
					this._downloadSize = m;
					this._updateInfoReceived = true;
					this._queryingUpdate = false;
					for (var l = 0; l < this._updateListeners.length; l++) {
						this._updateListeners[l].updateInfoReceived(this)
					}
				}.bind(this), function(l) {
					this._queryingUpdate = false;
					for (var m = 0; m < this._updateListeners.length; m++) {
						this._updateListeners[m].updateInfoError(this, l)
					}
				}.bind(this));
				this._queryingUpdate = true
			}
		},
		isQueryingUpdate: function() {
			return this._queryingUpdate
		},
		hasUpdateInfo: function() {
			return this._updateInfoReceived
		},
		isUpdateAvailable: function() {
			if (!this._updateInfoReceived) {
				throw new Error("Update information not available yet.")
			}
			return this._updateAvailable
		},
		getDownloadSize: function() {
			if (!this._updateInfoReceived) {
				throw new Error("Download information not available yet.")
			}
			return this._downloadSize
		},
		addUpdateListener: function(l) {
			if (!(l.updateInfoReceived instanceof Function)) {
				throw new Error("updateInfoReceived() member expected.")
			}
			if (!(l.updateInfoError instanceof Function)) {
				throw new Error("updateInfoError() member expected.")
			}
			this._updateListeners.push(l)
		},
		removeUpdateListener: function(m) {
			for (var l = 0; l < this._updateListeners.length; l++) {
				if (this._updateListeners[l] == m) {
					this._updateListeners.splice(l, 1);
					return
				}
			}
			throw new Error("Update listener not found.")
		},
		_androidMarketPackageName: function() {
			var l = ["com", "mobage", "ww", "a" + this.productID, this.recordID.replace("-", "_")].join(".");
			NgLogD("Package name for " + this.recordID + ": " + l);
			return l
		},
		androidMarketCanPlay: function(l, m) {
			if (typeof this._androidMarketCouldPlay == "undefined" || m) {
				this._internalAndroidMarketCanPlay(l)
			} else {
				l(this._androidMarketCouldPlay)
			}
		},
		_internalAndroidMarketCanPlay: function(l) {
			if (a.AppConfig.canDownloadGamesDirectly()) {
				this._androidMarketCouldPlay = true;
				l(true);
				return
			}
			var n = this._androidMarketCanLaunchURL();
			var m = this;
			b.IPCEmitter.canLaunch(n, function(o) {
				NgLogD("Can we launch market URL: " + n + "? " + o);
				m._androidMarketCouldPlay = o;
				l(o)
			})
		},
		_androidMarketCanLaunchURL: function() {
			var l = "x-mobage-game://" + this._androidMarketPackageName() + "/launch";
			return l
		},
		_androidMarketIntentURL: function() {
			return "market://details?id=" + this._androidMarketPackageName()
		},
		_androidMarketURL: function() {
			return "http://market.android.com/details?id=" + this._androidMarketPackageName()
		},
		isWatchingForMarketAppDownlaod: function() {
			return this._marketAppDownloadWatchId !== null
		},
		addMarketAppDownloadWatcher: function(l) {
			if (this._marketAppDownloadListeners.indexOf(l) != -1) {
				return
			}
			if (!(l.onMarketAppDownloaded instanceof Function)) {
				throw new Error("onMarketAppDownloaded() member expected.")
			}
			if (!(l.beganWatchingMarketAppDownload instanceof Function)) {
				throw new Error("beganWatchingMarketAppDownload() member expected.")
			}
			this._marketAppDownloadListeners.push(l)
		},
		removeMarketAppDownloadWatcher: function(m) {
			var l = this._marketAppDownloadListeners.indexOf(m);
			if (l != -1) {
				this._marketAppDownloadListeners.splice(l, 1);
				if (this._marketAppDownloadListeners.length === 0) {
					this._marketAppDownloadWatchTime = 1000;
					if (this._marketAppDownloadWatchId) {
						clearTimeout(this._marketAppDownloadWatchId);
						this._marketAppDownloadWatchId = null
					}
				}
			}
		},
		startWatchingForMarketAppDownload: function() {
			if (this._marketAppDownloadWatchId === null) {
				for (var l = 0; l < this._marketAppDownloadListeners.length; l++) {
					this._marketAppDownloadListeners[l].beganWatchingMarketAppDownload(this)
				}
				this._marketAppDownloadWatchId = setTimeout(this._checkForMarketAppDownload.bind(this), this._marketAppDownloadWatchTime)
			}
		},
		_checkForMarketAppDownload: function() {
			NgLogD("_checkForMarketAppDownload - checking for game " + this.recordID);
			this._internalAndroidMarketCanPlay(this.bind(function(m) {
				if (m) {
					this._marketAppDownloadWatchTime = 1000;
					this._marketAppDownloadWatchId = null;
					for (var l = 0; l < this._marketAppDownloadListeners.length; l++) {
						this._marketAppDownloadListeners[l].onMarketAppDownloaded(this)
					}
				} else {
					if (this._marketAppDownloadWatchTime < 10000) {
						this._marketAppDownloadWatchTime += 1000
					}
					this._marketAppDownloadWatchId = setTimeout(this._checkForMarketAppDownload.bind(this), this._marketAppDownloadWatchTime)
				}
			}))
		},
		checkUpdateAndStartGame: function() {
			if (e._currentlyLaunchingGame !== null) {
				NgLogD("Game.checkUpdateAndStartGame - A game is already being started.");
				return
			}
			if (this._switchToGameIfRunning()) {
				return
			}
			if (!e._gameLaunchedListener) {
				e._gameLaunchedListener = new h.MessageListener();
				a.GameLaunchedEmitter.addListener(e._gameLaunchedListener, function() {
					if (e._currentlyLaunchingGame !== null) {
						a.GameLaunchingProgress.hideDialog(e._currentlyLaunchingGame);
						e._currentlyLaunchingGame = null
					}
				})
			}
			a.GameLaunchingProgress.showDialog(this, this.name);
			e._currentlyLaunchingGame = this;
			if (h.Capabilities.getIsDisaggregated()) {
				this._start();
				return
			}
			try {
				throw new Error("DEPRECATED CODE PATH HIT PLEASE ADVISE IF YOU SEE THIS! Error, EXCEPTION!")
			} catch (l) {
				NgLogException(l)
			}
			this.addUpdateListener({
				updateInfoReceived: function(m) {
					NgLogD("game.checkUpdateAndStartGame - done checking for updates. is an update availabe? " + m.isUpdateAvailable());
					m.removeUpdateListener(this);
					if (e._currentlyLaunchingGame.recordID == m.recordID) {
						e._currentlyLaunchingGame = null;
						a.GameLaunchingProgress.hideDialog(m)
					}
					if (m.isUpdateAvailable()) {
						m.download()
					} else {
						m._start()
					}
				},
				updateInfoError: function(m, n) {
					NgLogD("game.checkUpdateAndStartGame - got error checking for update: " + n);
					m.removeUpdateListener(this);
					if (e._currentlyLaunchingGame.recordID == m.recordID) {
						e._currentlyLaunchingGame = null;
						a.GameLaunchingProgress.hideDialog(m)
					}
					var o = new a.AlertDialog();
					o.setTitle(j("Update Unsuccessful"));
					o.setText(j("There was an error checking for updates. Please try again."));
					o.setChoices([j("Ok")]);
					o.onchoice = function(p) {
						o.hide()
					};
					o.show()
				}
			});
			this.queryUpdateInfo()
		},
		_switchToGameIfRunning: function() {
			var l = a.Session.getCurrentSession();
			var m = l ? l.appKey() : null;
			if (m && m == this.recordID) {
				c.GamePlaceholder.switchToRunningGame();
				if (e._currentlyLaunchingGame && e._currentlyLaunchingGame.recordID == this.recordID) {
					e._currentlyLaunchingGame = null;
					a.GameLaunchingProgress.hideDialog(this)
				}
				return true
			}
			return false
		},
		_start: function() {
			if (this._switchToGameIfRunning()) {
				return
			}
			var m = this;
			if (a.AppConfig.canDownloadGamesDirectly()) {
				NgLogD("Game._start - Download directly!");
				m._actuallyStart()
			} else {
				NgLogD("Game._start - Cannot download directly");
				m._waitingForMarketAppBounce = true;
				NgLogD("Game._start - Launching other game.");
				h.Analytics.reportGameEvent("JSGameIntentLaunchSent", this.recordID);
				this.gameLaunchingDialogTimeout = new a.LifecycleManagedTimeout(function() {
					if (e._currentlyLaunchingGame && e._currentlyLaunchingGame.recordID == m.recordID) {
						NgLogD("Game._start - Game failed to launch when we sent intent to launch, giving up!");
						h.Analytics.reportError("JSGameIntentLaunchFailed", "error=launch via intent failed, game=" + m.recordID);
						e._currentlyLaunchingGame = null;
						a.GameLaunchingProgress.hideDialog(m);
						a.UIUtils.showToast(j("Couldn't find %1s", m.name))
					}
				}, 10 * 1000);
				var n = new h.MessageListener();
				var l = function(o) {
					if (o === b.LifecycleEmitter.Event.Suspend) {
						if (e._currentlyLaunchingGame && e._currentlyLaunchingGame.recordID == m.recordID) {
							e._currentlyLaunchingGame = null;
							a.GameLaunchingProgress.hideDialog(m)
						}
					}
					b.LifecycleEmitter.removeListener(n);
					return true
				};
				b.LifecycleEmitter.addListener(n, l.bind(this));
				b.IPCEmitter.launchIntent("com.mobage.ww.PLAY", {}, m._androidMarketPackageName())
			}
		},
		_actuallyStart: function() {
			c.GamePlaceholder.launchGameAndSwitch(this);
			if (e._currentlyLaunchingGame && e._currentlyLaunchingGame.recordID == this.recordID) {
				e._currentlyLaunchingGame = null;
				a.GameLaunchingProgress.hideDialog(this)
			}
		},
		download: function(n) {
			if (this._downloading) {
				NgLogD("Game.download - Game is already downloading");
				return
			}
			if (e.getDownloadCount() > 0) {
				h.Analytics.reportError("JSGameDownloadError, error=other download is in progress, game=" + this.recordID);
				if (!n) {
					var m = new a.AlertDialog();
					m.setTitle(j("Oops"));
					m.setText(j("Please wait for the current download to finish."));
					m.setChoices([j("OK")]);
					m.show()
				}
				NgLogD("Game.download - Game download already in progress");
				return
			}
			NgLogD("Game.download - Downloading game " + this.recordID);
			h.Analytics.reportGameEvent("JSGameDownloadStart", this.recordID);
			this._downloading = true;
			e._downloadCount++;
			if (!this.hasUpdateInfo()) {
				this.addUpdateListener({
					updateInfoReceived: function(o) {
						o.removeUpdateListener(this);
						o._downloadContinue(n)
					},
					updateInfoError: function(o, p) {
						o.removeUpdateListener(this);
						o._onDownloadError(p)
					}
				});
				this.queryUpdateInfo()
			} else {
				this._downloadContinue(n)
			}
			for (var l = 0; l < this._downloadListeners.length; l++) {
				this._downloadListeners[l].downloadStarted(this)
			}
			e._globalDownloadEmitter.emit({
				game: this,
				downloading: true
			})
		},
		_downloadContinue: function(n) {
			if (!n) {
				g.attach(this)
			}
			if (b.NetworkEmitter.getLastStatus() !== b.NetworkEmitter.Status.Wifi && this.getDownloadSize() > d) {
				this._onDownloadError(new k(this.getDownloadSize(), d));
				return
			}
			var m = this;
			var l = this.getGameURL();
			e._progressListeners[l] = this;
			a._LocalGameList.listenToProgress(e._progressListener);
			a._LocalGameList.updateGame(l, -1, function(p, o) {
				delete e._progressListeners[l];
				if (o) {
					m._onDownloadError(o)
				} else {
					m._onDownloadComplete(p)
				}
			})
		},
		cancelDownload: function(l) {
			if (this._downloading) {
				a._LocalGameList.cancelUpdate(this.getGameURL());
				NgLogD("Game.cancelDownload - Cancelling download");
				if (typeof l == "undefined") {
					l = "Download cancelled"
				}
				this._onDownloadError(l)
			} else {
				NgLogD("Game.cancelDownload - Warning, called even though game is not downloading!")
			}
		},
		openMarket: function() {
			var l = h.Capabilities.getPlatformOS().toLowerCase();
			if (l == "iphone os") {
				if (this.appstoreURL) {
					b.IPCEmitter.launch(this.appStoreURL)
				}
			} else {
				if (l == "android") {
					b.IPCEmitter.launchIntent(this._androidMarketIntentURL())
				}
			}
		},
		isDownloading: function() {
			return this._downloading
		},
		getDownloadProgress: function() {
			if (!this._downloading) {
				throw new Error("Game is not downloading.")
			}
			return this._downloadProgress
		},
		_onDownloadProgress: function(o, n, l) {
			if (l) {
				return
			}
			this._downloadProgress = o / n;
			for (var m = 0; m < this._downloadListeners.length; m++) {
				this._downloadListeners[m].downloadProgress(this, this._downloadProgress, o, n)
			}
		},
		_onDownloadComplete: function(n) {
			NgLogD("Game._onDownloadComplete for game " + this.name);
			h.Analytics.reportGameEvent("JSGameDownloadComplete", this.recordID);
			this._downloading = false;
			e._downloadCount--;
			this._downloadProgress = 1;
			this._availableLocally = true;
			e._globalDownloadEmitter.emit({
				game: this,
				downloading: false,
				error: null
			});
			var m = [];
			m = m.concat(this._downloadListeners);
			for (var l = 0; l < m.length; l++) {
				m[l].downloadCompleted(this, n)
			}
		},
		_onDownloadError: function(l) {
			NgLogD("Game._onDownloadError, err = " + JSON.stringify(l) + " for game " + this.name);
			h.Analytics.reportError("JSGameDownloadError, error=" + l + ", game=" + this.recordID);
			this._downloading = false;
			e._downloadCount--;
			this._downloadProgress = 0;
			e._globalDownloadEmitter.emit({
				game: this,
				downloading: false,
				error: l
			});
			for (var m = 0; m < this._downloadListeners.length; m++) {
				this._downloadListeners[m].downloadError(this, l)
			}
		},
		addDownloadListener: function(l) {
			if (!(l.downloadStarted instanceof Function)) {
				throw new Error("downloadStarted() member expected.")
			}
			if (!(l.downloadProgress instanceof Function)) {
				throw new Error("downloadProgress() member expected.")
			}
			if (!(l.downloadCompleted instanceof Function)) {
				throw new Error("downloadCompleted() member expected.")
			}
			if (!(l.downloadError instanceof Function)) {
				throw new Error("downloadError() member expected.")
			}
			this._downloadListeners.push(l)
		},
		hasDownloadListener: function(m) {
			for (var l = 0; l < this._downloadListeners.length; l++) {
				if (this._downloadListeners[l] == m) {
					return true
				}
			}
			return false
		},
		removeDownloadListener: function(m) {
			for (var l = 0; l < this._downloadListeners.length; l++) {
				if (this._downloadListeners[l] == m) {
					this._downloadListeners.splice(l, 1);
					return
				}
			}
			throw new Error("Download listener not found.")
		},
		getDefinedIcon: function() {
			var l = this.iconURL;
			if (!l || l == "/images/app-default.png") {
				l = a.Assets.image("no-game-icon.png")
			}
			return l
		}
	});
	a.DataModel.defineSetterCallbacks(e, ["name", "publisher", "category", "featured", "numberOfLeaderboards", "numberOfAchievements", "masterProductID", "iconURL", "appStoreURL", "feedURL", "catalogURL", "description", "productID", "phone_screenshot_urls", "phone_thumbnail_urls", "promotionalImage", "ngcore_url"]);
	e.getGameWithData = function(p, l) {
		if (!p) {
			return undefined
		}
		var o = p.app_key;
		if (!o) {
			return undefined
		}
		var n = a.Session.getCurrentSession().dataCache();
		var m = n.getObjectWithRecordID(e.classname, o);
		if (m === null) {
			m = new e(o)
		}
		m.entityTag = l;
		if (m.loadData) {
			m.loadData(p)
		} else {
			NgLogD("TODO: NOTICE @SSTREZA FIGURE OUT WHY THIS IS A HACK.")
		}
		return m
	};
	e._responderWithCallback = function(l) {
		l = l || a.PlusRequest.noOp;
		return function(o, q, m, p) {
			NgLogD("Got a Game: " + o + " " + q);
			var s = null;
			var u = null;
			var r = m ? m.etag : undefined;
			if (o) {
				l(o, null)
			} else {
				if (p == 304) {
					l(null, e.etagsToGames[m.etag])
				} else {
					if (q) {
						if (!q.success) {
							if (q.error) {
								l(q.error, null)
							} else {
								l("unknown error", null)
							}
						} else {
							if (q.games) {
								var n = [];
								for (var t = 0; t < q.games.length; t++) {
									s = q.games[t];
									u = e.getGameWithData(s, r);
									if (u) {
										n.push(u)
									}
								}
								if (r) {
									e.etagsToGames[r] = n
								}
								l(null, n)
							} else {
								if (q.game) {
									s = q.game;
									u = e.getGameWithData(s, r);
									if (r) {
										e.etagsToGames[r] = u
									}
									l(null, u)
								} else {
									l("unknown error", null)
								}
							}
						}
					} else {
						l("unknown error", null)
					}
				}
			}
		}
	};
	e.getAllGamesList = function() {
		if (!this._allGamesList) {
			this._allGamesList = new a.AllGamesList(this)
		}
		return this._allGamesList
	};
	e.getFeaturedGamesList = function() {
		if (!this._featuredGamesList) {
			this._featuredGamesList = new a.FeaturedGamesList(this)
		}
		return this._featuredGamesList
	};
	e.callOnAllGamesList = function() {
		this.getAllGamesList().handleCallFromPublicAPI.apply(this.getAllGamesList(), arguments)
	};
	e.getGameWithAppKey = function(o, l) {
		l = l || a.PlusRequest.noOp;
		if (!o) {
			l("No app key", l);
			return
		}
		var n = a.Session.getCurrentSession().dataCache();
		var m = n.getObjectWithRecordID(e.classname, o);
		if (m === null) {
			m = new e(o)
		}
		m.getGameData(l)
	};
	e.getGameWithProductID = function(m, l) {
		l = l || a.PlusRequest.noOp;
		if (!m && m !== 0) {
			l("No product ID", l);
			return
		}
		var n = new a.PlusRequest();
		n.setApiMethod("games/" + m);
		n.setHttpMethod("GET");
		n.send(e._responderWithCallback(l))
	};
	e._getGameWithAndroidPackageName = function(m, l) {
		if (!m) {
			l("Invalid package name", null);
			return
		}
		var o = m.split(".");
		if (o.length == 5) {
			var p = o[3];
			var n = parseInt(p.replace("a", ""), 10);
			NgLogD("Product ID of " + n + " for package name " + m);
			e.getGameWithProductID(n, l)
		} else {
			l("Invalid package name", null)
		}
	};
	e.getCurrentGame = function(l) {
		return e.getGameWithAppKey(a.Session.getCurrentSession().appKey(), l)
	};
	e._progressListener = function(n, o, m, l) {
		if (e._progressListeners[n]) {
			e._progressListeners[n]._onDownloadProgress(o, m, l)
		}
	};
	e._progressListeners = {};
	e.getDownloadCount = function() {
		return e._downloadCount
	};
	e._downloadCount = 0;
	e._currentlyLaunchingGame = null;
	e.isGameLaunching = function() {
		return e._currentlyLaunchingGame !== null
	};
	e.isCurrentlyLaunchingGame = function(l) {
		return e._currentlyLaunchingGame.recordID === l.recordID
	};
	var k = h.Class.subclass({
		initialize: function(m, l) {
			this.message = "Download too large.";
			this.gameSize = m;
			this.maxSize = l
		},
		getGameSize: function() {
			return this.gameSize
		},
		getMaxSize: function() {
			return this.maxSize
		},
		toString: function() {
			return this.message
		}
	});
	e.GameSizeError = k;
	var g = {
		attach: function(l) {
			if (!l.hasDownloadListener(this)) {
				l.addDownloadListener(this)
			}
		},
		_cancelNoProgressCheck: function() {
			if (this._noProgressCancelTimeout) {
				clearTimeout(this._noProgressCancelTimeout);
				this._noProgressCancelTimeout = null
			}
		},
		_onLifecycleEvent: function(l) {
			if (l === b.LifecycleEmitter.Event.Suspend) {
				this._gameIsRunning = false
			} else {
				if (l === b.LifecycleEmitter.Event.Resume) {
					this._cancelNoProgressCheck();
					this._gameIsRunning = true
				}
			}
		},
		_updateProgressHangCheck: function(l) {
			if (!this._gameLifecycleEmitter) {
				this._gameLifecycleEmitter = new h.MessageListener();
				b.LifecycleEmitter.addListener(this._gameLifecycleEmitter, this._onLifecycleEvent.bind(this))
			}
			this._cancelNoProgressCheck();
			this._noProgressCancelTimeout = setTimeout(function() {
				this._noProgressCancelTimeout = null;
				l.cancelDownload("Download stalled")
			}, 30 * 1000)
		},
		downloadStarted: function(l) {},
		downloadProgress: function(l, m) {},
		downloadCompleted: function(m, n) {
			this._cancelNoProgressCheck();
			m.removeDownloadListener(this);
			var l = a.Session.getCurrentSession().user();
			if (l) {
				var o = "";
				l.sendNotificationToUser(j("%1s is ready to go. Play now!", m.name), 0, "default", o)
			}
		},
		downloadError: function(m, o) {
			this._cancelNoProgressCheck();
			m.removeDownloadListener(this);
			if (o instanceof e.GameSizeError) {
				var n = new a.AlertDialog();
				n.setTitle(j("Download Too Large"));
				n.setText(j("Sorry, this download is over %1dMB. Please connect to Wi-Fi first.", Math.floor(o.getMaxSize() / 1024 / 1024)));
				n.setChoices([j("OK")]);
				n.show()
			} else {
				if (o == "Download stalled" || (typeof o == "string" && o.search("Could not download file") === 0)) {
					var l = new a.AlertDialog();
					l.setTitle(j("Unable to Update %1s", m.name));
					l.setText(j("You might need to find a place with better signal."));
					l.setChoices([j("Ok")]);
					l.onchoice = function(q) {
						l.hide()
					};
					l.show()
				} else {
					var p = new a.AlertDialog();
					p.setTitle(j("Download Unsuccessful"));
					p.setText(j("Looks like there was a problem with the download. Please try again."));
					p.setChoices([j("Try Again"), j("Cancel")]);
					p.onchoice = function(q) {
						if (q.choice === 0) {
							m.download()
						}
						p.hide()
					};
					p.show()
				}
			}
		}
	};
	e._globalDownloadEmitter = null;
	e.addGlobalDownloadListener = function(m, n, l) {
		if (!e._globalDownloadEmitter) {
			e._globalDownloadEmitter = new h.MessageEmitter()
		}
		e._globalDownloadEmitter.addListener(m, n, l)
	};
	e.removeGlobalDownloadListener = function(l) {
		if (e._globalDownloadEmitter) {
			e._globalDownloadEmitter.removeListener(l)
		}
	};
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Leaderboard"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Leaderboard"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Leaderboard"] = d;
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var j = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel").DataModel;
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Score").Score;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game;
	var g = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/ScoresList").ScoresList;
	var h = d.Leaderboard = j.subclass({
		classname: "Leaderboard",
		initialize: function($super, k, l) {
			$super(k);
			this._loadData(l)
		},
		_loadData: function(k) {
			this.beginChanges();
			this.level = k.level || this.level || 0;
			this.title = k.title || this.title || null;
			this.iconURL = k.icon_url || this.iconURL || null;
			this.game = k.game || this.game;
			this.endChanges()
		},
		submitScoreWithPoints: function(o, l) {
			l = l || e.noOp;
			if (!o && o !== 0) {
				l("No points", null);
				return null
			}
			var k = this;
			var m = b.Session.getCurrentSession().user();
			var p = new e();
			p.setApiMethod("games/" + this.game.recordID + "/leaderboards/" + this.level + "/scores");
			p.setHttpMethod("POST");
			var n = {
				score: o
			};
			n[f.GamertagKey] = m.gamertag;
			p.setPostBody(n);
			p.send(function(q, r) {
				if (!q && r && r.success === true) {
					var s = a.getScoreWithDataAndLeaderboard(r, k);
					l(q, s)
				} else {
					l(q, null)
				}
			});
			return p
		},
		getTopScores: function(l, m, k) {
			this.getScoresWithBody(undefined, undefined, l, m, {}, k)
		},
		getFriendsScores: function(l, m, k) {
			this.getScoresWithBody(undefined, undefined, l, m, {
				relation: "friends"
			}, k)
		},
		getTopScoresList: function() {
			if (!this._topScoresList) {
				NgLogD("Getting Top Scores List " + this + " " + this.game);
				this._topScoresList = new g(this, null, false)
			}
			return this._topScoresList
		},
		getFriendsScoresList: function() {
			if (!this._friendsScoresList) {
				this._friendsScoresList = new g(this, null, true)
			}
			return this._friendsScoresList
		},
		getScoresWithBody: function(p, s, m, o, q, l) {
			l = l || e.noOp;
			var t = this;
			if (!p) {
				p = b.Session.getCurrentSession().user()
			}
			if (!s) {
				s = this.game
			}
			if (!q) {
				q = {}
			}
			if (!m) {
				m = 100
			}
			if (!o) {
				o = 0
			}
			var k = {};
			for (var r in q) {
				k[r] = q[r]
			}
			var n = new e();
			n.setApiMethod("games/" + s.recordID + "/leaderboards/" + this.level);
			n.setHttpMethod("GET");
			n.setPostBody(k);
			n.setEntityTag(this.entityTag);
			n.send(function(y, A, v, z) {
				if (!y) {
					var D = {};
					var x = [];
					var E = null;
					if (z == 304) {
						D = t.scoreInfo
					} else {
						if (A && A.success === true) {
							t.beginChanges();
							var B = A.leaderboard;
							for (var C = 0; C < B.length; C++) {
								var u = B[C];
								var w = a.getScoreWithDataAndLeaderboard(u, t);
								x.push(w)
							}
							t.entityTag = v.etag || t.entityTag;
							E = (A.user_score ? new a(A.user_score, t) : undefined);
							D.leaderboard = t;
							D.userScore = E;
							D.scores = x;
							t.scoreInfo = D;
							t.endChanges()
						}
					}
					l(y, x, E, t)
				} else {
					NgLogD("Error getting scores: " + y);
					l(y, null, null, t)
				}
			})
		}
	});
	j.defineSetterCallbacks(h, ["level", "title", "game", "iconURL"]);
	h.getLeaderboardWithData = function(n) {
		var m = "Leaderboard-" + n.game.recordID + "-" + n.level;
		var l = b.Session.getCurrentSession().dataCache().getObjectWithRecordID(h.classname, m);
		if (l !== null) {
			l._loadData(n);
			return l
		}
		var k = new h(m, n);
		return k
	};
	h.getLeaderboards = function(k) {
		k = k || e.noOp;
		c.getCurrentGame(function(n, l) {
			if (n) {
				k(n);
				return
			}
			var m = new e();
			m.setApiMethod("games/" + l.recordID + "/leaderboards");
			m.setHttpMethod("GET");
			m.send(function(r, s) {
				var u = null;
				if (!r && s && s.success) {
					u = [];
					var t = s.leaderboards;
					for (var p = 0; p < t.length; p++) {
						var q = t[p];
						q.game = l;
						var o = h.getLeaderboardWithData(q);
						u.push(o)
					}
					k(r, u);
					return
				}
				if (!r) {
					r = s.error
				}
				if (!r) {
					r = "unknown error"
				}
				k(r, u)
			})
		})
	};
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Score"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Score"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Score"] = a;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel").DataModel;
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var b = a.Score = c.subclass({
		classname: "Score",
		initialize: function($super, h, f) {
			var g = f.game.recordID + "-" + f.recordID + "-" + h.gamertag;
			$super(g);
			this._loadData(h, f)
		},
		_loadData: function(j, g) {
			this.beginChanges();
			j = j || {};
			var f = {
				user_id: j.user_id,
				gamertag: j.gamertag,
				badge_id: j.badge_id
			};
			var h = e.getUserWithData(f);
			this.user = h;
			this.points = j.score;
			this.displayScore = j.formatted_score || this.score;
			this.rank = j.rank;
			this.level = j.level;
			this.endChanges()
		}
	});
	c.defineSetterCallbacks(b, ["points", "displayScore", "rank", "level", "user"]);
	b.getScoreWithDataAndLeaderboard = function(j, f) {
		var h = f.game.recordID + "-" + f.recordID + "-" + j.gamertag;
		var g = d.Session.getCurrentSession().dataCache();
		var l = g.getObjectWithRecordID(b.classname, h);
		if (l !== null) {
			l._loadData(j, f);
			return l
		}
		var k = new b(j, f);
		l = g.addObject(k);
		return l
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AppData"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AppData"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AppData"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/DataModel");
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var a = b.DataModel.subclass({
		classname: "AppData"
	});
	b.DataModel.defineSetterCallbacks(a, ["data", "key", "user", "permissions"]);
	a.getKeysForUser = function(g, f) {
		f = f || e.PlusRequest.noOp;
		if (!g) {
			f("No user", null);
			return null
		}
		var h = new e.PlusRequest();
		h.setApiMethod("users/" + g.recordID + "/user_data");
		h.setHttpMethod("GET");
		h.send(function(j, k) {
			if (k && (k.success === true) && (k.datas != undefined)) {
				f(j, k.datas)
			} else {
				f(j, null)
			}
		});
		return h
	};
	a.getAppDataWithData = function(h, k, g) {
		if (!h) {
			NgLogD("AppData.getAppDataWithData: No user");
			return null
		}
		if (!k) {
			NgLogD("AppData.getAppDataWithData: No key");
			return null
		}
		var j = h.recordID + "--" + k;
		var f = d.getCurrentSession().dataCache().getObjectWithRecordID(a.classname, j);
		if (f !== null) {
			return f
		}
		var l = new a(j);
		l.user = h;
		l.key = k;
		l.data = g;
		return l
	};
	a.getDataForUserWithKey = function(j, l, f) {
		f = f || e.PlusRequest.noOp;
		if (!j) {
			f("No user", null);
			return null
		}
		if (!l) {
			f("No key", null);
			return null
		}
		var k = j.recordID + "--" + l;
		var h = d.getCurrentSession().dataCache();
		var n = h.getObjectWithRecordID("AppData", k);
		var g = (n ? n.entityTag : null);
		var m = new e.PlusRequest();
		m.setApiMethod("users/" + j.recordID + "/user_data/" + l);
		m.setHttpMethod("GET");
		m.setHttpHeaders({
			Accept: "application/octet-stream"
		});
		m.setEntityTag(g);
		m.send(function(q, o, s, p) {
			if (q) {
				if (p === 404) {
					q = "Sorry, we can't find this player's data."
				}
				f(q, null)
			} else {
				if (o) {
					var r = a.getAppDataWithData(j, l, o);
					r.permissions = o.privacy;
					r.entityTag = s.etag;
					r.data = o;
					f(null, r)
				} else {
					if (p == 304 && n) {
						f(null, n)
					} else {
						f("unknown error", null)
					}
				}
			}
		});
		return m
	};
	a.setDataForUserWithKeyAndPermissions = function(l, g, h, j, f) {
		f = f || e.PlusRequest.noOp;
		if (!g) {
			f("No user", null);
			return null
		}
		if (!h) {
			f("No key", null);
			return null
		}
		if (!j) {
			j = a.Permissions.Private
		}
		var k = new e.PlusRequest();
		k.setApiMethod("users/" + g.recordID + "/user_data");
		k.setHttpMethod("POST");
		k.setPostBody({
			key: h,
			privacy: j
		});
		k.addAttachmentWithNameAndFilenameOfType(l, "value", "value", null);
		k.send(function(p, n, q, o) {
			if (n && n.success === true) {
				var m = a.getAppDataWithData(g, h, l);
				f(null, m)
			} else {
				f(p, null)
			}
		});
		return k
	};
	a.Permissions = {
		Private: 0,
		FriendsReadOnly: 1,
		PublicReadOnly: 2
	};
	c.AppData = a;
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Cache"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Cache"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Cache"] = c;
	var a = require("NGCore/Client/Social/_Internal/GSGlobals");
	var f = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Storage");
	var d = require("NGCore/Client/Social");
	var e = c.Cache = f.Class.subclass({
		namespace: "Default",
		classname: "Cache",
		inMemoryObjects: {},
		caches: {},
		lastAccessDates: {},
		maxSize: 400,
		stats: {
			hits: 0,
			misses: 0
		},
		initialize: function(j) {
			this.namespace = j || e.namespace;
			var g = ["AppData", "Game", "Leaderboard", "Score", "User"];
			for (var h in g) {
				this.cacheForClassname(g[h])
			}
		},
		_isObjectExpired: function(g) {
			return false
		},
		cacheForClassname: function(g) {
			if (g) {
				var h = this.caches[g];
				if (!h) {
					var j = "Social.US.Data." + this.namespace + "." + g;
					NgLogD("Cache for classname " + g + " at " + j);
					h = b.Storage.KeyValueCache.global(j);
					this.caches[g] = h
				}
				return h
			} else {
				return null
			}
		},
		inMemoryObjectsBucketForClassname: function(g) {
			return this.inMemoryObjects
		},
		getObjectWithRecordID: function(l, h) {
			var j = "" + l + "-" + h;
			var k = this.inMemoryObjectsBucketForClassname(l);
			if (k) {
				var g = k[j] || null;
				if (g && !this._isObjectExpired(g)) {
					g.lastAccessed = new Date().getTime()
				}
				if (g) {
					this.stats.hits++;
					return g.value
				} else {
					this.stats.misses++;
					return null
				}
			} else {
				return null
			}
		},
		addObject: function(m) {
			var l = m._classname();
			var k = this.inMemoryObjectsBucketForClassname(l);
			var j = "" + l + "-" + m.recordID;
			var h = k[j];
			if (h) {
				return h.value
			} else {
				h = k[j] = {
					key: j,
					value: m,
					lastAccessed: new Date().getTime()
				};
				var g = this;
				setTimeout(function() {
					g._purge()
				}, 100);
				return h.value
			}
		},
		removeObject: function(l) {
			var k = l._classname();
			var h = "" + k + "-" + l.recordID;
			var j = this.inMemoryObjectsBucketForClassname(k);
			if (j) {
				delete j[h]
			}
			var g = this.cacheForClassname(k);
			if (g) {
				g.removeItem(l.recordID)
			}
		},
		isObjectCached: function(j) {
			var h = j._classname();
			var g = this.inMemoryObjectsBucketForClassname(h);
			return (g && (g[j.recordID] == j))
		},
		_purge: function() {
			if (this.inMemoryObjects.length <= this.maxSize) {
				return
			}
			var k = [];
			for (var h in this.inMemoryObjects) {
				var j = this.inMemoryObjects[h];
				if (this._isObjectExpired(j)) {
					this.removeObject(j)
				} else {
					k.push(j)
				}
			}
			if (k.length > this.maxSize) {
				k = k.sort(function(m, l) {
					return l.lastAccessed - m.lastAccessed
				});
				while (k.length > this.maxSize) {
					var g = k.pop();
					this.removeObject(g.value)
				}
			}
		},
		saveCache: function(m) {
			var s = 0;
			var v = function() {
				if ((--s) === 0) {
					m()
				}
			};
			var k = {};
			for (var h in this.inMemoryObjects) {
				var u = this.inMemoryObjects[h];
				var n = u.value;
				var q = n.classname;
				var g = this.cacheForClassname(q);
				var j = k[q];
				if (!j) {
					j = k[q] = []
				}
				var t = n.recordID;
				var p = n._serializedHash();
				if (p) {
					s++;
					g.setItem(t, JSON.stringify(p), v);
					j.push(t)
				}
			}
			for (var l in k) {
				var r = k[l];
				var o = this.cacheForClassname(l);
				s++;
				g.setItem("recordIDs", JSON.stringify(j), v)
			}
		},
		loadCache: function(h) {
			var n = [];
			var m = this;
			var k = 0;
			var j = function() {
				if ((--k) === 0) {
					m.loadCacheFromJSONArray(n, h)
				}
			};
			for (var g in this.caches) {
				var l = this.cacheForClassname(g);
				(function(p, o) {
					p.getItem("recordIDs", function(u, t) {
						if (t) {
							var r = null;
							try {
								r = JSON.parse(t)
							} catch (v) {
								NgLogE("DataModel::Cache error loading recordIDs from cache")
							}
							if (r && !(r instanceof Array)) {
								r = [r]
							}
							for (var q = 0; q < (r || []).length; q++) {
								var s = r[q];
								k++;
								p.getItem(s, function(w, x) {
									n.push(x);
									j()
								})
							}
						}
					})
				})(l, g)
			}
		},
		loadCacheFromJSONArray: function(l, g) {
			var p = [];
			for (var o = 0; o < l.length; o++) {
				var h = l[o];
				if (h && h.hasOwnProperty("classname") && h.hasOwnProperty("recordID")) {
					var j = h.classname;
					var n = d.Social.US[j];
					var m = h.recordID;
					if (n && m) {
						var k = this.getObjectWithRecordID(j, m);
						if (!k) {
							k = new n(m, {})
						}
						k._deserializeFromHash(h);
						this.addObject(k)
					}
				}
			}
			g(null, this)
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session"] = b;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		CoreReq: function() {
			return require("NGCore/Client/Core")
		},
		FileSystem: function() {
			return require("NGCore/Client/Storage/FileSystem").FileSystem
		},
		Storage: function() {
			return require("NGCore/Client/Storage").Storage
		},
		PlusRequestReq: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest")
		},
		UserReq: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User")
		},
		UpdaterReq: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Updater")
		},
		MessageEmitterReq: function() {
			return require("NGCore/Client/Core/MessageEmitter")
		},
		NetworkUtil: function() {
			return require("NGCore/Client/Network/Util").Util
		},
		Capabilities: function() {
			return require("NGCore/Client/Core/Capabilities").Capabilities
		},
		CacheReq: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Cache")
		},
		Dispatcher: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher
		},
		toMD5: function() {
			return require("NGCore/Client/Core/toMD5").toMD5
		},
		AppConfig: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig
		},
		CredentialsReq: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials")
		},
		SystemMessagesStack: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemMessagesStack").SystemMessagesStack
		},
		N0kler: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/N0kler").N0kler
		}
	});
	var c = b.Session = a.MessageEmitterReq.MessageEmitter.subclass({
		classname: "Session",
		$NO_KEYS_ERR: "Warning, cannot find consumer keys and appId for game.",
		oauth2Token: null,
		userID: null,
		initialize: function(d) {
			this.gameData = d || {};
			this._consumerKey = this.gameData.consumerKey || null;
			this._consumerSecret = this.gameData.consumerSecret || null;
			this._appKey = this.gameData.appId || null;
			this._appVersion = this.gameData.appVersion || null;
			this._config = d.config;
			if (this.gameData.serverMode) {
				a.PlusRequestReq.PlusRequest.setServerMode(this.gameData.serverMode || a.PlusRequestReq.PlusRequest.serverModes.production)
			}
			this.accessToken = null;
			this.accessSecret = null;
			this._user = null
		},
		dataCache: function() {
			if (!this._cache) {
				this._cache = new a.CacheReq.Cache(this.userID);
				this._cache.loadCache(function(d) {
					NgLogD("Loaded cache: " + d)
				})
			}
			return this._cache
		},
		loginWithExistingSession: function(d) {
			d = d || a.PlusRequestReq.PlusRequest.noOp;
			var g = a.Storage.KeyValueCache.local;
			if (!g) {
				a.Storage.KeyValueCache.init();
				g = a.Storage.KeyValueCache.local
			}
			NgLogD("@@@ mobage Session.js loginWithExistingSession localCache.getItem +");
			var f = this;
			var e = "com.ngmoco.plus.session.auth_token." + a.PlusRequestReq.PlusRequest.getServerMode() + "." + this.appKey();
			NgLogD("Getting existing session for server " + e);
			g.getItem(e, function(k, l) {
				NgLogD("@@@ mobage Session.js loginWithExistingSession localCache.getItem -");
				if (!l) {
					if (f.gameData.triedHardcodedUsernameAndPassword !== true && f.gameData.username && f.gameData.password) {
						NgLogD("Privileged Session: Doing manual hardcoded login for " + f.gameData.username);
						var n = f.gameData.username;
						var h = f.gameData.password;
						f.gameData.triedHardcodedUsernameAndPassword = true;
						f.loginWithUsernameAndPassword(n, h, d)
					} else {
						d("No auth_token", f);
						return
					}
				}
				NgLogD("Logging in with existing session");
				var j = new a.PlusRequestReq.PlusRequest();
				j.setApiMethod("session");
				j.setHttpMethod("POST");
				var m = f._loginParameters();
				m.auth_token = l;
				j.setPostBody(m);
				NgLogD("@@@ mobage Session.js loginWithExistingSession localCache.getItem PlusRequest +");
				j.send(function(p, q, r, o) {
					NgLogD("@@@ mobage Session.js loginWithExistingSession localCache.getItem PlusRequest -");
					f._handleLoginResponse(p, q, r, o, d)
				})
			})
		},
		loginWithUsernameAndPassword: function(k, f, d) {
			d = d || a.PlusRequestReq.PlusRequest.noOp;
			var h = this;
			var g = new a.PlusRequestReq.PlusRequest();
			g.setApiMethod("session");
			g.setHttpMethod("POST");
			var j = h._loginParameters();
			j.gamertag = k;
			j.password = f;
			g.setPostBody(j);
			var e = this;
			g.send(function(m, n, o, l) {
				e._handleLoginResponse(m, n, o, l, d)
			})
		},
		newSessionWithUsernameAndPassword: function(g, e, d) {
			var f = new c({
				consumerKey: this._consumerKey,
				consumerSecret: this._consumerSecret,
				appId: this.appKey(),
				appVersion: this.appVersion()
			});
			f.loginWithUsernameAndPassword(g, e, function(h, j) {
				if (!h && j.user()) {
					c._currentSession = j;
					if (c._emitter) {
						c._emitter.emit({
							session: j
						})
					}
					d(null, j)
				} else {
					d(h, null)
				}
			})
		},
		getSessionTokensForConsumerKey: function(e, d) {
			return a.PlusRequestReq.PlusRequest.getSessionTokensForConsumerKey(e, d)
		},
		user: function() {
			return this._user
		},
		appKey: function() {
			return this._appKey
		},
		appVersion: function() {
			return this._appVersion || "1.0"
		},
		platformVersion: function() {
			return a.AppConfig.getPlatformVersion()
		},
		OAuthConsumerInfo: function() {
			return {
				token: this.accessToken,
				tokenSecret: this.accessSecret,
				consumerKey: this._consumerKey,
				consumerSecret: this._consumerSecret
			}
		},
		$OAuth2Token: function() {
			return c.oauth2Token
		},
		$OAuth2TokenHeaders: function() {
			return {
				oauth2_token: c.OAuth2Token()
			}
		},
		OAuth2Token: function() {
			return c.OAuth2Token()
		},
		OAuth2TokenHeaders: function() {
			return c.OAuth2TokenHeaders()
		},
		_handleLoginResponse: function(h, n, d, k, f) {
			f = f || a.PlusRequestReq.PlusRequest.noOp;
			var p = this;
			if (!h && n && n.success === true) {
				NgLogD("_handleLoginResponse success");
				this.userID = n.user_id;
				if (this._cache) {
					delete this._cache;
					this._cache = null
				}
				this.accessToken = n.oauth_token;
				this.accessSecret = n.oauth_secret;
				c.oauth2Token = n.oauth2_token;
				NgLogD("UserLogin: Get user with data " + JSON.stringify(n ? n.profile : "No Profile Information"));
				NgLogD("UserLogin: Got OAuth 2 token with length:" + c.oauth2Token.length);
				NgLogD("@@@ mobage Session.js _handleLoginResponse getUserWithData +");
				var j = a.UserReq.User.getUserWithData(n.profile);
				NgLogD("@@@ mobage Session.js _handleLoginResponse getUserWithData -");
				if (!j) {
					f("Could not get user from good data", null);
					return
				}
				if (n.messages) {
					NgLogD("UserLogin: Have messages waiting... " + JSON.stringify(n.messages));
					for (var m = 0; m < n.messages.length; m++) {
						a.SystemMessagesStack.onSystemMessage(n.messages[m])
					}
				}
				j.entityTag = d.etag || j.entityTag;
				var e = a.CoreReq.Core.Analytics._getPipe();
				a.UpdaterReq.Updater.stop();
				if (this._cache) {
					this._cache.saveCache(function(s, r) {
						NgLogD("Old cache saved with err " + s)
					});
					this._cache = null
				}
				a.UserReq.User.setCurrentUser(j);
				this._user = j;
				this.emit({
					user: j
				});
				a.UpdaterReq.Updater.start();
				if (e) {
					e.setMeta("uid", j.recordID);
					e.setMeta("plus", j.gamertag)
				}
				var g = c._authTokenKeyForServerModeAndAppKey(a.PlusRequestReq.PlusRequest.getServerMode(), this.appKey());
				var o = n.auth_token;
				NgLogD("Setting local storage - '" + g + "': '" + o + "'");
				NgLogD("@@@ mobage Session.js _handleLoginResponse imports.Storage.KeyValueCache.local.setItem +");
				a.Storage.KeyValueCache.local.setItem(g, o, function() {
					NgLogD("@@@ mobage Session.js _handleLoginResponse imports.Storage.KeyValueCache.local.setItem -");
					f(h, p)
				});
				if (this == c.getCurrentSession()) {
					a.Dispatcher.sendSession(this)
				}
			} else {
				if (p.gameData && p.gameData.triedHardcodedUsernameAndPassword !== true && p.gameData.username && p.gameData.password) {
					NgLogD("Privileged Session: Doing manual hardcoded login for " + p.gameData.username);
					var l = p.gameData.username;
					var q = p.gameData.password;
					p.gameData.triedHardcodedUsernameAndPassword = true;
					p.loginWithUsernameAndPassword(l, q, f)
				} else {
					h = (n && n.error_msg) ? n.error_msg : h;
					f(h, p)
				}
			}
		},
		$_authTokenKeyForServerModeAndAppKey: function(e, f) {
			var d = "com.ngmoco.plus.session.auth_token." + e + "." + f;
			return d
		},
		_loginParameters: function() {
			var e = a.Capabilities.getUniqueId();
			var f = a.Capabilities.getPlatformOS();
			var g = a.Capabilities.getPlatformOSVersion();
			if (typeof f == "undefined") {
				f = "Android";
				g = "2.2";
				e = "Test-Android-Device-HasBug"
			} else {
				if (f == "Mac OS" || f == "flash") {
					f = "flash";
					g = "4.1";
					e = "2800B673-5927-5B58-895C-363C1260B309"
				}
			}
			var h = f + "/" + g;
			if (f.toLowerCase() == "android") {
				h = "Android/" + g
			} else {
				if (f.toLowerCase() == "iphone os") {
					h = "iOS/" + g
				}
			}
			var d = a.Capabilities.getLocale();
			return {
				timezone: "US/Pacific (PDT) offset -25200 (Daylight)",
				device_type: f,
				os_version: h,
				id: e,
				locale: d
			}
		},
		end: function() {},
		isSomeoneLoggedIn: function() {
			return !(this._user === undefined || this._user === null)
		},
		$_checkSessionStatusSecure: function(d) {
			a.PlusRequestReq.PlusRequest._checkSessionStatusSecure(d)
		},
		$_sendPasswordResetEmailWithAddress: function(e, d) {
			a.PlusRequestReq.PlusRequest.sendPasswordResetEmailWithAddress(e, d)
		},
		$_isLocalDevelopmentMode: function() {
			var f = a.Capabilities.getConfigs();
			if (f.useLocalDevModeOverrideInThisConfig) {
				return f.isLocalDevModeOverrideValue
			}
			var e = a.Capabilities.getStartingServer();
			if (!e || e === "") {
				e = a.Capabilities._getBootServer()
			}
			NgLogD("Checking server URL " + e + " for development mode");
			var d = /^https?:\/\/[^\/]+\.mobage\.com/g;
			return e.match(d) === null
		},
		$getGamesFromLocal: function() {
			var d = a.Capabilities.getConfigs();
			if (d.getGamesFromLocal) {
				return d.getGamesFromLocal
			}
			return false
		},
		$getConsumerInfo: function(k, l, f) {
			f = f || a.PlusRequestReq.PlusRequest.noOp;
			var h = c._currentSession;
			var m = {
				consumerKey: "",
				consumerSecret: "",
				appId: k,
				appVersion: "1.0"
			};
			if (c._isLocalDevelopmentMode() && c.getGamesFromLocal()) {
				var j = l.socialConsumerKey;
				var e = l.socialConsumerSecret;
				if (j && e) {
					NgLogD("In local development mode: Loaded consumerKey/consumerSecret from configuration.json");
					f(null, j, e)
				} else {
					NgLogD("Configuration json thingy! " + JSON.stringify(l));
					var d = c.NO_KEYS_ERR + " AppId=" + k + " Error: You must specify a socialConsumerKey and socialConsumerSecret  in your configuration.json file in local development mode.";
					NgLogE(d);
					f(c.NO_KEYS_ERR)
				}
			} else {
				var g = new c(m);
				c._currentSession = g;
				NgLogD("@@@ mobage Session.js $getConsumerInfo imports.N0kler.getConsumerInfo +");
				a.N0kler.getConsumerInfo(k, function(p, q, r, n) {
					NgLogD("@@@ mobage Session.js $getConsumerInfo imports.N0kler.getConsumerInfo -");
					c._currentSession = h;
					if ((!p) && (q) && (q.success === true)) {
						f(null, q.consumer_key, q.consumer_secret)
					} else {
						var o = c.NO_KEYS_ERR + " AppId=" + k + " Error: " + p;
						NgLogE(o);
						f(c.NO_KEYS_ERR)
					}
				})
			}
		},
		$switchToSessionWithConfig: function(e, d) {
			d = d || a.PlusRequestReq.PlusRequest.noOp;
			NgLogD("Mobage/Session: Switching to session for " + JSON.stringify(e));
			var f = a.PlusRequestReq.PlusRequest.apiDomain;
			if (e.hasOwnProperty("socialServer") && e.hasOwnProperty("socialConsumerKey") && e.hasOwnProperty("socialConsumerSecret") && e.hasOwnProperty("username") && e.hasOwnProperty("password")) {
				c.beginGameSessionWithConfig(e, d);
				return
			}
			c.getConsumerInfo(e.appId, e, function(k, g, j) {
				if (k) {
					a.PlusRequestReq.PlusRequest.apiDomain = f;
					d(k);
					return
				}
				var h = {
					consumerKey: g,
					consumerSecret: j,
					appId: e.appId,
					appVersion: "1.0"
				};
				var l = c.getCurrentSession();
				var n = new c(h);
				var m = function() {
					c._currentSession = n;
					a.Dispatcher.sendSession(n);
					if (c._emitter) {
						c._emitter.emit({
							session: n
						})
					}
					d(null, n)
				};
				if (!l.user()) {
					if (e.requireMobageLogin) {
						NgLogD("Mobage/Session: No existing user, forcing login " + JSON.stringify(e));
						c._currentSession = n;
						m()
					} else {
						NgLogD("Mobage/Session: No user logged in, skipping delegated OAuth login");
						m()
					}
				} else {
					a.PlusRequestReq.PlusRequest.getSessionTokensForConsumerKey(g, function(o, p) {
						NgLogD("Mobage/Session/getSessionTokensForConsumerKey returned err=" + o);
						if (o || !p || !p.success) {
							a.PlusRequestReq.PlusRequest.apiDomain = f;
							d(o);
							return
						}
						n.accessToken = p.oauth_token;
						n.accessSecret = p.oauth_secret;
						n._user = c._currentSession.user();
						m()
					})
				}
			})
		},
		_clearAuthToken: function(d) {
			var e = c._authTokenKeyForServerModeAndAppKey(a.PlusRequestReq.PlusRequest.getServerMode(), this.appKey());
			var f = undefined;
			a.Storage.KeyValueCache.local.setItem(e, f, function() {
				d()
			})
		},
		$_forceLogin: function(d) {
			a.CredentialsReq.Credentials.showLogin(function() {
				a.Dispatcher.sendSession(c.getCurrentSession());
				d()
			})
		}
	});
	c.beginGameSessionWithData = function(f, d) {
		d = d || a.PlusRequestReq.PlusRequest.noOp;
		if (!f) {
			throw "Missing game data, cannot connect to Plus"
		}
		var k = f.consumerKey;
		var g = f.consumerSecret;
		var j = f.appId;
		var e = f.appVersion;
		if (!k) {
			throw "Missing consumerKey, cannot connect to Plus+"
		}
		if (!g) {
			throw "Missing consumerSecret, cannot connect to Plus+"
		}
		if (!j) {
			throw "Missing appId, cannot connect to Plus+"
		}
		if (!e) {
			throw "Missing appVersion, cannot connect to Plus+"
		}
		var h = new c(f);
		c._currentSession = h;
		if (c._emitter) {
			c._emitter.emit({
				session: h
			})
		}
		a.Dispatcher.sendSession(h);
		h.loginWithExistingSession(d || function() {})
	};
	c.beginGameSessionWithConfig = function(e, d) {
		d = d || a.PlusRequestReq.PlusRequest.noOp;
		var f = a.PlusRequestReq.PlusRequest.apiDomain;
		if (e.hasOwnProperty("socialServer")) {
			a.PlusRequestReq.PlusRequest.apiDomain = e.socialServer
		} else {
			a.PlusRequestReq.PlusRequest.apiDomain = "app-sandbox.mobage.com"
		}
		NgLogD("Mobage/Session: setting Plus server to " + a.PlusRequestReq.PlusRequest.apiDomain);
		NgLogD("Mobage/Session: Beginning game session with config: " + JSON.stringify(e));
		c.getConsumerInfo(e.appId, e, function(l, g, j) {
			if (l) {
				a.PlusRequestReq.PlusRequest.apiDomain = f;
				d(l);
				return
			}
			var h = {
				username: e.username,
				password: e.password,
				consumerKey: g,
				consumerSecret: j,
				appId: e.appId,
				appVersion: "1.0",
				config: e
			};
			var m = new c(h);
			c._currentSession = m;
			var k = a.Capabilities.getConfigs();
			if (k.hasOwnProperty("disableMobageServiceUI")) {
				a.AppConfig.setNonDevFacingUIEnabled(!k.disableMobageServiceUI)
			}
			NgLogD("Mobage/Session: imports.AppConfig nonDevFacingUIEnabled set to " + a.AppConfig.nonDevFacingUIEnabled());
			if (c._emitter) {
				c._emitter.emit({
					session: m
				})
			}
			a.Dispatcher.sendSession(m);
			m.loginWithExistingSession(d || function() {})
		})
	};
	c.defaultAppIfMissingConfig = function(d) {
		if (!(d.hasOwnProperty("appId") && d.hasOwnProperty("socialConsumerKey") && d.hasOwnProperty("socialConsumerSecret"))) {
			NgLogD("Mobage/Session: missing config, overiding with default values");
			d.appId = "default-Dev";
			d.socialConsumerKey = "sRCm60M7fI2eLsZEJM37Ng";
			d.socialConsumerSecret = "6d0mOCbxc9Ql9qzBnfOiPUQk9U7u6TLvlacmHNhCE";
			d.requireMobageLogin = true;
			d.disableMobageServiceUI = false;
			d.disableAndroidMarketRedirect = false
		}
	};
	c.endGameSession = function() {};
	c.getCurrentSession = function() {
		return c._currentSession
	};
	c._emitter = null;
	c.addCurrentSessionListener = function(e, f, d) {
		if (!c._emitter) {
			c._emitter = new a.MessageEmitterReq.MessageEmitter()
		}
		c._emitter.addListener(e, f, d)
	};
	c.removeCurrentSessionListener = function(d) {
		if (c._emitter) {
			c._emitter.removeListener(d)
		}
	};
	c.addCurrentSessionListener(new a.CoreReq.Core.MessageListener(), function() {
		a.Dispatcher.sendSession(c.getCurrentSession())
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher"] = e;
	var b = require("NGCore/Client/Social/_Internal/GSGlobals");
	var g = require("NGCore/Client/Core/Class");
	var f = require("NGCore/Client/Social/_Internal/Privileged");
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var c = e.Dispatcher = {
		classname: "Dispatcher",
		callbackUIDCounter: 0,
		callbacks: {
			"-2": {},
			"-1": {}
		},
		cache: function() {
			return a.Session.getCurrentSession().dataCache()
		},
		sendSession: function(k) {
			var j = {
				apiURL: "US.Dispatcher.receiveSession",
				data: {
					platformVersion: d.PlusRequest.getPlatformVersion(),
					serverMode: d.PlusRequest.getServerMode(),
					appId: d.PlusRequest.appKey(),
					appVersion: d.PlusRequest.appVersion()
				}
			};
			var h = k.user();
			if (h) {
				j.data.userID = h.recordID;
				j.data.userData = h._serializedHash()
			}
			b.getRouterInstance().sendCommandToGame(j)
		},
		getSessionForPublic: function(j) {
			var h = a.Session.getCurrentSession();
			if (!h) {
				j("Warning: No session in Privileged available to get.")
			} else {
				c.sendSession(h)
			}
		},
		callClassMethodOnLocalObject: function(l) {
			c.beginBatching();
			var k = l.classname;
			var q = l.methodName;
			if (k && q) {
				var m = f.Social.US[k];
				if (!m) {
					m = f.Social.US.Service[k]
				}
				if (m) {
					var o = false;
					var n;
					var h;
					if (q instanceof Array) {
						var j = m;
						for (var p = 0; p < q.length; p++) {
							if (typeof j[q[p]] == "function") {
								n = c.convertArgumentsArrayFromJSON(l.arguments[p] || []);
								h = j[q[p]].apply(j, n);
								j = h
							} else {
								o = true;
								break
							}
						}
					} else {
						if (typeof m[q] == "function") {
							n = c.convertArgumentsArrayFromJSON(l.arguments || []);
							h = m[q].apply(m, n)
						} else {
							o = true
						}
					}
					if (o) {
						NgLogD("ERROR: Invalid methods for calling on local Class: " + k + " " + q)
					} else {
						if (l.callback) {
							var r = c.convertFunctionFromJSON(l.callback);
							if (r) {
								r(h)
							}
						}
					}
				}
			}
			c.endBatching()
		},
		callMethodOnRemoteObject: function(l, j, k, h) {
			if (!l || !j) {
				NgLogD("Privileged.Dispatcher.callMethodOnRemoteObject - bailing");
				if (h) {
					h()
				}
				return
			}
			k = c.convertArgumentsArrayToJSON(k || []);
			var m = {
				apiURL: "US.Dispatcher.callMethodOnLocalObject",
				recordID: l.recordID,
				classname: (l.classname ? l.classname : l),
				methodName: j,
				arguments: k,
				callback: c.convertFunctionToJSON(h)
			};
			b.getRouterInstance().sendCommandToGame(m)
		},
		callMethodOnLocalObject: function(l) {
			c.beginBatching();
			var n = l.recordID;
			var k = l.classname;
			var m = c.cache().getObjectWithRecordID(k, n);
			if (m) {
				var r = l.methodName;
				var p = false;
				var o;
				var h;
				if (r instanceof Array) {
					var j = m;
					for (var q = 0; q < r.length; q++) {
						if (typeof j[r[q]] == "function") {
							o = c.convertArgumentsArrayFromJSON(l.arguments[q] || []);
							h = j[r[q]].apply(j, o);
							j = h
						} else {
							p = true;
							break
						}
					}
				} else {
					if (typeof m[r] == "function") {
						o = c.convertArgumentsArrayFromJSON(l.arguments || []);
						h = m[r].apply(m, o)
					} else {
						p = true
					}
				}
				if (p) {
					NgLogD("ERROR: Invalid methods for calling on local object: " + l.recordID + " " + r)
				} else {
					if (l.callback) {
						var s = c.convertFunctionFromJSON({
							callbackUID: l.callback
						});
						if (s) {
							s(h)
						}
					}
				}
			}
			c.endBatching()
		},
		callMethodOnRemoteObject: function(m, j, k, h) {
			if (!m || !j) {
				NgLogD("Privileged.Dispatcher.callMethodOnRemoteObject - bailing");
				if (h) {
					h()
				}
				return
			}
			k = c.convertArgumentsArrayToJSON(k || []);
			var l = {
				apiURL: "US.Dispatcher.callClassMethodOnLocalObject",
				classname: (m.classname ? m.classname : m),
				methodName: j,
				arguments: k,
				callback: c.convertFunctionToJSON(h)
			};
			b.getRouterInstance().sendCommandToGame(l)
		},
		sendCallbackToRemote: function(h, j) {
			j = c.convertArgumentsArrayToJSON(j || []);
			var k = {
				apiURL: "US.Dispatcher.receiveCallbackFromRemote",
				callbackUID: h,
				arguments: j,
				zone: b.getRouterInstance().zone
			};
			b.getRouterInstance().sendCommandToGame(k)
		},
		receiveCallbackFromRemote: function(j) {
			var k = c.callbacks[b.getRouterInstance().zone][j.callbackUID];
			if (!k) {
				return
			}
			var h = c.convertArgumentsArrayFromJSON(j.arguments || []);
			k.apply(k, h)
		},
		convertArgumentsArrayFromJSON: function(l) {
			var k = [];
			for (var j = 0; j < l.length; j++) {
				var h = l[j];
				if (h && ((h.recordID && h.classname) || h instanceof Array)) {
					k[j] = c.convertModelObjectFromJSON(h)
				} else {
					if (h && h.callbackUID) {
						k[j] = c.convertFunctionFromJSON(h)
					} else {
						k[j] = h
					}
				}
			}
			return k
		},
		convertArgumentsArrayToJSON: function(l) {
			var k = [];
			for (var j = 0; j < l.length; j++) {
				var h = l[j];
				if (h && (h.recordID && h._classname && typeof h._classname == "function" && h._classname())) {
					c.sendObjectImmediately(h);
					h = c.convertModelObjectToJSON(h);
					k[j] = h
				} else {
					if (h && h instanceof Array) {
						h = c.convertArgumentsArrayToJSON(h);
						k[j] = h
					} else {
						if (h && typeof h == "function") {
							k[j] = c.convertFunctionToJSON(h)
						} else {
							k[j] = h
						}
					}
				}
			}
			return k
		},
		convertModelObjectToJSON: function(h) {
			if (h && h.recordID && h._classname()) {
				h = {
					classname: h._classname(),
					recordID: h.recordID
				}
			}
			return h
		},
		convertModelObjectFromJSON: function(l) {
			var k = l;
			if (l.recordID && l.classname) {
				var m = c.cache().getObjectWithRecordID(l.classname, l.recordID);
				if (m) {
					k = m
				}
			} else {
				if (l instanceof Array) {
					for (var j = 0; j < l.length; j++) {
						var h = l[j];
						h = this.convertModelObjectFromJSON(h);
						l[j] = h
					}
				}
			}
			return k
		},
		convertFunctionToJSON: function(k) {
			if (k && typeof k == "function") {
				var j = ++c.callbackUIDCounter;
				var h = b.getRouterInstance().zone;
				c.callbacks[h][j] = k;
				k = {
					callbackUID: j,
					zone: h
				}
			}
			return k
		},
		convertFunctionFromJSON: function(k) {
			var l = k;
			var j = l.callbackUID;
			var h = l.zone;
			if (j && h) {
				var m = c.callbacks[h][j];
				if (m && h == b.getRouterInstance().zone) {
					l = m;
					delete c.callbacks[h][j]
				} else {
					l = c.generateCallbackForUID(j)
				}
				return l
			} else {
				return undefined
			}
		},
		generateCallbackForUID: function(h) {
			if (h.callbackUID) {
				h = h.callbackUID
			}
			return function() {
				var k = [];
				for (var j = 0; j < arguments.length; j++) {
					k[j] = arguments[j]
				}
				c.sendCallbackToRemote(h, k)
			}
		},
		_batchCount: 0,
		_queuedObjects: [],
		beginBatching: function() {
			++c._batchCount
		},
		endBatching: function() {
			if ((--c._batchCount) === 0) {
				for (var h in c._queuedObjects) {
					var j = c._queuedObjects[h];
					c._queuedObjects[h] = undefined;
					c.sendObjectImmediately(j)
				}
			}
		},
		sendObjectImmediately: function(j) {
			if (!j) {
				return
			}
			var h = {
				apiURL: "US.Dispatcher.receiveObject",
				data: j._serializedHash()
			};
			b.getRouterInstance().sendCommandToGame(h)
		},
		sendObject: function(j) {
			if (c._queuedObjects.indexOf(j) == -1) {
				c.beginBatching();
				var h = "" + j.classname + "---" + j.recordID;
				c._queuedObjects[h] = j;
				c.endBatching()
			}
		},
		receiveObject: function(o) {
			c.beginBatching();
			var m = o.data;
			var j = m.recordID;
			var l = m.classname;
			var h = m.data;
			NgLogD("Privileged Dispatcher: Received object " + l + " " + j + ": " + JSON.stringify(o));
			var k = c.cache();
			if (j && l && k) {
				NgLogD("Got a " + l + " object with " + j);
				var n = k.getObjectWithRecordID(l, j);
				if (!n) {
					var p = f.Social.US[l];
					n = new p(j);
					k.addObject(n)
				}
				n._deserializeFromHash(h)
			}
			c.endBatching()
		}
	};
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Banking"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Banking"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Banking"] = a;
	a.Banking = {};
	a.Banking.Legacy = {
		asyncFulfill: function(b) {
			a.Banking.Legacy._asyncFulfillCurrCommand = b;
			a.Banking.Legacy._asyncFulfillCBList = [];
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankLegacy").BankLegacy).asyncFulfill(function(f, c, g, d, e) {
				a.Banking.Legacy._asyncFulfillOrderCB(f, c, g, d, e)
			}, function() {
				a.Banking.Legacy._asyncFulfillDoneCB()
			})
		},
		launchPurchaseView: function(b) {
			var c = b.data["sku"];
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankLegacy").BankLegacy).launchPurchaseView(c, function(f, g, h, e, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							itemID: g,
							orderid: h,
							receipt: e,
							jsonorder: d
						},
						error: f
					})
				}
			})
		},
		_asyncFulfillContinue: function(d) {
			a.Banking.Legacy._asyncFulfillCurrCommand = d;
			if (typeof a.Banking.Legacy._asyncFulfillCurrCB == "function") {
				NgLogD("_asyncFulfillContinue: ordercb invoked.");
				a.Banking.Legacy._asyncFulfillCurrCB()
			}
			var b = a.Banking.Legacy._asyncFulfillCurrCommand;
			if (b && b.hasOwnProperty("callbackId") && (a.Banking.Legacy._asyncFulfillCBList.length > 0)) {
				var c = a.Banking.Legacy._asyncFulfillCBList.shift();
				(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame(c);
				a.Banking.Legacy._asyncFulfillCurrCommand = undefined
			}
		},
		_asyncFulfillDoneCB: function() {
			var c = {
				callbackData: {
					cbtype: "donecb"
				},
				error: undefined
			};
			a.Banking.Legacy._asyncFulfillCBList.push(c);
			var b = a.Banking.Legacy._asyncFulfillCurrCommand;
			if (b && b.hasOwnProperty("callbackId")) {
				c = a.Banking.Legacy._asyncFulfillCBList.shift();
				c.callbackId = b.callbackId;
				(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame(c)
			} else {
				NgLogW("WARNING - donecb is ignored")
			}
			a.Banking.Legacy._asyncFulfillCurrCommand = undefined
		},
		_asyncFulfillOrderCB: function(g, b, h, d, f) {
			var e = {
				callbackData: {
					cbtype: "ordercb",
					prodId: g,
					orderId: b,
					verificationToken: h,
					jsonorder: d
				},
				error: undefined
			};
			a.Banking.Legacy._asyncFulfillCBList.push(e);
			var c = a.Banking.Legacy._asyncFulfillCurrCommand;
			a.Banking.Legacy._asyncFulfillCurrCB = f;
			if (c && c.hasOwnProperty("callbackId")) {
				e = a.Banking.Legacy._asyncFulfillCBList.shift();
				e.callbackId = c.callbackId;
				(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame(e)
			} else {
				NgLogW("WARNING - ordercb is ignored for orderId " + b)
			}
			a.Banking.Legacy._asyncFulfillCurrCommand = undefined
		}
	};
	a.Banking.Legacy._asyncFulfillCurrCommand = undefined;
	a.Banking.Legacy._asyncFulfillCurrCB = undefined;
	a.Banking.Legacy._asyncFulfillCBList = undefined;
	a.Banking.Purchase = {
		createTransaction: function(b) {
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase).createTxn(b.data["billingItems"], b.data["comment"], function(c, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							transaction: d
						},
						error: c
					})
				}
			})
		},
		openTransaction: function(b) {
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase).openTxn(b.data["transactionId"], function(c, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							transaction: d
						},
						error: c
					})
				}
			})
		},
		getTransaction: function(b) {
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase).getTxn(b.data["transactionId"], function(c, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							transaction: d
						},
						error: c
					})
				}
			})
		},
		continueTransaction: function(b) {
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase).continueTxn(b.data["transactionId"], function(c, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							transaction: d
						},
						error: c
					})
				}
			})
		},
		cancelTransaction: function(b) {
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase).cancelTxn(b.data["transactionId"], function(c, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							transaction: d
						},
						error: c
					})
				}
			})
		},
		closeTransaction: function(b) {
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase).closeTxn(b.data["transactionId"], function(c, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							transaction: d
						},
						error: c
					})
				}
			})
		},
		getPendingTransactions: function(b) {
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase).getOpenTxns(function(c, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							openTransactions: d
						},
						error: {
							error: c
						}
					})
				}
			})
		},
		getItem: function(b) {
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase).getItem(b.data["itemId"], function(c, d) {
				if (b.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: b.callbackId,
						callbackData: {
							item: d
						},
						error: c
					})
				}
			})
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Friends"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Friends"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Friends"] = b;
	var a;
	b.Friends = {
		showFindFriends: function(e) {
			NgLogD("Showing Find Friends");
			var d = e.data;
			if (!d) {
				d = {}
			}
			var c = (require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/FindFriends").FindFriends).initWithJSON(d);
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost).navController.pushViewController(c, d)
		},
		_gameLaunchedListener: null,
		_friendPicker: null,
		showFriendPicker: function(c, d) {
			if (!this._gameLaunchedListener) {
				this._gameLaunchedListener = new(require("NGCore/Client/Core/MessageListener").MessageListener)();
				(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter).addListener(this._gameLaunchedListener, a.bind(this))
			}
			a.call(this);
			this._friendPicker = new(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/FriendpickerViewController").FriendpickerViewController)(c, d, function(e) {
				NgLogD("Privleged sent inviteToGame for friend " + e ? e.gamertag : JSON.stringify(e));
				e.inviteToCurrentGame(function(f, g) {
					NgLogD("Invite to game request sent: " + JSON.stringify(g))
				})
			})
		}
	};
	a = function() {
		NgLogD("FriendPicker Cleanup, possibly on new game launch!");
		if (this._friendPicker && !this._friendPicker._destroyed) {
			this._friendPicker.destroy();
			this._friendPicker = null
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Games"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Games"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Games"] = a;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameProfile").GameProfile;
	a.Games = {
		showProfile: function(c) {
			(require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game).getCurrentGame(function(f, d) {
				c.data["game"] = d;
				var e = b.initWithJSON(c.data);
				(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost).navController.pushViewController(e)
			})
		},
		showCatalog: function(e) {
			var d = e.data;
			if (!d) {
				d = {}
			}
			var c = (require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Catalog").Catalog).initWithJSON(d);
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost).navController.pushViewController(c)
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Home"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Home"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Home"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavPlaceholder").InterstitialSplashScreen;
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest;
	c.Home = {
		showMobage: function(h) {
			var j = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
			NgLogD("Showing Mobage");
			var f = null;
			if (h && h.hasOwnProperty("callbackId")) {
				f = function() {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: h.callbackId
					})
				}
			}
			var g = null;
			g = new d(function() {
				j.navController.pushViewController(new b.Home(f))
			});
			g.onDidHide = function() {
				setTimeout(g.zombieSafeCallback(function() {
					j.navController.removeViewController(g)
				}), 10)
			};
			j.navController.pushViewController(g, "", function(l) {
				if (l == e.ERROR_NO_CONNECTION) {
					var k = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter;
					k.exitProcess()
				}
			});
			a.onGameLaunched()
		}
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Profile"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Profile"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Profile"] = a;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MyPage").MyPage;
	a.Profile = {
		showUserProfile: function(e) {
			NgLogD("Showing UserProfile");
			var d = e.data;
			var c;
			if (d && (d.user)) {
				c = d.user.recordID
			} else {
				NgLogE("NOT showing UserProfile, missing user parameter");
				return
			}(require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User).getUserWithID(c, function(h, f) {
				if (h) {
					NgLogE("NOT showing UserProfile, error getting user object with id: " + c + ". Error: " + h);
					return
				}
				var j = {
					user: f,
					tab: d.tab
				};
				var g = (require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/UserProfilePage").UserProfilePage).initWithJSON(j);
				(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost).navController.pushViewController(g, j)
			})
		},
		showMyPage: function(e) {
			NgLogD("Showing MyPage");
			var d = e.data;
			if (!d) {
				d = {}
			}
			var c = b.initWithJSON(d);
			(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost).navController.pushViewController(c, d)
		},
		showAccountSettings: function(c, d) {
			NgLogD("Showing Account Settings -- incomplete")
		},
		showUserGamercard: function(d) {
			NgLogD("Showing UserGamercard");
			var c = d.userID;
			if (!c) {
				NgLogE("NOT showing UserGamercard, missing user parameter");
				return
			}(require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User).getUserWithID(c, function(g, e) {
				if (g) {
					NgLogE("NOT showing UserGamercard, error getting user object with id: " + c + ". Error: " + g);
					return
				}
				var h = {
					user: e,
					tab: d.tab
				};
				var f = (require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Gamercard").Gamercard).initWithJSON(h);
				(require("NGCore/Client/UI").UI).Window.document.addChild(f.view())
			})
		},
		showMyGamercard: function() {
			NgLogD("Showing MyGamercard");
			var c = (require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Gamercard").Gamercard).initWithJSON({});
			(require("NGCore/Client/UI").UI).Window.document.addChild(c.view())
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/ButtonOverlays"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/ButtonOverlays"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/ButtonOverlays"] = a;
	a.ButtonOverlays = {
		showCommunityButton: function(d) {
			NgLogD("Privileged - showCommunityButton");
			var g = d.gravity;
			var e = d.theme;
			var b = null;
			if (d && d.hasOwnProperty("callbackId")) {
				b = function() {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: d.callbackId
					})
				}
			}
			var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CommunityButtonController").CommunityButtonController;
			c.destroyInstance();
			var f = new c();
			f.setThemeAndGravity(e, g);
			if (b) {
				b()
			}
		},
		hideCommunityButton: function(c) {
			NgLogD("Privileged - hideCommunityButton");
			var b = null;
			if (c && c.hasOwnProperty("callbackId")) {
				b = function() {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: c.callbackId
					})
				}
			}(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CommunityButtonController").CommunityButtonController).destroyInstance(b)
		},
		showBalanceButton: function(f) {
			NgLogD("Privileged - showBalanceButton");
			var g = require("NGCore/Client/UI").UI;
			var e = new g.ViewGeometry.Rect(50, 50, 0, 0);
			if (f.hasOwnProperty("rect")) {
				e = f.rect
			}
			var b = null;
			if (f.hasOwnProperty("callbackId")) {
				b = function() {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: f.callbackId
					})
				}
			}
			var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/BalanceButtonController").BalanceButtonController;
			d.destroyInstance();
			var c = new d(true, e, b)
		},
		hideBalanceButton: function(c) {
			NgLogD("Privileged - hideBalanceButton");
			var b = null;
			if (c && c.hasOwnProperty("callbackId")) {
				b = function() {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: c.callbackId
					})
				}
			}(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/BalanceButtonController").BalanceButtonController).destroyInstance(b)
		},
		hideAllButtons: function() {
			for (var b in this) {
				if (typeof this[b] === "function" && b.match(/^hide/) && b !== "hideAllButtons") {
					this[b]()
				}
			}
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Tests"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Tests"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Tests"] = a;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials").Credentials;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Localization").Localization;
	a.Tests = {
		showPrivilegedToastWithMessage: function(e) {
			NgLogD("Privileged intercepted showPrivilegedToastWithMessage");
			var f = require("NGCore/Client/UI").UI;
			var d = new f.Toast();
			d.setText(e.data);
			d.show();
			if (e.hasOwnProperty("callbackId")) {
				(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
					callbackId: e.callbackId
				})
			}
		},
		doGlobalsTest: function(d) {
			GameService_globalsTest_globalVar = d.data;
			if (d.hasOwnProperty("callbackId")) {
				(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
					callbackId: d.callbackId
				})
			}
		},
		doWindowExaminationTest: function(d) {
			var e = require("NGCore/Client/UI").UI;
			var f = (e.Window.document._children.length == 0);
			if (d.hasOwnProperty("callbackId")) {
				e.Window.document.addChild(new e.View());
				(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
					callbackId: d.callbackId,
					callbackData: {
						success: f
					}
				})
			}
		},
		doSquareViewLayeringTest: function(g) {
			NgLogD("In Privileged Interpreter, creating Views");
			var e = {
				corners: "8 8 8 8",
				outerLine: "00 1.5",
				gradient: ["FFFF0000 0.0", "FFFF0000 1.0"]
			};
			var d = {
				corners: "8 8 8 8",
				outerLine: "00 1.5",
				gradient: ["FF0000FF 0.0", "FF0000FF 1.0"]
			};
			var h = require("NGCore/Client/UI").UI;
			var f = new h.View();
			var j = new h.View();
			f.setFrame([70, 20, 100, 100]);
			j.setFrame([150, 100, 100, 100]);
			f.setGradient(e);
			j.setGradient(d);
			h.Window.document.addChild(f, 0);
			h.Window.document.addChild(j, -1);
			if (g.hasOwnProperty("callbackId")) {
				(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
					callbackId: g.callbackId
				})
			}
		},
		pushNotifTestPrivSetup: function(f) {
			var h = require("NGCore/Client/UI").UI;
			var e = require("NGCore/Client/Device").Device;
			var d = new Core.MessageListener();
			d.destroy = function() {
				e.PushNotificationEmitter.removeListener(d)
			};
			d.onPushRecivedFn = function(l) {
				pushAlert = new h.AlertDialog();
				pushAlert.setTitle("GameService Push Test: Got Push!");
				pushAlert.setText(l);
				pushAlert.setChoices(["OK"]);
				pushAlert.show();
				return false
			};
			e.PushNotificationEmitter.addListener(d, d.onPushRecivedFn);
			var k = f.hasOwnProperty("loginUser") ? f.loginUser : "mt000";
			var j = f.hasOwnProperty("loginPw") ? f.loginPw : "mt000";
			var g = f.hasOwnProperty("loginServer") ? f.loginServer : "staging";
			if (f.hasOwnProperty("gameData")) {
				(require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest")).PlusRequest.setServerMode(g);
				(require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session).beginGameSessionWithData(f.gameData, function(l, m) {
					m.loginWithUsernameAndPassword(k, j, function(n, o) {
						if (n) {
							NgLogD("pushNotifTestPrivSetup: Failed login! Err: " + n);
							var q = new h.AlertDialog();
							q.setTitle("Priv: Failed to log in");
							q.setText("Err: " + n);
							q.setChoices(["OK"]);
							q.show()
						} else {
							NgLogD("pushNotifTestPrivSetup: Successful login!");
							var p = new h.Toast();
							p.setText("Priv: Logged in as " + k);
							p.show()
						}
					})
				})
			}
		},
		doShowLoginTest: function(d) {
			NgLogD("Privileged call doShowLoginTest");
			b.showLogin()
		},
		doShowRegistrationTest: function(d) {
			NgLogD("Privileged call doShowRegistrationTest");
			b.showRegistration()
		},
		setupSession: function(e) {
			NgLogD("Privileged Interface setupSession");
			var d = e.data;
			(require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session).beginGameSessionWithData(d, function(f, g) {
				NgLogD("Began session. " + f + " " + g);
				(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
					callbackId: e.callbackId
				})
			})
		},
		bankGetBalance: function(d) {
			NgLogD("Privileged interface bankGetBalance");
			(require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Balance").Balance).get(function(g, j, h, f, e) {
				if (d.hasOwnProperty("callbackId")) {
					(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
						callbackId: d.callbackId,
						callbackData: {
							success: j,
							balance: h,
							currency: f,
							currencyIconURL: e
						},
						error: g
					})
				}
			})
		},
		logMissingLocalizationStrings: function(d) {
			c.printMissingStrings()
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/GameLaunchPayload"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/GameLaunchPayload"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/GameLaunchPayload"] = b;
	var a = b.GameLaunchPayload = {
		$_lastGamePayload: null,
		onGameLaunchPayload: function(c) {
			a._lastGamePayload = c;
			var d = {
				apiURL: "US.Service.GameLaunchPayload.onGameLaunchPayload",
				data: {
					payload: c
				}
			};
			(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame(d)
		},
		getLastPayload: function(c) {
			(require("NGCore/Client/Social/_Internal/GSGlobals")).getRouterInstance().sendCommandToGame({
				callbackId: c.callbackId,
				error: null,
				callbackData: {
					payload: a._lastGamePayload
				}
			})
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Bank"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Bank"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Bank"] = a;
	a.Bank = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Banking").Banking;
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations"] = a;
	a.Destinations = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Home: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Home").Home
		},
		FindFriends: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/FindFriends").FindFriends
		},
		Catalog: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Catalog").Catalog
		},
		GameProfile: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameProfile").GameProfile
		},
		MyPage: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MyPage").MyPage
		},
		UserProfilePage: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/UserProfilePage").UserProfilePage
		},
		AccountSettings: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccountSettingsController").AccountSettingsController
		},
		BankController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankController").BankController
		},
		Login: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Login").Login
		},
		ForgotPassword: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ForgotPassword").ForgotPassword
		},
		Registration: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Registration").Registration
		},
		RegistrationStepOne: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationStepOne").RegistrationStepOne
		},
		Gamercard: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Gamercard").Gamercard
		},
		GamePlaceholder: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavPlaceholder").GamePlaceholder
		},
		Main: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Main").Main
		},
		VerticalTabController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/VerticalTabController").VerticalTabController
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Analytics"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Analytics"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Analytics"] = a;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	a.Analytics = {
		getUserId: function() {
			var d = this._getSession(),
				c = null;
			if (d) {
				c = (d.user() || {}).recordID
			}
			return c
		},
		getUsername: function() {
			var d = this._getSession(),
				c = null;
			if (d) {
				c = (d.user() || {}).gamertag
			}
			return c
		},
		getPlatformVersion: function() {
			var c = this._getSession(),
				d = null;
			if (c) {
				d = c.platformVersion()
			}
			return d
		},
		getServiceId: function() {
			return "US"
		},
		_getSession: function() {
			return b.Session.getCurrentSession()
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter"] = b;
	var a = require("NGCore/Client/Core/MessageEmitter").MessageEmitter;
	b.GameLaunchedEmitter = a.singleton({
		onGameLaunched: function() {
			this.emit()
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemMessagesStack"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemMessagesStack"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemMessagesStack"] = e;
	var d = require("NGCore/Client/Core/Class").Class;
	var c = require("NGCore/Client/Core/Analytics").Class;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Game: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game
		},
		PlusRequest: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest
		},
		AlertDialog: function() {
			return require("NGCore/Client/UI/AlertDialog").AlertDialog
		},
		Toast: function() {
			return require("NGCore/Client/UI/Toast").Toast
		},
		IPCEmitter: function() {
			return require("NGCore/Client/Device/IPCEmitter").IPCEmitter
		},
		DeepLinking: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking").DeepLinking
		},
		ServiceLinkEmitter: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking").ServiceLinkEmitter
		},
		KeyValueCache: function() {
			return require("NGCore/Client/Storage/KeyValue").KeyValueCache
		},
		Updater: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Updater").Updater
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	e.SystemMessagesStack = d.singleton({
		_messageQueue: null,
		_messageDialog: null,
		_waitingOnDialog: false,
		initialize: function() {
			this._messageQueue = []
		},
		onSystemMessage: function(f) {
			var g = this;
			var j = f.times_to_display;
			var l = function() {
				var m = {
					title: f.title,
					text: f.text,
					linkUrl: f.url,
					useAlert: f.alert,
					useWebView: f.web_view
				};
				NgLogD("SystemMessagesStack: Got new System message: " + JSON.stringify(m));
				g._messageQueue.push(m);
				g._tryDisplayMessage()
			};
			if (j && j > 0) {
				var h = f.id;
				var k = b.KeyValueCache.global("Social.US.MessageHistory");
				k.getItem(h, function(n, o) {
					var m = o ? parseInt(o, 10) : 0;
					if (m < j) {
						l();
						k.setItem(h, m + 1)
					}
				})
			} else {
				l()
			}
		},
		onCPIMessage: function(f) {
			var g = this;
			var h = function() {
				var j = {
					title: f.title,
					text: f.text,
					labelYES: f.yes_button_label,
					labelNO: f.no_button_label,
					appKey: f.app_key,
					userID: f.user_id,
					offerID: f.offer_id,
					useAlert: true
				};
				NgLogD("SystemMessagesStack: Got new CPI message: " + JSON.stringify(j));
				g._messageQueue.push(j);
				g._tryDisplayMessage()
			};
			h()
		},
		_tryDisplayMessage: function() {
			if (this._waitingOnDialog || this._messageQueue.length === 0) {
				return
			}
			var f = this._messageQueue[0];
			NgLogD("SystemMessagesStack: Displaying: " + JSON.stringify(f));
			if (f.useAlert || f.offerID) {
				this._showDialog(f)
			} else {
				var g = new b.Toast({
					text: f.text
				});
				g.show();
				this._messageQueue.splice(0, 1);
				this._tryDisplayMessage()
			}
		},
		_showDialog: function(j) {
			if (this._messageDialog) {
				this._messageDialog.destroy()
			}
			var f = this;
			this._waitingOnDialog = true;
			this._messageDialog = new b.AlertDialog();
			this._messageDialog.setTitle(j.title);
			this._messageDialog.setText(j.text);
			if (j.linkUrl && j.useAlert) {
				var h = b.DeepLinking.parseMobageWWLink(j.linkUrl);
				if (h) {
					h.noDialog = true;
					this._messageDialog.setChoices([a("View"), a("Skip")]);
					this._messageDialog.onchoice = function(k) {
						if (k.choice === 0) {
							b.ServiceLinkEmitter.onLink(h)
						}
						f._onDialogClosed()
					}
				} else {
					this._messageDialog.setChoices([a("View"), a("Skip")]);
					this._messageDialog.onchoice = function(k) {
						if (k.choice === 0) {
							b.IPCEmitter.launch(j.linkUrl, function(l) {
								console.log("SystemMessageStack URL Callback")
							})
						}
						f._onDialogClosed()
					}
				}
				this._messageDialog.show()
			} else {
				if (j.offerID) {
					var g = new b.PlusRequest();
					g.setApiMethod("cpi/display?o=" + j.offerID + "&u=" + j.userID);
					g.setHttpMethod("GET");
					g.send(function(l, m, n, k) {
						console.log("Mobage/CPI: Message shown. Reported to Server");
						if (k === 200) {
							f._messageDialog.setChoices([a(j.labelYES), a(j.labelNO)]);
							f._messageDialog.onchoice = function(q) {
								if (q.choice === 0) {
									var o = new b.PlusRequest();
									o.setApiMethod("cpi/click?o=" + j.offerID + "&u=" + j.userID);
									o.setHttpMethod("GET");
									o.send(function(s, t, u, r) {
										console.log("Mobage/CPI: cpi/click status is: " + r);
										if (r == 200 && j.appKey) {
											b.Game.getGameWithAppKey(j.appKey, function(w, v) {
												if (!w && v) {
													NgLogD("Mobage/CPI: User Responded Yes, CPI/click success, found game, Sending to Android Market. Game: " + v.recordID);
													v.openMarket();
													setTimeout(function() {
														b.Updater.checkNow()
													}, 3000)
												} else {
													NgLogD("Mobage/CPI dialog: Couldnt find game, err: " + w)
												}
											})
										}
									});
									f._onDialogClosed()
								} else {
									f._onDialogClosed();
									var p = new b.PlusRequest();
									p.setApiMethod("cpi/dismiss?o=" + j.offerID + "&u=" + j.userID);
									p.setHttpMethod("GET");
									p.send(function(s, t, u, r) {
										console.log("Mobage/CPI: User Responded NO. Reported to Server")
									})
								}
							};
							f._messageDialog.show()
						} else {
							console.log("Mobage/CPI: Display failed, skipping");
							f._messageDialog.destroy();
							f._onDialogClosed();
							return
						}
					})
				} else {
					this._messageDialog.setChoices([a("OK")]);
					this._messageDialog.onchoice = function(k) {
						f._onDialogClosed()
					};
					this._messageDialog.show()
				}
			}
		},
		_onDialogClosed: function() {
			this._waitingOnDialog = false;
			this._messageQueue.splice(0, 1);
			this._tryDisplayMessage()
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.AppConfig = b.Class.singleton({
		initialize: function() {
			this._nonDevFacingUIEnabled = false;
			this._audioEnabled = true
		},
		nonDevFacingUIEnabled: function() {
			return this._nonDevFacingUIEnabled
		},
		setNonDevFacingUIEnabled: function(c) {
			this._nonDevFacingUIEnabled = c
		},
		audioEnabled: function() {
			return this._audioEnabled
		},
		setAudioEnabled: function(c) {
			this._audioEnabled = c
		},
		getJSUpdateWaitPeriodInMS: function() {
			return 0
		},
		getJSUpdateIntervalInMS: function() {
			return 15 * 60 * 1000
		},
		getJSForcedUpdateIntervalInSec: function() {
			var d = b.Capabilities.getConfigs();
			var c = 60;
			if (d && d.hasOwnProperty("jsForcedUpdateIntervalInSec")) {
				c = d.jsForcedUpdateIntervalInSec
			}
			return c
		},
		isLocalizationEnabled: function() {
			var d = b.Capabilities.getConfigs();
			var c = true;
			if (d && d.hasOwnProperty("localizationEnabled")) {
				c = d.localizationEnabled
			}
			return c
		},
		getMaxNavStackDepth: function() {
			return 10
		},
		canDownloadGamesDirectly: function() {
			if (b.Capabilities.getPlatformOS().toLowerCase() !== "android") {
				return true
			}
			var c = b.Capabilities.getConfigs();
			var d = false;
			if (c && c.hasOwnProperty("disableAndroidMarketRedirect")) {
				d = c.disableAndroidMarketRedirect
			}
			return d
		},
		getPlatformVersion: function() {
			var c = b.Capabilities.getConfigs();
			var d = "unknown";
			if (c && c.hasOwnProperty("platformVersion")) {
				d = c.platformVersion
			}
			return d
		},
		getMinBinaryVersion: function() {
			var d = b.Capabilities.getConfigs();
			var c = null;
			if (d && d.hasOwnProperty("minBinaryVersion")) {
				c = d.minBinaryVersion
			}
			return c
		},
		getHomeScreenPromotion: function() {
			var c = b.Capabilities.getConfigs();
			if (c && c.homeScreenPromotion) {
				return c.homeScreenPromotion
			}
			return undefined
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/AppUpdater"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/AppUpdater"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/AppUpdater"] = d;
	var g = require("NGCore/Client/Core").Core;
	var m = require("NGCore/Client/Storage").Storage;
	var k = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter;
	var e = require("NGCore/Client/Core/_int_LGL")._int_LGL;
	var f = require("NGCore/Client/Core/_LocalGameList")._LocalGameList;
	var c = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/CheckBinaryVersion").CheckBinaryVersion;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig;
	var l = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var j = d.AppUpdater = g.Class.singleton({
		classname: "AppUpdater",
		initialize: function() {
			this._objectsBlockingUpdating = []
		},
		updateServiceJS: function(o) {
			var n = this;
			NgLogD("Mobage/AppUpdater: Downloading game service updates...");
			f.updateGame(o, -1, function(p, r) {
				b.checkForBinaryUpdates(o);
				if (r) {
					NgLogE("Mobage/AppUpdater: Error updating game service! " + o + ": " + r)
				} else {
					if (p) {
						g.Analytics.reportGameEvent("MobageUpdateAvailable");
						var t = g.MessageListener.subclass({
							_onEvent: function(u) {
								if (u === k.Event.Suspend) {
									if (n.shouldApplyJSUpdates()) {
										NgLogD("Mobage/AppUpdater: Applying service update.");
										m.KeyValueCache.local.setItem("Mobage_DidJSUpdate", "1");
										e.launch(o, e.ProcID.Persist)
									}
								}
								return true
							}
						});
						var q = new t();
						k.addListener(q, q._onEvent)
					} else {
						NgLogD("Mobage/AppUpdater: Game Service is up-to-date.")
					}
				}
				var s = a.getJSUpdateIntervalInMS();
				NgLogD("Mobage/AppUpdater: Scheduling next update check in " + s + "ms.");
				setTimeout(function() {
					n.updateServiceJS(o)
				}, s)
			}, false, true)
		},
		_initForcedJSUpdateButton: function(o) {
			var p = new c.AlertDialog();
			p.setTitle(l("Update Available"));
			p.setText(l("An update to Mobage has been downloaded. Please restart to apply the update."));
			p.setChoices([l("Restart Mobage")]);
			var n = new c.ProgressDialog();
			n.setText(l("Restarting Mobage…"));
			p.onchoice = function() {
				g.Analytics.reportGameEvent("MobageForcedJSUpdateDialogRestartClicked");
				n.show();
				f.setProgressText(l("Restarting Mobage…"));
				f.setSplashVisible(true);
				if (h.isRunningActiveGame()) {
					k.pauseGame()
				}
				setTimeout(function() {
					e.launch(o, e.ProcID.Persist)
				}, 10)
			};
			p.show();
			g.Analytics.reportGameEvent("MobageForcedJSUpdateDialogShow")
		},
		blockApplyingJSUpdates: function(o) {
			var n = this._objectsBlockingUpdating.indexOf(o);
			if (n !== -1) {
				NgLogW("Mobage/AppUpdater: Object " + o + " over-requested blockApplyingJSUpdates");
				return
			}
			NgLogD("Mobage/AppUpdater: Blocking app update due to object " + o);
			this._objectsBlockingUpdating.push(o)
		},
		allowApplyingJSUpdates: function(o) {
			var n = this._objectsBlockingUpdating.indexOf(o);
			if (n === -1) {
				NgLogW("Mobage/AppUpdater: Object " + o + " tried to allow updates but wasn't blocking");
				return
			}
			NgLogD("Mobage/AppUpdater: Object " + o + " is allowing app update once again");
			this._objectsBlockingUpdating.splice(n, 1)
		},
		shouldApplyJSUpdates: function() {
			return false
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var a = new require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader({
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		CredentialsHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost
		},
		LoginController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Login").Login
		},
		RegistrationController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Registration").Registration
		},
		NavPlaceholder: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavPlaceholder").GamePlaceholder
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		}
	});
	c.Credentials = {
		showLogin: function(e) {
			NgLogD("Private call showLogin");
			var d = new a.LoginController(function(f) {
				NgLogD("Mobage/Credentials/showLogin callback begin user=" + f);
				var g = new a.NavPlaceholder(a.CredentialsHost, "AhabTester_hardcoded");
				a.CredentialsHost.navController.pushViewController(g);
				a.CredentialsHost.navController.removeUntilViewController(a.CredentialsHost.navController.getBottomViewController());
				a.CredentialsHost.hide();
				if (e) {
					e(f)
				}
			});
			a.CredentialsHost.navController.pushViewController(d)
		},
		showRegistration: function(e) {
			NgLogD("Private call showRegistration");
			NgLogD("@@@ mobage Credentials.showRegistration");
			var d = a.RegistrationController.initWithJSON({
				cb: function(f) {
					NgLogD("Mobage/Credentials/showRegistration callback begin user=" + f);
					a.CredentialsHost.hide();
					if (e) {
						e(f)
					}
				}
			});
			a.CredentialsHost.navController.pushViewController(d)
		},
		logout: function(e) {
			var d = this;
			var f = a.Session.getCurrentSession();
			f._clearAuthToken(function() {
				d.showLogin(function() {
					e();
					a.ServiceHost.show();
					a.ServiceHost.navController.popToHome()
				});
				a.ServiceHost.hide()
			})
		}
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost"] = g;
	var d = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Device").Device;
	var h = require("NGCore/Client/Core").Core;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Host").Host;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		MobageNavLogic: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageNavLogic").MobageNavLogic
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		CredentialsHostView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsHostView").CredentialsHostView
		},
		DisaggregatedCredentialsHostView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHostView").DisaggregatedCredentialsHostView
		}
	});
	var f = g.CredentialsHost = e.singleton({
		classname: "CredentialsHost",
		initialize: function($super) {
			$super();
			this.navLogic = (new a.MobageNavLogic.CredentialsBackPreservingNav(this)).retain();
			this.navController.setDelegate(this.navLogic);
			this._layoutML = j.createLayoutListener(this, this.layoutChanged)
		},
		destroy: function() {
			this._layoutML.destroy()
		},
		loadView: function() {
			NgLogD("mobage-CredentialsHost-loadView: Loading the mobage service container.");
			var k = this;
			this.setView(new a.DisaggregatedCredentialsHostView());
			this.view().setNavControllerView(this.navController.view());
			this.view().setFrame(d.Window.getFrame());
			this.view().backButton.onclick = function() {
				NgLogD("mobage-CredentialsHost: Back Button Tapped");
				k.navController.back()
			};
			this.navController.pushViewController(new c.GamePlaceholder(this, "AhabTester_hardcoded"))
		},
		layoutChanged: function(k) {
			if (k.width < k.height) {
				this.view().setFrame(0, 0, k.width, k.height)
			}
		},
		_isFooterEnabled: false,
		setIsFooterEnabled: function(k) {
			this._isFooterEnabled = k
		},
		_shouldShowRegText: true,
		_wasShowingRegText: true,
		_shouldHaveRegHeaderRevealed: false,
		_wasRevealingRegHeader: false,
		setRegHeaderEnabled: function(k, l) {
			this._shouldShowRegText = k;
			this._shouldHaveRegHeaderRevealed = k && l !== 0
		},
		setMarketAppID: function(k) {
			this.view().credentialsHeaderView.setGameIcon(k)
		},
		show: function($super, k) {
			NgLogD("mobage-CredentialsHost-show");
			if (!this.view().getParent()) {
				d.Window.document.addChild(this.view());
				this.resurfaceControls()
			}
			var l = this._oldOrientation = b.OrientationEmitter.getInterfaceOrientation();
			if (l != b.OrientationEmitter.Orientation.Portrait) {
				NgLogD("mobage credentials host opening: rotating to portrait.");
				b.OrientationEmitter.setInterfaceOrientation(b.OrientationEmitter.Orientation.Portrait);
				NgLogD("mobage-CredentialsHost-show: dismissCallbacks (" + this.dismissCallbacks.length + ")")
			}
			a.ServiceHost.closeMenuDrawer();
			$super(k)
		},
		hide: function($super) {
			NgLogD("mobage-CredentialsHost: hide");
			if (!this || !this._showing) {
				NgLogD("mobage-CredentialsHost-hide: No Service Instance, or not currently showing");
				return
			}
			b.OrientationEmitter.setInterfaceOrientation(this._oldOrientation);
			$super();
			this.view().removeFromParent();
			this.resurfaceControls(true)
		},
		resurfaceControls: function(k) {
			if (!this._showing || k) {
				this.view().backButton.removeFromParent();
				this.view().doneButton.removeFromParent();
				this.view().cancelButton.removeFromParent();
				if (this._wasFooterVisible) {
					this.view().animateFooterOut(1);
					this._wasFooterVisible = false
				}
			} else {
				this.view().backButton.removeFromParent();
				this.view().doneButton.removeFromParent();
				this.view().cancelButton.removeFromParent();
				if (this._showNavButtons) {
					d.Window.document.addChild(this.view().backButton)
				}
				d.Window.document.addChild(this.view().cancelButton);
				d.Window.document.addChild(this.view().doneButton)
			}
		},
		onNavTransition: function(n, k, l, m) {
			if (this._isFooterEnabled) {
				if (!this._wasFooterVisible) {
					this.view().animateFooterIn(l)
				}
			} else {
				if (this._wasFooterVisible) {
					this.view().animateFooterOut(l)
				}
			}
			if (this._shouldShowRegText) {
				if (!this._wasShowingRegText) {
					this.view().credentialsHeaderView.showRegText()
				}
			} else {
				if (this._wasShowingRegText) {
					this.view().credentialsHeaderView.showLoginText()
				}
			}
			if (this._shouldHaveRegHeaderRevealed) {
				if (!this._wasRevealingRegHeader) {
					this.view().credentialsHeaderView.revealRegHeader()
				}
			} else {
				if (this._wasRevealingRegHeader) {
					this.view().credentialsHeaderView.hideRegHeader()
				}
			}
			this._wasFooterVisible = this._isFooterEnabled;
			this._wasRevealingRegHeader = this._shouldHaveRegHeaderRevealed;
			this._wasShowingRegText = this._shouldShowRegText;
			this.resurfaceControls(false)
		},
		editMode: function(l, k) {
			this.view().editMode(l, k)
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/RemoteFileCache"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/RemoteFileCache"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/RemoteFileCache"] = c;
	var h = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/Network").Network;
	var f = require("NGCore/Client/Storage").Storage;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		}
	});
	var e = h.Class.subclass({
		classname: "KVFlatFileStore",
		initialize: function(j, k) {
			this.path = j;
			this.data = {};
			this.initialCallback = k;
			f.FileSystem.readFile(this.path, false, this._loadFileCb.bind(this))
		},
		getItem: function(j) {
			return this.data[j]
		},
		setItem: function(j, k) {
			this.data[j] = k
		},
		deleteItem: function(j) {
			delete this.data[j]
		},
		save: function() {
			if (!this.saveInFlight) {
				f.FileSystem.writeFile(this.path, JSON.stringify(this.data), false, this._saveFileCb.bind(this));
				this.pendingWriteRequest = false;
				this.saveInFlight = true
			} else {
				this.pendingWriteRequest = true
			}
		},
		_loadFileCb: function(k, l) {
			var j = false;
			if (k) {
				NgLogI("KVFlatFileStore: failed to load cache from disk, creating new one: " + this.path);
				j = true
			} else {
				try {
					this.data = JSON.parse(l);
					NgLogI("KVFlatFileStore: Successfully loaded cache from disk: " + this.path)
				} catch (m) {
					NgLogI("KVFlatFileStore: corrupt disk cache, creating new one: " + this.path);
					j = true
				}
			}
			if (j) {
				this.data = {}
			}
			this.initialCallback()
		},
		_saveFileCb: function(j) {
			this.saveInFlight = false;
			if (j) {
				NgLogE("KVFlatFileStore Error: Catastrophic Failure writing cache status to disk. Undefined behavior ahead.")
			}
			if (this.pendingWriteRequest) {
				this.save()
			}
		}
	});
	var b = h.Class.subclass({
		classname: "RemoteFileCache",
		fetchFileForURL: function(k, l) {
			var j = this._fileIdForURL(k);
			if (!j) {
				return
			}
			this._storeCallback(j, l);
			this._checkAndProcessFileId(j)
		},
		initialize: function(j, l, k) {
			this.cbIdGen = 0;
			this.highWaterMark = l || 10;
			this.lowWaterMark = k || 0;
			this._observers = {};
			this.kvStoreDir = j;
			this._loadKV()
		},
		_loadKV: function() {
			this.kv = new e(this.kvStoreDir + "index.json", this.bind(function() {
				this.mapping = this.kv.getItem("mapping");
				if (!this.mapping) {
					this.kv.setItem("mapping", this.mapping = {})
				} else {
					var l;
					for (var j in this.mapping) {
						if (this.mapping.hasOwnProperty(j)) {
							if ((l = this.kv.getItem(j))) {
								delete l.inFlight;
								delete l.failed;
								delete l.lastError
							}
						}
					}
				}
				NgLogI("RemoteFileCache: loaded index");
				this._storeCacheState()
			}))
		},
		_checkAndProcessFileId: function(j) {
			var k = this.kv.getItem(j);
			if (!k) {
				this.kv.setItem(j, k = {})
			}
			if (k.inFlight) {
				return
			}
			if (k.diskPath && !this.shouldRefresh(j, k)) {
				this._respondForFile(j, k);
				return
			}
			this._beginFetch(j, k)
		},
		_beginFetch: function(j, k) {
			k.inFlight = true;
			k.failed = false;
			delete k.lastError;
			var l = new d.DownloadFile();
			k.tmpPath = this.kvStoreDir + j;
			d.Util.OperationWithRetries(this.bind(function(m, o) {
				var n = [{
					item: "If-None-Match",
					content: k.md5
				}];
				NgLogI("RemoteFileCache: " + k.tmpPath + " Fetching: " + this.mapping[j]);
				l.start(k.tmpPath, "GET", this.mapping[j], n, this.bind(function(p, q) {
					if (p == 200) {
						NgLogI("RemoteFileCache: HTTP 200");
						this._receivedFileToTmp(j, k, q);
						return
					} else {
						if (p == 304) {
							NgLogI("RemoteFileCache: HTTP 304 - Not Modified!");
							this._respondForFile(j, k);
							return
						} else {
							NgLogE("RemoteFileCache: HTTP " + p + " ???");
							k.lastError = {
								httpCode: p
							};
							m()
						}
					}
				}))
			}), this.bind(function() {
				NgLogE("RemoteFileCache: Giving up downloading due to too many errors!");
				k.failed = true;
				this._respondForFile(j, k)
			}));
			this._storeCacheState()
		},
		_receivedFileToTmp: function(j, l, k) {
			l.diskPath = l.tmpPath;
			l.md5 = k;
			delete l.tmpPath;
			this._respondForFile(j, l)
		},
		_respondForFile: function(j, l) {
			l.lastUsed = (new Date()).getTime();
			l.inFlight = false;
			if (!l.failed) {
				delete l.lastError
			}
			this._storeCacheState();
			if (this._observers[j]) {
				var m = this._observers[j];
				this._observers[j] = [];
				for (var k = 0; k < m.length; k++) {
					if (typeof m[k] === "function") {
						m[k](l.lastError, l.diskPath)
					}
				}
			}
			if (this.shouldShrinkCache()) {
				this._recycle()
			}
		},
		_fileIdForURL: function(j) {
			if (!j) {
				return null
			}
			if (!this.mapping[j]) {
				this.mapping[j] = h.toMD5(j);
				this.mapping[this.mapping[j]] = j;
				this._storeCacheState()
			}
			return this.mapping[j]
		},
		_storeCallback: function(j, k) {
			k = k || function() {};
			if (!this._observers[j]) {
				this._observers[j] = []
			}
			this._observers[j].push(k)
		},
		_storeCacheState: function() {
			this.kv.save()
		},
		shouldShrinkCache: function() {
			if (this.mapping && Object.keys(this.mapping).length > this.highWaterMark * 2) {
				return true
			}
			return false
		},
		_recycle: null,
		$RecyclingStyles: {
			lru: function() {
				var m = Object.keys(this.mapping);
				var o = [];
				var n, p, l;
				for (l = 0; l < m.length; l++) {
					n = m[l];
					if ((p = this.kv.getItem(n)) && p.lastUsed) {
						o.push(n)
					}
				}
				var k = function(r, q) {
					return this.kv.getItem(q).lastUsed - this.kv.getItem(r).lastUsed
				};
				o.sort(k);
				var j = o.slice(this.lowWaterMark);
				for (l = 0; l < j.length; l++) {
					this._destroyItem(j[l])
				}
				this._storeCacheState()
			},
			fastest: function() {
				var l = Object.keys(this.mapping);
				var n = [];
				var m, o, k;
				for (k = 0; k < l.length; k++) {
					m = l[k];
					if ((o = this.kv.getItem(m)) && !o.inFlight) {
						n.push(m)
					}
				}
				var j = n.slice(this.lowWaterMark);
				for (k = 0; k < j.length; k++) {
					this._destroyItem(j[k])
				}
				this._storeCacheState()
			}
		},
		_destroyItem: function(j) {
			var k = this.kv.getItem(j);
			if (k.diskPath) {
				f.FileSystem.deleteFile(k.diskPath)
			}
			delete this.mapping[this.mapping[j]];
			delete this.mapping[j];
			this.kv.deleteItem(j)
		}
	});
	var g = c.GameCarouselCache = b.singleton({
		classname: "GameCarouselCache",
		addGame: function(j, k) {
			if (!j || !j.promotionalImage) {
				return
			}
			this.fetchFileForURL(j.promotionalImage, this.bind(function(m, l) {
				if (m) {
					NgLogE("GameCarouselCache Error: failed to fetch image for game: " + j.name + " " + j.promotionalImage);
					NgLogI("GameCarouselCache: Error was: " + JSON.stringify(m))
				} else {
					NgLogI("GameCarouselCache: Successfully got image: " + l);
					this.images[j.recordID] = l.slice(l.indexOf("/"));
					k()
				}
			}))
		},
		readyImageForGame: function(j) {
			return this.images[j.recordID]
		},
		shouldRefresh: function(j, k) {
			if (this._freshCache[k.md5] != j) {
				this._freshCache[k.md5] = j;
				return true
			}
			return false
		},
		initialize: function($super) {
			var j = a.Assets.privSandboxPath();
			if (!j[j.length - 1] == "/") {
				j += "/"
			}
			this._freshCache = {};
			this.images = {};
			$super(j + "GameCarouselCache/", 30, 10);
			this._recycle = b.RecyclingStyles.lru
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger"] = b;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var d = null;
	var e = null;
	var a = b.Logger = (require("NGCore/Client/Core/Class").Class).singleton({
		$ReleaseConfiguration: true,
		$DisableMethodLogging: false,
		$DisableExceptionCallstack: false,
		$DisableDebugLogging: false,
		$DisableErrorLogging: false,
		$DisableAll: false,
		$MethodSeparatorChar: "/",
		$decorate: function(g) {
			if (a.DisableAll || (a.DisableMethodLogging && a.DisableExceptionCallstack)) {
				return g
			}
			if (!g) {
				NgLogE("Logger Error: ", "Can't decorate undefined subclassHash.");
				return null
			}
			for (var f in g) {
				if (g.hasOwnProperty(f) && typeof g[f] === "function") {
					g[f] = e(g.classname, f, g[f])
				}
			}
			return g
		},
		$decorateDescendants: function(f) {
			if (!f) {
				NgLogE("Logger Error: ", "Can't decorateDescendants for an undefined Class.");
				return
			}
			if (!f.prototype.classname) {
				NgLogD("Logger DecoratingDescendants for: " + f.prototype.classname);
				for (var g in f.prototype) {
					if (f.prototype.hasOwnProperty(g)) {
						NgLogD("\t" + g)
					}
				}
			}
			if (!f._LoggerDescendantsDecorated && !a.DisableAll) {
				f._LoggerDescendants_OldSubclass = f.subclass;
				f.subclass = function(j) {
					a.decorate(j);
					var h = this._LoggerDescendants_OldSubclass.apply(this, [j]);
					return h
				}
			}
			a.addLogHelpers(f);
			f._LoggerDescendantsDecorated = true
		},
		$addLogHelpers: function(f) {
			if (!f) {
				NgLogE("Logger Error: ", "Can't addLogHelpers for an undefined Class.");
				return
			}
			if (f._LoggerDescendantsDecorated) {
				return
			}
			f.prototype.logd = function() {
				if (!a.shouldLog(this, this.classname)) {
					return
				}
				var g = Array.prototype.slice.call(arguments);
				g.unshift(": ");
				g.unshift(this.classname);
				a.debug.apply(a, g)
			};
			f.prototype.loge = function() {
				var g = Array.prototype.slice.call(arguments);
				g.unshift(" Error: ");
				g.unshift(this.classname);
				a.error.apply(a, g)
			}
		},
		shouldLog: function(g, j, h) {
			if (a.DisableAll) {
				return false
			}
			if (j && j.search(this._classMatchRegex) != -1) {
				return true
			} else {
				if (h && h instanceof Array) {
					for (var f in h) {
						if (h.hasOwnProperty(f)) {
							if (h[f] in this._activeSubsystems) {
								return true
							}
						}
					}
				} else {
					if (h && typeof h === "string" && h in this._activeSubsystems) {
						return true
					}
				}
			}
			return false
		},
		d: function(f) {
			this.debug.apply(this, Array.prototype.slice.call(arguments))
		},
		debug: function(f) {
			if (a.DisableAll || a.DisableDebugLogging) {
				return
			}
			if (arguments.length > 1) {
				f = Array.prototype.slice.call(arguments)
			}
			NgLogD((f && f instanceof Array) ? f.join(" ") : f)
		},
		e: function(f) {
			this.error.apply(this, Array.prototype.slice.call(arguments))
		},
		error: function(f) {
			if (a.DisableAll || a.DisableErrorLogging) {
				return
			}
			if (arguments.length > 1) {
				f = Array.prototype.slice.call(arguments)
			}
			NgLogE((f && f instanceof Array) ? f.join(" ") : f)
		},
		initialize: function($super) {
			if ($super && typeof "$super" === "function") {
				$super()
			}
			if (a.ReleaseConfiguration) {
				a.DisableMethodLogging = true;
				a.DisableExceptionCallstack = true;
				a.DisableDebugLogging = true
			}
			this._activeClasses = [];
			this._activeClassRegexes = [];
			this._pubInit()
		},
		_pubInit: function() {
			this._isPriv = false;
			(require("NGCore/Client/Storage/FileSystem").FileSystem).readFile("logger_settings.json", this.bind(this._incomingConfigFile))
		},
		_privInit: function() {
			this._isPriv = true;
			(require("NGCore/Client/Storage/FileSystem").FileSystem).readFile(c.loggerSettingsPath(), this.bind(this._incomingConfigFile))
		},
		_incomingConfigFile: function(f, h) {
			if (f) {
				return
			}
			this.d("Logger: Incoming Config File for ", (this._isPriv) ? "priviledged interpreter" : "public interpreter", " err", f, " data ", h);
			var k;
			try {
				k = JSON.parse(h)
			} catch (j) {
				this.d("Logger: Got an unparseable Config File");
				return
			}
			var l;
			var g = "^$";
			if (k.MethodSeparatorChar) {
				a.MethodSeparatorChar = k.MethodSeparatorChar
			}
			if (k.hasOwnProperty("DisableMethodLogging") && k.DisableMethodLogging) {
				a.DisableMethodLogging = k.DisableMethodLogging
			}
			if (k.ActiveClasses) {
				for (l in k.ActiveClasses) {
					if (k.ActiveClasses.hasOwnProperty(l) && k.ActiveClasses[l]) {
						g += "|^" + l + "$"
					}
				}
			}
			if (k.ActiveClassRegexes) {
				for (l in k.ActiveClassRegexes) {
					if (k.ActiveClassRegexes.hasOwnProperty(l) && k.ActiveClassRegexes[l]) {
						g += "|" + l + ""
					}
				}
			}
			this.d("Logger regexStr: ", g);
			this._classMatchRegex = new RegExp(g)
		},
		methodLog: function(f, k, g, h, j) {
			if (a.DisableAll || a.DisableMethodLogging) {
				return
			}
			if (!k) {
				if (f.classname) {
					k = "AnonymousLayer(" + f.classname + ")"
				}
				k = "AnonymousClass"
			}
			if (!this.shouldLog(f, k, j)) {
				return
			}
			if (h && h instanceof Array) {
				h = h.join("")
			}
			this.debug(k, a.MethodSeparatorChar, g, ": ", h)
		},
		subsystem: function(g, f) {
			if (!g) {
				return
			}
			if (g) {
				this.d("UNIMPLEMENTED")
			}
		},
		_anonymousLogEnabled: true,
		_classMatchRegex: null,
		_activeSubsystems: null
	});
	a.instantiate();
	d = function(f) {
		var g = f.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, "").replace(/\s+/g, "").split(",");
		return g.length == 1 && !g[0] ? [] : g
	};
	e = function(k, f, j) {
		var h = d(j);
		var g = (h.length) ? ("$super" === h[0]) : false;
		if (g) {
			return function($super) {
				if (!a.DisableMethodLogging) {
					a.methodLog(this, k, f, " begin")
				}
				try {
					var l = j.apply(this, Array.prototype.slice.call(arguments))
				} catch (m) {
					if (!a.DisableExceptionCallstack) {
						a.error("except-stack:\t\t", k, a.MethodSeparatorChar, f)
					}
					throw m
				}
				if (!a.DisableMethodLogging) {
					a.methodLog(this, k, f, " end")
				}
				return l
			}
		}
		return function() {
			if (!a.DisableMethodLogging) {
				a.methodLog(this, k, f, " begin")
			}
			try {
				var l = j.apply(this, Array.prototype.slice.call(arguments))
			} catch (m) {
				if (!a.DisableExceptionCallstack) {
					a.error("except-stack:\t\t", k, a.MethodSeparatorChar, f)
				}
				throw m
			}
			if (!a.DisableMethodLogging) {
				a.methodLog(this, k, f, " end")
			}
			return l
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MobageBrandSlideIn"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MobageBrandSlideIn"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MobageBrandSlideIn"] = c;
	var e = require("NGCore/Client/UI").UI;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		MobageBrandStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/MobageBrandSlideIn").MobageBrandSlideIn
		}
	});
	var d = function(k, j, g) {
		var m = false;
		var l = function() {
			if (!m) {
				m = true;
				g(true)
			}
		};
		var h = function() {
			if (!m) {
				m = true;
				g(false)
			}
		};
		setTimeout(l, j * 1.5);
		e.animate(k, j, h)
	};
	var f = c.MobageBrandSlideIn = e.Button.subclass({
		classname: "MobageBrandSlideIn",
		initialize: function($super, g, h) {
			$super(g);
			this.touchable = false;
			b.MobageBrandStyle.applyTo(this);
			this.transitionAnimationTime = (a.getPlatformOS().toLowerCase() !== "android") ? 400 : 600;
			this._prepareLayout();
			h.addChild(this)
		},
		_prepareLayout: function() {
			var n = e.Window.getFrame();
			var l = n.w;
			n.inset.apply(n, b.MobageBrandStyle.extras.centerFramePercentInsets);
			this.centerFrame = n;
			var k = n.copy();
			k.x += l;
			this.finalFrame = n.copy();
			this.finalFrame.x -= l;
			this.setFrame(k);
			var g = b.MobageBrandStyle.extras.contentInsetsPercent;
			var j = 0 | (n.h * g / 100);
			var m = 0 | (n.w * g / 100);
			this.setImageInsets(j, m, j, m);
			this.setTextInsets(j, m, j, m)
		},
		slideInAndOut: function(g) {
			this.slideIn(function() {
				setTimeout(function() {
					this.slideOut(g)
				}.bind(this), 2 * this.transitionAnimationTime)
			}.bind(this))
		},
		slideIn: function(g) {
			NgLogD("@@@ mobage MobageBrandSlideIn.slideIn");
			var h = function(j) {
				if (j) {
					this.setFrame(this.centerFrame)
				}
				g()
			}.bind(this);
			d(function() {
				this.setFrame(this.centerFrame)
			}.bind(this), this.transitionAnimationTime, h)
		},
		slideOut: function(g) {
			NgLogD("@@@ mobage MobageBrandSlideIn.slideOut");
			var h = function(j) {
				if (j) {
					this.setFrame(this.finalFrame)
				}
				g()
			}.bind(this);
			d(function() {
				this.setFrame(this.finalFrame)
			}.bind(this), this.transitionAnimationTime, h)
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost"] = f;
	var e = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Device").Device;
	var g = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		_LocalGameList: function() {
			return require("NGCore/Client/Core/_LocalGameList")._LocalGameList
		},
		Host: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Host").Host
		},
		MobageNavLogic: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageNavLogic").MobageNavLogic
		},
		ServiceLinkEmitter: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking").ServiceLinkEmitter
		},
		GameLaunchedEmitter: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		Game: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		GameLaunchPayload: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/GameLaunchPayload").GameLaunchPayload
		},
		ServiceHostView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ServiceHostView").ServiceHostView
		},
		CustomModalDialog: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CustomModalDialog").CustomModalDialog
		}
	});
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var c = g.MessageListener.subclass({
		classname: "GSNavController_orientationListener"
	});
	var h = f.ServiceHost = a.Host.singleton({
		classname: "ServiceHost",
		_runningActiveGame: false,
		_layoutListenerInstance: null,
		_oldOrientation: null,
		_oldActiveGame: null,
		_gameSuspended: false,
		initialize: function($super) {
			$super();
			this.navLogic = (new a.MobageNavLogic.ServiceNavLogic(this)).retain();
			this.navController.setDelegate(this.navLogic);
			this.navController.setLandscapeOnly(true);
			this.navController.view().setFrame(k.guessLandscapeFrameHack());
			this._isInServiceUI = true;
			var l = this;
			this._layoutListenerInstance = k.createLayoutListener(this, function(n) {
				if (n.width > n.height) {
					this.view().setFrame(0, 0, n.width, n.height);
					this.view().layoutSubviews()
				}
				this.view().layoutMenuDrawer(n.width, n.height)
			});
			a._LocalGameList.setFinishGameHandler(this.bind(function() {
				this.navController.back()
			}));
			var m = g.MessageListener.subclass({
				_onLifecycleEvent: function(n) {
					if (n === b.LifecycleEmitter.Event.Suspend) {
						l.closeMenuDrawer();
						l._gameSuspended = true
					} else {
						if (n === b.LifecycleEmitter.Event.Resume) {
							l._gameSuspended = false
						}
					}
					return true
				},
				destroy: function() {
					b.LayoutEmitter.removeListener(this)
				}
			});
			this._lifecycleListenerInstance = new m();
			b.LifecycleEmitter.addListener(this._lifecycleListenerInstance, this._lifecycleListenerInstance._onLifecycleEvent);
			this._globalDownloadListener = new g.MessageListener();
			a.Game.addGlobalDownloadListener(this._globalDownloadListener, this.onGlobalDownloadStatus.bind(this));
			NgLogD("ServiceHost/initialize - going to start listening for service links");
			setTimeout(function() {
				if (!this._serviceLinkListener) {
					this._setupServiceLinkListener()
				}
			}.bind(this), 100)
		},
		destroy: function() {
			this.navLogic.release();
			if (this._serviceHostDlg) {
				this._serviceHostDlg.destroy()
			}
			this._layoutListenerInstance.destroy();
			this._lifecycleListenerInstance.destroy();
			this._globalDownloadListener.destroy()
		},
		_followServiceLink: function(m) {
			var l = this;
			if (m.launchGame) {
				a.Game.getGameWithAppKey(m.launchGame, function(o, n) {
					if (!o) {
						if (n.isAvailableLocally()) {
							a.GameLaunchPayload.onGameLaunchPayload(m.gamePayload)
						}
						d.GameProfile.startGameOrGoToProfile(n, "JSGamePlayDeepLink")
					}
				})
			} else {
				if (m.json.user) {
					a.User.getUserWithGamertag(m.json.user, function(n, o) {
						if (!n) {
							m.json.user = o;
							l.navController.jumpToPageWithJSON(m.page, m.json)
						}
					})
				} else {
					if (m.json.game) {
						a.Game.getGameWithAppKey(m.json.game, function(n, o) {
							if (!n) {
								m.json.game = o;
								l.navController.jumpToPageWithJSON(m.page, m.json)
							}
						})
					} else {
						this.navController.jumpToPageWithJSON(m.page, m.json)
					}
				}
			}
		},
		_setupServiceLinkListener: function() {
			NgLogD("_setupServiceLinkListener " + this);
			if (!this._serviceLinkListener) {
				NgLogD("_setupServiceLinkListener... doing setup " + this);
				var l = this;
				this._serviceLinkListener = new c();
				this._serviceLinkListener._onServiceLinkRecieved = function(m) {
					g.Analytics.reportGameEvent("MobageServiceLaunchedFromPush", m);
					if (m.noDialog || g.Capabilities.getPlatformOS().toLowerCase() === "android" || l._suppressServiceLinkDialog) {
						NgLogD("ServiceHost: Got service link at startup: " + JSON.stringify(m));
						l._followServiceLink(m)
					} else {
						NgLogD("ServiceHost: Got service link: " + JSON.stringify(m));
						if (!l._serviceHostDlg) {
							l._serviceHostDlg = new e.AlertDialog()
						}
						l._serviceHostDlg.setTitle(j("New Notification"));
						l._serviceHostDlg.setText(j(m.alertText));
						l._serviceHostDlg.setChoices([j("Later"), j("View")]);
						l._serviceHostDlg.onchoice = function(n) {
							l._serviceHostDlg.hide();
							if (n.choice === 1) {
								l._followServiceLink(m)
							}
						};
						l._serviceHostDlg.show()
					}
				};
				this._suppressServiceLinkDialog = true;
				a.ServiceLinkEmitter.addListener(this._serviceLinkListener, this._serviceLinkListener._onServiceLinkRecieved);
				setTimeout(function() {
					l._suppressServiceLinkDialog = false
				}, 100)
			}
		},
		loadView: function($super) {
			this.setView(new a.ServiceHostView());
			this.view().setNavControllerView(this.navController.view());
			var l = new e.ViewGeometry.Rect(k.guessLandscapeFrameHack());
			this.view().setFrame(l);
			this.view().layoutSubviews();
			this.setupForHomeScreen(false);
			this.view().backButton.onclick = this.bind(function() {
				this.logd("Back Button Tapped");
				if (this.navController._isTransitioningViews) {
					NgLogD("ServiceHost-backButton tapped but is transitioning views, so no dice!")
				} else {
					this.navController.back()
				}
			});
			this.view().activeGameButton.onclick = this.bind(function() {
				this.logd("ActiveGame Button Tapped");
				if (this.navController._isTransitioningViews) {
					this.logd("ActiveGameButton Tapped, but navController is animating another event. Prevent the button click")
				} else {
					this.showLoadingHelper(function() {
						this.navController.popToViewController(this.navController.getBottomViewController())
					}.bind(this))
				}
			});
			this.navController.pushViewController(new d.GamePlaceholder(this, "AhabTester_hardcoded"))
		},
		show: function($super, l) {
			if (this._showing) {
				this.logd("service instance already showing.");
				return
			}
			this.view().setAlpha(1);
			NgLogD("ServiceHost-show");
			if (a.Session.getCurrentSession() && a.Session.getCurrentSession()._appKey) {
				var m = a.Session.getCurrentSession()._appKey;
				this._runningActiveGame = m && m !== "default-Dev" && m !== "mobage-Dev" && m !== "mobageBoot";
				this._oldActiveGame = m
			} else {
				NgLogE("ERROR: ServiceHost.show() - was unable to get the appKey from imports.Session!");
				this._runningActiveGame = true
			}
			if (this._runningActiveGame) {
				b.LifecycleEmitter.pauseGame()
			}
			if (!this.view().getParent()) {
				e.Window.document.addChild(this.view())
			}
			$super(l);
			this.resurfaceControls();
			setTimeout(this.bind(function() {
				this._oldOrientation = b.OrientationEmitter.getInterfaceOrientation();
				NgLogD("mobage service host opening: rotating to landscape." + this._oldOrientation);
				b.OrientationEmitter.setInterfaceOrientation(b.OrientationEmitter.Orientation.LandscapeLeft)
			}), 1);
			g.Analytics._getPipe().sessionStartEvent()
		},
		hide: function($super) {
			if (!this || !this._showing) {
				this.logd("hide: No Service Instance, or not currently showing");
				return
			}
			$super();
			this.view().setAlpha(254 / 255);
			this.view().removeFromParent();
			this.resurfaceControls(true);
			g.Analytics._getPipe().sessionEndEvent();
			if (this._runningActiveGame) {
				var l = a.Session.getCurrentSession()._appKey;
				if (!d.Main.isLaunchIntoServiceUI || !d.Main.isLaunchIntoServiceUI() || this.hackLaunchedIntoGame) {
					if (l == this._oldActiveGame) {
						NgLogD("mobage service host closing. Restoring Orientation to " + this._oldOrientation);
						b.OrientationEmitter.setInterfaceOrientation(this._oldOrientation)
					}
				}
				this.hackLaunchedIntoGame = true;
				b.LifecycleEmitter.resumeGame()
			}
		},
		isGameSuspended: function() {
			return this._gameSuspended
		},
		isRunningActiveGame: function() {
			return this._runningActiveGame
		},
		setIsRunningActiveGame: function(l) {
			this._runningActiveGame = l
		},
		resurfaceControls: function($super, l) {
			if (!this._showing || l) {
				this.view().mobageButton.removeFromParent();
				this.view().backButton.removeFromParent();
				this.view().activeGameButton.removeFromParent();
				this.view().doneButton.removeFromParent();
				this.view().cancelButton.removeFromParent();
				this.view().currentDownload.setFrame(this.view()._currentDownloadRect);
				this.view().hideTitleBar(true)
			} else {
				this.view().hideTitleBar(false);
				this.view().mobageButton.removeFromParent();
				this.view().backButton.removeFromParent();
				this.view().activeGameButton.removeFromParent();
				this.view().currentDownload.setFrame(this.view()._currentDownloadRect);
				if (this._runningActiveGame) {
					this.view().addChild(this.view().activeGameButton);
					this.view().currentDownload.setFrame(this.view()._currentDownloadRectWithGame)
				}
				if (this._showNavButtons) {
					this.view().addChild(this.view().backButton);
					this.view().addChild(this.view().cancelButton);
					this.view().addChild(this.view().doneButton)
				} else {
					this.view().addChild(this.view().mobageButton)
				}
			}
		},
		hideControls: function() {
			this.view().mobageButton.removeFromParent();
			this.view().backButton.removeFromParent();
			this.view().activeGameButton.removeFromParent();
			this.view().currentDownload.setFrame(this.view()._currentDownloadRect)
		},
		showLoadingHelper: function(l) {
			this.view().spinner.setVisible(true);
			this.view().loadingLabel.setVisible(true);
			setTimeout(function() {
				l()
			}, 1)
		},
		showLoadingLabel: function() {
			this.view().spinner.setVisible(true);
			this.view().loadingLabel.setVisible(true)
		},
		hideLoadingLabel: function() {
			this.view().spinner.setVisible(false);
			this.view().loadingLabel.setVisible(false)
		},
		editMode: function(m, l) {
			if (this._showNavButtons) {
				this.view().editMode(m, l)
			}
		},
		setupForHomeScreen: function(l) {
			if (this.view()) {
				if (this.view().mobageButton) {
					if (l) {
						this.view().mobageButton.setImage(a.Assets.image("mobagelogotm.png"));
						this.view().mobageButton.setImage(a.Assets.image("mobagelogotm.png"), e.State.Pressed);
						this.view().mobageButton.onclick = null
					} else {
						this.view().mobageButton.setImage(a.Assets.image("mobagelogotm.png"));
						this.view().mobageButton.setImage(a.Assets.image("mobagelogotm_down.png"), e.State.Pressed);
						this.view().mobageButton.onclick = this.bind(function() {
							var m = this;
							this.showLoadingHelper(function() {
								m.logd("Home button tapped.");
								m.popToHome()
							})
						})
					}
				}
			}
		},
		onGlobalDownloadStatus: function(n) {
			var l = a.Session.getCurrentSession() ? a.Session.getCurrentSession().user() : null;
			if (l && this._isInServiceUI && this._showing && n.downloading === false && n.error === null) {
				var m = n.game;
				var o = new e.AlertDialog();
				o.setTitle(j("Ready to Play"));
				o.setText(j("Play %1s now!", m.name));
				o.setChoices([j("Play"), j("Not Now")]);
				o.onchoice = function(p) {
					if (p.choice === 0) {
						g.Analytics.reportGameEvent("JSGamePlayDLCompleteDlg", m.recordID);
						m.checkUpdateAndStartGame()
					}
					o.hide()
				};
				o.show()
			}
		},
		setIsInServiceUI: function(l) {
			this._isInServiceUI = l
		},
		showService: function() {
			if (this.navController.getTopViewController() instanceof d.GamePlaceholder) {
				var m = false;
				for (var l = 0; l < this.navController.length; l++) {
					if (this.navController.viewControllerAtIndex(l) instanceof d.Home) {
						m = true;
						break
					}
				}
				if (m) {
					this.navController.back()
				} else {
					this.navController.pushViewController(new d.Home())
				}
			}
		},
		hideService: function() {
			if (!(this.navController.getTopViewController() instanceof d.GamePlaceholder)) {
				this.showLoadingHelper(function() {
					this.navController.popToViewController(this.navController.getBottomViewController())
				}.bind(this))
			}
		},
		menuKeyPressed: function() {
			if (this.view()) {
				return this.view().menuKeyPressed()
			}
			return false
		},
		closeMenuDrawer: function(m, l) {
			if (this.view()) {
				this.view().closeMenuDrawer(m, l)
			}
		},
		isMenuDrawerClosedOrClosing: function() {
			if (this.view()) {
				return this.view().isMenuDrawerClosedOrClosing()
			}
			return true
		},
		popToHome: function() {
			this.navController.pushViewController(new d.Home())
		},
		credentialCheckCB: function(l, m) {
			return function() {
				var n = a.Session.getCurrentSession() ? a.Session.getCurrentSession().user() : null;
				if (n) {
					l()
				} else {
					if (!a.CustomModalDialog.currentDialog) {
						var o = new a.CustomModalDialog()
					}
					if (m) {
						m()
					}
				}
			}
		},
		credentialCheck: function() {
			return a.Session.getCurrentSession() && a.Session.getCurrentSession().user()
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking"] = a;
	var b = a.DeepLinking = {
		parseMobageWWLink: function(p) {
			var l = "mobage-ww-";
			var m = p.search(l);
			if (m !== -1) {
				p = p.substring(m + l.length, p.length);
				var j = "://";
				var y = p.search(j);
				if (y != -1) {
					var s = p.substring(0, y);
					p = p.substring(y + j.length, p.length);
					var t = p.split("/");
					if (t.length < 3) {
						return null
					}
					var o = t[0];
					var h = t[1];
					var k = t[2];
					var n;
					if (k === "ServiceUI") {
						var f = t[3].split("?");
						var g = f[0];
						var x = {};
						if (f.length > 1) {
							var w = f[1].split(",");
							for (n = 0; n < w.length; n++) {
								if (w[n].search("payload=") === 0) {
									var d = w[n].split("=");
									try {
										x = JSON.parse(d[1])
									} catch (v) {
										NgLogE("DeepLinking failed to parse a Page payload.")
									}
								}
							}
						}
						return {
							alertText: "<Forgot alertText!>",
							app_key: o,
							version: h,
							page: g,
							json: x
						}
					} else {
						if (k === "LaunchGame") {
							var u = t[3].split("?");
							var z = u[0];
							var r = {};
							if (u.length > 1) {
								var c = u[1].split(",");
								for (n = 0; n < c.length; n++) {
									if (c[n].search("payload=") === 0) {
										var q = c[n].split("=");
										try {
											r = JSON.parse(q[1])
										} catch (v) {
											NgLogE("DeepLinking failed to parse a Game payload.")
										}
									}
								}
							}
							return {
								alertText: "<Forgot alertText!>",
								app_key: o,
								version: h,
								launchGame: z,
								gamePayload: r
							}
						}
					}
				}
			}
			return null
		}
	};
	a.ServiceLinkEmitter = (require("NGCore/Client/Core/Class").Class).singleton({
		initialize: function() {},
		addListener: function(e, c) {
			var d = false;
			if (!this._messageEmitter) {
				d = true;
				this._messageEmitter = new(require("NGCore/Client/Core/MessageEmitter").MessageEmitter)()
			}
			this._messageEmitter.addListener(e, c);
			if (d && this._launchServiceLink) {
				this._messageEmitter.emit(this._launchServiceLink);
				this._launchServiceLink = null
			}
		},
		onLink: function(c) {
			if (this._messageEmitter) {
				this._messageEmitter.emit(c)
			} else {
				this._launchServiceLink = c
			}
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase"] = g;
	var n = require("NGCore/Client/Core/Analytics").Analytics;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankController").BankController;
	var p = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Balance").Balance;
	var k = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/Device");
	var h = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest;
	var o = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var m = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Transaction").Transaction;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var r = require("NGCore/Client/Storage").Storage;
	var e = require("NGCore/Client/UI").UI;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DataType").DataType;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/PreparedAction").PreparedAction;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CustomModalDialog").CustomModalDialog;
	g.Purchase = k.Class.singleton({
		classname: "Purchase",
		_cache: null,
		$_ASYNC_TXNS_KEY: "com.mobage.ww.purchase.asycntxns",
		initialize: function() {},
		cache: function() {
			if (this._cache === null) {
				this._cache = {}
			}
			return this._cache
		},
		createTxn: function(s, v, y) {
			var x = new Array();
			var A;
			for (var u = 0; u < s.length; u++) {
				var w = new j.Bank.BillingItem(s[u]);
				if (!w.isValid()) {
					NgLogD("Mobage/Debit: cb for createTxn invaliditem");
					y({
						errorCode: 400,
						description: w.getErr()
					}, null);
					return
				}
				A = {
					id: w.getItemId(),
					quantity: w.getQuantity()
				};
				x.push(A)
			}
			var t = v;
			var z = this;
			NgLogD("Mobage/Debit: getDebitItems - invoked");
			z.getDebitItems(x, function(H, E) {
				NgLogD("Mobage/Debit: getDebitItems - cb " + H);
				if (H) {
					NgLogD("Mobage/Debit: cb for createTxn " + H);
					y(H);
					return
				}
				var F = 0;
				var D = "";
				for (var C in x) {
					var G = x[C];
					var I = E[G.id];
					if (H || (!I)) {
						var B = (new e.AlertDialog()).retain();
						B.setTitle(o("Error"));
						B.setText(o("Sorry, this item is currently not available."));
						B.setChoices([o("OK")]);
						B.onchoice = function(J) {
							NgLogD("Mobage/Debit: cb for createTxn unavailableitem:" + H);
							y("unavailableitem:" + H);
							B.release();
							B = null
						};
						B.show();
						return
					}
					F = F + I.price * G.quantity;
					if (G.quantity === 1) {
						D = D + " " + I.name
					} else {
						D = D + " " + G.quantity + " " + I.name
					}
				}
				NgLogD("Mobage/Debit: Balance - invoked");
				p.get(function(M, O, N, L) {
					NgLogD("Mobage/Debit: Balance - cb " + M);
					if (M || (!O)) {
						var K = (new e.AlertDialog()).retain();
						K.setTitle(o("No Network Connection"));
						K.setText(o("Please check your network connection settings."));
						K.setChoices([o("OK")]);
						K.onchoice = function(P) {
							NgLogD("Mobage/Debit: cb for createTxn unavailablebalance:" + H);
							y("unavailablebalance:" + H);
							K.release();
							K = null
						};
						K.show();
						return
					}
					if (N >= F) {
						NgLogD("DebitAPI: sufficient balance: " + N + " requested: " + F);
						NgLogD("Mobage/Debit: Transaction.create - invoked");
						m.create(s, t, function(P, Q) {
							NgLogD("Mobage/Debit: Transaction.create - cb " + P);
							if (P || (!Q)) {
								NgLogD("Mobage/Debit: cb for createTxn cannotcreatetxn:" + P);
								y("cannotcreatetxn:" + P, Q);
								return
							}
							var R = o("Would you like to purchase %1s for %2d %3s?", D, F, L);
							z._showConfirmDialog(R, Q, y)
						})
					} else {
						NgLogD("DebitAPI: insufficient balance: " + N + " requested: " + F);
						y({
							errorCode: -1,
							description: "usercanceled"
						});
						var J = (new e.AlertDialog()).retain();
						J.setTitle(o("Not Enough MobaCoin"));
						J.setText(o("Your balance of %1d is insufficient. Get more from the Bank!", N));
						J.setChoices([o("OK")]);
						J.onchoice = function(P) {
							z._showBank(l.navController);
							J.release();
							J = null
						};
						J.show()
					}
				})
			})
		},
		openTxn: function(u, t) {
			var s = this;
			m.open(u, function(w, x, v) {
				if (w) {
					t(w, x);
					return
				}
				s.updateAndGetTxn(x, v, t)
			})
		},
		continueTxn: function(v, u) {
			var t = this;
			var s = u;
			this.updateAndGetTxn(v, "SAME_STATE", function(x, z) {
				if (x) {
					s(x, z)
				} else {
					var w = z.item;
					var y = o("Would you like to purchase %1s?", w.display_name);
					t._showConfirmDialog(y, v, s)
				}
			})
		},
		closeTxn: function(u, t) {
			var s = this;
			m.close(u, function(w, x, v) {
				if (w) {
					NgLogD("Mobage/Purchase: closeTxn received error " + w);
					t(w, x);
					return
				}
				s.updateAndGetTxn(x, v, t)
			})
		},
		_getOSParam: function() {
			if (m._isIOS()) {
				return "?os=ios"
			} else {
				return "?os=Android"
			}
		},
		getOpenTxns: function(u) {
			var s = this;
			var t = h.newBankRequest();
			t.setApiMethod("bank/debit" + s._getOSParam());
			t.setHttpMethod("GET");
			t.setHttpHeaders({
				"Content-Type": "application/json; charset=utf-8"
			});
			t.sendRetry(function(y, z, A, w) {
				var v = undefined;
				var x = undefined;
				if (z && z.success) {
					v = z.transactions
				}
				if (u && typeof u == "function") {
					u(s.getError(y, z, w), v)
				}
			})
		},
		getError: function(u, v, s) {
			var t = undefined;
			if (v && v.success) {
				return t
			}
			if (v && !v.success) {
				t = {
					errorCode: v.error,
					description: v.error_msg
				}
			} else {
				t = {
					errorCode: 999,
					description: "failed:status=" + s + "&err=" + u
				}
			}
			return t
		},
		getTxn: function(t, s) {
			return this.updateAndGetTxn(t, "SAME_STATE", s)
		},
		updateAndGetTxn: function(y, u, x) {
			NgLogD("Mobage/Purchase: updateAndGetTxn entry with txn " + y + " and state " + u);
			if (u === undefined) {
				NgLogD("Mobage/Purchase: cb for updateAndGetTxn (undef)");
				x(undefined, undefined);
				return
			}
			var s = this;
			var w = s.cache();
			var v = w[y];
			if (v === undefined) {
				var t = h.newBankRequest();
				t.setApiMethod("bank/debit/" + y + s._getOSParam());
				t.setHttpMethod("GET");
				t.setHttpHeaders({
					"Content-Type": "application/json; charset=utf-8"
				});
				NgLogD("Mobage/Purchase: http request to update cache");
				t.sendRetry(function(A, B, C, z) {
					NgLogD("Mobage/Purchase: update cache callback " + A);
					if (B && B.success) {
						v = B.transaction;
						w[y] = v
					}
					if (x && typeof x == "function") {
						NgLogD("Mobage/Purchase: cb for updateAndGetTxn (debitget)");
						x(s.getError(A, B, z), v)
					}
				})
			} else {
				if (u === "SAME_STATE") {
					NgLogD("Mobage/Purchase: cb for updateAndGetTxn (samestate)");
					x(undefined, v)
				} else {
					NgLogD("DebitAPI: Getting transaction object from cache");
					w[y].state = u;
					if (u.toLowerCase() === "canceled" || u.toLowerCase() === "closed") {
						delete w[y]
					}
					if (x && typeof x == "function") {
						NgLogD("Mobage/Purchase: cb for updateAndGetTxn (cache)");
						x(undefined, v)
					}
				}
			}
		},
		cancelTxn: function(u, t) {
			var s = this;
			m.cancel(u, function(w, x, v) {
				if (w) {
					t(w, x);
					return
				}
				s.updateAndGetTxn(x, v, t)
			})
		},
		$_inited: false,
		getDebitItems: function(v, s) {
			var u = this;
			var t = {};
			var w = v.length;
			var y = 0;
			for (var x = 0; x < v.length; x++) {
				var z = v[x].id;
				this.getItem(z, function(B, A) {
					if (A) {
						t[A.id] = {
							price: A.price,
							name: A.name
						};
						y = y + 1;
						if (y === w) {
							s(B, t)
						}
					} else {
						s("ItemNotFound:" + z, t);
						return
					}
				})
			}
		},
		getItem: function(v, s) {
			var t = this;
			var u = h.newBankRequest();
			u.setApiMethod("bank/items/" + v + t._getOSParam());
			u.setHttpMethod("GET");
			u.setHttpHeaders({
				"Content-Type": "application/json; charset=utf-8"
			});
			u.sendRetry(function(y, z, A, w) {
				NgLogD("data = " + JSON.stringify(z));
				var x = undefined;
				if (z && (z.item)) {
					x = {
						id: z.item.sku,
						price: z.item.value,
						description: z.item.description,
						imageUrl: z.item.image_url,
						name: z.item.display_name
					}
				}
				if (s && ((typeof s) === "function")) {
					s(t.getError(y, z, w), x)
				}
			})
		},
		_showBank: function(y) {
			if (m._isIOS()) {
				l.hideLoadingLabel();
				var v = (new e.Toast({
					text: o("Coming soon!")
				})).retain();
				v.ondisappear = function() {
					v.release();
					v = null
				};
				v.show();
				return
			}
			if (!g.Purchase._bankIsAvailable()) {
				var s = (new e.AlertDialog()).retain();
				s.setTitle(o("Error"));
				s.setText(o("Sorry, the Bank is not supported."));
				s.setChoices([o("OK")]);
				s.show();
				s.onchoice = function() {
					s.release();
					s = null
				};
				return
			}
			var u = this;
			var t = new e.View();
			t.onclick = function(A) {};
			var x = e.Window.getWidth();
			var z = e.Window.getHeight();
			if (e.Window.getHeight() > e.Window.getWidth()) {
				x = e.Window.getHeight()
			} else {
				z = e.Window.getWidth()
			}
			var w = new e.ViewGeometry.Rect(0, 0, z, x);
			t.setFrame(w);
			e.Window.document.addChild(t);
			m.getItems(true, function(C, A) {
				if (C || (!A) || (A.length <= 0)) {
					if (C) {
						NgLogD("Mobage/Purchase err = " + C)
					}
					var B = (new e.AlertDialog()).retain();
					B.setTitle(o("Error"));
					B.setText(o("Sorry, the Bank is not available. Please try again later."));
					B.setChoices([o("OK")]);
					B.onchoice = function(D) {
						B.release();
						B = null
					};
					B.show();
					t.destroy();
					return
				}
				y.pushViewController(new c(A, function(E, D) {
					NgLogD("User tapped Buy for credit item " + E);
					u.invokeIAP(E, D)
				}, function() {
					NgLogD("Exited Bank Controller")
				}));
				t.destroy()
			})
		},
		invokeIAP: function(t, s) {
			this._invokeIAPAux(t, s);
			return
		},
		$_handleFailedCredit: function(w, u, t, s) {
			var v = r.KeyValueCache.local;
			if (!v) {
				r.KeyValueCache.init();
				v = r.KeyValueCache.local
			}
			v.getItem(g.Purchase._ASYNC_TXNS_KEY, function(A, z) {
				var y = [];
				try {
					if (z && (z.length >= 2)) {
						y = JSON.parse(z)
					}
				} catch (B) {
					NgLogE("Purchase.$_handleFailedCredit failed to parse JSON data.")
				}
				var C = {
					productIdentifier: w,
					receipt: u,
					jsonorder: t
				};
				y.push(C);
				var x = JSON.stringify(y);
				v.setItem(g.Purchase._ASYNC_TXNS_KEY, x, function() {
					NgLogD("Mobage/Purchase: after saving failed order for " + w + ", list size is " + y.length);
					s()
				})
			})
		},
		_invokeIAPAux: function(u, s) {
			var t = this;
			if (m._isIOS()) {
				u = "WEBGAME_TEST_B"
			}
			NgLogD("_invokeIAPAux about to launch with: " + u);
			n.reportGameEvent("MobaIAPConfirmShown", u);
			d.Device.InAppPurchase.launchPurchaseView(u, 1, function(y, z, x, w, v) {
				NgLogD("_invokeIAPAux received order " + z + " for " + u);
				n.reportGameEvent("MobaReceivedTxn", {
					prodid: u,
					orderid: z
				});
				v(true);
				m.credit("", u, 1, x, w, function(A, B) {
					NgLogD("_invokeIAPAux forwarded order " + z + " err: " + A);
					n.reportGameEvent("MobaForwardedTxn", {
						orderid: z,
						error: A
					});
					if (A) {
						g.Purchase._handleFailedCredit(u, x, w, function() {
							var C = (new e.AlertDialog()).retain();
							C.setTitle(o("Error"));
							C.setText(o("Order was charged but there was an error fulfilling it. The system will retry your order next time you restart the game."));
							C.setChoices([o("OK")]);
							C.onchoice = function(D) {
								C.release();
								C = null;
								s("failed")
							};
							C.show();
							return
						});
						return
					}
					m.closeCreditTxn(B, function(C) {
						NgLogD("Mobage/Purchase: close credit completed : " + C)
					});
					s(undefined)
				})
			}, function(w, v) {
				NgLogD("_invokeIAPAux failed for " + u);
				n.reportGameEvent("MobaIAPFailed", u);
				s("failed:" + v + ",noMoreRetry:" + w)
			}, function() {
				NgLogD("_invokeIAPAux cancelled for " + u);
				n.reportGameEvent("MobaIAPCancelled", u);
				s("cancelled")
			})
		},
		_showConfirmDialog: function(v, t, w) {
			var u = (new e.AlertDialog()).retain();
			var s = this;
			u.setTitle(o("Are you sure you want to purchase this item?"));
			u.setText(v);
			u.setChoices([o("Yes"), o("No")]);
			u.onchoice = function(x) {
				NgLogD("createTransaction: User chose " + JSON.stringify(x));
				if (x.choice !== 0) {
					m.cancel(t, function(z, A, y) {
						if (z || (!A)) {
							w(z, A);
							return
						}
						s.updateAndGetTxn(A, y, function(C, B) {
							NgLogD("Mobage/Debit: cb for createTxn userrefused:" + C);
							w({
								errorCode: -1,
								description: "usercanceled"
							})
						})
					});
					return
				}
				u.release();
				u = null;
				NgLogD("Mobage/Debit: Transaction.authorize - invoked");
				m.authorize(t, function(z, A, y) {
					NgLogD("Mobage/Debit: Transaction.authorize - cb " + z);
					if (z || (!A)) {
						NgLogD("Mobage/Debit: cb for createTxn not authorized: " + z);
						w(z, A);
						return
					}
					s.updateAndGetTxn(A, y, w)
				})
			};
			u.show()
		},
		$_bankIsAvailable: function() {
			if (!m._isIOS()) {
				return true
			}
			var s = f.getCurrentSession().appKey();
			return (s != "mobageBoot") && (s != "mobage-Dev")
		},
		$retryFailedCredits: function() {
			d.Device.InAppPurchase.initService(function(v, s, u, t, w) {
				NgLogD("Saving async order " + s + " for " + v);
				n.reportGameEvent("MobaReceivedTxn2", {
					prodid: v,
					orderid: s
				});
				g.Purchase._handleFailedCredit(v, u, t, function() {
					NgLogD("Saved async order " + s);
					w()
				})
			}, function() {
				NgLogD("Finished initService");
				g.Purchase._inited = true;
				g.Purchase.retryFailedCreditsAux()
			})
		},
		$retryFailedCreditsAux: function() {
			if (g.Purchase._retryFailedCreditsInProgress) {
				NgLogD("Mobage/Purchase: NOT retrying previous orders - another in progress");
				return
			}
			NgLogD("Mobage/Purchase: START retrying previous orders");
			g.Purchase._retryFailedCreditsInProgress = true;
			var s = r.KeyValueCache.local;
			if (!s) {
				r.KeyValueCache.init();
				s = r.KeyValueCache.local
			}
			g.Purchase._retryOneFailedCredits(s)
		},
		$_retryFailedCreditsInProgress: false,
		$_retryOneFailedCredits: function(s) {
			s.getItem(g.Purchase._ASYNC_TXNS_KEY, function(w, u) {
				if (!u || (u.length <= 0)) {
					NgLogD("Mobage/Purchase: STOP retrying previous orders - no order found");
					g.Purchase._retryFailedCreditsInProgress = false;
					return
				}
				var t = [];
				try {
					t = JSON.parse(u)
				} catch (x) {
					NgLogE("Purchase.$_retryOneFailedCredit failed to parse JSON data.")
				}
				if (isNaN(t.length) || t.length <= 0) {
					NgLogD("Mobage/Purchase: STOP retrying previous orders - empty list");
					g.Purchase._retryFailedCreditsInProgress = false;
					return
				}
				NgLogD("Mobage/Purchase: will retry " + t.length + " previous order(s).");
				var v = t.pop();
				n.reportGameEvent("MobaRetryTxn2", {
					prodid: v.productIdentifier,
					jsonorder: v.jsonorder
				});
				m.credit("", v.productIdentifier, 1, v.receipt, v.jsonorder, function(z, B) {
					n.reportGameEvent("MobaForwardedTxn2", {
						prodid: v.productIdentifier,
						jsonorder: v.jsonorder,
						error: z
					});
					if (z) {
						NgLogD("Mobage/Purchase: STOP retrying previous orders - retry failed for product id " + v.productIdentifier);
						g.Purchase._retryFailedCreditsInProgress = false;
						return
					}
					var A = o("Your previous order is now successfully credited.");
					NgLogD("Mobage/Purchase: show local notification");
					d.Device.LocalNotification.showLocalNotification({
						openurl: "mobage-ww-mobageBoot://mobageBoot/1/ServiceUI/Catalog",
						aps: {
							alert: A
						}
					});
					var y = JSON.stringify(t);
					s.setItem(g.Purchase._ASYNC_TXNS_KEY, y, function() {
						NgLogD("Mobage/Purchase: retry successful for product " + v.productIdentifier + ", will retry another " + t.length + " previous order(s).");
						g.Purchase._retryOneFailedCredits(s)
					})
				})
			})
		}
	});
	var q = g.ShowBankAction = b.subclass({
		classname: "ShowBankAction",
		$PreparedState: {
			NotPrepared: 0,
			NotCredentialed: 1,
			ComingSoon: 2,
			Unsupported: 3,
			Unavailable: 4,
			Successful: 5
		},
		_preparedState: 0,
		_bankController: null,
		initialize: function($super) {
			$super()
		},
		onPrepare: function() {
			this._preparedState = q.PreparedState.NotPrepared;
			if (!l.credentialCheck()) {
				this._preparedState = q.PreparedState.NotCredentialed;
				this.prepared()
			} else {
				if (m._isIOS()) {
					this._preparedState = q.PreparedState.ComingSoon;
					this.prepared()
				} else {
					if (!g.Purchase._bankIsAvailable()) {
						this._preparedState = q.PreparedState.Unsupported;
						this.prepared()
					} else {
						var s = this;
						m.getItems(true, function(u, t) {
							if (u || (!t) || (t.length <= 0)) {
								if (u) {
									NgLogD("Mobage/Purchase err = " + u)
								}
								s._preparedState = q.PreparedState.Unavailable;
								s.prepared()
							} else {
								s._bankController = new c(t, function(w, v) {
									NgLogD("User tapped Buy for credit item " + w);
									g.Purchase.invokeIAP(w, v)
								}, function() {
									NgLogD("Exited Bank Controller")
								});
								s._preparedState = q.PreparedState.Successful;
								s.prepared()
							}
						})
					}
				}
			}
		},
		onExecute: function() {
			switch (this._preparedState) {
				case q.PreparedState.NotPrepared:
					throw new Error("Bank Action not Prepared!");
					break;
				case q.PreparedState.NotCredentialed:
					if (!a.currentDialog) {
						new a()
					}
					break;
				case q.PreparedState.ComingSoon:
					l.hideLoadingLabel();
					var u = (new e.Toast({
						text: o("Coming soon!")
					})).retain();
					u.ondisappear = function() {
						u.release();
						u = null
					};
					u.show();
					break;
				case q.PreparedState.Unsupported:
					var s = (new e.AlertDialog()).retain();
					s.setTitle(o("Error"));
					s.setText(o("Sorry, the Bank is not supported."));
					s.setChoices([o("OK")]);
					s.show();
					s.onchoice = function() {
						s.release();
						s = null
					};
					break;
				case q.PreparedState.Unavailable:
					var t = (new e.AlertDialog()).retain();
					t.setTitle(o("Error"));
					t.setText(o("Sorry, the Bank is not available. Please try again later."));
					t.setChoices([o("OK")]);
					t.onchoice = function(v) {
						t.release();
						t = null
					};
					t.show();
					break;
				case q.PreparedState.Successful:
					l.navController.pushViewController(this._bankController);
					break;
				default:
					throw new Error("JSLint Sucks");
					break
			}
			l.hideLoadingLabel();
			this.executed();
			this._isPrepared = false;
			this._hasExecuted = false
		},
		cancel: function() {
			this._preparing = false;
			this._isPrepared = false;
			this._preparedState = q.PreparedState.NotPrepared
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Push"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Push"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Push"] = b;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var c = require("NGCore/Client/Core").Core;
	var a = b.Push = {
		_listeningForPush: false,
		_currentDeviceToken: null,
		_handlePushNotification: function(g) {
			var f = {};
			try {
				f = JSON.parse(g)
			} catch (l) {
				NgLogE("GameService Push Error: _handlePushNotification got an unparseable push payload.")
			}
			var j = null;
			if (f.openurl) {
				j = f.openurl
			} else {
				for (var h in f) {
					if (h !== "" && h !== "aps") {
						j = h;
						break
					}
				}
			}
			if (j) {
				NgLogD("GameService: Got push: " + g + " - Push payload = " + j);
				var k = (require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking").DeepLinking).parseMobageWWLink(j);
				if (k) {
					if (c.Capabilities.getIsDisaggregated() && k.launchGame && k.launchGame == d.Session.getCurrentSession().appKey()) {
						require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/GameLaunchPayload").GameLaunchPayload.onGameLaunchPayload(k.gamePayload)
					} else {
						k.alertText = f.aps.alert;
						(require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DeepLinking").ServiceLinkEmitter).onLink(k)
					}
				}
			} else {
				NgLogD("GameService: Got push: " + g + " - No push payload")
			}
			return false
		},
		_registerAppForPush: function(f) {
			NgLogD("GameService: Registering for push notifications.");
			var e = function(g) {
				NgLogD("GameService: About to update session with device token: " + g);
				(require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest")).PlusRequest.updateSessionDeviceToken(g, function(h, j) {
					if (typeof h != "undefined" || typeof j == "undefined" || j.success === false) {
						NgLogD("GameService: Device update token encountered err: " + h)
					} else {
						NgLogD("GameService: Device token update succeeded...");
						a.beginListeningForPushNotifications()
					}
				})
			};
			if (a._currentDeviceToken) {
				e(a._currentDeviceToken)
			} else {
				(require("NGCore/Client/UI/SystemBinding")).SystemBinding.getDeviceToken(function(g) {
					if (g.success === true) {
						e(g.devicetoken)
					} else {
						NgLogD("GameService: Unable to obtain device token, NOT updating session... Err: " + g.error);
						NgLogD("GameService: Retrying push reg in 5 seconds...");
						if (!f) {
							f = 1
						} else {
							f++
						}
						if (f < 3) {
							setTimeout(function() {
								a._registerAppForPush(f)
							}, 5000)
						}
					}
				})
			}
		},
		beginListeningForPushNotifications: function() {
			if (a._listeningForPush) {
				return
			}
			NgLogD("GameService: Listening for push notification events.");
			var e = new c.MessageListener();
			e.destroy = function() {
				(require("NGCore/Client/Device").Device).PushNotificationEmitter.removeListener(e)
			};
			e.onPushRecivedFn = function(f) {
				return b.Push._handlePushNotification(f)
			};
			(require("NGCore/Client/Device").Device).PushNotificationEmitter.addListener(e, e.onPushRecivedFn);
			a._listeningForPush = true
		},
		enablePushRegistration: function() {
			b.Push.onLoginListener = new c.MessageListener();
			b.Push.onLoginListener.onLogin = function(e) {
				b.Push._registerAppForPush()
			};
			b.Push.onSessionListener = new c.MessageListener();
			b.Push.onSessionListener.onSession = function(e) {
				e.session.addListener(b.Push.onLoginListener, b.Push.onLoginListener.onLogin);
				if (e.session.user()) {
					b.Push._registerAppForPush()
				}
			};
			d.Session.addCurrentSessionListener(b.Push.onSessionListener, b.Push.onSessionListener.onSession)
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/QuitOnBackListener"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/QuitOnBackListener"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/QuitOnBackListener"] = c;
	var e = require("NGCore/Client/Core/MessageListener").MessageListener;
	var d = require("NGCore/Client/Device").Device;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Analytics: function() {
			return require("NGCore/Client/Core/Analytics").Analytics
		},
		Capabilities: function() {
			return require("NGCore/Client/Core/Capabilities").Capabilities
		},
		AlertDialog: function() {
			return require("NGCore/Client/UI/AlertDialog").AlertDialog
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	c.QuitOnBackListener = e.singleton({
		_confirmDialog: null,
		initialize: function($super) {
			$super();
			b.UnspammableButton.addDeviceKeyListener(this, function(f) {
				this.confirmExit(f)
			}.bind(this), 1)
		},
		_instantiateView: function() {
			if (!this._confirmDialog) {
				var f = this;
				this._confirmDialog = new b.AlertDialog();
				this._confirmDialog.setTitle(a("Goodbye"));
				this._confirmDialog.setText(a("Would you like to quit?"));
				var h = 1;
				var g = [a("No"), a("Yes")];
				if (b.Capabilities.getPlatformOS().toLowerCase() === "android") {
					g = [a("Yes"), a("No")];
					h = 0
				}
				this._confirmDialog.setChoices(g);
				this._confirmDialog.onchoice = function(j) {
					if (j.choice === h) {
						b.Analytics.reportGameEvent("UserInitiatedMobageQuit");
						d.LifecycleEmitter.exitProcess()
					} else {
						f._confirmDialog.hide()
					}
				}
			}
		},
		confirmExit: function(f) {
			if ((f.code === d.KeyEmitter.Keycode.backunhandled) || (f.code === d.KeyEmitter.Keycode.back && b.ServiceHost.isShowing())) {
				this._instantiateView();
				this._confirmDialog.show();
				return true
			}
			return false
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Localization"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Localization"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Localization"] = c;
	var e = require("NGCore/Client/Core/Localization").LocalizationEngine;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		}
	});

	function d(j, m, o, k) {
		var l = j.substring(0, o);
		var n = j.substring(o + k, j.length);
		return l + m + n
	}
	var f = [];

	function h(j) {
		return f[j] || (f[j] = new RegExp("%" + j + "(?:;([^a-z]+))?([sd])"))
	}
	var g = e.subclass({
		_language: "en",
		setLanguage: function($super, j) {
			if (!a.isLocalizationEnabled()) {
				NgLogD("Device requested language: '" + j + "' but unfortunately localization is disabled for Mobage.US ");
				this._language = "en";
				$super("en")
			} else {
				this._language = j;
				$super(j)
			}
		},
		trackMissingStrings: false,
		logMissingStrings: true,
		_missingStrings: [],
		initialize: function($super) {
			var j = b.Assets.localizationsPath();
			NgLogD("Narwhal Localization: " + j);
			$super(j)
		},
		getLanguage: function() {
			return this._language
		},
		getAcceptLanguage: function() {
			return this._language
		},
		getFormattedString: function(k) {
			var n = this.getString(k);
			for (var l = 1; l < arguments.length; l++) {
				var j = h(l).exec(n);
				if (j) {
					try {
						n = d(n, this._formatPattern(j[2], j[1], arguments[l]), j.index, j[0].length)
					} catch (m) {}
				}
			}
			return n
		},
		_formatPattern: function(l, j, k) {
			if (l == "s") {
				return String(k)
			} else {
				if (l == "d") {
					if (j) {
						if (isNaN(Number(j))) {
							throw new Error("Pattern parameters parse error")
						}
						return this.getNumber(k, Number(j))
					} else {
						return this.getNumber(k)
					}
				}
			}
			throw new Error("Unrecognized format pattern.")
		},
		getNumber: function(q, k) {
			if (typeof q != "number") {
				throw new Error("Number argument expected.")
			}
			var r = k === undefined ? String(q) : q.toFixed(k);
			var p = /(-?)(\d+)(?:\.(\d+))?(e[+-]\d+)?/.exec(r);
			if (!p) {
				return r
			}
			var l = p[2];
			var o = [];
			for (var m = l.length - 3; m > -3; m -= 3) {
				o.unshift(l.substr(Math.max(m, 0), Math.min(3 + m, 3)))
			}
			var j = this.getString("digit_group_separator");
			var n = this.getString("decimal_mark");
			if (j == "digit_group_separator") {
				j = ","
			}
			if (n == "decimal_mark") {
				n = "."
			}
			return p[1] + o.join(j) + (p[3] ? n + p[3] : "") + (p[4] || "")
		},
		formatDateFromServerString: function(n) {
			var k = 0;
			var j = n.indexOf("-", k);
			var m = n.substring(k, j);
			k = j + 1;
			j = n.indexOf("-", k);
			var o = n.substring(k, j);
			k = j + 1;
			j = n.indexOf("T", k);
			var l = n.substring(k, j);
			return this.getFormattedString("%1s/%2s/%3s", o, l, m)
		},
		unknownString: function(j) {
			if (this.logMissingStrings) {
				NgLogE("Narwhal Localization: Missing String for key '" + j + "' for " + this._lang + "(" + this._missingStrings.length + ")")
			}
			if (this.trackMissingStrings && j && !(j in this._missingStrings)) {
				this._missingStrings.push(j)
			}
			return j
		},
		printMissingStrings: function() {
			NgLogD("Narwhal Localization discovered " + this._missingStrings.length + " unlocalized strings in this run. They are listed as follows: ");
			for (var j in this._missingStrings) {
				if (!this._missingStrings.hasOwnProperty(j)) {
					continue
				}
				NgLogD('\t"' + this._missingStrings[j] + '"')
			}
			NgLogD("Narwhal Localization missing string listing finished.")
		}
	});
	c.Localization = g.singleton({});
	c.LocalizedString = function(j) {
		return c.Localization.getFormattedString.apply(c.Localization, Array.prototype.slice.call(arguments))
	};
	c.LocalizedDate = function(j) {
		return c.Localization.formatDateFromServerString(j)
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Whitelist"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Whitelist"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Whitelist"] = a;
	a.isWhitelisted = function(b) {
		switch (b) {
			case "PC36100":
			case "ADR6300":
			case "HTC Desire":
			case "Desire HD":
			case "HTC Glacier":
			case "DROIDX":
			case "DROID2":
			case "SCH-I500":
			case "SAMSUNG-SGH-I897":
			case "GT-I9100":
			case "Nexus S":
			case "Nexus S 4G":
			case "Galaxy Nexus":
			case "GT-P6800":
				return true;
			default:
				return false
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics"] = c;
	var e = require("NGCore/Client/Core").Core;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Destinations: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations
		}
	});
	var d = function(g) {
		if (g == "_BACKBUTTON") {
			return g
		} else {
			if (g && g.analyticsName) {
				var f = g.analyticsName;
				if (typeof f == "function") {
					f = f()
				}
				return f
			} else {
				if (g && g.classname) {
					return g.classname
				}
			}
		}
		return "UNKNOWN"
	};
	var b = c.MobageAnalytics = e.Class.singleton({
		classname: "MobageAnalytics",
		logNavEvent: function(l, k, g) {
			if (l && l instanceof a.Destinations.VerticalTabController && l.curSelectedView && l.curSelectedView.controller) {
				l = l.curSelectedView.controller || l
			}
			if (k && k instanceof a.Destinations.VerticalTabController && k.curSelectedView && k.curSelectedView.controller) {
				k = k.curSelectedView.controller || k
			}
			var f = d(k);
			var h = d(l);
			var j = d(g);
			if (h || f) {
				e.Analytics.reportNavigation(h, f, j)
			}
		},
		logStartupFlowEvent: function(f, g) {
			if (!b.sentStartupEvents) {
				b.sentStartupEvents = {}
			}
			if (!b.sentStartupEvents[f]) {
				b.sentStartupEvents[f] = true;
				if (!g) {
					g = {}
				}
				NgLogD('Mobage/Analytics: Sending startup funnel event "' + f + '" with payload: ' + JSON.stringify(g));
				e.Analytics._getPipe().plusEvent(f, g)
			}
		},
		logStartupFlowError: function(g, f, h) {
			if (!h) {
				h = {}
			}
			NgLogD('Mobage/Analytics: Startup funnel error for step: "' + g + '", error is: ' + f + ", additional payload: " + JSON.stringify(h));
			h.error = f;
			e.Analytics._getPipe().plusEvent(g + "Err", h)
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Home"] = function() {
	var u = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Home"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Home"] = u;
	var j = require("NGCore/Client/UI").UI;
	var f = j.ViewGeometry.Rect;
	var d = require("NGCore/Client/Device").Device;
	var s = require("NGCore/Client/Storage").Storage;
	var t = require("NGCore/Client/Core/MessageListener").MessageListener;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemMessagesStack").SystemMessagesStack;
	var p = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Purchase: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase
		},
		GameLaunchedEmitter: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		Game: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		AppConfig: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig
		},
		HomeScreenButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/HomeScreenButton").HomeScreenButton
		},
		HomeScreenScrollView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/HomeScreenScrollView").HomeScreenScrollView
		},
		GameCarousel: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameCarousel").GameCarousel
		},
		GameCarouselCache: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RemoteFileCache").GameCarouselCache
		},
		UserPicNameView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserPicNameView").UserPicNameView
		},
		GameIconView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameIconView").GameIconView
		},
		ComplexLabel: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ComplexLabel").ComplexLabel
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		UIStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		UserProfilePage: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/UserProfilePage").UserProfilePage
		},
		ShowBankAction: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").ShowBankAction
		}
	});
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var q = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var r = l.Components;
	var m = l.Component;
	var o = l.ComponentInheritForKey;
	var g = l.ACCESSOR_PASSTHROUGH;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/NavigableView").NavigableView.subclass({
		classname: "HomeScreen_SizeReporterView",
		sizeChanged: function($super, w, v) {
			$super.apply(this, Array.prototype.slice.call(arguments, 1));
			if (w > v && this.controller && this.controller._layoutViews) {
				this.controller._layoutViews()
			}
		}
	});
	var a = u.Home = c.subclass({
		classname: "Home",
		analyticsName: "Homepage",
		_leftPaneBackground: null,
		_userNamePicView: null,
		_lastGameView: null,
		_lastGameIcon: null,
		_noGameText: null,
		_noGameImage: null,
		_gamesButtonView: null,
		_friendsButtonView: null,
		_bankButtonView: null,
		_featuredGamesList: null,
		_alsoPlayingUsersList: null,
		_lastInvitesSeenCount: null,
		_curInvitesCount: null,
		_launchedMarketAppGame: null,
		_style: null,
		initialize: function($super, x) {
			$super();
			var w = this;
			var A;
			this._isTransitioning = false;
			this._shouldAnimate = true;
			this._style = require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Home").Home;
			this._leftPaneBackground = (new j.View()).retain();
			var v = p.Session.getCurrentSession() ? p.Session.getCurrentSession().user() : null;
			this._userNamePicView = (new p.UserPicNameView()).retain();
			this._userNamePicView.setClickCallback(p.ServiceHost.credentialCheckCB(this.zombieSafeCallback(function() {
				p.ServiceHost.showLoadingHelper(this.zombieSafeCallback(function() {
					var B = k.MyPage.initWithJSON({});
					this.navController.pushViewController(B, this._userNamePicView)
				}))
			})));
			if (x) {
				this._launchedGame = x
			}
			this._lastGameView = (new j.View()).retain();
			this._lastGameIcon = (new p.GameIconView()).retain();
			this._lastGameIcon.setClickCallback(p.ServiceHost.credentialCheckCB(this.zombieSafeCallback(function() {
				p.ServiceHost.showLoadingHelper(this.zombieSafeCallback(function() {
					if (this.navController._host.isRunningActiveGame() && (!this._currentLastGameObj || this._currentLastGameObj.recordID == p.Session.getCurrentSession().appKey())) {
						this.navController.pushViewController(new k.GamePlaceholder(this.navController._host, "AhabTester_hardcoded"))
					} else {
						if (this._currentLastGameObj) {
							k.GameProfile.startGameOrGoToProfile(this._currentLastGameObj, "JSGamePlayHomeLastGame")
						} else {
							var B = k.Catalog.initWithJSON({});
							this.navController.pushViewController(B)
						}
					}
				}))
			})));
			this._noGameText = (new j.Label()).retain();
			this._noGameText.setTouchable(false);
			this._noGameImage = (new j.Image()).retain();
			this._noGameImage.setTouchable(false);
			this._gamesButtonView = (new p.HomeScreenButton()).retain();
			this._friendsButtonView = (new p.HomeScreenButton()).retain();
			this._bankButtonView = (new p.HomeScreenButton()).retain();
			this._gameCarousel = (new p.GameCarousel()).retain();
			this._alsoPlayingUsersList = (new p.HomeScreenScrollView()).retain();
			this._gameCarousel.setOnGameClick(this.zombieSafeCallback(function(B) {
				if (this._isTransitioning) {
					return
				}
				var C = p.ServiceHost.credentialCheckCB(this.zombieSafeCallback(function() {
					if (B && B.screen) {
						p.ServiceHost.navController.jumpToPageWithJSON(B.screen, {})
					} else {
						if (B instanceof p.Game) {
							p.ServiceHost.showLoadingHelper(this.zombieSafeCallback(function() {
								k.GameProfile.startGameOrGoToProfile(B, "JSGamePlayHomeFeaturedGames")
							}))
						}
					}
				}));
				C()
			}));
			this._gameCarousel.setButton(b("Find Games"), p.ServiceHost.credentialCheckCB(this.zombieSafeCallback(function() {
				if (this._isTransitioning) {
					return
				}
				p.ServiceHost.showLoadingHelper(this.zombieSafeCallback(function() {
					var B = k.Catalog.initWithJSON({});
					this.navController.pushViewController(B, this._featuredGamesList)
				}))
			})));
			this._alsoPlayingUsersList.setData(null);
			this._alsoPlayingUsersList.setButton(b("Find People"), p.ServiceHost.credentialCheckCB(this.zombieSafeCallback(function() {
				if (this._isTransitioning) {
					return
				}
				p.ServiceHost.showLoadingHelper(this.zombieSafeCallback(function() {
					var B = k.FindFriends.initWithJSON({
						tab: "suggested"
					});
					this.navController.pushViewController(B, this._alsoPlayingUsersList)
				}))
			})));
			this._gamesButtonView.setMainText(b("My Games"));
			this._gamesButtonView.buttonIcon.setImage(p.Assets.image("micons__0004_games1.png"));
			this._gamesButtonView.setOnClick(p.ServiceHost.credentialCheckCB(this.zombieSafeCallback(function() {
				if (this._isTransitioning) {
					return
				}
				p.ServiceHost.showLoadingHelper(this.zombieSafeCallback(function() {
					var B = k.MyPage.initWithJSON({
						tab: "profile",
						tab: "games"
					});
					this.navController.pushViewController(B, this._gamesButtonView)
				}))
			})));
			this._friendsButtonHasBadge = false;
			this._friendsButtonView.buttonIcon.setImage(p.Assets.image("micons__0011_friends.png"));
			this._friendsButtonView.setMainText(b("My Friends"));
			this._friendsButtonView.setOnClick(p.ServiceHost.credentialCheckCB(this.zombieSafeCallback(function() {
				if (this._isTransitioning) {
					return
				}
				p.ServiceHost.showLoadingHelper(this.zombieSafeCallback(function() {
					var B = null;
					if (this._friendsButtonHasBadge) {
						B = k.MyPage.initWithJSON({
							tab: "invites"
						})
					} else {
						B = k.MyPage.initWithJSON({
							tab: "friends"
						})
					}
					this._lastInvitesSeenCount = this._curInvitesCount;
					NgLogD("this._lastInvitesSeen:" + this._curInvitesCount);
					this.navController.pushViewController(B, this._friendsButtonView)
				}))
			})));
			var y = new t();
			if (v) {
				v.addListener(y, this.zombieSafeCallback(function(B) {
					if (B && B.buddies) {
						this._lastInvitesSeenCount = 0;
						if (this.navController && this.navController.getTopViewController() == this) {
							this.updateInvitesCount()
						}
					}
				}, this.bind(function(B) {
					v.removeListener(y);
					y.destroy()
				})))
			}
			this._bankButtonAction = new p.ShowBankAction();
			this._bankButtonView.setMainText(b("My MobaCoin"));
			this._bankButtonView.buttonIcon.setImage(p.Assets.image("micons__0008_bank.png"));
			this._bankButtonView.setOnClickDown(this._bankButtonAction.bind(this._bankButtonAction.prepare));
			this._bankButtonView.setOnClick(function() {
				p.ServiceHost.showLoadingLabel();
				w._bankButtonAction.execute()
			});
			this._bankButtonView.setOnClickCancel(this._bankButtonAction.bind(this._bankButtonAction.cancel));
			this._gameLaunchedListener = new t();
			p.GameLaunchedEmitter.addListener(this._gameLaunchedListener, this.zombieSafeCallback(function() {
				this._launchedGame = undefined;
				this._updateGameIconWidget()
			}));
			d.IPCEmitter.addListener(new t(), this.zombieSafeCallback(function(C) {
				if (C && C.getExtras && C.getExtras() && C.getExtras().callingPackage) {
					var B = C.getExtras().callingPackage;
					this._onIntentReceived(B)
				}
			}));
			d.IPCEmitter.getCallingPackage(this.zombieSafeCallback(function(B) {
				this._onIntentReceived(B)
			}));
			var z = t.subclass({
				_onLifecycleEvent: function(B) {
					if (B === d.LifecycleEmitter.Event.Suspend) {
						w.setAnimationsEnabled(false)
					} else {
						if (B === d.LifecycleEmitter.Event.Resume && w._shouldAnimate) {
							w.setAnimationsEnabled(true)
						}
					}
					return true
				},
				destroy: function() {
					d.LayoutEmitter.removeListener(this)
				}
			});
			this._lifecycleListenerInstance = new z();
			d.LifecycleEmitter.addListener(this._lifecycleListenerInstance, this._lifecycleListenerInstance._onLifecycleEvent);
			this._style.applyTo(this);
			NgLogD("mobage: Home initialized");
			return this
		},
		destroy: function() {
			if (this._gameLaunchedListener) {
				p.GameLaunchedEmitter.removeListener(this._gameLaunchedListener);
				this._gameLaunchedListener = null
			}
			this._leftPaneBackground.release();
			this._userNamePicView.release();
			this._lastGameView.release();
			this._lastGameIcon.release();
			this._noGameText.release();
			this._noGameImage.release();
			this._gamesButtonView.release();
			this._friendsButtonView.release();
			this._bankButtonView.release();
			this._gameCarousel.release();
			this._alsoPlayingUsersList.release();
			this._lifecycleListenerInstance.destroy();
			if (this.blankTitle) {
				this.blankTitle.release()
			}
		},
		_onIntentReceived: function(v) {
			p.Game._getGameWithAndroidPackageName(v, this.zombieSafeCallback(function(x, w) {
				NgLogD("Market app " + v + " has game " + w);
				if (w) {
					if (this._gameCarousel && this._gameCarousel._games) {
						this._gameCarousel.stopAutoscrolling();
						this._gameCarousel.layoutSubviews();
						this._gameCarousel.scrollToGame(w);
						this._gameCarousel.startAutoscrolling()
					} else {
						this._launchedMarketAppGame = w
					}
				}
			}))
		},
		$initWithJSON: function(v) {
			return new a(null)
		},
		onJSON: function(v) {},
		loadView: function($super) {
			this.setView(new e())
		},
		willPush: function($super, v) {
			NgLogD("mobage-home: willPush");
			$super(v);
			if (!this._homePushInited) {
				this._pushFirstInit(v)
			}
		},
		_pushFirstInit: function(w) {
			if (w) {
				this._lastEvent = w
			} else {
				w = this._lastEvent;
				if (!w) {
					return
				}
			}
			this._homePushInited = true;
			if (w.host) {
				w.host.disableSoftNavButtons();
				if (typeof(w.host.setupForHomeScreen) == "function") {
					w.host.setupForHomeScreen(true)
				}
			}
			this._layoutViews();
			var v = this.view().getContentView();
			v.addChild(this._leftPaneBackground);
			v.addChild(this._userNamePicView);
			v.addChild(this._lastGameView);
			v.addChild(this._lastGameIcon);
			v.addChild(this._noGameImage);
			v.addChild(this._noGameText);
			v.addChild(this._gamesButtonView);
			v.addChild(this._friendsButtonView);
			v.addChild(this._bankButtonView);
			v.addChild(this._gameCarousel);
			v.addChild(this._alsoPlayingUsersList);
			this._alsoPlayingUsersList._updateButtonFrame();
			this._gameCarousel._updateButtonFrame();
			this.updateOwnedGames();
			this.updateFeaturedGames();
			this.updateFeaturedUsers();
			this.updateInvitesCount();
			this.updateCurrentUser();
			this._updateGameIconWidget();
			p.Purchase.retryFailedCredits()
		},
		_layoutViews: function() {
			if (!this._style) {
				return
			}
			var G = new j.ViewGeometry.Rect(this.view().getFrame());
			if (G.isEmpty()) {
				this.view().setFrame([0, 0, j.Window.getWidth(), j.Window.getHeight()]);
				G = new j.ViewGeometry.Rect(this.view().getFrame())
			}
			var I = new j.ViewGeometry.Rect(this.view().content.getFrame());
			I.x = I.y = 0;
			var z = I.w * this._style.extras.contentInsetPctWidth;
			I.inset(z, z, z, z);
			var C = new j.ViewGeometry.Rect(I);
			C.w = C.w * this._style.extras.leftPaneWidth;
			var B = new j.ViewGeometry.Rect(I);
			B.inset(0, 2, 0, C.w + I.w * this._style.extras.leftRightPaneMargin - 2);
			var x = I.h * this._style.extras.rightPaneSectionMargin;
			var H = new j.ViewGeometry.Rect(B);
			H.h *= 0.5;
			H.h -= x / 2;
			H.inset(3, 0, 0, 0);
			var v = new j.ViewGeometry.Rect(H);
			v.h = B.h * 0.66;
			v.h -= x / 2;
			v.inset(-3, 0, 0, 0);
			this._gameCarousel.setFrame(v);
			var w = new j.ViewGeometry.Rect(B);
			w.y += H.h;
			w.h *= 0.5;
			w.h -= x / 2;
			var F = new j.ViewGeometry.Rect(B);
			F.y += v.h + 2;
			F.h *= 0.34;
			F.h -= x / 2;
			this._alsoPlayingUsersList.setFrame(F);
			this._leftPaneBackground.setFrame(C);
			C.inset(1, 1, 1, 1);
			var y = H.h * this._style.extras.userNameHeightRatio;
			var E = w.y - C.y - y;
			var J = (C.h - y - E) / 3;
			var D = C.sliceVertical(y);
			D.inset(1, 1, 1, 1);
			this._userNamePicView.setFrame(D);
			var A = C.sliceVertical(E);
			A.inset(1, 1, 1, 1);
			this._lastGameView.setFrame(A);
			this._lastGameIcon.setFrame(A);
			this._noGameText.setFrame(A);
			A.y += A.h * 0.1;
			A.h /= 2.3;
			this._noGameImage.setFrame(A);
			D = C.sliceVertical(J);
			D.inset(1, 1, 1, 1);
			this._gamesButtonView.setFrame(D);
			D = C.sliceVertical(J);
			D.inset(1, 1, 1, 1);
			this._friendsButtonView.setFrame(D);
			D = C.sliceVertical(J);
			D.inset(1, 1, 1, 1);
			this._bankButtonView.setFrame(D);
			this._gamesButtonView.layoutSubviews();
			this._friendsButtonView.layoutSubviews();
			this._bankButtonView.layoutSubviews();
			this._userNamePicView.layoutSubviews();
			this._lastGameIcon.layoutSubviews();
			this._gameCarousel.layoutSubviews();
			this._alsoPlayingUsersList.layoutSubviews()
		},
		onUserLogin: function() {
			this.updateCurrentUser();
			this.updateOwnedGames();
			this.updateInvitesCount();
			this._updateGameIconWidget()
		},
		updateFeaturedGames: function() {
			var y = [];
			var x = p.AppConfig.getHomeScreenPromotion();
			if (x) {
				if (x.promotionalImage && x.promotionalImage.match(/^http/) === null) {
					NgLogI("GC Promo: From " + x.promotionalImage + " to " + p.Assets.image("mobage-promo-image.jpg"));
					x.localPromotionalImage = p.Assets.image(x.promotionalImage)
				}
				x.recordID = "localPromo";
				y.push(x)
			}
			var v = p.GameCarouselCache;
			var w = this.zombieSafeCallback(function() {
				var B, z;
				var A = [];
				for (B = 0; B < y.length; B++) {
					z = y[B];
					if (!z.localPromotionalImage) {
						z.localPromotionalImage = v.readyImageForGame(z)
					}
					if (z.localPromotionalImage) {
						A.push(z)
					}
				}
				this._gameCarousel.setGames(A)
			});
			p.Game.getFeaturedGamesList().forAll(this.zombieSafeCallback(function(A, B, z) {
				if (B.featured && B.promotionalImage) {
					y.push(B);
					v.addGame(B, w)
				}
				A(true)
			}), this.zombieSafeCallback(function(z) {
				this._gameCarousel.rootPerformanceHack();
				if (this._launchedMarketAppGame) {
					this._gameCarousel.scrollToGame(this._launchedMarketAppGame)
				}
				this._gameCarousel.startAutoscrolling()
			}))
		},
		updateFeaturedUsers: function() {
			var x = this;
			var w = p.Session.getCurrentSession() ? p.Session.getCurrentSession().user() : null;
			var y = [];
			var A = require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Home").FeaturedUser;
			var z = this.zombieSafeCallback(function(C, D, B) {
				var E = new j.Image();
				E.setTouchable(true);
				A.applyTo(E);
				E.setImage(D.getDefinedIcon());
				E.setOnClick(p.ServiceHost.credentialCheckCB(this.zombieSafeCallback(function() {
					if (this._isTransitioning) {
						return
					}
					p.ServiceHost.showLoadingHelper(this.zombieSafeCallback(function() {
						var G = {
							user: D
						};
						var F = p.UserProfilePage.initWithJSON(G);
						this.navController.pushViewController(F, G)
					}))
				}), this.zombieSafeCallback(function() {
					this._alsoPlayingUsersList.startAutoscrolling()
				})));
				y.push(E);
				C(true)
			});
			var v = this.zombieSafeCallback(function(B) {
				this._alsoPlayingUsersList.setListViews(y);
				this._alsoPlayingUsersList.rootPerformanceHack();
				this._alsoPlayingUsersList.startAutoscrolling()
			});
			(w ? w : p.User).getFeaturedUsersList().forAll(z, v)
		},
		updateInvitesCount: function() {
			var w = 0;
			var v = p.Session.getCurrentSession() ? p.Session.getCurrentSession().user() : null;
			if (v) {
				v.getInvitesList().forAll(this.zombieSafeCallback(function(z, x, y) {
					if (x.isMutualFriend) {
						z(true)
					}
					z(++w <= 99)
				}), this.zombieSafeCallback(function(y) {
					NgLogE("Finished counting Requests users, total count = " + w);
					if (w > 0 && w != this._lastInvitesSeenCount) {
						var x = w;
						if (w > 99) {
							x = "+99"
						}
						this._curInvitesCount = w;
						this._friendsButtonView.setBadgeCount(x);
						this._friendsButtonHasBadge = true
					} else {
						this.updateFriendsCount()
					}
				}))
			}
		},
		updateFriendsCount: function() {
			var w = this;
			var v = p.Session.getCurrentSession() ? p.Session.getCurrentSession().user() : null;
			if (v) {
				var x = 0;
				v.getMutualFriendsList().forAll(this.zombieSafeCallback(function(A, y, z) {
					x++;
					this._friendsButtonView.setCountText(x);
					A(true)
				}), this.zombieSafeCallback(function(y) {
					if (y) {
						NgLogD("updating buddies list, got error: ", JSON.stringify(y))
					} else {
						this._friendsButtonView.setCountText(x);
						this._friendsButtonHasBadge = false
					}
				}))
			}
		},
		_showGetMoreGamesPlaceholder: function() {
			this._noGameText.setText(b("Download a free game\n to get started!"));
			this._noGameImage.setImage(p.Assets.image("home_nogames_icon.png"));
			this._lastGameIcon.setGame("", "", true);
			this._currentLastGameObj = null
		},
		_updateGameIconWidget: function() {
			if (!this.navController || !this.navController._host) {
				return
			}
			if (this._launchedGame) {
				NgLogD("Home Screen Last played icon: Using LAUNCHED game. url=" + this._launchedGame.iconURL + ", name=" + this._launchedGame.name);
				this._noGameText.setText("");
				this._noGameImage.setImage("");
				this._lastGameIcon.setGame(this._launchedGame.iconURL, this._launchedGame.name);
				this._currentLastGameObj = this._launchedGame
			} else {
				if (this.navController._host.isRunningActiveGame()) {
					p.Game.getCurrentGame(this.zombieSafeCallback(function(C, B) {
						if (!C) {
							NgLogD("Home Screen Last played icon: Using active game. url=" + B.iconURL + ", name=" + B.name);
							this._noGameText.setText("");
							this._noGameImage.setImage("");
							this._lastGameIcon.setGame(B.iconURL, B.name);
							this._alsoPlayingUsersList.setTitle(b("People playing %1s", B.name));
							this._currentLastGameObj = B
						} else {
							NgLogD("Home Screen Last played icon: I think an active game is running but I failed to get it, Err: " + C);
							this._showGetMoreGamesPlaceholder()
						}
					}))
				} else {
					var w = "com.mobage.ww.local_last_played_game.";
					var z = s.KeyValueCache.local;
					if (!z) {
						s.KeyValueCache.init();
						z = s.KeyValueCache.local
					}
					var A = p.Session.getCurrentSession();
					var v = A ? A.user() : null;
					var x = v ? v.gamertag : "nobody";
					var y = w + x;
					z.getItem(y, this.zombieSafeCallback(function(C, B) {
						if ((!C) && B) {
							p.Game.getGameWithAppKey(B, this.zombieSafeCallback(function(E, D) {
								if (!E && D) {
									NgLogD("Home Screen Last played icon: Using last played game. url=" + D.iconURL + ", name=" + D.name);
									this._noGameText.setText("");
									this._noGameImage.setImage("");
									this._lastGameIcon.setGame(D.iconURL, D.name);
									this._currentLastGameObj = D
								} else {
									NgLogE("Home Screen Last played icon: Couldnt get a recently played game. Err: " + E);
									this._showGetMoreGamesPlaceholder()
								}
							}));
							return
						} else {
							NgLogE("Home Screen Last played icon: No last game in KV store. Err: " + C);
							this._showGetMoreGamesPlaceholder()
						}
					}))
				}
			}
		},
		updateOwnedGames: function() {
			var x = this;
			var v = p.Session.getCurrentSession() ? p.Session.getCurrentSession().user() : null;
			if (v) {
				var w = 0;
				v.getOwnedGamesList().forAll(this.zombieSafeCallback(function(z, A, y) {
					w++;
					z(true)
				}), this.zombieSafeCallback(function(y) {
					if (w === 0) {
						this._gamesButtonView.setCountText("")
					} else {
						this._gamesButtonView.setCountText(w)
					}
				}))
			}
		},
		updateCurrentUser: function() {
			var w = p.Session.getCurrentSession();
			var v = w ? w.user() : null;
			if (v) {
				this._userNamePicView.setUserInfo(v.gamertag, v.getDefinedIcon(), 0);
				v.getUnreadWallPostCount(this.zombieSafeCallback(function(y, x) {
					this._userNamePicView.setBadgeCount(x)
				}))
			} else {
				this._userNamePicView.setUserInfo(b("Sign Up"), p.Assets.image("no-user-icon.png"), 0)
			}
		},
		willReshow: function($super, v) {
			NgLogD("mobage-home: willReshow");
			$super(v);
			this._isTransitioning = true;
			if (!this._homePushInited) {
				this._pushFirstInit(v)
			}
			this.updateCurrentUser();
			this.updateOwnedGames();
			this.updateInvitesCount();
			if (v.host) {
				v.host.disableSoftNavButtons();
				if (typeof(v.host.setupForHomeScreen) == "function") {
					v.host.setupForHomeScreen(true)
				}
			}
			if (k.Main.getNewLaunchGame()) {
				this._launchedGame = k.Main.getNewLaunchGame();
				k.Main.setNewLaunchGame(null)
			}
			this._updateGameIconWidget();
			p.Purchase.retryFailedCredits()
		},
		setAnimationsEnabled: function(v) {
			if (v) {
				if (this._gameCarousel) {
					this._gameCarousel.startAutoscrolling()
				}
				if (this._alsoPlayingUsersList) {
					this._alsoPlayingUsersList.startAutoscrolling()
				}
			} else {
				if (this._gameCarousel) {
					this._gameCarousel.stopAutoscrolling()
				}
				if (this._alsoPlayingUsersList) {
					this._alsoPlayingUsersList.stopAutoscrolling()
				}
			}
		},
		didReshow: function($super, v) {
			NgLogD("mobage-home: didReshow");
			$super(v);
			this._isTransitioning = false;
			this._shouldAnimate = true;
			this._updateGameIconWidget();
			if (this._gameCarousel) {
				this._gameCarousel.rootPerformanceHack()
			}
			if (this._alsoPlayingUsersList) {
				this._alsoPlayingUsersList.rootPerformanceHack()
			}
			this.setAnimationsEnabled(true)
		},
		willHide: function($super, v) {
			$super(v);
			this._isTransitioning = true;
			this._shouldAnimate = false;
			if (this._gameCarousel) {
				this._gameCarousel.undoRootPerformanceHack()
			}
			if (this._alsoPlayingUsersList) {
				this._alsoPlayingUsersList.undoRootPerformanceHack()
			}
			this.setAnimationsEnabled(false)
		},
		willPop: function($super, v) {
			$super(v);
			this._isTransitioning = true;
			this._shouldAnimate = false;
			if (this._gameCarousel) {
				this._gameCarousel.undoRootPerformanceHack()
			}
			if (this._alsoPlayingUsersList) {
				this._alsoPlayingUsersList.undoRootPerformanceHack()
			}
			this.setAnimationsEnabled(false)
		},
		didHide: function($super, v) {
			this._isTransitioning = false;
			if (v.host) {
				v.host.enableSoftNavButtons();
				if (typeof(v.host.setupForHomeScreen) == "function") {
					v.host.setupForHomeScreen(false)
				}
			}
		},
		didPop: function($super, v) {
			this._isTransitioning = false;
			if (v && v.host) {
				v.host.enableSoftNavButtons();
				if (typeof(v.host.setupForHomeScreen) == "function") {
					v.host.setupForHomeScreen(false)
				}
			}
		},
		didPush: function($super, v) {
			s.KeyValueCache.local.getItem("Mobage_DidJSUpdate", function(w, x) {
				if (!w) {
					if (x === "1") {
						var y = (new j.AlertDialog()).retain();
						y.setTitle(b("Mobage Updated"));
						y.setText(b("Mobage just got a little bit better! Enjoy!"));
						y.setChoices([b("OK")]);
						y.onchoice = function(z) {
							y.release()
						};
						y.show()
					}
				}
				s.KeyValueCache.local.setItem("Mobage_DidJSUpdate", "")
			});
			this._isTransitioning = false;
			$super(v);
			this.navController._host.hideLoadingLabel()
		}
	});
	return u
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FindFriends"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FindFriends"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FindFriends"] = f;
	var e = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController").MobageVerticalTabController;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/SuggestedFriendsController").SuggestedFriendsController;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController").ContactsController;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserSearchController").UserSearchController;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var l = f.FindFriends = g.subclass({
		classname: "FindFriends",
		suggestedFriendsController: null,
		contactsController: null,
		searchController: null,
		tabToSelect: null,
		initialize: function($super, m) {
			$super();
			this.suggestedFriendsController = (new j()).retain();
			this.contactsController = (new b()).retain();
			this.searchController = (new a()).retain();
			this.tabToSelect = m;
			return this
		},
		$initWithJSON: function(n) {
			var m = null;
			if (n.tab) {
				m = n.tab
			}
			return new l(m)
		},
		onJSON: function(n) {
			if (n.tab) {
				var m = 0;
				if (!n.tab || n.tab == "suggested") {
					m = 0
				} else {
					if (n.tab == "contacts") {
						m = 1
					} else {
						m = 2
					}
				}
				this.selectTabAtIndex(m)
			}
			return null
		},
		loadView: function($super) {
			$super();
			NgLogD("FindFriends: loadView");
			this.batchChangeMode = true;
			this.addTabWithTextImageAndContent(k("Suggested Friends"), e.image("findfriends_tabbadge_suggested.png"), this.suggestedFriendsController.view());
			NgLogD("ContactsController");
			this.addTabWithTextImageAndContent(k("Scan Device Contacts"), e.image("findfriends_tabbadge_contacts.png"), this.contactsController.view());
			this.addTabWithTextImageAndContent(k("Search"), e.image("findfriends_tabbadge_search.png"), this.searchController.view());
			var m = this.addJumpWithTitleAndCallback(k("Friend Requests"), function() {
				NgLogD("Invites Button Clicked.");
				h.showLoadingHelper(function() {
					var p = c.MyPage.initWithJSON({
						tab: "invites"
					});
					h.navController.pushViewController(p, {
						analyticsName: "FindFriendsInvite"
					})
				})
			});
			var o = this.tabPairAtIndex(m).tabView;
			NgLogD("FindFriends: loadView Main Setup finished.");
			this.batchChangeMode = false;
			this.view().layoutButtonContainer();
			var n = 0;
			d.getCurrentSession().user().getInvitesList().forAll(function(r, p, q) {
				if (p.isMutualFriend) {
					r(true)
				}
				r(++n <= 99)
			}, this.bind(function(p) {
				NgLogE("Finished counting Requests users, total count = " + n);
				if (n > 0) {
					o.showCustomAccessoryImage(e.image("mobageverticaltab_jumpbutton_invitesbubble.png"));
					o._rightImageWidthMultiplier = 2
				} else {
					o.showCaret();
					o._rightImageWidthMultiplier = 1
				}
				if (n <= 0) {
					o.content.accessory.setText("")
				} else {
					if (n < 99) {
						o.content.accessory.setText(n)
					} else {
						o.content.accessory.setText("+99")
					}
				}
				o.layoutSubviews()
			}))
		},
		destroy: function() {
			this.suggestedFriendsController.release();
			this.contactsController.release();
			this.searchController.release()
		},
		willPush: function($super, n) {
			$super(n);
			var m = 0;
			if (!this.tabToSelect || this.tabToSelect == "suggested") {
				m = 0
			} else {
				if (this.tabToSelect == "contacts") {
					m = 1
				} else {
					m = 2
				}
			}
			this.selectTabAtIndex(m)
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Catalog"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Catalog"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Catalog"] = d;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var m = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController").MobageVerticalTabController;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CatalogController").CatalogController;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var g = 5;
	var n = null;
	var l = null;
	var o = null;
	var h = null;
	var e = "name abc";
	var b = d.Catalog = j.subclass({
		classname: "Catalog",
		_allGamesController: null,
		_featuredGamesController: null,
		_friendsGamesController: null,
		initialize: function($super, p) {
			$super();
			this._featuredGamesController = (new f("featured")).retain();
			this._featuredGamesController.setMaxEntries(g);
			this._featuredGamesController.setSorting(n);
			this._friendsGamesController = (new f("friends")).retain();
			this._friendsGamesController.setMaxEntries(l);
			this._friendsGamesController.setSorting(o);
			this._allGamesController = (new f()).retain();
			this._allGamesController.setMaxEntries(h);
			this._allGamesController.setSorting(e);
			this.tabToSelect = p;
			return this
		},
		$initWithJSON: function(q) {
			var p = null;
			if (q.tab) {
				p = q.tab
			}
			return new b(p)
		},
		onJSON: function(p) {
			if (p.tab) {
				if (p.tab == "all games") {
					this.selectTabAtIndex(0)
				} else {
					this.selectTabAtIndex(1)
				}
			}
		},
		loadView: function($super) {
			$super();
			this.batchChangeMode = true;
			this.addTabWithTextImageAndContent(m("Featured Games"), c.image("catalog_tabbadge_allgames.png"), this._featuredGamesController.view());
			this.addTabWithTextImageAndContent(m("Friends' Games"), c.image("catalog_tabbadge_allgames.png"), this._friendsGamesController.view());
			this.addTabWithTextImageAndContent(m("All Games"), c.image("catalog_tabbadge_allgames.png"), this._allGamesController.view());
			this.addJumpWithTitleAndCallback(m("My Games"), function() {
				k.showLoadingHelper(function() {
					NgLogD("My Games Button Clicked.");
					var p = a.MyPage.initWithJSON({
						tab: "profile",
						tab: "games"
					});
					k.navController.pushViewController(p, this)
				})
			});
			this.batchChangeMode = false;
			this.view().layoutButtonContainer()
		},
		destroy: function() {
			if (this._allGamesController) {
				this._allGamesController.release();
				this._allGamesController = null
			}
			if (this._featuredGamesController) {
				this._featuredGamesController.release();
				this._featuredGamesController = null
			}
			if (this._friendsGamesController) {
				this._friendsGamesController.release();
				this._friendsGamesController = null
			}
		},
		willPush: function($super, p) {
			$super(p);
			if (!this.tabToSelect || this.tabToSelect == "all games") {
				this.selectTabAtIndex(2)
			} else {
				if (this.tabToSelect == "featured games") {
					this.selectTabAtIndex(0)
				} else {
					if (this.tabToSelect == "friends games") {
						this.selectTabAtIndex(1)
					}
				}
			}
		},
		didPush: function($super, p) {
			$super(p);
			this.navController._host.hideLoadingLabel()
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameProfile"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameProfile"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameProfile"] = f;
	var e = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GameProfileController").GameProfileController;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController").MobageVerticalTabController;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game");
	var j = require("NGCore/Client/Core/Analytics").Analytics;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var c = f.GameProfile = g.subclass({
		classname: "GameProfile",
		gameProfileController: null,
		initialize: function($super, l, m) {
			$super();
			this._game = l;
			this.gameProfileController = (new d(l)).retain();
			this.tabToSelect = m;
			return this
		},
		$startGameOrGoToProfile: function(o, n) {
			if (!o) {
				NgLogD("GameProfile - startOrGoToProfile: No has or game passed in.");
				return
			}
			var p, l;
			if (o instanceof b.Game) {
				l = o;
				p = {
					game: l
				}
			} else {
				l = o.game;
				p = o;
				if (!l instanceof b.Game) {
					NgLogD("GameProfile - startOrGoToProfile: No game passed in.");
					return
				}
			}
			if (l.isAvailableLocally()) {
				if (!n) {
					n = "JSGamePlayFromSomewhere"
				}
				j.reportGameEvent(n, l.recordID);
				l.checkUpdateAndStartGame()
			} else {
				var m = c.initWithJSON(p);
				h.navController.pushViewController(m)
			}
		},
		$initWithJSON: function(n) {
			var m = null;
			var l = null;
			if (n.tab) {
				m = n.tab
			}
			if (n.game) {
				l = n.game
			}
			return new c(l, m)
		},
		onJSON: function(l) {
			if (l.game && l.game.recordID != this._game.recordID) {
				return c.initWithJSON(l)
			}
			return null
		},
		loadView: function($super) {
			$super();
			this.batchChangeMode = true;
			this.addTabWithTextImageAndContent(k("Game Info"), e.image("game_info_icon.png"), this.gameProfileController.view());
			this.addJumpWithTitleAndCallback(k("All Games"), function() {
				h.showLoadingHelper(function() {
					NgLogD("All Games Button Clicked.");
					var l = a.Catalog.initWithJSON({});
					h.navController.pushViewController(l, this)
				})
			});
			this.batchChangeMode = false;
			this.view().layoutButtonContainer()
		},
		destroy: function() {
			this.gameProfileController.release()
		},
		equals: function(l) {
			if (!l._game) {
				return false
			}
			return (this._game.recordID == l._game.recordID)
		},
		willPush: function($super, l) {
			$super(l);
			if (!this.tabToSelect || this.tabToSelect == "info" || true) {
				this.selectTabAtIndex(0)
			}
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MyPage"] = function() {
	var s = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MyPage"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MyPage"] = s;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController").MobageVerticalTabController;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var g = require("NGCore/Client/UI").UI;
	var r = require("NGCore/Client/Core/MessageListener").MessageListener;
	var e = g.ViewGeometry.Rect;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var o = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CurrentUserProfileController").CurrentUserProfileController;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserProfileController").UserProfileController;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/FriendsController").FriendsController;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/InvitesController").InvitesController;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GamesController").GamesController;
	var q = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PickableAvatar").PickableAvatar;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/AvatarImagePickerController").AvatarImagePickerController;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var j = s.MyPage = f.subclass({
		classname: "MyPage",
		_user: null,
		_curUser: null,
		_profileController: null,
		_friendsController: null,
		_invitesController: null,
		_gamesController: null,
		_findFriendsButton: null,
		_settingsButton: null,
		_tabToSelect: "",
		initialize: function($super, w, v) {
			$super();
			var x = o.getCurrentSession();
			this._curUser = x.user();
			NgLogD("Displaying Current User Profile, for user " + this._curUser);
			this._user = this._curUser;
			this._profileController = (new n(function() {
				this._switchTab("friends")
			}.bind(this), function() {
				this._switchTab("games")
			}.bind(this))).retain();
			this._profileController.setSection(v);
			this._tabToSelect = w;
			this._friendsController = (new p(this._user)).retain();
			this._invitesController = (new k(this._user)).retain();
			this._gamesController = (new a(this._user)).retain();
			this.updateInvitesCount();
			this.updateFriendsCount();
			var u = new r();
			var t = this._curUser;
			t.addListener(u, this.zombieSafeCallback(function(y) {
				if (y && y.buddies) {
					if (!this._updatingInvites) {
						this.updateInvitesCount()
					}
					if (!this._updatingFriends) {
						this.updateFriendsCount()
					}
				}
			}, this.bind(function(y) {
				t.removeListener(u);
				u.destroy()
			})));
			return this
		},
		updateInvitesCount: function() {
			var t = 0;
			this._totalInvites = 0;
			this._updatingInvites = true;
			o.getCurrentSession().user().getInvitesList().forAll(this.zombieSafeCallback(function(w, u, v) {
				if (u.isMutualFriend) {
					w(true);
					return
				}
				w(++t <= 99)
			}), this.zombieSafeCallback(function(u) {
				NgLogE("Finished counting Requests users, total count = " + t);
				this._totalInvites = t;
				this._updatingInvites = false;
				if (!u) {
					this.setInviteTabText((this._totalInvites > 99) ? "99+" : this._totalInvites)
				} else {
					return
				}
			}))
		},
		updateFriendsCount: function() {
			this._totalFriends = 0;
			var u = this;
			var t = o.getCurrentSession() ? o.getCurrentSession().user() : null;
			if (t) {
				var v = 0;
				this._updatingFriends = true;
				t.getMutualFriendsList().forAll(this.zombieSafeCallback(function(y, w, x) {
					v++;
					y(true)
				}), this.zombieSafeCallback(function(w) {
					this._updatingFriends = false;
					this._totalFriends = v;
					if (!w) {
						if (this._totalFriends > 0) {
							this.setFriendsTabText(this._totalFriends)
						} else {
							this.setFriendsTabText(this._totalFriends)
						}
					} else {
						return
					}
				}))
			}
		},
		setInviteTabText: function(u) {
			var t = this._invitesTab;
			if (t) {
				t.rightAccessory.setText(u)
			}
		},
		setFriendsTabText: function(u) {
			var t = this._friendsTab;
			if (t) {
				t.rightAccessory.setText(u)
			}
		},
		$initWithJSON: function(v) {
			var u = null;
			var t = null;
			if (v.tab) {
				u = v.tab
			}
			if (v.section) {
				t = v.section
			}
			return new j(u, t)
		},
		onJSON: function(t) {
			if (t.tab) {
				this._switchTab(t.tab)
			}
			return null
		},
		loadView: function($super) {
			$super();
			NgLogD("MyPage: loadView");
			this.batchChangeMode = true;
			this.addTabWithTextImageAndContent(b("Profile"), d.image("micons__0006_editprofile.png"), this._profileController.view());
			this.addTabWithTextImageAndContent(b("Games"), d.image("micons__0004_games1.png"), this._gamesController.view());
			if (this._user == this._curUser) {
				var u = this.addTabWithTextImageAndContent(b("Friends"), d.image("mypage_tabbadge_friends.png"), this._friendsController.view(), true);
				this._friendsTab = this.tabPairAtIndex(u).tabView;
				var t = this.addTabWithTextImageAndContent(b("Friend Requests"), d.image("mypage_tabbadge_invites.png"), this._invitesController.view(), true);
				this._invitesTab = this.tabPairAtIndex(t).tabView;
				if (this._totalInvites > 0) {
					this._invitesTab.rightAccessory.setText(this._totalInvites)
				}
				this.addJumpWithTitleAndCallback(b("Find Friends"), function() {
					c.showLoadingHelper(function() {
						NgLogD("FindFriends Button Clicked.");
						var v = l.FindFriends.initWithJSON({
							tab: "suggested"
						});
						c.navController.pushViewController(v, this)
					}.bind(this))
				})
			} else {
				this.addTabWithTextImageAndContent(b("Games"), d.image("mypage_tabbadge_games.png"), this._gamesController.view());
				this.addTabWithTextImageAndContent(b("Friends"), d.image("mypage_tabbadge_friends.png"), this._friendsController.view())
			}
			NgLogD("MyPage: loadView Main Setup finished.");
			this.batchChangeMode = false;
			NgLogD("MyPage: loadView finished.")
		},
		destroy: function() {
			if (this._profileController) {
				this._profileController.release();
				this._profileController = null
			}
			if (this._friendsController) {
				this._friendsController.release();
				this._friendsController = null
			}
			if (this._invitesController) {
				this._invitesController.release();
				this._invitesController = null
			}
			if (this._gamesController) {
				this._gamesController.release();
				this._gamesController = null
			}
		},
		willPush: function($super, t) {
			$super(t);
			this._switchTab(this._tabToSelect);
			return
		},
		willPop: function($super, t) {
			$super(t);
			if (q._AvatarPickerController && h._AvatarImagePickerController) {
				q._AvatarPickerController.cleanup();
				q._AvatarPickerController = null
			}
			return
		},
		willHide: function($super, t) {
			$super(t);
			if (q._AvatarPickerController && h._AvatarImagePickerController) {
				q._AvatarPickerController.cleanup();
				q._AvatarPickerController = null
			}
			return
		},
		_switchTab: function(t) {
			if (t == "invites") {
				this.selectTabAtIndex(3)
			} else {
				if (t == "friends") {
					this.selectTabAtIndex(2)
				} else {
					if (t == "games") {
						this.selectTabAtIndex(1)
					} else {
						this.selectTabAtIndex(0)
					}
				}
			}
		}
	});
	return s
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/UserProfilePage"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/UserProfilePage"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/UserProfilePage"] = g;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController").MobageVerticalTabController;
	var f = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var m = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = require("NGCore/Client/UI").UI;
	var a = d.ViewGeometry.Rect;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserProfileController").UserProfileController;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/FriendsController").FriendsController;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GamesController").GamesController;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var l = g.UserProfilePage = h.subclass({
		classname: "UserProfilePage",
		_user: null,
		_profileController: null,
		_friendsController: null,
		_gamesController: null,
		_findFriendsButton: null,
		_settingsButton: null,
		_tabToSelect: "",
		initialize: function($super, p, o) {
			$super();
			this._user = o;
			this._tabToSelect = p;
			this._profileController = (new j(this._user, function() {
				this._switchTab("friends")
			}.bind(this), function() {
				this._switchTab("games")
			}.bind(this))).retain();
			this._friendsController = (new n(this._user)).retain();
			this._gamesController = (new c(this._user)).retain();
			return this
		},
		$initWithJSON: function(q) {
			if (e.getCurrentSession() && e.getCurrentSession().user() === q.user) {
				return b.MyPage.initWithJSON(q)
			}
			var p = null;
			var o = null;
			if (q.tab) {
				p = q.tab
			}
			if (q.user) {
				o = q.user
			}
			return new l(p, o)
		},
		onJSON: function(o) {
			if (o.user && o.user != this._user) {
				return l.initWithJSON(o)
			}
			if (o.tab) {
				this._switchTab(o.tab)
			}
			return null
		},
		loadView: function($super) {
			$super();
			NgLogD("UserProfilePage: loadView");
			this.batchChangeMode = true;
			this.addTabWithTextImageAndContent(m("Profile"), f.image("mypage_tabbadge_profile.png"), this._profileController.view());
			this.addTabWithTextImageAndContent(m("Games"), f.image("micons__0004_games1.png"), this._gamesController.view());
			this.addTabWithTextImageAndContent(m("Friends"), f.image("mypage_tabbadge_friends.png"), this._friendsController.view());
			this.addJumpWithTitleAndCallback(m("My Profile"), this.bind(function() {
				k.showLoadingHelper(function() {
					NgLogD("My Profile Jump Button Clicked");
					var o = b.MyPage.initWithJSON({});
					this.navController.pushViewController(o, this)
				}.bind(this))
			}));
			NgLogD("UserProfilePage: loadView Main Setup finished.");
			this.batchChangeMode = false;
			NgLogD("UserProfilePage: loadView finished.")
		},
		destroy: function() {
			if (this._profileController) {
				this._profileController.release();
				this._profileController = null
			}
			if (this._friendsController) {
				this._friendsController.release();
				this._friendsController = null
			}
		},
		equals: function(o) {
			if (!o._user) {
				return false
			}
			return (this._user.recordID == o._user.recordID)
		},
		willPush: function($super, o) {
			$super(o);
			this._switchTab(this._tabToSelect);
			return
		},
		_switchTab: function(o) {
			if (o == "friends") {
				this.selectTabAtIndex(2)
			} else {
				if (o == "games") {
					this.selectTabAtIndex(1)
				} else {
					this.selectTabAtIndex(0)
				}
			}
		},
		getUser: function() {
			return this._user
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccountSettingsController"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccountSettingsController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccountSettingsController"] = d;
	var h = require("NGCore/Client/Core").Core;
	var g = require("NGCore/Client/UI").UI;
	var e = g.ViewGeometry.Rect;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		ViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		SupportWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen").SupportWebScreen
		},
		AcknowledgementsWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/AcknowledgementsWebScreen").AcknowledgementsWebScreen
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		AccountSettingsView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccountSettingsView").AccountSettingsView
		},
		SystemInfoScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemInfoScreen").SystemInfoScreen
		},
		AccountSettingsStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/AccountSettings")
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var c = d.AccountSettingsController = f.subclass({
		classname: "AccountSettingsController",
		analyticsName: "AccountSettings",
		_curUser: null,
		initialize: function() {
			var j = b.Session.getCurrentSession();
			this._curUser = j.user()
		},
		loadView: function($super) {
			this.setView(new b.AccountSettingsView());
			$super();
			this.view()._headerHeightRatio = 0;
			this._setupBlockedUser()
		},
		didActivateTab: function($super, j) {
			$super(j);
			this.parentController.navController._host.hideLoadingLabel()
		},
		_setupBlockedUser: function() {
			var k = 0;
			var j = b.Session.getCurrentSession().user().getBlockedUserList();
			j.forAll((function(m, l) {
				b.User.getUserWithGamertag(l.gamertag, (function(o, n) {
					this.view()._createBlockedUser(o, n, k);
					k++;
					m(true)
				}).bind(this))
			}).bind(this), (function(l) {
				if (l) {
					NgLogD("Error: AccountSettingsController.js:retrieveBlockedUsers " + l)
				}
				this.view()._updateBlockedUserAreaSize(k);
				this.view()._updateContentSize()
			}).bind(this))
		},
		buttonSaveChangesOnClick: function() {
			var j = 0;
			var l = false;
			var k = null;
			var m = this.bind(function(n, o) {
				if (j === 3) {
					if (l) {
						if (k) {
							if (k.length > 0 && k[k.length - 1] != ".") {
								k += "."
							}
							this._showErr(a("%1s", k))
						} else {
							this._showErr(a("Sorry, we weren't able to save changes. Please try again later."))
						}
						this._setSaveButtonState(true, a("Save"));
						if (o) {
							this._setControlError(o)
						}
					} else {
						this._setSaveButtonState(false, a("Saved!"));
						setTimeout(this.bind(function() {
							this._setSaveButtonState(true, a("Save"))
						}), 2000)
					}
				}
			});
			this._setControlNormal(this.view()._editEmailAddress);
			this._setSaveButtonState(false, a("Saving..."));
			this.view()._editEmailAddress.setState(g.State.Normal);
			this._curUser.setEmailAddress(this.view()._editEmailAddress.getText(), (function(n, o) {
				j = j + 1;
				if (n) {
					l = true;
					k = n;
					this.view()._editEmailAddress.setState(b.ViewController.UIStateError);
					m(n, this.view()._editEmailAddress)
				} else {
					m()
				}
			}).bind(this));
			this._curUser.setOnlyShowFriendNotifications(this.view()._optPushFriends.isChecked(), (function(n, o) {
				j = j + 1;
				if (n) {
					l = true;
					k = n;
					m(n)
				} else {
					m()
				}
			}).bind(this));
			this._curUser.setOptsIn(this.view()._optNewsUpdates.isChecked(), (function(n, o) {
				j = j + 1;
				if (n) {
					l = true;
					k = n;
					m(n)
				} else {
					m()
				}
			}).bind(this))
		},
		_setSaveButtonState: function(k, j) {
			if (k) {
				b.CommonElements.standardButton.applyTo(this.view()._buttonSaveChanges);
				this.view()._buttonSaveChanges.setState(g.State.Normal)
			} else {
				b.CommonElements.disabledButton.applyTo(this.view()._buttonSaveChanges);
				this.view()._buttonSaveChanges.setState(g.State.Disabled)
			}
			if (typeof j == "string") {
				this.view()._buttonSaveChanges.setText(j)
			}
		},
		_setControlError: function(j) {
			j.setState(b.ViewController.UIStateError)
		},
		_setControlNormal: function(j) {
			j.setState(g.State.Normal)
		},
		_showErr: function(j) {
			this.view()._toast.setText(j);
			this.view()._toast.show()
		},
		buttonSupportOnClick: function() {
			if (b.ServiceHost.navController) {
				b.ServiceHost.navController.pushViewController(new b.SupportWebScreen())
			}
		},
		acknowledgementsButtonOnClick: function() {
			if (b.ServiceHost.navController) {
				b.ServiceHost.showLoadingHelper(function() {
					b.ServiceHost.navController.pushViewController(new b.AcknowledgementsWebScreen())
				})
			}
		},
		systemInfoButtonOnClick: function() {
			if (b.ServiceHost.navController) {
				b.ServiceHost.showLoadingHelper(function() {
					b.ServiceHost.navController.pushViewController(b.SystemInfoScreen.initWithJSON())
				})
			}
		},
		blockeduserOnClick: function(j, k) {
			var l = (new g.AlertDialog()).retain();
			l.setTitle(a("Unblock %1s?", j.gamertag));
			l.setText(a("Are you sure you want to unblock this user?"));
			l.setChoices([a("Yes"), a("No")]);
			l.onchoice = (function(m) {
				if (m.choice === 0) {
					j.setBlocked(false, (function(o, q) {
						if (o) {
							NgLogD("Error: AccountSettingsController.js:buttonBlockUser: " + q.error + ", " + o);
							var p = (new g.AlertDialog()).retain();
							p.setTitle(a("Error"));
							p.setText(q.error);
							p.setChoices([a("OK")]);
							p.onchoice = function() {
								p.release();
								p = null
							};
							p.show()
						} else {
							NgLogD("xxx blockeduser index : " + k.getIndex());
							k.removeFromParent();
							var n = (new g.AlertDialog()).retain();
							n.setTitle(a("The user %1s has been unblocked", j.gamertag));
							n.setChoices([a("OK")]);
							n.onchoice = function() {
								n.release();
								n = null
							};
							n.show();
							this.view()._blockedUserUIList.splice(k.getIndex(), 1);
							this.view()._updateBlockedUserAreaSize(this.view()._blockedUserUIList.length - 1);
							this.view()._updateContentSize();
							this._refreshBlockedUsers(k.getIndex())
						}
					}).bind(this))
				}
				l.release();
				l = null
			}).bind(this);
			l.show()
		},
		_refreshBlockedUsers: function(m) {
			if (this.view()._blockedUserUIList && m >= 0 && m < this.view()._blockedUserUIList.length) {
				for (var l = m; l < this.view()._blockedUserUIList.length; l++) {
					var j = this.view()._blockedUserUIList[l];
					var k = j.getIndex();
					j.setIndex(k - 1)
				}
			}
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankController"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankController"] = e;
	var g = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/UI").UI;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		ComplexLabel: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ComplexLabel").ComplexLabel
		},
		Balance: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Balance").Balance
		},
		Transaction: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Transaction").Transaction
		},
		SupportWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen").SupportWebScreen
		},
		Analytics: function() {
			return require("NGCore/Client/Core/Analytics").Analytics
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		BankStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/BankStyle")
		}
	});
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = a.OldStyle.ScaledTextSize;
	var k = g.Class.subclass({
		classname: "CoinPack",
		initialize: function(p, r, q, o, n, l, m) {
			this._productId = p;
			this._descLine1 = r;
			this._descLine2 = q;
			this._descLine3 = o;
			this._amount = n;
			this._priceStr = l;
			this._imageUrl = m;
			this._coinPackView = null
		}
	});
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var b = e.BankController = f.subclass({
		classname: "BankController",
		analyticsName: "Bank",
		MAX_BALANCE_VALUE: 100000,
		loadView: function($super) {
			if (!this._view) {
				this.setView(new d.View())
			}
			$super()
		},
		initialize: function($super, E, v, w) {
			if ($super && typeof $super == "function") {
				$super()
			}
			this._selectCallback = v;
			this._cancelCallback = w;
			var K = this;
			a.BankStyle;
			var A = a.OldStyle.registeredStyle("social.us.banking").props();
			this.setTitleImage(a.Assets.image("bank_icon.png"));
			this.setTitle(j("The MobaCoin Bank"));
			this.isAnimating = false;
			this._numCoinPacksInView = 3;
			this._minCoinPackPos = 0;
			this._stickyTime = 500;
			this._stickyTargetPos = this._minCoinPackPos;
			this._totalWidth = a.ServiceHost.view().getFrame()[2];
			this._totalHeight = a.ServiceHost.view().getFrame()[3];
			var R = -this._totalWidth * A.topAreaXRatio;
			var P = this._totalHeight * A.topAreaYRatio - 1;
			var T = this._totalWidth * A.topAreaWidthRatio;
			var N = this._totalHeight * A.topAreaHeightRatio;
			var H = this._totalWidth * A.coinPacksViewMarginRatio;
			var J = this._totalWidth - 2 * H;
			var G = this._totalHeight * A.coinPacksViewHeightRatio;
			this._coinPackOffsetX = H;
			this._coinPackOffsetY = this._totalHeight * A.coinPackOffsetYRatio;
			var p = H * A.arrowWidthRatio;
			var q = G * A.arrowHeightRatio;
			var O = H * A.arrowSideMarginRatio;
			var n = this._coinPackOffsetY + G / 2 - q / 2;
			this._coinPackMarginBig = H * A.coinPackMarginBigRatio;
			this._coinPackMarginSmall = this._totalWidth * A.coinPackMarginSmallRatio;
			this._coinPackWidth = (J - (this._numCoinPacksInView - 1) * this._coinPackMarginSmall) / this._numCoinPacksInView;
			this._coinPackHeight = G;
			this._coinPackGroupWidth = this._numCoinPacksInView * this._coinPackWidth + (this._numCoinPacksInView - 1) * this._coinPackMarginSmall;
			var s = this._totalHeight * A.bottomAreaHeightRatio;
			var I = this._totalHeight - s;
			var x = new d.ViewGeometry.Rect(0, 0, this._totalWidth, this._totalHeight);
			this.view().setFrame(x);
			this._topArea = this.retainView(new d.View());
			this._topArea.setFrame([R, P, T, N]);
			this._topArea.setAttributes(A.topAreaView);
			this._balanceArea = this.retainView(new d.View());
			this._balanceArea.setFrame([-this._totalWidth * A.balanceAreaXRatio, N * A.balanceAreaYRatio, this._totalWidth * A.balanceAreaWidthRatio, N * A.balanceAreaHeightRatio]);
			this._balanceArea.setAttributes(A.balanceAreaView);
			this._topArea.addChild(this._balanceArea);
			this._balanceCoin = this.retainView(new d.Image());
			this._balanceCoin.setFrame([this._totalWidth * A.balanceCoinXRatio, N * A.balanceCoinYRatio, N * A.balanceCoinWidthRatio, N * A.balanceCoinHeightRatio]);
			this._balanceCoin.setImage(a.Assets.image("bank_coins_balance.png"));
			this._balanceArea.addChild(this._balanceCoin);
			this._myBalance = this.retainView(new d.Label());
			this._myBalance.setText(j("My Balance:"));
			this._myBalance.setFrame([this._totalWidth * A.myBalanceXRatio, 0, this._totalWidth * A.myBalanceWidthRatio, N * A.myBalanceHeightRatio]);
			this._myBalance.setTextGravity(d.ViewGeometry.Gravity.Left);
			this._myBalance.setAttributes(A.myBalanceLabel);
			this._balanceArea.addChild(this._myBalance);
			this._balanceNum = this.retainView(new d.Label());
			this._balanceNum.setFrame([this._totalWidth * A.balanceNumXRatio, N * A.balanceNumYRatio, this._totalWidth * A.balanceNumWidthRatio, N * A.balanceNumHeightRatio]);
			this._balanceNum.setTextGravity(d.ViewGeometry.Gravity.Left);
			this._balanceNum.setAttributes(A.balanceNumLabel);
			this._balanceArea.addChild(this._balanceNum);
			this.updateBalance();
			this._balanceName = this.retainView(new d.Label());
			this._balanceName.setText(j("MobaCoin"));
			this._balanceName.setFrame([this._totalWidth * A.balanceNameXRatio, N * A.balanceNameYRatio, this._totalWidth * A.balanceNameWidthRatio, N * A.balanceNameHeightRatio]);
			this._balanceName.setTextGravity(d.ViewGeometry.Gravity.Left);
			this._balanceName.setAttributes(A.balanceNameLabel);
			this._balanceArea.addChild(this._balanceName);
			this._supportButton = this.retainView(new a.UnspammableButton());
			this._supportButton.setText(j("Customer Support"));
			this._supportButton.setFrame([this._totalWidth * A.supportButtonXRatio, N * A.supportButtonYRatio, this._totalWidth * A.supportButtonWidthRatio, N * A.supportButtonHeightRatio]);
			this._supportButton.setAttributes(A.customerSupportButton);
			this._supportButton.setGradient(A.customerSupportButtonPressed, d.State.Pressed);
			this._supportButton.onclick = function() {
				if (a.ServiceHost.navController) {
					a.ServiceHost.showLoadingHelper(function() {
						a.ServiceHost.navController.pushViewController(new a.SupportWebScreen())
					})
				}
			};
			this._topArea.addChild(this._supportButton);
			this.view().addChild(this._topArea);
			this._coinBackgroundView = this.retainView(new d.View());
			this._coinBackgroundView.setFrame([0, P + N, this._totalWidth, this._totalHeight - (P + N)]);
			this._coinBackgroundView.setAttributes(A.coinBackgroundView);
			this.view().addChild(this._coinBackgroundView);
			this._coinPacksArray = this.getCoinPacks(E);
			this._coinPackGroups = new Array();
			var o = null;
			for (var Q = 0; Q < this._coinPacksArray.length; Q++) {
				var y = this._coinPacksArray[Q];
				var M = this.retainView(new d.View());
				M.setFrame([(Q % this._numCoinPacksInView) * (this._coinPackWidth + this._coinPackMarginSmall), 0, this._coinPackWidth, this._coinPackHeight]);
				M.setAttributes(A.coinPackView);
				var D = this.retainView(new d.Label());
				D.setText(y._descLine1);
				D.setFrame([0, this._coinPackHeight * A.coinPackHeader1YRatio, this._coinPackWidth, this._coinPackHeight * A.coinPackHeader1HeightRatio]);
				D.setAttributes(A.coinPackHeaderLabel);
				M.addChild(D);
				var C = this.retainView(new d.Label());
				C.setText(y._descLine2);
				C.setFrame([0, this._coinPackHeight * A.coinPackHeader2YRatio, this._coinPackWidth, this._coinPackHeight * A.coinPackHeader2HeightRatio]);
				C.setAttributes(A.coinPackHeaderMidLabel);
				M.addChild(C);
				var B = this.retainView(new d.Label());
				B.setText(y._descLine3);
				B.setFrame([0, this._coinPackHeight * A.coinPackHeader3YRatio, this._coinPackWidth, this._coinPackHeight * A.coinPackHeader3HeightRatio]);
				B.setAttributes(A.coinPackHeaderLabel);
				M.addChild(B);
				var L = this.numDigitsOfWholeNumber(y._amount);
				var F = this._coinPackWidth * A.coinPackAmountDigitWidthRatio;
				var l = this._coinPackHeight * A.coinPackCoinWidthRatio + this._coinPackWidth * A.coinPackCoinMarginRatio;
				var m = this.retainView(new d.Image());
				m.setFrame([(this._coinPackWidth - l - L * F) * 0.5, this._coinPackHeight * A.coinPackCoinYRatio, this._coinPackHeight * A.coinPackCoinWidthRatio, this._coinPackHeight * A.coinPackCoinHeightRatio]);
				if (!y._imageUrl) {
					if (a.Transaction._isIOS()) {
						m.setImage(a.Assets.image("silver_bank_coin.png"))
					} else {
						m.setImage(a.Assets.image("gold_mobacoin.png"))
					}
				} else {
					m.setImage(y._imageUrl)
				}
				M.addChild(m);
				var u = this.retainView(new d.Label());
				u.setText("" + y._amount);
				u.setFrame([(this._coinPackWidth + l - L * F) * 0.5, this._coinPackHeight * A.coinPackAmountYRatio, this._coinPackWidth * A.coinPackAmountWidthRatio, this._coinPackHeight * A.coinPackAmountHeightRatio]);
				u.setTextGravity(d.ViewGeometry.Gravity.Left);
				u.setAttributes(A.coinPackAmountLabel);
				M.addChild(u);
				var z = this._coinPackWidth * A.coinPackPriceButtonWidthRatio;
				var r = this.retainView(new a.UnspammableButton());
				r.setText(y._priceStr);
				r.setFrame([(this._coinPackWidth - z) / 2, this._coinPackHeight * A.coinPackPriceButtonYRatio, z, this._coinPackHeight * A.coinPackPriceButtonHeightRatio]);
				r.setAttributes(A.coinPackPriceButton);
				var t = function(W) {
					for (var V = 0; V < K._coinPacksArray.length; V++) {
						var X = K._coinPacksArray[V];
						X._coinPackPriceButton.setEnabled(true)
					}
					if (W) {
						if (W == "cancelled") {
							return
						}
						NgLogD("mobage/Purchase: received IAB failure: " + W);
						var Y = (new d.AlertDialog()).retain();
						Y.setTitle(j("Purchase Failed"));
						Y.setText(j("The purchase failed.  Please try again later."));
						Y.setChoices([j("OK")]);
						Y.onchoice = function(Z) {
							Y.release();
							Y = undefined
						};
						Y.show();
						return
					}
					var U = (new d.AlertDialog()).retain();
					U.setTitle(j("Purchase Succeeded"));
					U.setText(j("The purchase succeeded.  Your mobacoin balance has been updated!"));
					U.setChoices([j("OK")]);
					U.onchoice = function(Z) {
						U.release();
						U = undefined
					};
					U.show();
					K.updateBalance()
				};
				r.onclick = function(X, W, U, V) {
					return function() {
						NgLogD("mobage-BankController: coinPackPriceButton tapped for " + X);
						for (var Z = 0; Z < V.length; Z++) {
							var aa = V[Z];
							aa._coinPackPriceButton.setEnabled(false)
						}
						if (W + K._balanceValue >= K.MAX_BALANCE_VALUE) {
							var Y = (new d.AlertDialog()).retain();
							Y.setTitle(j("Hey Big Spender"));
							Y.setText(j("You've hit the balance max of 100,000 MobaCoin. Spend some coins before you buy more!"));
							Y.setChoices([j("OK")]);
							Y.onchoice = function(ab) {
								Y.release();
								Y = undefined
							};
							Y.show()
						} else {
							if (typeof K._selectCallback == "function") {
								K._selectCallback(X, t, U)
							}
						}
					}
				}(y._productId, y._amount, y._priceStr, this._coinPacksArray);
				M.addChild(r);
				y._coinPackPriceButton = r;
				y._coinPackView = M;
				if (!o || (Q % this._numCoinPacksInView) === 0) {
					o = this.retainView(new d.View());
					this.view().addChild(o);
					this._coinPackGroups.push(o)
				}
				if (o) {
					o.addChild(M)
				}
			}
			var S = p / 2;
			this._leftArrowButton = this.retainView(new a.UnspammableButton());
			this._leftArrowButton.setFrame([O - S, n - S, p + 2 * S, q + 2 * S]);
			this._leftArrowButton.setImageInsets([S, S, S, S]);
			this._leftArrowButton.setImage(a.Assets.image("bank_arrow_left.png"));
			this._leftArrowButton.setImage(a.Assets.image("bank_arrow_left_downstate.png"), d.State.Pressed);
			this._leftArrowButton.onclick = function() {
				NgLogD("mobage-BankController: left button tapped");
				K.doMove(false)
			};
			this.view().addChild(this._leftArrowButton);
			this._rightArrowButton = this.retainView(new a.UnspammableButton());
			this._rightArrowButton.setFrame([this._totalWidth - O - p - S, n - S, p + 2 * S, q + 2 * S]);
			this._rightArrowButton.setImageInsets([S, S, S, S]);
			this._rightArrowButton.setImage(a.Assets.image("bank_arrow_right.png"));
			this._rightArrowButton.setImage(a.Assets.image("bank_arrow_right_downstate.png"), d.State.Pressed);
			this._rightArrowButton.onclick = function() {
				NgLogD("mobage-BankController: right button tapped");
				K.doMove(true)
			};
			this.view().addChild(this._rightArrowButton);
			this.setCurrentCoinPackPos(this._minCoinPackPos);
			this.updateArrowButtons();
			this._bottomArea = this.retainView(new d.View());
			this._bottomArea.setFrame([0, I, this._totalWidth, s]);
			this._mobageExplanation = this.retainView(new d.Label());
			this._mobageExplanation.setText(j("One currency to spend in all of your Mobage games."));
			this._mobageExplanation.setTextSize(h(16).realize());
			this._mobageExplanation.setFrame([0, 0, this._totalWidth, s]);
			this._mobageExplanation.setAttributes(A.bottomAreaLabel);
			this._bottomArea.addChild(this._mobageExplanation);
			this.view().addChild(this._bottomArea);
			return this
		},
		$initWithJSON: function(l) {
			return new b(null, null)
		},
		onJSON: function(l) {
			return null
		},
		canMove: function(l) {
			var m = 0;
			if (l) {
				m = this.getMaxCoinPackPos() - this._currentCoinPackPos
			} else {
				m = this._currentCoinPackPos - this._minCoinPackPos
			}
			m = Math.abs(m);
			if (m < this._coinPackWidth) {
				return false
			}
			return true
		},
		getMaxCoinPackPos: function() {
			if (this._coinPacksArray) {
				var n = Math.floor((this._coinPacksArray.length - 1) / this._numCoinPacksInView);
				var m = (this._coinPacksArray.length - 1) - n;
				var l = this._coinPacksArray.length * this._coinPackWidth + n * this._coinPackMarginBig + m * this._coinPackMarginSmall;
				l -= this._coinPackGroupWidth;
				return l
			}
			return 0
		},
		putPosInBounds: function(l) {
			return Math.max(this._minCoinPackPos, Math.min(l, this.getMaxCoinPackPos()))
		},
		doMove: function(l) {
			if (this.isAnimating) {
				return
			}
			var n = this._coinPackGroupWidth + this._coinPackMarginBig;
			if (!l) {
				n *= -1
			}
			var m = this.putPosInBounds(this._stickyTargetPos + n);
			if (this._stickyTargetPos != m) {
				this._stickyTargetPos = m;
				this.animateCoinPacks()
			}
		},
		animateCoinPacks: function() {
			if (this.isAnimating) {
				return
			}
			var l = this;
			this.isAnimating = true;
			d.animate(function() {
				l.setCurrentCoinPackPos(l._stickyTargetPos)
			}, this._stickyTime, function() {
				l.updateArrowButtons();
				l.isAnimating = false
			})
		},
		setCurrentCoinPackPos: function(m) {
			var l = this.putPosInBounds(m);
			if (this._currentCoinPackPos == undefined || l != this._currentCoinPackPos) {
				this._currentCoinPackPos = l;
				this.updateCoinPackPositions()
			}
		},
		updateArrowButtons: function() {
			if (!this.canMove(false)) {
				if (this._leftArrowButton.getParent()) {
					this._leftArrowButton.removeFromParent()
				}
			} else {
				if (!this._leftArrowButton.getParent()) {
					this.view().addChild(this._leftArrowButton)
				}
			}
			if (!this.canMove(true)) {
				if (this._rightArrowButton.getParent()) {
					this._rightArrowButton.removeFromParent()
				}
			} else {
				if (!this._rightArrowButton.getParent()) {
					this.view().addChild(this._rightArrowButton)
				}
			}
		},
		updateCoinPackPositions: function() {
			if (!this._coinPacksArray) {
				return
			}
			var m = -this._currentCoinPackPos;
			for (var o = 0; o < this._coinPackGroups.length; o++) {
				var p = this._coinPackGroups[o];
				if (p) {
					p.setFrame([this._coinPackOffsetX + m, this._coinPackOffsetY, this._coinPackGroupWidth, this._coinPackHeight]);
					var q = this._coinPackGroupWidth / 2;
					var n = Math.abs(q - (m + 0.5 * this._coinPackWidth));
					var l = q - (0.5 * this._coinPackWidth);
					if (n > l) {
						p.setAlpha(Math.max(0.3, 1 - (n - l) / (l / 2)))
					} else {
						p.setAlpha(1)
					}
					m += this._coinPackGroupWidth + this._coinPackMarginBig
				}
			}
		},
		willPush: function($super, l) {
			NgLogD("mobage-BankController: willPush");
			this.navController._host.hideLoadingLabel();
			$super(l)
		},
		willReshow: function($super, l) {
			NgLogD("mobage-BankController: willReshow");
			$super(l)
		},
		didPop: function($super, l) {
			NgLogD("mobage-BankController: didPop");
			$super(l);
			a.Analytics.reportGameEvent("MobaPurchaseCancel");
			if (typeof this._cancelCallback == "function") {
				this._cancelCallback()
			}
		},
		updateBalance: function() {
			var l = this;
			a.Balance.get(function(o, q, p, n, m) {
				NgLogD("update balance = " + p);
				if (q) {
					l._balanceName.setText(n);
					l.setTitle(j("The %1s Bank", n));
					l.setBalance(p);
					if (m) {
						l._balanceCoin.setImage(m)
					}
				}
			})
		},
		setBalance: function(l) {
			this._balanceValue = l;
			if (this._balanceNum) {
				this._balanceNum.setText(a.Balance.addCommas(l))
			}
		},
		numDigitsOfWholeNumber: function(n) {
			var l = Math.floor(Math.abs(n));
			var m = 1;
			while (true) {
				if (l >= 10) {
					m++;
					l = Math.floor(l / 10)
				} else {
					break
				}
			}
			return m
		},
		getCoinPacks: function(m) {
			var o = new Array();
			for (var l in m) {
				var p = m[l];
				var q = p.id;
				if (q) {
					q = q.toLowerCase()
				}
				var n = -111;
				if (p.price) {
					n = parseInt(p.price, 10)
				}
				o.push(new k(q, j("Buy a"), p.name, p.currency, n, p.origin_price, p.imageUrl))
			}
			return o
		},
		destroy: function() {
			this._coinPacksArray = new Array();
			this._coinPackGroups = new Array()
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Login"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Login"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Login"] = e;
	var d = require("NGCore/Client/UI").UI;
	var h = require("NGCore/Client/Core/MessageListener").MessageListener;
	var b = d.ViewGeometry.Scale;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		CredentialsHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost
		},
		RegistrationStepOne: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationStepOne").RegistrationStepOne
		},
		CredentialsNavigableView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsNavigableView").CredentialsNavigableView
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		InterstitialSplashScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavPlaceholder").InterstitialSplashScreen
		},
		GameLaunchedEmitter: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter
		},
		CredentialsStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Credentials")
		}
	});
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var g = e.Login = f.subclass({
		classname: "Login",
		initialize: function($super, l, k) {
			$super();
			this._onCompleteCallback = l;
			this._regRef = k;
			this.titleTextLabel = (new d.Label()).retain();
			this.gamertag = (new d.Label()).retain();
			this.gamertagInput = (new d.EditText()).retain();
			this.pwd = (new d.Label()).retain();
			this.pwdInput = (new d.EditText()).retain();
			this.loginButton = (new a.UnspammableButton()).retain();
			this.forgotPwdButton = (new a.UnspammableButton()).retain();
			this._initEventing();
			this._gameLaunchedListener = new h();
			a.GameLaunchedEmitter.addListener(this._gameLaunchedListener, this.bind(this._onGameLaunched))
		},
		$initWithJSON: function(k) {
			return new g()
		},
		onJSON: function(k) {
			return null
		},
		destroy: function() {
			this.titleTextLabel.release();
			this.gamertag.release();
			this.gamertagInput.release();
			this.pwd.release();
			this.pwdInput.release();
			this.loginButton.release();
			this.forgotPwdButton.release();
			this._gameLaunchedListener.destroy()
		},
		_configureHost: function(k) {
			k.setIsFooterEnabled(true);
			k.view().setFooterText(j("Don't have a Mobage or\nPlus+ username?"));
			k.view().getFooterButton().setText(j("Sign Up"));
			k.view().getFooterButton().onclick = this.bind(function() {
				NgLogD("Sign Up button clicked " + this.navController.indexOfViewController(this));
				var l = this.navController.indexOfViewController(this);
				if (l <= 0 || !(this.navController.viewControllerAtIndex(l - 1) instanceof a.RegistrationStepOne)) {
					var m = c.Registration.initWithJSON({
						cb: this._onCompleteCallback
					});
					this.navController.pushViewController(m)
				} else {
					this.navController.back()
				}
			});
			k.disableSoftNavButtons()
		},
		_unconfigureHost: function(k) {
			k.setIsFooterEnabled(false)
		},
		_initEventing: function() {
			this.forgotPwdButton.onclick = this.bind(function() {
				NgLogD("Forget Pwd Clicked");
				var k = new c.ForgotPassword(this.bind(function() {
					this.navController.popViewController(k)
				}));
				this.navController.pushViewController(k)
			});
			this.loginButton.onclick = this.bind(function() {
				this._login()
			})
		},
		loadView: function($super) {
			NgLogD("Mobage/Login/loadView begin");
			this.setView(new a.CredentialsNavigableView());
			$super();
			var w = new d.ViewGeometry.Rect(a.CredentialsHost.navController.view().getFrame());
			var x = w.copy();
			this.view().setFrame(w);
			x.sliceVertical(176 * (w.h / 800));
			var p = x.sliceVertical(w.h * (46 / 800));
			p.inset(0, w.w * (28 / 480));
			this.titleTextLabel.setFrame(p);
			this.titleTextLabel.setText(j("Log In"));
			x.sliceVertical(10 * (w.h / 800));
			var n = x.sliceVertical(238 / 800 * w.h);
			n = n.inset(0, 26 / 480 * w.w);
			var o = n.sliceVertical(32 * (w.h / 800));
			o = o.inset(0, 2);
			this.gamertag.setFrame(o);
			this.gamertag.setText(j("Mobage Name"));
			var l = n.sliceVertical((5 + 70) / 800 * w.h);
			l = l.inset(5 / 800 * w.h, 0);
			this.gamertagInput.setFrame(l);
			this.gamertagInput.setInputType(d.Commands.InputType.None);
			this.gamertagInput.setEnterKeyType(d.Commands.EnterKeyType.Done);
			var s = n.sliceVertical((14 + 24) / 800 * w.h);
			s = s.inset(0, 2);
			this.pwd.setFrame(s);
			this.pwd.setText(j("Password"));
			var r = n.sliceVertical((5 + 70) / 800 * w.h);
			r = r.inset(5 / 800 * w.h, 0);
			this.pwdInput.setFrame(r);
			this.pwdInput.setInputType(d.Commands.InputType.Password);
			this.pwdInput.setEnterKeyType(d.Commands.EnterKeyType.Done);
			var v = x.sliceVertical((42 + 72) / 800 * w.h);
			var m = 42 / 800 * w.h;
			var q = 66 / 480 * w.w;
			v = v.inset(m, q, 0, q);
			this.loginButton.setFrame(v);
			this.loginButton.setText(j("Log In"));
			var u = x.sliceVertical((23 * 2 + 72) / 800 * w.h);
			var t = 23 / 800 * w.h;
			var k = 66 / 480 * w.w;
			u = u.inset(t, k);
			this.forgotPwdButton.setFrame(u);
			this.forgotPwdButton.setText(j("Forgot Your Password?"));
			this.view().addChild(this.titleTextLabel);
			this.view().addChild(this.gamertag);
			this.view().addChild(this.gamertagInput);
			this.view().addChild(this.pwd);
			this.view().addChild(this.pwdInput);
			this.view().addChild(this.pwdInput);
			this.view().addChild(this.loginButton);
			this.view().addChild(this.forgotPwdButton);
			this.loadStyles();
			NgLogD("Mobage/Login/loadView end")
		},
		loadStyles: function($super) {
			a.CredentialsStyles;
			$super("social.us.login");
			this.titleTextLabel.setAttributes(this.view().getStyle().props()["title"]);
			this.gamertag.setAttributes(this.view().getStyle().props()["inputLabel"]);
			this.gamertagInput.setAttributes(this.view().getStyle().props()["textBox"]);
			this.gamertagInput.setGradient(this.view().getStyle().props()["textBox"]["gradientError"], g.UIStateError);
			this.pwd.setAttributes(this.view().getStyle().props()["inputLabel"]);
			this.pwdInput.setAttributes(this.view().getStyle().props()["textBox"]);
			this.pwdInput.setGradient(this.view().getStyle().props()["textBox"]["gradientError"], g.UIStateError);
			this.loginButton.setAttributes(this.view().getStyle().props()["largeStandardButton"]);
			this.loginButton.setGradient(this.view().getStyle().props()["largeStandardButton"]["pressedGradient"], d.State.Pressed);
			this.forgotPwdButton.setGradient(this.view().getStyle().props()["forgotPwdButton"]["gradientPressed"], d.State.Pressed)
		},
		willPush: function($super, k) {
			$super(k);
			if (k.host) {
				this._configureHost(k.host)
			}
		},
		willReshow: function($super, k) {
			$super(k);
			if (k.host) {
				this._configureHost(k.host)
			}
			this._resetViewState()
		},
		willHide: function($super, k) {
			$super(k);
			this.gamertagInput.blur();
			this.pwdInput.blur();
			if (k.host) {
				this._unconfigureHost(k.host)
			}
		},
		willPop: function($super, k) {
			$super(k);
			this.gamertagInput.blur();
			this.pwdInput.blur();
			if (k.host) {
				this._unconfigureHost(k.host)
			}
		},
		_onGameLaunched: function() {
			if (this._waitingForGameLaunch) {
				if (this.progressDialog) {
					this.progressDialog.hide();
					this.progressDialog.destroy();
					this.progressDialog = undefined
				}
				var k = new d.Toast();
				k.setText(j("Welcome back %1s!", a.Session.getCurrentSession().user().gamertag));
				k.ondisappear = function() {
					k.destroy()
				};
				k.show();
				this._waitingForGameLaunch = false;
				a.ServiceHost.view().menuDrawerIsLocked = false
			}
		},
		_login: function() {
			NgLogD("Log in Clicked\n");
			this._resetViewState();
			if (!this.progressDialog) {
				this.progressDialog = new d.ProgressDialog({
					title: j("Logging in to Mobage"),
					text: j("Please wait...")
				})
			}
			this.progressDialog.show();
			var l = this.progressDialog;
			var n = this.gamertagInput.getText();
			var k = this.pwdInput.getText();
			var m = a.Session.getCurrentSession();
			m.newSessionWithUsernameAndPassword(n, k, this.bind(function(o, r) {
				this.progressDialog.hide();
				this.progressDialog.destroy();
				this.progressDialog = undefined;
				if (o) {
					NgLogD("************** Failed Login Error: " + JSON.stringify(o) + "\n");
					if (o.indexOf("gamername") != -1 || o.indexOf("login") != -1) {
						this.gamertagInput.setState(g.UIStateError)
					}
					if (o.indexOf("password") != -1) {
						this.pwdInput.setState(g.UIStateError)
					}
					var q = new d.Toast();
					q.setText("" + o);
					q.ondisappear = function() {
						q.destroy()
					};
					q.show()
				} else {
					NgLogD("Successful login! ********************\n");
					a.ServiceHost.closeMenuDrawer(false, false);
					this._waitingForGameLaunch = true;
					var s = this.navController.transitionAnimationTime;
					this.navController.transitionAnimationTime = s / 2;
					var p = new a.InterstitialSplashScreen();
					p.view().setAttributes(a.OldStyle.registeredStyle("BlackBackground").props());
					this.navController.pushViewController(p);
					this.navController.transitionAnimationTime = s;
					if (this._onCompleteCallback) {
						this._regRef.detachKL();
						this._onCompleteCallback(r.user())
					}
				}
			}));
			NgLogD("Log in click done, pending results.\n")
		},
		_resetViewState: function() {
			this.pwdInput.setState(d.State.Normal);
			this.gamertagInput.setState(d.State.Normal)
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ForgotPassword"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ForgotPassword"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ForgotPassword"] = e;
	var g = require("NGCore/Client/UI").UI;
	var f = g.ViewGeometry.Scale;
	var d = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		PlusRequest: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		CredentialsHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost
		},
		CredentialsStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Credentials")
		}
	});
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var a = e.ForgotPassword = b.subclass({
		classname: "ForgotPassword",
		initialize: function($super, h) {
			$super();
			this._onCompleteCallback = h;
			this.title = (new g.Label()).retain();
			this.subtitle = (new g.Label()).retain();
			this.email = (new g.Label()).retain();
			this.emailInput = (new g.EditText()).retain();
			this.sendButton = (new d.UnspammableButton()).retain();
			this._initEventing()
		},
		$initWithJSON: function(h) {
			return new a()
		},
		onJSON: function(h) {
			return null
		},
		destroy: function() {
			this.title.release();
			this.subtitle.release();
			this.email.release();
			this.emailInput.release();
			this.sendButton.release()
		},
		_initEventing: function() {
			this.sendButton.onclick = this.bind(function() {
				this._resetPassword()
			})
		},
		loadView: function($super) {
			NgLogD("Mobage/Forgot Password/loadView begin");
			$super();
			var p = new g.ViewGeometry.Rect(d.CredentialsHost.navController.view().getFrame());
			var r = p.copy();
			this.view().setFrame(p);
			r.sliceVertical(176 * (p.h / 800));
			var m = r.sliceVertical(p.h * (46 / 800));
			m.inset(0, p.w * (28 / 480));
			this.title.setFrame(m);
			this.title.setText(c("Forgot Your Password?"));
			r.sliceVertical(10 * (p.h / 800));
			var q = r.sliceVertical((36 + 99) / 800 * p.h);
			q = q.inset(0, 49 / 480 * p.w);
			this.subtitle.setFrame(q);
			this.subtitle.setText(c("Please enter the email address you used to sign up for Mobage and a password reset will be sent to you."));
			var k = r.sliceVertical(143 / 800 * p.h);
			k = k.inset(0, 26 / 480 * p.w);
			var o = k.sliceVertical((45 + 24) / 800 * p.h);
			o = o.inset(0, 2);
			this.email.setFrame(o);
			this.email.setText(c("Email Address"));
			var n = k.sliceVertical((5 + 70) / 800 * p.h);
			n = n.inset(5 / 800 * p.h, 0);
			this.emailInput.setFrame(n);
			this.emailInput.setInputType(g.Commands.InputType.Email);
			this.emailInput.setEnterKeyType(g.Commands.EnterKeyType.Done);
			var l = r.sliceVertical((42 + 72) / 800 * p.h);
			var h = 42 / 800 * p.h;
			var j = 66 / 480 * p.w;
			l = l.inset(h, j, 0, j);
			this.sendButton.setFrame(l);
			this.sendButton.setText(c("Send"));
			this.view().addChild(this.title);
			this.view().addChild(this.subtitle);
			this.view().addChild(this.email);
			this.view().addChild(this.emailInput);
			this.view().addChild(this.sendButton);
			this.loadStyles();
			NgLogD("Mobage/Forgot Password/loadView end")
		},
		loadStyles: function($super) {
			d.CredentialsStyles;
			$super("social.us.forgotpassword");
			this.email.setAttributes(this.view().getStyle().props()["inputLabel"]);
			this.emailInput.setAttributes(this.view().getStyle().props()["textBox"]);
			this.emailInput.setGradient(this.view().getStyle().props()["textBox"]["gradientError"], a.UIStateError);
			this.sendButton.setAttributes(this.view().getStyle().props()["largeStandardButton"]);
			this.sendButton.setGradient(this.view().getStyle().props()["largeStandardButton"]["pressedGradient"], g.State.Pressed)
		},
		_resetPassword: function() {
			NgLogD("Send email clicked.");
			this._resetViewState();
			if (!this.progressDialog) {
				this.progressDialog = new g.ProgressDialog();
				this.progressDialog.setText(c("Sending request"))
			}
			this.progressDialog.show();
			d.PlusRequest.sendPasswordResetEmailWithAddress(this.emailInput.getText(), this.bind(function(h) {
				this.progressDialog.hide();
				this.progressDialog.destroy();
				this.progressDialog = undefined;
				NgLogD("Mobage/ForgotPassword/Plus Request response=" + JSON.stringify(h));
				if (!h) {
					var j = new g.Toast();
					j.setText(c("Email sent!"));
					j.show();
					if (this._onCompleteCallback) {
						this._onCompleteCallback()
					}
				} else {
					if (h.indexOf("email") != -1) {
						this.emailInput.setState(a.UIStateError)
					}
					var k = new g.Toast();
					k.setText(h);
					k.show()
				}
			}))
		},
		_resetViewState: function() {
			this.emailInput.setState(g.State.Normal)
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Registration"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Registration"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Registration"] = a;
	a.Registration = {
		initWithJSON: function(d) {
			var c = d ? d.cb : null;
			var b = require("NGCore/Client/Core/Capabilities").Capabilities;
			return new(require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedRegistrationStepOne").DisaggregatedRegistrationStepOne)(c)
		},
		onJSON: function(b) {
			return null
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationStepOne"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationStepOne"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationStepOne"] = g;
	var f = require("NGCore/Client/UI").UI;
	var b = f.ViewGeometry.Scale;
	var c = require("NGCore/Client/Device").Device;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		RegistrationModal: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationModal").RegistrationModal
		},
		RegistrationRecord: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/RegistrationRecord").RegistrationRecord
		},
		ViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController
		},
		CredentialsHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost
		},
		Analytics: function() {
			return require("NGCore/Client/Core/Analytics").Analytics
		},
		MessageListener: function() {
			return require("NGCore/Client/Core/MessageListener").MessageListener
		},
		CredentialsStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Credentials")
		},
		RegistrationStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Registration")
		}
	});
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/UIUtils").UIUtils;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var l = a.MessageListener.subclass({
		classname: "Modal_KeyListener"
	});
	var k = f.View.subclass({
		classname: "RegistrationStepOne_SizeReporterView",
		sizeChanged: function(o, n) {
			if (this.controller && this.controller.sizeChanged) {
				this.controller.sizeChanged.apply(this.controller, Array.prototype.slice.call(arguments))
			}
		}
	});
	var m = g.RegistrationStepOne = h.subclass({
		classname: "RegistrationStepOne",
		_registrationRecord: null,
		_onCompleteCallback: null,
		_hasBeenLoaded: false,
		_regModal: null,
		initialize: function($super, n) {
			$super();
			this._onCompleteCallback = n;
			a.RegistrationStyle;
			this._style = a.OldStyle.registeredStyle("social.us.reg.stepone").props()
		},
		destroy: function() {
			for (var n = 0; n < this.retainedViews.length; n++) {
				this.retainedViews[n].release()
			}
			this.detachKL();
			NgLogD("DESTROY REG 1")
		},
		sizeChanged: function(G, s) {
			if (G * s) {
				this.view()
			}
			var D = new f.ViewGeometry.Rect(0, 0, G, s);
			var C = D.copy();
			this.view().setFrame(D);
			this._regModal.view().setFrame(0, 0, D.w, D.h);
			var v = D.w / 20;
			var t = D.h / 14;
			var u = D.w * 4 / 4.4;
			var H = D.h / 2.2;
			var r = [v, t, u, H];
			this.namesModal.setFrame(r);
			var x = 10;
			var o = H / 6;
			var I = H / 6;
			var w = u - (u / 4);
			var p = H / 6;
			this.name0Button.setFrame([u - u / 2 - (w / 2), H / 7 + I, w, I]);
			this.name1Button.setFrame([u - u / 2 - (w / 2), H / 7 + I * 2 + (H / 20), w, I]);
			this.name2Button.setFrame([u - u / 2 - (w / 2), H / 7 + I * 3 + (H / 10), w, I]);
			this.namesTitle.setFrame([0, o / 4, u, o]);
			this.namesSubtitle.setFrame([0, o / 1.2, u, o]);
			this._closeButton.setFrame(u - p / 4, t - p / 2, p, p);
			this._transparentBase.setGradient({
				gradient: ["66000000 0.0", "66000000 0.0"]
			});
			this._transparentBase.setFrame(0, 0, D.w, D.h);
			C.sliceVertical(156 * (D.h / 800));
			var B = C.sliceVertical(218 / 800 * D.h);
			B = B.inset(0, 26 / 480 * D.w);
			var n = B.sliceVertical((32) / 800 * D.h);
			n = n.inset(0, 2);
			this.gamernameTitle.setFrame(n);
			var E = B.sliceVertical((5 + 70) / 800 * D.h);
			E = E.inset(5 / 800 * D.h, 0);
			this.gamernameEditText.setFrame(E);
			this.gamernameEditText.setInputType(f.Commands.InputType.None);
			this.gamernameEditText.setEnterKeyType(f.Commands.EnterKeyType.Done);
			if (!this.gamernameEditText.getText()) {
				this.gamernameEditText.setText(" ");
				this.gamernameEditText.setText("")
			}
			var y = B.sliceVertical((14 + 24) / 800 * D.h);
			y = y.inset(0, 2);
			this.passwordTitle.setFrame(y);
			var z = B.sliceVertical((5 + 70) / 800 * D.h);
			z = z.inset(5 / 800 * D.h, 0);
			this.passwordEditText.setFrame(z);
			this.passwordEditText.setInputType(f.Commands.InputType.Password);
			this.passwordEditText.setEnterKeyType(f.Commands.EnterKeyType.Done);
			if (!this.passwordEditText.getText()) {
				this.passwordEditText.setText(" ");
				this.passwordEditText.setText("")
			}
			C.sliceVertical((25) / 800 * D.h);
			var A = C.sliceVertical((66) / 800 * D.h);
			var q = 66 / 480 * D.w;
			A = A.inset(0, q, 0, q);
			this.continueSignupButton.setFrame(A);
			C.sliceVertical((10) / 800 * D.h);
			var F = C.sliceVertical((200) / 800 * D.h);
			this.gameImage.setFrame(F);
			this.gameImage.setImage(a.Assets.image("regillus.png"));
			this.gameImage.setImageFit(f.Commands.FitMode.Fill);
			this.gameImage.setImageGravity([0.5, 0.5])
		},
		loadView: function($super) {
			if (this._hasBeenLoaded) {
				return
			}
			this._hasBeenLoaded = true;
			this.setView(new k());
			this._registrationRecord = new a.RegistrationRecord();
			var n = this;
			this.retainedViews = [];
			var o = function(r) {
				r.retain();
				n.retainedViews.push(r);
				return r
			};
			this.continueSignupButton = o(new a.UnspammableButton());
			this.gamernameTitle = o(new f.Label());
			this.gamernameEditText = o(new f.EditText());
			this.passwordTitle = o(new f.Label());
			this.passwordEditText = o(new f.EditText());
			this.gameImage = o(new f.Image());
			this._regModal = new a.RegistrationModal(this._onCompleteCallback, this._registrationRecord, n).retain();
			this._transparentBase = new a.UnspammableButton().retain();
			this.namesModal = new f.View().retain();
			this.name0Button = new a.UnspammableButton().retain();
			this.name1Button = new a.UnspammableButton().retain();
			this.name2Button = new a.UnspammableButton().retain();
			this.namesTitle = new f.Label().retain();
			this.namesSubtitle = new f.Label().retain();
			this._closeButton = new a.UnspammableButton().retain();
			this._closeButton.setImage(a.Assets.image("closebutton_up.png"));
			this._closeButton.setImage(a.Assets.image("closebutton_down.png"), f.State.Pressed);
			this.namesTitle.setText(j("Looks like someone beat you to it..."));
			this.namesSubtitle.setText(j("How about one of these Mobage names."));
			this.namesTitle.setAttributes(this._style.nameTitle);
			this.namesSubtitle.setAttributes(this._style.nameSubtitle);
			this.name0Button.setAttributes(this._style.nameButton);
			this.name1Button.setAttributes(this._style.nameButton);
			this.name2Button.setAttributes(this._style.nameButton);
			this.namesModal.setAttributes(this._style.namesBackground);
			this.namesModal.addChild(this.name0Button);
			this.namesModal.addChild(this.name1Button);
			this.namesModal.addChild(this.name2Button);
			this.namesModal.addChild(this.namesTitle);
			this.namesModal.addChild(this.namesSubtitle);
			this.gamernameTitle.setText(j("Create Your Mobage Name"));
			this.continueSignupButton.setText(j("Let's Go!"));
			this.gamernameEditText.setPlaceholder(j("4 to 15 characters"));
			this.passwordEditText.setPlaceholder(j("4 to 25 characters"));
			this.passwordTitle.setText(j("Create Your Password"));
			this.continueSignupButton.onclick = this.bind(function() {
				this._doRegStep()
			});
			this._closeButton.onclick = this.bind(function() {
				if (this.namesModal) {
					this.removeNamesModal()
				}
				if (this._regModal) {
					this.removeRegModal()
				}
				this.gamernameEditText.setEnabled(true);
				this.passwordEditText.setEnabled(true)
			});
			this._transparentBase.onclick = this.bind(function() {
				this.removeNamesModal()
			});
			this.name0Button.onclick = this.bind(function() {
				this.applySuggestedName(this.name0Button.getText());
				this.removeNamesModal()
			});
			this.name1Button.onclick = this.bind(function() {
				this.applySuggestedName(this.name1Button.getText());
				this.removeNamesModal()
			});
			this.name2Button.onclick = this.bind(function() {
				this.applySuggestedName(this.name2Button.getText());
				this.removeNamesModal()
			});
			this.view().setFrame(f.Window.getFrame());
			a.CredentialsStyles;
			var q = a.OldStyle.registeredStyle("social.us.registration");
			this.gamernameTitle.setAttributes(q.props()["inputLabel"]);
			this.gamernameEditText.setAttributes(q.props()["textBox"]);
			this.gamernameEditText.setGradient(q.props()["textBox"]["gradientError"], a.ViewController.UIStateError);
			this.passwordTitle.setAttributes(q.props()["inputLabel"]);
			this.passwordEditText.setAttributes(q.props()["textBox"]);
			this.passwordEditText.setGradient(q.props()["textBox"]["gradientError"], a.ViewController.UIStateError);
			this.continueSignupButton.setAttributes(q.props()["largeStandardButton"]);
			this.continueSignupButton.setGradient(q.props()["largeStandardButton"]["pressedGradient"], f.State.Pressed);
			for (var p = 0; p < this.retainedViews.length; p++) {
				this.view().addChild(this.retainedViews[p])
			}
		},
		showRegModal: function() {
			this._regModal.activate();
			this.view().addChild(this._regModal.view());
			this.view().addChild(this._closeButton);
			this._regModalVisible = true
		},
		removeRegModal: function() {
			this._regModalVisible = false;
			this._closeButton.removeFromParent();
			this._regModal.remove();
			this.detachKL();
			this.gamernameEditText.setEnabled(true);
			this.passwordEditText.setEnabled(true)
		},
		removeNamesModal: function() {
			this._transparentBase.removeFromParent();
			this._closeButton.removeFromParent();
			this.namesModal.removeFromParent()
		},
		applySuggestedName: function(n) {
			NgLogD("Selected Suggested Name: " + n);
			this.gamernameEditText.setText(j(n))
		},
		suggestNames: function(n) {
			this.name0Button.setText(j(n[n.length - 3]));
			this.name1Button.setText(j(n[n.length - 2]));
			this.name2Button.setText(j(n[n.length - 1]))
		},
		onKeyPressed: function(o) {
			var n = this;
			if (o.code === c.KeyEmitter.Keycode.back) {
				n.removeNamesModal();
				n.removeRegModal();
				return true
			}
			return false
		},
		detachKL: function() {
			if (this.kListener) {
				NgLogD("DETACH KL");
				c.KeyEmitter.removeListener(this.kListener);
				this.kListener = undefined
			}
		},
		attachKL: function() {
			NgLogD("ATTACH KL");
			this.detachKL();
			this.kListener = new l();
			a.UnspammableButton.addDeviceKeyListener(this.kListener, this.onKeyPressed.bind(this), 99999)
		},
		_configureHost: function(n) {
			n.setIsFooterEnabled(true);
			n.view().setFooterText(j("Log in with your Mobage or\nPlus+ username and password."));
			n.view().getFooterButton().setText(j("Log In"));
			n.view().getFooterButton().onclick = this.bind(function() {
				NgLogD("Log in button clicked " + this.navController.indexOfViewController(this));
				var o = this.navController.indexOfViewController(this);
				if (o <= 0 || !(this.navController.viewControllerAtIndex(o - 1) instanceof d.Login)) {
					var p = new d.Login(this._onCompleteCallback, this);
					this.navController.pushViewController(p)
				} else {
					this.navController.back()
				}
			});
			n.setRegHeaderEnabled(true, 0)
		},
		_unconfigureHost: function(n) {
			NgLogD("UNCONFIG REG");
			n.setIsFooterEnabled(false);
			n.setRegHeaderEnabled(false)
		},
		willPush: function($super, o) {
			var n = o.host;
			$super(o);
			if (o.host) {
				this._configureHost(o.host)
			}
		},
		didPush: function($super, n) {
			a.Analytics.reportFunnelStage("Registration02", 1, "SignUp01");
			$super(n)
		},
		willReshow: function($super, n) {
			NgLogD("WILL RESHOW");
			$super(n);
			if (n.host) {
				this._configureHost(n.host);
				if (this._regModalVisible) {
					this.attachKL()
				}
				this._regModal.activate()
			}
			this.gamernameEditText.setState(f.State.Normal);
			this.passwordEditText.setState(f.State.Normal)
		},
		willHide: function($super, n) {
			NgLogD("WILL HIDE");
			$super(n);
			if (n.host) {
				this._unconfigureHost(n.host);
				this.detachKL()
			}
		},
		_doRegStep: function() {
			var o = this;
			this.gamernameEditText.setState(f.State.Normal);
			this.passwordEditText.setState(f.State.Normal);
			this._registrationRecord.gamername = this.gamernameEditText.getText().replace(/^\s+|\s+$/g, "");
			this._registrationRecord.password = this.passwordEditText.getText().replace(/^\s+|\s+$/g, "");
			var n = false;
			this._registrationRecord.testLocalGamername(function(p) {
				if (p) {
					n = true;
					o.gamernameEditText.setState(a.ViewController.UIStateError);
					e.showToast(p)
				}
			});
			if (n) {
				return
			}
			this._registrationRecord.testLocalPassword(function(p) {
				if (p) {
					n = true;
					o.passwordEditText.setState(a.ViewController.UIStateError);
					e.showToast(p)
				}
			});
			if (n) {
				return
			}
			if (!this.progressDialog) {
				this.progressDialog = new f.ProgressDialog();
				this.progressDialog.setText(j("Checking availability..."))
			}
			this.progressDialog.show();
			this._registrationRecord.testRemoteGamername(function(p, q) {
				o.progressDialog.hide();
				o.progressDialog.destroy();
				o.progressDialog = undefined;
				if (p && p.length > 0) {
					if (q.length) {
						o.suggestNames(q);
						o.view().addChild(o._transparentBase);
						o.view().addChild(o.namesModal);
						o.view().addChild(o._closeButton)
					} else {
						o.gamernameEditText.setState(a.ViewController.UIStateError);
						e.showToast(p)
					}
					a.Analytics.reportGameEvent("RegErr", {
						errors: p
					})
				} else {
					o.gamernameEditText.setEnabled(false);
					o.passwordEditText.setEnabled(false);
					a.Analytics.reportFunnelStage("Registration02", 2, "SignUp02");
					o.showRegModal();
					o.attachKL()
				}
			})
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Gamercard"] = function() {
	var k = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Gamercard"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Gamercard"] = k;
	var n = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/Device").Device;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var r = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var g = require("NGCore/Client/UI").UI;
	var a = g.ViewGeometry.Rect;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var h = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall").Wall;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserProfileController").UserProfileController;
	var q = l.ScaledTextSize;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var p = k.Gamercard = d.subclass({
		classname: "Gamercard",
		_user: null,
		_mainView: null,
		_mobagePane: null,
		_userInfoPane: null,
		_userWallPane: null,
		_gamePane: null,
		_closeButton: null,
		_mobageButton: null,
		_profileButton: null,
		_customButton1: null,
		_customButton2: null,
		_userNameLabel: null,
		_userGameNameLabel: null,
		_userMottoLabel: null,
		_customLabel1: null,
		_customLabel2: null,
		_customLabel3: null,
		_customLabel1Value: null,
		_customLabel2Value: null,
		_customLabel3Value: null,
		_userIconImage: null,
		_userProfileBracketImage: null,
		_gameIconImage: null,
		_currentOrientation: null,
		initialize: function($super, u, s) {
			$super();
			this._user = u;
			this._cb = s;
			this._style = l.registeredStyle("social.us.gamercard.wallpostsection").props();
			this._commonSheet = l.registeredStyle("social.us.commonelements").props();
			this.view().alpha = 0;
			this._mainView = new g.View().retain();
			this.view().addChild(this._mainView);
			this._mobagePane = new g.View().retain();
			this._mobagePane.setAttributes(this._style.topBarBackgroundPane);
			this._mainView.addChild(this._mobagePane);
			this._userInfoPane = new g.View().retain();
			this._userInfoPane.setAttributes(this._style.userInfoGradient);
			this._mainView.addChild(this._userInfoPane);
			this._userWallPane = new g.View().retain();
			this._userWallPane.setAttributes(this._style.wallGradient);
			this._mainView.addChild(this._userWallPane);
			this._gamePane = new g.View().retain();
			this._gamePane.setAttributes(this._style.gameInfoGradient);
			this._mainView.addChild(this._gamePane);
			this._closeButton = new g.Button().retain();
			this._closeButton.onclick = function(w) {
				t.destroy()
			};
			this.view().addChild(this._closeButton);
			this._mobageButton = new g.Button().retain();
			this._mobageButton.setImage(j.image("mobagelogotm.png"));
			this._mobageButton.setImage(j.image("mobagelogotm_down.png"), g.State.Pressed);
			this._mobageButton.onclick = function() {
				NgLogD("Pressed mobage button");
				t.destroy();
				var w = e.Home.initWithJSON({});
				o.navController.pushViewController(w, "friendpickerMobageBtn")
			};
			this._mobagePane.addChild(this._mobageButton);
			this._userNameLabel = this._createLabel(this._user.gamertag, 14, "FFFFFFFF", [0, 0.5], {});
			this._userInfoPane.addChild(this._userNameLabel);
			this._userGameNameLabel = this._createLabel(r("a.k.a. %1s", this._user.gamertag), 12, "FFFFFFFF", [0, 0.5], {});
			this._userInfoPane.addChild(this._userGameNameLabel);
			if (!this._user.ageRestricted) {
				this._userMottoLabel = this._createLabel(this._user.motto, 12, "FFFFFFFF", [0, 0.5], {});
				this._userInfoPane.addChild(this._userMottoLabel)
			}
			this._userIconImage = new g.Image().retain();
			this._userIconImage.setImage(this._user.getDefinedIcon());
			this._userIconImage.setImageFit(g.ViewGeometry.FitModes.Inside);
			this._userInfoPane.addChild(this._userIconImage);
			this._userProfileBracketImage = new g.Image().retain();
			this._userProfileBracketImage.setImage(j.image("mobagelogotmhd.png"));
			this._userProfileBracketImage.setImageFit(g.ViewGeometry.FitModes.Inside);
			this._userInfoPane.addChild(this._userProfileBracketImage);
			this._profileButton = new g.Button().retain();
			this._profileButton.onclick = function(w) {
				NgLogD("Going to user's profile!")
			};
			this._userInfoPane.addChild(this._profileButton);
			this._customLabel1 = this._createLabel("Last Played We Rule:", 12, "FFFFFFFF", [0, 0.5], {});
			this._gamePane.addChild(this._customLabel1);
			this._customLabel2 = this._createLabel("We Rule Level:", 12, "FFFFFFFF", [0, 0.5], {});
			this._gamePane.addChild(this._customLabel2);
			this._customLabel3 = this._createLabel("Business:", 12, "FFFFFFFF", [0, 0.5], {});
			this._gamePane.addChild(this._customLabel3);
			this._customLabel1Value = this._createLabel("Today", 12, "FFFFFFFF", [1, 0.5], {});
			this._gamePane.addChild(this._customLabel1Value);
			this._customLabel2Value = this._createLabel("28", 12, "FFFFFFFF", [1, 0.5], {});
			this._gamePane.addChild(this._customLabel2Value);
			this._customLabel3Value = this._createLabel("Open", 12, "FFFFFFFF", [1, 0.5], {});
			this._gamePane.addChild(this._customLabel3Value);
			this._gameIconImage = new g.Image().retain();
			this._gameIconImage.setImage(this._user.lastPlayedGame.iconURL);
			this._gameIconImage.setImageFit(g.ViewGeometry.FitModes.Inside);
			this._gamePane.addChild(this._gameIconImage);
			this._customButton1 = this._createButton(r("Visit Kingdom"), 14, this._style.gameButton["normalGradient"], this._style.gameButton["highlightedGradient"], this._style.gameButton);
			this._gamePane.addChild(this._customButton1);
			this._customButton2 = this._createButton(r("Add as Neighbor"), 14, this._style.gameButton["normalGradient"], this._style.gameButton["highlightedGradient"], this._style.gameButton);
			this._gamePane.addChild(this._customButton2);
			this.layoutViews(c.OrientationEmitter.getInterfaceOrientation());
			var t = this;
			var v = n.MessageListener.subclass({
				_onOrientationEvent: function(w) {
					if (w.type === c.OrientationEmitter.OrientationType.Interface) {
						t.layoutViews(w.orientation)
					}
				},
				destroy: function() {
					c.OrientationEmitter.removeListener(this)
				}
			});
			this.orientationListenerInstance = new v();
			c.OrientationEmitter.addListener(this.orientationListenerInstance, this.orientationListenerInstance._onOrientationEvent);
			return this
		},
		$initWithJSON: function(u) {
			var t = null;
			var s = null;
			if (u.user) {
				s = u.user;
				NgLogD("Got a user: " + s)
			} else {
				s = h.getCurrentSession().user();
				NgLogD("No user, showing my own gamercard instead.")
			}
			return new p(s)
		},
		onJSON: function(s) {
			if (s.user && s.user != this._user) {
				return p.initWithJSON(s)
			}
			return null
		},
		loadView: function($super) {
			$super()
		},
		_replaceTextArea: function() {
			if (this._postEdit) {
				this.removeChild(this._postEdit);
				this._postEdit.destroy();
				this._postEdit = null
			}
			this._postEdit = (new g.EditText()).retain();
			this._postEdit.setTextGravity(g.ViewGeometry.Gravity.Left);
			var t = this._postAreaHeight;
			var s = "";
			if (this._user.gamertag === h.getCurrentSession().user().gamertag) {
				s = r("Post a Message")
			} else {
				s = r("Post to %1s's Wall", this._user.gamertag)
			}
			this._postEdit.setPlaceholder(s);
			this._postEdit.setAttributes(l.registeredStyle("social.us.commonelements").props().textBox);
			this._postEdit.setFrame([this._style.postHeaderLabelXFactor * this._contentWidth, t * this._style.postTextYFactor, this._style.postTextWFactor * this._contentWidth, this._style.postTextHFactor * t]);
			this._postEdit.setInputType(this._postEdit.InputTypes.None);
			this._userWallPane.addChild(this._postEdit)
		},
		destroy: function() {
			this._mainView.release();
			this._mobagePane.release();
			this._userInfoPane.release();
			this._postEdit.release();
			this._userWallPane.release();
			this._gamePane.release();
			this._closeButton.release();
			this._mobageButton.release();
			this._profileButton.release();
			this._customButton1.release();
			this._customButton2.release();
			this._userNameLabel.release();
			this._userGameNameLabel.release();
			this._userMottoLabel.release();
			this._customLabel1.release();
			this._customLabel2.release();
			this._customLabel3.release();
			this._customLabel1Value.release();
			this._customLabel2Value.release();
			this._customLabel3Value.release();
			this._userIconImage.release();
			this._userProfileBracketImage.release();
			this._gameIconImage.release()
		},
		layoutViews: function(C) {
			if (this._currentOrientation === C) {
				return
			}
			if (C === c.OrientationEmitter.Orientation.FaceUp || C === c.OrientationEmitter.Orientation.FaceDown) {
				if (this._currentOrientation === null) {
					C = c.OrientationEmitter.Orientation.Portrait
				} else {
					return
				}
			}
			this._currentOrientation = C;
			var t = g.Window.getWidth();
			var v = g.Window.getHeight();
			var D = t / 480;
			var x = v / 800;
			var u;
			var B;
			var F;
			var z;
			if (C === c.OrientationEmitter.Orientation.LandscapeLeft || C === c.OrientationEmitter.Orientation.LandscapeRight) {
				u = g.Window.getHeight();
				B = g.Window.getWidth();
				z = true;
				F = new g.ViewGeometry.Rect(320 * D, 0, 480 * D, 460 * x)
			} else {
				u = g.Window.getWidth();
				B = g.Window.getHeight();
				z = false;
				F = new g.ViewGeometry.Rect(0, 0, 480 * D, 460 * x)
			}
			this.view().setFrame([0, 0, u, B]);
			this._mainView.setFrame(F);
			var A = F.sliceVertical(66 * x);
			this._mobagePane.setFrame(A);
			this._mobageButton.setFrame([20 * D, 5 * x, 180 * D, 55 * x]);
			var w = F.sliceVertical(105 * x);
			this._userInfoPane.setFrame(w);
			this._userInfoPane.y = this._mobagePane.getFrame().y + this._mobagePane.getFrame().h + 3 * x;
			this._userNameLabel.setFrame([107 * D, 13 * x, 345 * D, 30 * x]);
			this._userGameNameLabel.setFrame([107 * D, 40 * x, 345 * D, 25 * x]);
			this._userMottoLabel.setFrame([107 * D, 63 * x, 345 * D, 25 * x]);
			this._userIconImage.setFrame([13 * D, 12 * x, 85 * D, 85 * x]);
			this._userProfileBracketImage.setFrame([444 * D, 33 * x, 20 * D, 40 * x]);
			this._profileButton.setFrame(w);
			var s = F.sliceVertical(105 * x);
			this._userWallPane.setFrame(s);
			this._userWallPane.y = this._userInfoPane.getFrame().y + this._userInfoPane.getFrame().h + 3 * x;
			var y = F.sliceVertical(180 * x);
			this._gamePane.setFrame(y);
			this._gamePane.y = this._userWallPane.getFrame().y + this._userWallPane.getFrame().h + 3 * x;
			this._customLabel1.setFrame([110 * D, 14 * x, 240 * D, 25 * x]);
			this._customLabel2.setFrame([110 * D, 43 * x, 240 * D, 25 * x]);
			this._customLabel3.setFrame([110 * D, 72 * x, 240 * D, 25 * x]);
			this._customLabel1Value.setFrame([400 * D, 14 * x, 70 * D, 25 * x]);
			this._customLabel2Value.setFrame([400 * D, 43 * x, 70 * D, 25 * x]);
			this._customLabel3Value.setFrame([400 * D, 72 * x, 70 * D, 25 * x]);
			this._gameIconImage.setFrame([12 * D, 12 * x, 90 * D, 90 * x]);
			this._customButton1.setFrame([12 * D, 120 * x, 220 * D, 46 * x]);
			this._customButton2.setFrame([246 * D, 120 * x, 220 * D, 46 * x]);
			this._createPostSection();
			var E = this._mobagePane.getFrame()[3] + this._userInfoPane.getFrame()[3] + this._userWallPane.getFrame()[3] + this._gamePane.getFrame()[3];
			this._closeButton.setFrame([0, E, u, B - E])
		},
		_createPostSection: function() {
			this._contentWidth = this._userWallPane.getFrame()[2];
			this._postAreaHeight = this._userWallPane.getFrame()[3];
			var u = this._postAreaHeight;
			var s = new g.Label();
			s.setAttributes(this._style.wallHeaderLabel);
			if (this._user.gamertag === h.getCurrentSession().user().gamertag) {
				s.setText(r("My Wall"))
			} else {
				s.setText(r("%1s's Wall", this._user.gamertag))
			}
			s.setFrame([this._style.postHeaderLabelXFactor * this._contentWidth, this._style.postHeaderLabelYFactor * u, this._style.postHeaderLabelWFactor * this._contentWidth, this._style.postHeaderLabelHFactor * u]);
			s.setTextGravity(g.ViewGeometry.Gravity.Left);
			this._userWallPane.addChild(s);
			var t = new g.Button();
			t.setAttributes(this._commonSheet.standardButton);
			t.setText(r("Post"));
			t.setFrame(this._style.buttonPostXFactor * this._contentWidth, u * this._style.postTextYFactor, this._style.buttonPostWFactor * this._contentWidth, this._style.buttonPostHFactor * u);
			this._userWallPane.addChild(t);
			f.getCurrentGame(function(w, v) {
				this._currentGame = v
			}.bind(this));
			t.onclick = function() {
				var v = this._postEdit.getText()
			}
		},
		_createButton: function(x, v, w, t, s) {
			var u = new g.Button().retain();
			u.setText(x);
			u.setTextSize(q(v).realize());
			u.setGradient(w);
			u.setGradient(t, g.State.Pressed);
			u.setAttributes(s);
			return u
		},
		_createLabel: function(w, v, t, x, s) {
			var u = new g.Label().retain();
			u.setText(w);
			u.setTextSize(q(v).realize());
			u.setTextColor(t);
			u.setTextGravity(x);
			u.setAttributes(s);
			return u
		}
	});
	return k
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavPlaceholder"] = function() {
	var t = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavPlaceholder"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavPlaceholder"] = t;
	var q = require("NGCore/Client/Core/Capabilities").Capabilities;
	var h = require("NGCore/Client/Core/Analytics").Analytics;
	var s = require("NGCore/Client/Core/MessageListener").MessageListener;
	var m = require("NGCore/Client/Device/LayoutEmitter").LayoutEmitter;
	var g = require("NGCore/Client/UI").UI;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var r = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/UIUtils").UIUtils;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var e = g.ViewGeometry.Rect;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchingProgress").GameLaunchingProgress;
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost");
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var l = t.GamePlaceholder = c.subclass({
		classname: "GamePlaceholder",
		analyticsName: "NavPlaceholder",
		isLocked: false,
		targetGame: null,
		initialize: function($super, y, x, z) {
			$super();
			this._host = y;
			this.targetGame = x;
			if (z) {
				this.isLocked = true
			}
			var w = q.getScreenHeight();
			var v = q.getScreenWidth();
			var u = (w > v) ? w : v;
			this.progressVeil = new g.View();
			this.progressVeil.setFrame([0, 0, u, u]);
			this.progressVeil.setGradient(p.registeredStyle("social.us.progressveil").props().gradient);
			this._gameLaunchedListener = new s();
			k.addListener(this._gameLaunchedListener, this.bind(this._onGameLaunched));
			return this
		},
		destroy: function() {
			NgLogD("GamePlaceholder destroy");
			if (this._onLaunchDoneCB && !this._launchFailed) {
				NgLogD("WARNING!!! Attempted to destroy game placeholder in the middle of a game launch.");
				h.reportError("JSGameLaunchFailed", "error=destroyed placeholder during load");
				return
			}
			f.hideDialog(this);
			this._gameLaunchedListener.destroy();
			this.progressVeil.destroy()
		},
		equals: function(u) {
			return this.targetGame == u.targetGame
		},
		$initWithJSON: function(u) {
			if (!u.host) {
				NgLogE("GamePlaceholder.initWithJSON - No host specified, cannot create.");
				return null
			}
			if (!u.game) {
				NgLogE("GamePlaceholder.initWithJSON - No game specified, cannot create.");
				return null
			}
			return new l(u.host, u.game)
		},
		onJSON: function(u) {
			if (u.game) {
				if (u.game !== this.targetGame) {
					return l.initWithJSON(u)
				}
			}
			return null
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new d.View())
			}
			$super()
		},
		_checkGameLaunch: function() {
			if (j.Main._delayedLaunchGameCb) {
				this._hackPleaseHideFullScreenLoaderOnPop = true;
				o.ServiceHost.view().showFullScreenLoadingSpinner(true);
				NgLogD("GamePlaceholder.willPush/willReshow - Launching game that was delayed by shortcut launch");
				j.Main._delayedLaunchGameCb(j.Main._delayedLaunchGameUrl);
				j.Main._delayedLaunchGameCb = null;
				j.Main._delayedLaunchGameUrl = null
			}
		},
		willPush: function($super, u) {
			NgLogD("GamePlaceholder/didPush");
			$super(u);
			this._checkGameLaunch();
			o.ServiceHost.setIsInServiceUI(false)
		},
		willReshow: function($super, u) {
			NgLogD("GamePlaceholder/didPush");
			$super(u);
			this._checkGameLaunch();
			o.ServiceHost.setIsInServiceUI(false)
		},
		didPush: function($super, u) {
			NgLogD("GamePlaceholder/didPush");
			$super(u);
			f.hideDialog(this);
			this.navController._host.hide();
			if (this._hackPleaseHideFullScreenLoaderOnPop) {
				this._hackPleaseHideFullScreenLoaderOnPop = false;
				o.ServiceHost.view().hideFullScreenLoadingSpinner()
			}
			if (this._veilShowing) {
				this._veilShowing = false;
				g.Window.document.removeChild(this.progressVeil)
			}
		},
		willPop: function($super, u) {
			NgLogD("GamePlaceholder/willPop");
			$super(u);
			if (this._hackPleaseHideFullScreenLoaderOnPop) {
				this._hackPleaseHideFullScreenLoaderOnPop = false;
				o.ServiceHost.view().hideFullScreenLoadingSpinner()
			}
			g.Window.document.addChild(this.progressVeil);
			this._veilShowing = true;
			f.hideDialog(this);
			this.navController._host.show()
		},
		didPop: function($super, u) {
			NgLogD("GamePlaceholder/didPop");
			$super(u);
			if (this._veilShowing) {
				this._veilShowing = false;
				g.Window.document.removeChild(this.progressVeil)
			}
			o.ServiceHost.setIsInServiceUI(true)
		},
		didHide: function($super, u) {
			NgLogD("GamePlaceholder/didPush");
			$super(u);
			o.ServiceHost.setIsInServiceUI(true)
		},
		didReshow: function($super, u) {
			NgLogD("GamePlaceholder/didReshow");
			$super(u);
			f.hideDialog(this);
			this.navController._host.hide();
			if (this._hackPleaseHideFullScreenLoaderOnPop) {
				this._hackPleaseHideFullScreenLoaderOnPop = false;
				o.ServiceHost.view().hideFullScreenLoadingSpinner()
			}
			if (this._veilShowing) {
				this._veilShowing = false;
				g.Window.document.removeChild(this.progressVeil)
			}
		},
		willHide: function($super, u) {
			NgLogD("GamePlaceholder/willHide");
			$super(u);
			if (this._hackPleaseHideFullScreenLoaderOnPop) {
				this._hackPleaseHideFullScreenLoaderOnPop = false;
				o.ServiceHost.view().hideFullScreenLoadingSpinner()
			}
			f.hideDialog(this);
			this.navController._host.show()
		},
		launchGame: function(v, w) {
			this._onLaunchDoneCB = w;
			g.Window.document.addChild(this.progressVeil);
			this._veilShowing = true;
			f.showDialog(this, v.name);
			var u = this;
			j.Main.switchToGame(v.getGameURL(), function(x) {
				if (x) {
					u._onLaunchDoneCB(x);
					u._onLaunchDoneCB = null
				}
			})
		},
		_onGameLaunched: function() {
			NgLogD("GamePlaceholder/_onGameLaunched");
			if (this._onLaunchDoneCB) {
				this._onLaunchDoneCB(null);
				this._onLaunchDoneCB = null
			}
		},
		$switchToRunningGame: function() {
			var u = new l(o.ServiceHost.navController._host, "AhabTester_hardcoded");
			o.ServiceHost.navController.pushViewController(u)
		},
		$launchGameAndSwitch: function(u) {
			h.reportGameEvent("JSGameLaunchStart", u.recordID);
			var v = new l(o.ServiceHost.navController._host, u.getGameURL(), false);
			v.launchGame(u, function(w) {
				if (!w) {
					NgLogD("GamePlaceholder.launchGameAndSwitch - Game launch succeeded");
					h.reportGameEvent("JSGameLaunchSuccess", u.recordID);
					o.ServiceHost.navController.pushViewController(v)
				} else {
					NgLogD("GamePlaceholder.launchGameAndSwitch - Game launch failed, killing placeholder screen. Err: " + w);
					h.reportError("JSGameLaunchFailed", "error=switchToGameFailed with error " + w + ", game=" + u.recordID);
					v._launchFailed = true;
					v.destroy();
					r.showAlert(b("Error"), b("Couldn't connect.\nPlease try again."))
				}
			})
		}
	});
	var n = d.View.subclass({
		classname: "InterstitialSplashScreenView",
		_trueSize: null,
		initialize: function($super, u) {
			$super(u);
			this._trueSize = [q.getScreenHeight(), q.getScreenHeight()]
		}
	});
	var a = t.InterstitialSplashScreen = c.subclass({
		classname: "InterstitialSplashScreen",
		analyticsName: "InterstitialSplashScreen",
		initialize: function($super, u) {
			$super();
			this.onDidPush = u
		},
		destroy: function() {
			if (this.lListener) {
				this.lListener.destroy()
			}
		},
		didPush: function($super, u) {
			$super(u);
			if (this.onDidPush) {
				this.onDidPush()
			}
		},
		didHide: function($super, u) {
			$super(u);
			if (this.onDidHide) {
				this.onDidHide()
			}
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new n())
			}
			$super();
			this.lListener = new s();
			m.addListener(this.lListener, this.zombieSafeCallback(this.layoutUpdate))
		},
		layoutUpdate: function(u) {
			this.view().setFrameSize([u.width, u.height])
		}
	});
	return t
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/VerticalTabController"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/VerticalTabController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/VerticalTabController"] = f;
	var e = require("NGCore/Client/UI").UI;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/VerticalTabView").VerticalTabView;
	var a = require("NGCore/Client/UI/ViewGeometry").Rect;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var d = f.VerticalTabController = j.subclass({
		classname: "VerticalTabController",
		initialize: function($super) {
			$super();
			return this
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new g())
			}
			$super()
		},
		curSelectedTab: null,
		selectTabAtIndex: function(k) {
			this.logd("selectTabAtIndex " + k);
			var l = this.tabPairAtIndex(k);
			this.selectTabByView(l.tabView)
		},
		selectTabByView: function(o, m) {
			if (m && !this._interfaceActive) {
				return
			}
			this.logd("selectTabByView (" + o.type + ")");
			var p = null;
			var l = null;
			var k = (this.curSelectedTab === null);
			if (o === this.curSelectedTab) {
				return
			}
			var n = this._tabPairForTabView(o);
			p = n.contentView;
			if (!p) {
				return
			}
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				if (l.contentView.controller) {
					l.contentView.controller.willDeactivateTab()
				}
			}
			this.view().getContentView().setSelectedTab(o);
			this.view().getContentView().setContentView(p);
			if (p.controller) {
				p.controller.parentController = this;
				p.controller.willActivateTab()
			}
			this._tabSelectionChange(this.curSelectedTab, o);
			if (!k && l && l.contentView.controller) {
				l.contentView.controller.didDeactivateTab()
			}
			if (!k && p.controller) {
				p.controller.didActivateTab()
			}
			this._updateDynamicTitleAndImage()
		},
		_tabSelectionChange: function(m, n) {
			if (m) {
				if (m.setSelected) {
					m.setSelected(false)
				} else {
					m.setState(e.State.Normal)
				}
				if (m.staticTitle) {
					m.setText(m.staticTitle)
				}
			}
			var l = this._tabPairForTabView(m);
			this.curSelectedTab = n;
			this.curSelectedView = this._tabPairForTabView(n).contentView;
			if (n) {
				if (n.setSelected) {
					n.setSelected(true)
				} else {
					n.setState(d.UIStateSelected)
				}
				var k;
				if ((k = this.curSelectedView.controller.getDynamicTabTitle())) {
					n.staticTitle = this.curSelectedTab.getText();
					n.setText(k)
				}
			}
			if (l) {
				b.logNavEvent(l.contentView.controller, this.curSelectedView.controller)
			}
		},
		_tabPairForTabView: function(m) {
			var l = null;
			var k = null;
			for (k in this.view().tabContent) {
				if (this.view().tabContent.hasOwnProperty(k)) {
					l = this.view().tabContent[k];
					if (l.tabView === m) {
						return l
					}
				}
			}
			return null
		},
		_tabPairForContentView: function(m) {
			var l = null;
			var k = null;
			for (k in this.view().tabContent) {
				if (this.view().tabContent.hasOwnProperty(k)) {
					l = this.view().tabContent[k];
					if (l.contentView === m) {
						return l
					}
				}
			}
			return null
		},
		_updateDynamicTitleAndImage: function() {
			var m;
			if (this.curSelectedTab && (m = this._tabPairForTabView(this.curSelectedTab))) {
				if (!this._staticTitle) {
					this._staticTitle = this.getTitle();
					this._staticTitleImage = this.getTitleImage()
				}
				var k = m.contentView.controller.getDynamicPageTitle();
				this.setTitle(k || this._staticTitle);
				var l = m.contentView.controller.getDynamicPageTitleImage();
				this.setTitleImage(l || this._staticTitleImage)
			}
		},
		batchChangeMode: false,
		insertTabPairAtIndex: function(k, l) {
			var m = this.view().tabContent.indexOf(k);
			if (m !== -1) {
				this.loge("inserting a tab more than once. Are you sure? -- removing from old location.");
				this.removeTabAtIndex(m)
			}
			this.view().tabContent.splice(l, 0, k);
			if (!this.batchChangeMode) {
				this.view().layoutButtonContainer()
			}
		},
		insertTabAndContentAtIndex: function(m, n, l) {
			var k = {
				tabView: m,
				contentView: n
			};
			this.insertTabPairAtIndex(k, l);
			if (n.controller) {
				n.controller.parentController = this
			}
			if (!this.batchChangeMode) {
				this.view().layoutButtonContainer()
			}
		},
		addTabPair: function(k) {
			this.insertTabPairAtIndex(k, this.view().tabContent.length);
			return this.view().tabContent.length - 1
		},
		tabPairAtIndex: function(k) {
			return this.view().tabContent[k]
		},
		removeTabAtIndex: function(k) {
			this.view().tabContent.splice(k, 1);
			if (!this.batchChangeMode) {
				this.view().layoutButtonContainer()
			}
		},
		getTabs: function() {
			return this.view().tabContent.slice(0)
		},
		willPush: function($super, k) {
			$super(k);
			this._vtabAdjustFrame();
			var l;
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				l.contentView.controller.willActivateTab()
			}
		},
		didPush: function($super, k) {
			$super(k);
			var l;
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				l.contentView.controller.didActivateTab()
			}
		},
		willReshow: function($super, k) {
			$super(k);
			this._vtabAdjustFrame();
			var l;
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				l.contentView.controller.willActivateTab()
			}
		},
		didReshow: function($super, k) {
			$super(k);
			this.view().layoutSubviews();
			var l;
			NgLogD("About to reshow content controller");
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				l.contentView.controller.didActivateTab()
			} else {
				NgLogD("Not showing content controller")
			}
		},
		willPop: function($super, k) {
			$super(k);
			var l;
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				l.contentView.controller.willDeactivateTab()
			}
		},
		didPop: function($super, k) {
			$super(k);
			var l;
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				l.contentView.controller.didDeactivateTab()
			}
		},
		willHide: function($super, k) {
			$super(k);
			var l;
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				l.contentView.controller.willDeactivateTab()
			}
		},
		didHide: function($super, k) {
			$super(k);
			var l;
			if (this.curSelectedTab && (l = this._tabPairForTabView(this.curSelectedTab))) {
				l.contentView.controller.didDeactivateTab()
			}
		},
		_vtabAdjustFrame: function() {
			var k = new a(this.navController.view().getFrame());
			if (k.isEmpty()) {
				this.loge("unrecoverable frame error in adjustFrame");
				return
			}
			this.view().setFrame(k)
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HomeScreenButton"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HomeScreenButton"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HomeScreenButton"] = a;
	var d = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost");
	a.HomeScreenButton = d.CellView.subclass({
		classname: "HomeScreenButton",
		button: null,
		buttonIcon: null,
		buttonTextMajor: null,
		buttonTextCount: null,
		initialize: function($super, e) {
			$super(e);
			this.buttonIcon = (new d.Image()).retain();
			this.buttonTextMajor = (new d.Label()).retain();
			this.buttonTextCount = (new d.Label()).retain();
			this.buttonTextBadge = (new d.Label()).retain();
			this.buttonBadge = (new d.Image()).retain();
			this.buttonIcon.setTouchable(false);
			this.buttonTextMajor.setTouchable(false);
			this.buttonTextCount.setTouchable(false);
			this.buttonBadge.setTouchable(false)
		},
		destroy: function() {
			this.buttonIcon.release();
			this.buttonTextMajor.release();
			this.buttonTextCount.release();
			this.buttonTextBadge.release();
			this.buttonBadge.release()
		},
		setMainText: function(e) {
			this.buttonTextMajor.setText(e)
		},
		setCountText: function(e) {
			this.buttonBadge.setImage("");
			this.buttonTextBadge.setText("");
			this.buttonTextCount.setText(e)
		},
		setBadgeCount: function(e) {
			this.buttonBadge.setImage(b.image("mobageverticaltab_jumpbutton_invitesbubble.png"));
			var f = new d.ViewGeometry.Rect(this._badgeRect);
			f.x += this._badgeRect.w / 8;
			this.buttonTextCount.setText("");
			this.buttonTextBadge.setFrame(f);
			this.buttonTextBadge.setText(e)
		},
		layoutSubviews: function($super) {
			var h = new d.ViewGeometry.Rect(this.getFrame());
			h.x = 0;
			h.y = 0;
			this._elementsRect = h;
			var e = h.sliceHorizontal(h.w * this.getStyle().extras.buttonIconWidthPct);
			e.x = e.w / 2;
			e.y = e.h / 2;
			e.w = e.h < e.w ? e.h : e.w;
			e.h = e.w;
			e.x -= e.w / 2;
			e.y -= e.w / 2;
			this._iconRect = e;
			var f = new d.ViewGeometry.Rect(e);
			f.x = h.w;
			f.x -= f.w / 5;
			this._badgeRect = f;
			var j = new d.ViewGeometry.Rect(this.getFrame());
			j.x = 0;
			j.y = 0;
			var g = j.sliceHorizontal(j.w * this.getStyle().extras.buttonBadgeWidthPct);
			g.x = g.w / 2;
			g.y = g.h / 2;
			g.w = g.h < g.w ? g.h : g.w;
			g.h = g.w;
			g.x -= g.w / 4;
			g.y -= g.w / 2;
			this.buttonIcon.setFrame(g);
			this.buttonTextMajor.setFrame(h);
			this.buttonTextCount.setFrame(h);
			this.buttonBadge.setFrame(f);
			this.addChild(this.buttonIcon);
			this.addChild(this.buttonTextMajor);
			this.addChild(this.buttonBadge);
			this.addChild(this.buttonTextBadge);
			this.addChild(this.buttonTextCount)
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HomeScreenScrollView"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HomeScreenScrollView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HomeScreenScrollView"] = a;
	var e = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/UI").UI;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CornerButton").CornerButton;
	a.HomeScreenScrollView = d.View.subclass({
		classname: "HomeScreenScrollView",
		_innerBkgHack1: null,
		_innerBkgHack2: null,
		cornerButton: null,
		titleText: null,
		list: null,
		_listItems: null,
		_autoscrollingCount: 0,
		_lastManualScroll: null,
		initialize: function($super, f) {
			$super(f);
			this._listItems = [];
			this._innerBkgHack1 = (new d.View()).retain();
			this._innerBkgHack2 = (new d.View()).retain();
			this.cornerButton = (new b()).retain();
			this.list = (new d.ScrollView()).retain();
			if (this.list.setOnScrollEnded) {
				var g = this.startAutoscrolling.bind(this);
				this.list.setOnScrollEnded(function() {
					setTimeout(g, 1750)
				})
			}
		},
		destroy: function() {
			this.stopAutoscrolling();
			this._releaseListItems();
			this._innerBkgHack1.release();
			this._innerBkgHack2.release();
			this.cornerButton.release();
			this.list.release()
		},
		startAutoscrolling: function() {
			this._shouldAutoscroll = true;
			if (!this.list.setScrollIndicatorsVisible) {
				return
			}
			var g = this;
			var m = this.list.getScrollPosition();
			var l = this.list.getFrame();
			var k = this.list;
			var f = k.getContentSize();
			var j = (f ? f[0] : 0) - (l ? l[2] : 0);
			if (j <= 0) {
				setTimeout(function() {
					g.startAutoscrolling()
				}, 100);
				return
			}
			var h = function(n) {
				if (!n || !n.canceled) {
					console.log("Should continue scrolling user list: " + Boolean(this._shouldAutoscroll));
					if (this._shouldAutoscroll) {
						g.startAutoscrolling()
					}
				}
			};
			if (j - m[0] < 50) {
				k.setScrollPosition(0, 0);
				h()
			} else {
				d.animate(function(n) {
					n.animationCurve = "Linear";
					k.setScrollPosition(j, 0)
				}, (j - m[0]) * 35, h.bind(this))
			}
		},
		stopAutoscrolling: function() {
			this._shouldAutoscroll = false;
			this.list.clearAnimations()
		},
		setButton: function(f, g) {
			this.cornerButton.setButton(f, g)
		},
		setTitle: function(f) {},
		_releaseListItems: function() {
			NgLogD("HomeScreenScrollView: Releasing " + this._listItems.length + " items.");
			for (var f = 0; f < this._listItems.length; f++) {
				this.removeChild(this._listItems[f]);
				this._listItems[f].release()
			}
		},
		setListViews: function(l, k) {
			this._releaseListItems();
			this._listItems = [];
			var o = new d.ViewGeometry.Rect(this.getFrame());
			var p = new d.ViewGeometry.Rect(this.list.getFrame());
			var n = l.length;
			var h = p.h;
			var m = h;
			var j = m - m / 5;
			var f = (n - 1) * j + m + o.w * 0.035;
			this.list.setContentSize([f, Math.floor(p.h)]);
			if (this.list.setScrollIndicatorsVisible) {
				this.list.setScrollIndicatorsVisible(false)
			}
			this.addChild(this.list);
			this.addChild(this.cornerButton);
			this.list.setOnScroll(this.bind(function() {
				if (this._autoscrollingCount > 0) {
					this._autoscrollingCount--
				} else {
					this._lastManualScroll = new Date()
				}
			}));
			for (var g = 0; g < n; g++) {
				l[g].setFrame([g * m, 0, m, h]);
				if (k) {
					k(l[g])
				}
				this._listItems[g] = l[g];
				this.list.addChild(l[g])
			}
		},
		setData: function(f) {},
		layoutSubviews: function($super) {
			if (!this.getStyle()) {
				this.setStyle(new c())
			}
			this._innerBkgHack1.setAttributes(this.getStyle().extras.innerBkgTop);
			this._innerBkgHack2.setAttributes(this.getStyle().extras.innerBackground);
			var g = new d.ViewGeometry.Rect(this.getFrame());
			g.x = 0;
			g.y = 0;
			g.inset(4, -1, 2, 2);
			var j = new d.ViewGeometry.Rect(g);
			var h = j.h = this.getStyle().extras.headerHeightRatio * j.h;
			var l = j.sliceHorizontal(-this.getStyle().extras.cornerButtonWidthRatio * j.w);
			this.cornerButton.setFrame(l);
			j.inset(h * 0.2, 0, h * 0.2, g.w * 0.03);
			this._innerBkgHack1.setFrame([g.x, g.y, l.x - g.x - 2, g.h]);
			this._innerBkgHack2.setFrame([g.x, l.y + l.h + 2, g.w, g.h - l.h - 2]);
			this.addChild(this._innerBkgHack1);
			this.addChild(this._innerBkgHack2);
			this.addChild(this.cornerButton);
			var f = this.getStyle().extras.listContentInset;
			var k = new d.ViewGeometry.Rect(this.getFrame());
			k.x = 0;
			k.y = 0;
			k.inset(h + g.h * f[0], g.w * f[1], g.h * f[2], g.w * f[3]);
			this.list.setFrame(k);
			this._updateButtonFrame()
		},
		_updateButtonFrame: function() {
			var f = new d.ViewGeometry.Rect(this.getFrame());
			f.x = 0;
			f.y = 0;
			f.inset(0, -1, 2, 2);
			var j = f.h;
			if (this.getParent() && this.getParent().getFrame()) {
				j = this.getParent().getFrame()[3]
			}
			var h = new d.ViewGeometry.Rect(f);
			var g = h.h = this.getStyle().extras.headerHeightRatio * j;
			var k = h.sliceHorizontal(-this.getStyle().extras.cornerButtonWidthRatio * h.w);
			this.cornerButton.setFrame(k)
		},
		rootPerformanceHack: function() {
			if (true || !this.list || this.list.getParent() === d.Window.document) {
				return
			}
			var h = new d.ViewGeometry.Rect(this.getParent().getFrame());
			var f = new d.ViewGeometry.Rect(this.getFrame());
			var j = new d.ViewGeometry.Rect(this.list.getFrame());
			var g = new d.ViewGeometry.Rect(this.cornerButton.getFrame());
			j.x += f.x + h.x;
			j.y += f.y + h.y;
			g.x += f.x + h.x;
			g.y += f.y + h.y;
			this.list.setFrame(j);
			this.list.removeFromParent();
			this.list.setVisibleInOrientations(d.Commands.OrientationFlag.Landscape);
			d.Window.document.addChild(this.list);
			this.cornerButton.setFrame(g);
			this.cornerButton.removeFromParent();
			d.Window.document.addChild(this.cornerButton)
		},
		undoRootPerformanceHack: function() {
			if (true || !this.list || this.list.getParent() !== d.Window.document) {
				return
			}
			var h = new d.ViewGeometry.Rect(this.getParent().getFrame());
			var f = new d.ViewGeometry.Rect(this.getFrame());
			var j = new d.ViewGeometry.Rect(this.list.getFrame());
			var g = new d.ViewGeometry.Rect(this.cornerButton.getFrame());
			j.x -= f.x + h.x;
			j.y -= f.y + h.y;
			g.x -= f.x + h.x;
			g.y -= f.y + h.y;
			this.list.setFrame(j);
			this.list.removeFromParent();
			this.addChild(this.list);
			this.cornerButton.setFrame(g);
			this.cornerButton.removeFromParent();
			this.addChild(this.cornerButton)
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameCarousel"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameCarousel"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameCarousel"] = b;
	var f = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		CornerButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CornerButton").CornerButton
		},
		GameCarouselImageStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Home").GameCarouselImage
		}
	});
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	b.GameCarousel = d.View.subclass({
		classname: "GameCarousel",
		_scrollView: null,
		cornerButton: null,
		_onGameClick: null,
		_isSwipingOverlayButton: false,
		initialize: function($super, g) {
			$super(g);
			this._scrollView = (new d.ScrollView()).retain();
			this.cornerButton = (new a.CornerButton()).retain();
			this._gameViews = {};
			this._games = [];
			this._overlayButton = (new e.Button()).retain();
			this._overlayButton.setGradient({
				gradient: ["22000000 0.0", "22000000 0.0"]
			}, e.State.Pressed);
			this._overlayButton.setOnClickDown(this.bind(function() {
				this._isSwipingOverlayButton = false
			}));
			this._overlayButton.setOnClick(this.bind(function() {
				if (this._isSwipingOverlayButton) {
					return
				}
				var h = this.selectedGame();
				this._onGameClick(h)
			}));
			this._overlayButton.setOnSwipe(this.bind(function(j) {
				var k = (j ? j.direction : undefined);
				var h = !!this._autoscrollTimer;
				if (h) {
					this.stopAutoscrolling()
				}
				if (k == 2) {
					this.scrollToPreviousGame()
				} else {
					if (k == 1) {
						this.scrollToNextGame()
					}
				}
				if (h) {
					this.startAutoscrolling()
				}
				this._isSwipingOverlayButton = true
			}));
			this.addChild(this._scrollView);
			this.addChild(this._overlayButton);
			this.addChild(this.cornerButton)
		},
		destroy: function() {
			this.stopAutoscrolling();
			this.setGames([]);
			this._scrollView.release();
			this.cornerButton.release();
			this._overlayButton.release()
		},
		setOnGameClick: function(g) {
			this._onGameClick = g
		},
		setButton: function(g, h) {
			this.cornerButton.setButton(g, h)
		},
		selectedGame: function() {
			var g = this.selectedGameIndex();
			return (this._games && this._games.length > g ? this._games[g] : this._games[0])
		},
		selectedGameIndex: function() {
			var k = this._scrollView.getScrollPosition();
			var j = this._scrollView.getFrame();
			if (!j) {
				this.loge("We don't have a frame, calling selectedGameIndex is dangerous, here!")
			}
			var h = j ? j[2] : 1;
			var g = Math.round((k.x || k[0]) / h);
			return g
		},
		_imageViewForGame: function(h) {
			var j = (new e.Image()).retain();
			a.GameCarouselImageStyle.applyTo(j);
			var g = this;
			(function(l, k) {
				k.setOnClick(function() {
					if (g._onGameClick) {
						g._onGameClick(l)
					}
				})
			})(h, j);
			return j
		},
		setGames: function(n) {
			var g = n.slice();
			var k = {};
			if (g.length > 1) {
				g.push(g[0])
			}
			var j;
			for (j = 0; j < n.length; j++) {
				if (j < n.length - 1) {
					k[n[j].recordID] = 1
				} else {
					if (n[0].recordID == (this._games.length ? this._games[0] : false)) {
						k.duped = 1
					}
				}
			}
			var l = this._games;
			this._games = g;
			var o;
			for (j = 0; j < l.length; j++) {
				p = l[j];
				o = (j == l.length - 1) ? "duped" : p.recordID;
				var m = this._gameViews[o];
				if (m && !(o in k)) {
					m.release();
					delete this._gameViews[o]
				}
			}
			var p;
			for (j = 0; j < this._games.length; j++) {
				p = this._games[j];
				if (!p.localPromotionalImage) {
					continue
				}
				o = (j == this._games.length - 1) ? "duped" : p.recordID;
				var h = this._gameViews[o];
				if (!h) {
					h = this._imageViewForGame(p);
					this._gameViews[o] = (h)
				}
				h.setImage(p.localPromotionalImage);
				this._scrollView.addChild(h)
			}
			this.layoutSubviews()
		},
		layoutSubviews: function($super) {
			$super();
			if (!this.getFrame()) {
				return
			}
			var k = new e.ViewGeometry.Rect(this.getFrame());
			var n = new e.ViewGeometry.Rect(0, 0, k.w, k.h);
			this._scrollView.setFrame(n);
			this._overlayButton.setFrame(n);
			if (!this._games) {
				return
			}
			var h = k.w;
			var m;
			for (var g = 0; g < this._games.length; g++) {
				m = (g == this._games.length - 1) ? "duped" : this._games[g].recordID;
				var l = this._gameViews[m];
				var j = new e.ViewGeometry.Rect([Math.floor(h * g), 0, Math.floor(h), Math.floor(k.h)]);
				l.setFrame(j)
			}
			this._scrollView.setContentSize([h * this._games.length, Math.floor(k.h)]);
			if (this._scrollView.setScrollIndicatorsVisible) {
				this._scrollView.setScrollIndicatorsVisible(false)
			}
			this._updateButtonFrame()
		},
		_updateButtonFrame: function() {
			var k = new e.ViewGeometry.Rect(this.getFrame());
			k.x = 0;
			k.y = 0;
			k.inset(0, -1, 2, 2);
			var j = k.h;
			if (this.getParent() && this.getParent().getFrame()) {
				j = this.getParent().getFrame()[3]
			}
			var h = new e.ViewGeometry.Rect(k);
			var g = h.h = this.getStyle().extras.headerHeightRatio * j;
			var l = h.sliceHorizontal(-this.getStyle().extras.cornerButtonWidthRatio * h.w);
			this.cornerButton.setFrame(l)
		},
		_easeOutAtPercentage: function(g) {
			return (1 - Math.cos(Math.PI * g)) / 2
		},
		scrollToGame: function(g) {
			if (this._games && this._games.indexOf) {
				var h = this._games.indexOf(g);
				this.scrollToGameAtIndex(h, true)
			}
		},
		scrollToPreviousGame: function() {
			this.scrollToGameAtIndex(this.selectedGameIndex() - 1)
		},
		scrollToNextGame: function() {
			this.scrollToGameAtIndex(this.selectedGameIndex() + 1)
		},
		scrollToGameAtIndex: function(j, k) {
			if (this._games.length <= 1) {
				return
			}
			var m = this._scrollView.getFrame();
			var h = m[2];
			var l = k ? 0 : 750;
			if (j == this._games.length) {
				j = 1;
				this._scrollView.setScrollPosition(0, 0)
			} else {
				if (j < 0) {
					j = this._games.length - 2;
					this._scrollView.setScrollPosition((this._games.length - 1) * h, 0)
				}
			}
			var g = this._scrollView;
			e.animate(function() {
				NgLogD("TRYING TO ANIMATE CAROUSEL: " + j + " * " + h);
				g.setScrollPosition(j * h, 0)
			}, l, function() {
				NgLogD("Finished Animation")
			})
		},
		startAutoscrolling: function() {
			this._shouldAnimate = true;
			if (!this._autoscrollTimer) {
				var g = this._autoscrollTimer = setInterval((function() {
					NgLogI("GameCarousel Autoscroll Timer = " + g);
					this.scrollToNextGame()
				}).bind(this), 5000)
			}
		},
		stopAutoscrolling: function() {
			this._shouldAnimate = false;
			if (this._autoscrollTimer) {
				clearInterval(this._autoscrollTimer);
				this._autoscrollTimer = null
			}
			this._scrollView.clearAnimations()
		},
		rootPerformanceHack: function() {
			if (true || !this._scrollView || this._scrollView.getParent() === e.Window.document) {
				return
			}
			var j = new e.ViewGeometry.Rect(this.getParent().getFrame());
			var g = new e.ViewGeometry.Rect(this.getFrame());
			var k = new e.ViewGeometry.Rect(this._scrollView.getFrame());
			var h = new e.ViewGeometry.Rect(this.cornerButton.getFrame());
			k.x += g.x + j.x;
			k.y += g.y + j.y;
			h.x += g.x + j.x;
			h.y += g.y + j.y;
			this._scrollView.setFrame(k);
			this._scrollView.removeFromParent();
			this._scrollView.setVisibleInOrientations(e.Commands.OrientationFlag.Landscape);
			e.Window.document.addChild(this._scrollView);
			this.cornerButton.setFrame(h);
			this.cornerButton.removeFromParent();
			e.Window.document.addChild(this.cornerButton)
		},
		undoRootPerformanceHack: function() {
			if (true || !this._scrollView || this._scrollView.getParent() !== e.Window.document) {
				return
			}
			var j = new e.ViewGeometry.Rect(this.getParent().getFrame());
			var g = new e.ViewGeometry.Rect(this.getFrame());
			var k = new e.ViewGeometry.Rect(this._scrollView.getFrame());
			var h = new e.ViewGeometry.Rect(this.cornerButton.getFrame());
			k.x -= g.x + j.x;
			k.y -= g.y + j.y;
			h.x -= g.x + j.x;
			h.y -= g.y + j.y;
			this._scrollView.setFrame(k);
			this._scrollView.removeFromParent();
			this.addChild(this._scrollView);
			this.cornerButton.setFrame(h);
			this.cornerButton.removeFromParent();
			this.addChild(this.cornerButton)
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserPicNameView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserPicNameView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserPicNameView"] = b;
	var d = require("NGCore/Client/UI").UI;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	b.UserPicNameView = d.View.subclass({
		userIconSmall: null,
		userNameButton: null,
		initialize: function($super, e) {
			$super(e);
			this.userNameButton = (new a()).retain();
			this.userIconSmall = (new d.Image()).retain();
			this.userIconSmall.setImage(c.image("no-user-icon.png"));
			this.userBadgeIcon = (new d.Image()).retain();
			this.userBadgeText = (new d.Label()).retain();
			this.userBadgeIcon.setTouchable(false);
			this.userBadgeText.setTouchable(false);
			this.userBadgeIcon.setImage(c.image("mobageverticaltab_jumpbutton_invitesbubble.png"))
		},
		destroy: function() {
			this.userNameButton.release();
			this.userIconSmall.release();
			this.userBadgeIcon.release();
			this.userBadgeText.release()
		},
		setUserInfo: function(h, f, e) {
			this.userIconSmall.setImage(c.image("no-user-icon.png"));
			this.userIconSmall.setImage(f);
			this.userNameButton.setText(h);
			if (this._baseTextSize) {
				var g = {
					15: 0.46,
					14: 0.52,
					13: 0.56,
					12: 0.62,
					11: 0.68,
					10: 0.73,
					9: 0.82,
					8: 0.88,
					7: 0.94
				};
				if (g[h.length]) {
					this.userNameButton.setTextSize(this._baseTextSize * g[h.length])
				} else {
					this.userNameButton.setTextSize(this._baseTextSize)
				}
			}
			this.setBadgeCount(e)
		},
		setBadgeCount: function(f) {
			var e = f;
			if (f > 99) {
				e = "+99"
			}
			if (f > 0) {
				this.userBadgeText.setText(e);
				if (!this._showingBadge) {
					d.animate(function() {
						this.addChild(this.userBadgeIcon);
						this.addChild(this.userBadgeText)
					}.bind(this), 250, function() {});
					this._showingBadge = true
				}
			} else {
				if (this._showingBadge) {
					d.animate(function() {
						this.userBadgeIcon.removeFromParent();
						this.userBadgeText.removeFromParent()
					}.bind(this), 250, function() {});
					this._showingBadge = false
				}
			}
		},
		setClickCallback: function(e) {
			this.userNameButton.onclick = e;
			this.userIconSmall.onclick = e
		},
		layoutSubviews: function() {
			var g = new d.ViewGeometry.Rect(this.getFrame());
			g.x = 0;
			g.y = 0;
			this.userIconSmall.setFrame(g.sliceHorizontal(g.h));
			g.inset(0, 0, 0, 2);
			this.userNameButton.setFrame(g);
			var f = new d.ViewGeometry.Rect(this.getFrame());
			var e = 0.3 * f.h;
			f.y = 0;
			f.w = f.h + e;
			f.x = this.getFrame()[2] - f.w;
			f.y += f.h * 0.1;
			f.h -= f.h * 0.2;
			this.userBadgeIcon.setFrame(f);
			this.userBadgeText.setFrame(f);
			var h = [0, 0, 0, e];
			this.userBadgeText.setTextInsets(h);
			this.addChild(this.userIconSmall);
			this.addChild(this.userNameButton)
		},
		setStyle: function($super, e) {
			$super(e);
			this._baseTextSize = this.userNameButton.getTextSize()
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameIconView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameIconView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameIconView"] = b;
	var d = require("NGCore/Client/UI").UI;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	b.GameIconView = d.View.subclass({
		iconImage: null,
		iconCaption: null,
		iconImageSizePct: 1,
		initialize: function($super, e) {
			$super(e);
			this.iconImage = (new a()).retain();
			this.iconCaption = (new d.Label()).retain();
			this.iconImage.setImage(c.image("no-game-icon.png"))
		},
		destroy: function() {
			this.iconImage.release();
			this.iconCaption.release()
		},
		setClickCallback: function(e) {
			this.iconImage.onclick = e
		},
		setGame: function(h, g, e) {
			var f = c.image("no-game-icon.png");
			if (!e && (!h || h == "/images/app-default.png")) {
				h = f
			} else {
				this.iconImage.setImage(f)
			}
			this.iconImage.setImage(h);
			this.iconCaption.setText(g)
		},
		layoutSubviews: function($super) {
			var g = new d.ViewGeometry.Rect(this.getFrame());
			g.x = 0;
			g.y = 0;
			var f = g.sliceVertical(g.h * (1 - this.getStyle().extras.captionHeightPct));
			f.w = f.h < f.w ? f.h : f.w;
			f.h = f.w;
			f.x -= f.w / 2;
			f.y -= f.w / 2;
			var h = f.w * 0.1;
			f.inset(h, h, 0, h);
			f = new d.ViewGeometry.Rect(this.getFrame());
			f.x = 0;
			f.y = 0;
			var e = [0.02 * f.h, 0, 0.25 * f.h, 0];
			this.iconImage.setImageInsets(e);
			this.iconImage.setFrame(f);
			this.iconCaption.setFrame(g);
			this.addChild(this.iconImage);
			this.addChild(this.iconCaption)
		},
		setIconImageSizePct: function(e) {
			this.iconImageSizePct = e
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ComplexLabel"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ComplexLabel"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ComplexLabel"] = c;
	var h = require("NGCore/Client/UI").UI;
	var d = h.ViewGeometry.Rect;
	var f = h.ViewGeometry.Scale;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var b;
	var a = c.ComplexLabel = g.View.subclass({
		classname: "ComplexLabel",
		suggestedWidthPerLetter: null,
		sublabels: null,
		_oldSetFrame: null,
		fullLength: null,
		batchMode: false,
		initialize: function($super, j) {
			$super(j);
			this.sublabels = [];
			this.fullLength = 0;
			this.batchMode = false;
			return this
		},
		destroy: function() {
			for (var j in this.sublabels) {
				if (!this.sublabels.hasOwnProperty(j) || !this.sublabels[j]) {
					continue
				}
				this.sublabels[j].release()
			}
		},
		sizeChanged: function() {
			this.layoutSubviews()
		},
		addTextWithAttributes: function(o, m) {
			NgLogD("ComplexLabel: adding label for '" + o + "'");
			if (o.indexOf("\n") != -1) {
				var n = o.split("\n");
				for (var k in n) {
					if (!n.hasOwnProperty(k)) {
						continue
					}
					if (n[k] && n[k].length) {
						this.addTextWithGradient(n[k], m)
					} else {
						this.sublabels.push(false)
					}
				}
				return
			}
			var j = (new g.Label()).retain();
			j.setAttributes(m);
			j.setText(o);
			j._ComplexLabel_properties = {
				stopManagingDimensions: false,
				stopManagingOrigin: false,
				useCharacterGuessingMode: true,
				useSuggestedCharacterWidthMode: false
			};
			j.setFrame([0, 0, 50, 50]);
			this.addChild(j);
			this.sublabels.push(j);
			this.fullLength += o.length;
			if (!this.batchMode) {
				this.layoutSubviews()
			}
		},
		layoutSubviews: function() {
			NgLogD("ComplexLabel: layoutSubviews");
			var t;
			var A = 1;
			for (t in this.sublabels) {
				if (!this.sublabels.hasOwnProperty(t)) {
					continue
				}
				if (!this.sublabels[t]) {
					A++
				}
			}
			var m = new d(this.getFrame());
			var l = Math.floor(m.h / A);
			var u = (m.w / this.fullLength);
			t = 0;
			var k, z, y, r, p;
			var x;
			var w;
			var q, o;
			var n, s;
			var v;
			for (q = 0; q < A; q++) {
				x = t;
				t = this.sublabels.indexOf(false, t);
				if (t == -1) {
					t = this.sublabels.length
				}
				k = m.w / (t - x);
				z = 0;
				for (o = 0; o < t - x; o++) {
					w = this.sublabels[x + o];
					v = w.getFrame();
					y = w.getText();
					r = y.length;
					p = b(y);
					if (w._ComplexLabel_properties.useCharacterGuessingMode) {
						this.logd("CharacterGuessingMode");
						v = [z, q * l, u * p, l];
						w.setFrame(v);
						z += v[2]
					} else {
						if (!w._ComplexLabel_properties.stopManagingDimensions && !w._ComplexLabel_properties.stopManagingOrigin) {
							s = [z, q * l, k, l];
							w.setFrame(s);
							z += k
						} else {
							if (w._ComplexLabel_properties.stopManagingDimensions && !w._ComplexLabel_properties.stopManagingOrigin) {
								w.setFrame([z, q * l, v[2], v[3]]);
								z += v[2]
							} else {
								if (w._ComplexLabel_properties.stopManagingOrigin && !w._ComplexLabel_properties.stopManagingDimensions) {
									w.setFrame([v[0], v[1], k, l]);
									z += k
								} else {
									if (w._ComplexLabel_properties.stopManagingOrigin && w._ComplexLabel_properties.stopManagingDimensions) {
										w.setFrame(v);
										z += v[2]
									}
								}
							}
						}
					}
				}
			}
		},
		setStyle: function($super, l) {
			if (!l) {
				$super(l);
				return
			}
			if (!(l instanceof Array)) {
				NgLogD("ComplexLabel had a non array of styles set to it");
				l = [l]
			}
			$super(l);
			var k;
			for (var j in this.sublabels) {
				if (!this.sublabels.hasOwnProperty(j)) {
					continue
				}
				k = l[j % l.length];
				this.sublabels[j].setAttributes(k)
			}
		},
		$initializeFromStringSegmentLengthsAndAttributes: function(p, l, o) {
			var k = [];
			var j = p;
			var m = p.length;
			for (var q in l) {
				if (!l.hasOwnProperty(q)) {
					continue
				}
				if (l[q] > p.length) {
					break
				}
				k.push(p.substr(0, l[q]));
				p = p.slice(l[q])
			}
			if (p.length) {
				k.push(p)
			}
			return a.initializeFromComponentsAndAttributes(k, o)
		},
		$initializeFromComponentsAndAttributes: function(n, m) {
			var j = new a();
			j.batchMode = true;
			var k, l = 0;
			for (k in n) {
				if (!n.hasOwnProperty(k)) {
					continue
				}
				j.addTextWithAttributes(n[k], m[k % m.length])
			}
			j.batchMode = false;
			return j
		}
	});
	var e = {
		",": 0.8,
		".": 0.8,
		"'": 0.8,
		"|": 0.8,
		"\\": 0.8,
		"/": 0.8,
		"`": 0.8,
		"!": 0.8,
		r: 0.8,
		j: 0.8,
		i: 0.8,
		m: 1.1,
		M: 1.3,
		A: 1.2,
		l: 0.8
	};
	b = function(l) {
		var j = 0;
		for (var k = 0; k < l.length; k++) {
			if (l[k] in e) {
				j += e[l[k]]
			} else {
				j += 1
			}
		}
		return j
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Assets"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Assets"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Assets"] = a;
	var c = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Network").Network;
	a.Assets = c.Class.singleton({
		initialize: function() {
			this._base = this._initRootHack();
			this._assetsBase = "Assets/"
		},
		localizationsPath: function() {
			return this._base + this._assetsBase + "Localizations/"
		},
		image: function(d) {
			return this._assetsBase + "Images/" + d
		},
		loggerSettingsPath: function() {
			return this._base + this._assetsBase + "logger_settings.json"
		},
		privSandboxPath: function() {
			return this._base
		},
		_initRootHack: function() {
			var f = c.Capabilities._getBootServer();
			if (!f.match(/.*\/$/)) {
				f += "/"
			}
			var e = f + c.Capabilities._getBoot();
			e = b.Util.NormalizeUrl(e);
			var d = b.Util.GetMD5HashDirectoryFromUrl(e) + "/";
			return d
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets"] = function() {
	var j = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets"] = j;
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting").ReferenceCounting;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Color").Color;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicValue").DynamicValue;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicTextSize").DynamicTextSize;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/ProportionalCorners").ProportionalCorners;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/FontCascade").FontCascade;
	var f = {};
	var a = {};
	var n = false;
	var m = function(s) {
		if (g.shouldLog(null, "Style")) {
			var t = Array.prototype.slice.call(arguments);
			t.unshift("Style: ");
			g.debug.apply(g, t)
		}
	};
	var l = function(s) {
		var t = Array.prototype.slice.call(arguments);
		t.unshift("Style: ");
		g.error.apply(g, t)
	};
	var p = function(v) {
		if (null === v || "object" !== typeof v || v instanceof b) {
			return v
		}
		var w;
		if (v instanceof Array) {
			w = [];
			var t = v.length;
			for (var u = 0; u < t; ++u) {
				w[u] = p(v[u])
			}
			return w
		}
		if (v instanceof Object) {
			w = {};
			for (var s in v) {
				if (v.hasOwnProperty(s)) {
					w[s] = p(v[s])
				}
			}
			return w
		}
		throw new Error("Unable to copy obj! Its type isn't supported.")
	};
	var r = function(t) {
		if (t instanceof Object) {
			for (var s in t) {
				if (t.hasOwnProperty(s)) {
					if (t[s] instanceof b) {
						t[s] = t[s].realize()
					}
					if (t[s] instanceof Object) {
						r(t[s])
					} else {
						if (!t[s] && (t[s] === null || t[s] === undefined)) {
							delete t[s]
						}
					}
				}
			}
		}
		return t
	};
	var e = null;
	var q = j.Style = o.subclass({
		classname: "Style",
		initialize: function(s) {
			if (s instanceof q) {
				this._properties = p(s._properties)
			} else {
				if (s === null || typeof s === "undefined") {
					this._properties = {}
				} else {
					this._properties = p(s)
				}
			}
		},
		_properties: null,
		_safeProps: null,
		props: function() {
			if (!this._safeProps) {
				this._safeProps = r(p(this._properties))
			}
			return this._safeProps
		},
		toString: function() {
			return this.classname + JSON.stringify(this.props())
		},
		override: function(w, v) {
			if (typeof v == "undefined") {
				v = 0
			} else {
				v++
			}
			if (v > 100) {
				l("ERROR! Too much recursion in stylesheets. Cycle suspected!");
				return
			}
			this._safeProps = null;
			var u = {};
			if (typeof w === "string") {
				u = p(q.registeredStyle(w)._properties)
			} else {
				if (w instanceof q) {
					u = p(w._properties)
				} else {
					u = p(w)
				}
			}
			var s;
			for (var t in u) {
				if (t === "parent") {
					continue
				}
				if (typeof(this._properties[t]) === "object") {
					s = new q(this._properties[t]);
					s.override(u[t], v);
					this._properties[t] = s._properties
				} else {
					this._properties[t] = u[t]
				}
			}
		},
		defaultsFrom: function(w, v) {
			if (typeof v == "undefined") {
				v = 0
			} else {
				v++
			}
			if (v > 100) {
				l("Stylesheet ERROR! Too much recursion in stylesheets. Cycle suspected!");
				return
			}
			this._safeProps = null;
			var u = {};
			if (typeof w === "string") {
				u = p(q.registeredStyle(w)._properties)
			} else {
				if (w instanceof q) {
					u = p(w._properties)
				} else {
					u = p(w)
				}
			}
			var s;
			for (var t in u) {
				if (t == "parent") {
					continue
				}
				if (typeof this._properties[t] === "undefined") {
					this._properties[t] = u[t]
				} else {
					if (typeof this._properties[t] === "object") {
						s = new q(this._properties[t]);
						s.defaultsFrom(u[t], v);
						this._properties[t] = s._properties
					}
				}
			}
		},
		$register: function(t, s) {
			if (f.hasOwnProperty(t)) {
				m("Stylesheet Warning: Reregistering a stylesheet for an existing name: " + t)
			}
			var u = s;
			if (u instanceof q) {
				f[t] = u
			} else {
				f[t] = new q(u)
			}
		},
		$registeredStyle: function(s) {
			if (!n) {
				q.instantiateAllStylesheets()
			}
			if (!f.hasOwnProperty(s)) {
				return new q()
			}
			return f[s]
		},
		$sheet: function(s, t) {
			if (a.hasOwnProperty(s)) {
				l("Stylesheet Error: Overriding another unregistered style. Probably namespace collision: '" + s + "'\nWill lead to orphaned style references. Fix This!")
			}
			if (!n) {
				a[s] = t
			} else {
				m("stylesheets already instantiated, directly making:", s);
				e(s, t)
			}
		},
		$instantiateAllStylesheets: function() {
			m("Stylesheets: Instantiating Global Stylesheets.");
			if (n) {
				l("Stylesheet Error: Only instantiate the stylesheets once!\n\t If you're seeing this a bunch you're probably calling Style.registeredStyle(name) from the global scope.")
			}
			n = true;
			var u = ["placeholder"];
			var t = 0;
			while (u.length > 0 && t < 1000) {
				u = [];
				for (var y in a) {
					if (a.hasOwnProperty(y)) {
						if (typeof a[y]["parent"] == "undefined" || f.hasOwnProperty(a[y]["parent"])) {
							e(y, a[y]);
							u.push(y)
						}
					}
				}
				for (var w in u) {
					if (u.hasOwnProperty(w)) {
						delete a[u[w]]
					}
				}
				t++
			}
			if (a.length > 0) {
				var x = [];
				for (var v in a) {
					x.push(v)
				}
				m("Stylesheet: Discovered cycles in the stylesheet inheritance graph. \nUnprocessed styles:\n\t" + x.join("\n\t"))
			}
		}
	});
	j.Style.clone = p;
	e = function(s, v) {
		var u = null;
		var t = null;
		m("Stylesheet: Instantiating Stylesheet named: " + s);
		if (v.hasOwnProperty("parent") && (t = f[v.parent])) {
			u = new q(t._properties);
			u.override(v);
			delete u._properties.parent
		} else {
			u = new q(v)
		}
		q.register(s, u)
	};
	j.Style.Color = c;
	j.Style.ProportionalCornersClass = k;
	j.Style.ScaledCorners = function(s) {
		if (!s) {
			return new k()
		}
		if (s instanceof String || s instanceof k || s instanceof Array) {
			return new k(s)
		}
		return new k(Array.prototype.slice.call(arguments))
	};
	j.Style.FontCascade = d;
	j.Style.defaultRegularFontFace = d.defaultRegularFontFace;
	j.Style.defaultBoldFontFace = d.defaultBoldFontFace;
	j.Style.defaultItalicFontFace = d.defaultItalicFontFace;
	j.Style.defaultBoldItalicFontFace = d.defaultBoldItalicFontFace;
	j.Style.DynamicTextSize = h;
	j.Style.ScaledTextSize = function(s) {
		return new h(s)
	};
	return j
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var d = {
		willPop: true,
		didPop: true,
		willPush: true,
		didPush: true,
		willHide: true,
		didHide: true,
		willReshow: true,
		didReshow: true
	};
	var a = c.NavigableViewController = b.subclass({
		classname: "NavigableViewController",
		equals: function(e) {
			return this.classname == e.classname
		},
		navController: null,
		_title: null,
		_titleImage: null,
		_interfaceActive: false,
		getTitle: function() {
			NgLogE("Screen Titles Have Been Deprecated");
			return this._title
		},
		setTitle: function(e) {
			this._title = e;
			NgLogE("Screen Titles Have Been Deprecated")
		},
		getTitleImage: function() {
			NgLogE("Screen Titles Have Been Deprecated");
			return this._titleImage
		},
		setTitleImage: function(e) {
			this._titleImage = e;
			NgLogE("Screen Titles Have Been Deprecated")
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new(require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/NavigableView").NavigableView)())
			}
			$super()
		},
		willPush: function(e) {},
		didPush: function(e) {
			this._interfaceActive = true
		},
		willPop: function(e) {
			this._interfaceActive = false
		},
		didPop: function(e) {},
		willReshow: function(e) {
			if (e.host.showLoadingLabel) {
				e.host.showLoadingLabel()
			}
		},
		didReshow: function(e) {
			if (e.host.hideLoadingLabel) {
				e.host.hideLoadingLabel()
			}
			this._interfaceActive = true
		},
		willHide: function(e) {
			this._interfaceActive = false
		},
		didHide: function(e) {},
		performEventCallback: function(f) {
			var e = f.eventType;
			if (e in d) {
				this.navController = f.navController;
				console.log("Calling for " + e + ": " + (typeof this[e]));
				this[e].call(this, f);
				(e == "didPop") && (this.navController = null)
			} else {
				console.log("Bad Event: " + f.eventType)
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView"] = f;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = {
		classname: "CompositeHash",
		initialize: function($super, p) {
			this._compositePrepare();
			if ($super && typeof $super === "function") {
				$super(p)
			}
			this.initSubviews();
			this.addSubviews();
			return this
		},
		destroy: function() {
			var p;
			for (p in this._compositeDestroys) {
				if (this._compositeDestroys.hasOwnProperty(p)) {
					this._compositeDestroys[p].call(this, p)
				}
			}
		},
		_compositePrepare: function($super) {
			throw new Error("CompositeView/_compositePrepare must be implemented in subclass")
		},
		isComposite: function() {
			return true
		},
		initSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			if (this._compositeInits) {
				var p;
				for (p in this._compositeInits) {
					if (this._compositeInits.hasOwnProperty(p) && !this[p]) {
						this._compositeInits[p].apply(this, [p])
					}
				}
			}
		},
		addSubviews: function($super) {
			NgLogD("CompositeView/addSubviews Abstract Base Class")
		},
		layoutSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
		},
		sizeChanged: function() {
			this.layoutSubviews()
		}
	};
	var h = f.CompositeView = n.View.subclass(d);
	h.prototype.classname = "CompositeView";
	var o = f.CompositeLayoutGroup = n.LayoutGroup.subclass(d);
	o.prototype.classname = "CompositeLayoutGroup";
	var j = function(p) {
		if (!p || (typeof p !== "string") || p.length <= 0) {
			p = "unknownProperty"
		}
		return p.charAt(0).toUpperCase() + p.slice(1)
	};
	var b = function(p) {
		if (!p || (typeof p !== "string") || p.length <= 0) {
			p = "unknownProperty"
		}
		return p.charAt(0).toLowerCase() + p.slice(1)
	};
	var c = f.CompositeAttributesExtract = function(r, u, t) {
		var s;
		var q = r[u];
		for (s in q) {
			if (q.hasOwnProperty(s)) {
				t[s] = q[s]
			}
		}
		delete r[u]
	};
	var k = function(p) {
		var q = p.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1].replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, "").replace(/\s+/g, "").split(",");
		return q.length == 1 && !q[0] ? [] : q
	};
	var m = function(p) {
		return (typeof p == "function" && p.toString().match(/function[^\(]*\(\s*\$super/)) ? true : false
	};
	var e = function(q, p) {
		if (m(q)) {
			return function() {
				return q.apply(this, [p].concat(Array.prototype.slice.call(arguments)))
			}
		}
		return q
	};
	var l = function(t) {
		var q = t._componentKeys;
		delete t._componentKeys;
		var s = t._componentAltKeyMap;
		delete t._componentAltKeyMap;
		var r = t._compositeInits;
		delete t._compositeInits;
		var p = t._compositeDestroys;
		delete t._compositeDestroys;
		t._compositePrepare = function() {
			this.logd("_compositePrepare: " + this.classname);
			if (this._compositePropertiesReady) {
				return
			}
			this._componentAltKeyMap = new Object();
			this._compositeInits = new Object();
			this._compositeDestroys = new Object();
			this._insets = new Object();
			var v, w;
			for (v = 0; v < q.length; v++) {
				this[q[v]] = null;
				this._insets[q[v]] = [0, 0, 0, 0]
			}
			var u = {
				_componentAltKeyMap: s,
				_compositeInits: r,
				_compositeDestroys: p
			};
			for (w in u) {
				if (u.hasOwnProperty(w)) {
					for (v in u[w]) {
						if (u[w].hasOwnProperty(v)) {
							this[w][v] = u[w][v]
						}
					}
				}
			}
			this._compositePropertiesReady = true
		}
	};
	var a = f.Composite = function(w) {
		var C = {
			_componentKeys: [],
			_componentAltKeyMap: {},
			_compositeInits: {},
			_compositeDestroys: {},
			toString: function() {
				var E = [this.classname, "[CompositeView]"];
				if (this.isCompositeButton && this.isCompositeButton()) {
					E.push("[CompositeButton]")
				}
				return E.join(" ")
			},
			setGradient: function($super, I, E, J) {
				if (!I) {
					I = {}
				} else {
					if (I instanceof g) {
						I = I.props()
					}
				}
				var F, H;
				if (!J) {
					for (F in I) {
						var G = this._componentAltKeyMap[F] || F;
						if (I.hasOwnProperty(F) && this[G] instanceof Object) {
							this[G].setGradient(I[F], E)
						}
					}
				}
				if ((Object.keys(I)).length) {
					$super(I, E)
				}
			},
			setAttributes: function($super, E, J) {
				if (!E) {
					E = {}
				} else {
					if (E instanceof g) {
						E = E.props()
					}
				}
				var G, I, F;
				if (!J) {
					for (G in E) {
						var H = this._componentAltKeyMap[G] || G;
						if (E.hasOwnProperty(G) && this[H] instanceof Object) {
							this[H].setAttributes(E[G])
						}
					}
				}
				if ((Object.keys(E)).length) {
					$super(E)
				}
			}
		};
		var q = h;
		var r = 0;
		var u, A, y, v, B;
		for (u = 0; u < arguments.length; u++) {
			y = arguments[u];
			if (!y) {
				NgLogE("Error: CompositeView: Received an undefined component, this is probably a severe error!");
				continue
			}
			if (typeof y === "function") {
				y(C);
				continue
			}
			if (y.CompositeClass) {
				q = y.CompositeClass
			}
			if (y.key || y.isComponent) {
				B = y.key || u.toString();
				C._componentKeys.push(B);
				if (y.altKey) {
					C._componentAltKeyMap[y.altKey] = B
				}
				if (y.component instanceof Object) {
					for (A in y.component) {
						if (y.component.hasOwnProperty(A)) {
							v = y.component[A];
							if (typeof v != "function") {
								continue
							}
							switch (A) {
								case "isComponent":
									break;
								case "initializeViewWithKey":
									C._compositeInits[B] = v;
									break;
								case "destroyViewWithKey":
									C._compositeDestroys[B] = v;
									break;
								default:
									C[A] = v;
									break
							}
						}
					}
				} else {
					throw new Error("Composite View Class Creation error: required property: component " + B)
				}
				if (!C._compositeInits[B]) {
					throw new Error("Composite View Class Creation error: required method: initializeViewWithKey")
				}
				if (!C._compositeDestroys[B]) {
					throw new Error("Composite View Class Creation error: required method: destroyViewWithKey")
				}
			} else {
				for (A in y) {
					if (y.hasOwnProperty(A)) {
						v = y[A];
						switch (A) {
							case "CompositeClass":
								break;
							default:
								C[A] = v;
								break
						}
					}
				}
			}
		}
		if (!C.layoutSubviews) {
			throw new Error("Composite View Class Creation error: required method layoutSubviews")
		}
		if (!C.addSubviews) {
			throw new Error("Composite View Class Creation error: required method addSubviews")
		}
		var z = function(I, F, G) {
			if (!G) {
				G = F
			} else {
				z(I, F)
			}
			var H = j(G) + "Inset";
			I["set" + H] = function(J) {
				if (!this._compositePropertiesReady) {
					this._compositePrepare()
				}
				this._insets[F] = J
			};
			I["get" + H] = function() {
				if (!this._compositePropertiesReady) {
					this._compositePrepare()
				}
				return this._insets[F]
			};
			var E = j(G) + "View";
			I["set" + E] = function(J) {
				if (!this._compositePropertiesReady) {
					this._compositePrepare()
				}
				var K = this[F];
				this[G] = this[F] = J.retain();
				if (K) {
					K.removeFromParent()
				}
				this.addChild(J);
				if (K) {
					K.release()
				}
			};
			I["get" + E] = function() {
				if (!this._compositePropertiesReady) {
					this._compositePrepare()
				}
				return this[F]
			}
		};
		var D = function(H, E, F, G) {
			H[E] = function(I) {
				G.call(this, I);
				if (this[I]) {
					this[F] = this[I]
				}
			}
		};
		var p;
		var x;
		var t = {};
		for (B in C._componentAltKeyMap) {
			if (C._componentAltKeyMap.hasOwnProperty(B)) {
				t[C._componentAltKeyMap[B]] = B;
				x = C._compositeInits[C._componentAltKeyMap[B]];
				if (x && typeof x === "function") {
					D(C._compositeInits, C._componentAltKeyMap[B], B, x)
				}
			}
		}
		for (u = 0; u < C._componentKeys.length; u++) {
			B = C._componentKeys[u];
			p = t[B];
			z(C, B, p)
		}
		l(C);
		var s = q.subclass(C);
		if (!s || !(s instanceof Function)) {
			throw new Error("Error defining composite class! " + C.valueOf())
		}
		return s
	};
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents"] = function() {
	var h = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents"] = h;
	var b = require("NGCore/Client/Core/Class").Class;
	var c = require("NGCore/Client/UI").UI;
	var a = c.ViewGeometry.Rect;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeLayouts");
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var p = h.Component = function(u) {
		var t;
		var w;
		var r;
		var v;
		var s;
		var q = {
			isComponent: true
		};
		for (t = 0; t < arguments.length; t++) {
			s = arguments[t];
			if (s && typeof s === "object") {
				for (w in s) {
					if (s.hasOwnProperty(w)) {
						q[w] = s[w]
					}
				}
			}
		}
		if (!q.hasOwnProperty("initializeViewWithKey")) {
			q.initializeViewWithKey = function(x) {
				throw ("Default Initializer!!? [" + JSON.stringify(x) + "]")
			}
		}
		if (!q.hasOwnProperty("destroyViewWithKey")) {
			q.destroyViewWithKey = function(x) {
				if (!this[x]) {
					return
				}
				this[x].release();
				this[x] = null
			}
		}
		return q
	};
	var k = function(q) {
		if (!q || (typeof q !== "string") || q.length <= 0) {
			q = "unknownProperty"
		}
		return q.charAt(0).toUpperCase() + q.slice(1)
	};
	var e = function(q, r) {
		return r.slice(0, 3) + k(q) + r.slice(3)
	};
	var d = h.ACCESSOR_PASSTHROUGH = "CompositePropertyPassthrough";
	var l = h.ComponentInheritForKey = function(q, r) {
		var s = new Object();
		return s
	};
	var f = h.Components = {};
	var j = f.Layouts = g.Layouts;
	var o = f.AddOrders = g.AddOrders;
	f.View = p({
		initializeViewWithKey: function(q) {
			this[q] = (new n.View()).retain()
		}
	});
	f.LayoutGroup = p(f.View, {
		initializeViewWithKey: function(q) {
			this[q] = (new n.LayoutGroup()).retain()
		}
	});
	f.Spinner = p(f.View, {
		initializeViewWithKey: function(q) {
			this[q] = (new n.Spinner()).retain()
		}
	});
	f.Button = p({
		initializeViewWithKey: function(q) {
			this[q] = (new c.Button()).retain()
		}
	});
	f.UnspammableButton = p(f.Button, {
		initializeViewWithKey: function(q) {
			this[q] = (new m()).retain()
		}
	});
	f.Label = p({
		initializeViewWithKey: function(q) {
			this[q] = (new n.Label()).retain()
		}
	});
	f.Image = p({
		initializeViewWithKey: function(q) {
			this[q] = (new n.Image()).retain()
		}
	});
	f.ListView = p({
		initializeViewWithKey: function(q) {
			this[q] = (new n.ListView()).retain()
		}
	});
	f.ScrollView = p({
		initializeViewWithKey: function(q) {
			this[q] = (new n.ScrollView()).retain()
		}
	});
	f.EditText = p(f.Label, {
		initializeViewWithKey: function(q) {
			this[q] = (new n.EditText()).retain()
		}
	});
	f.EditTextArea = p(f.EditText, {
		initializeViewWithKey: function(q) {
			this[q] = (new n.EditTextArea()).retain()
		}
	});
	f.ImageLabel = p({
		initializeViewWithKey: function(q) {
			this[q] = (new n.ImageLabel()).retain()
		}
	});
	return h
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods"] = b;
	var h = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/Device").Device;
	var g = require("NGCore/Client/UI").UI;
	var d = g.ViewGeometry.Rect;
	b.LayoutMethods = {};
	var c = [0, 0, 0, 0];
	b.LayoutMethods.setFrame = function($super) {
		var k = (this._frame || c).slice(2);
		if ($super) {
			$super.apply(this, Array.prototype.slice.call(arguments, 1))
		}
		var j = this._frame || c;
		if ((k[0] ^ j[2]) | (k[1] ^ j[3])) {
			if (typeof this.sizeChanged == "function") {
				console.log("Size of " + this.classname + " changed to " + j[2] + " x " + j[3]);
				this.sizeChanged(j[2], j[3], k[0], k[1])
			}
		}
	};
	b.LayoutMethods.setFrameNoSuper = function(m, l) {
		var k = (this._frame || c).slice(2);
		if (m instanceof Array) {
			if (l instanceof Array) {
				this._frame = m.concat(l)
			} else {
				this._frame = m
			}
		} else {
			if (m instanceof d) {
				this._frame = m.array()
			} else {
				this._frame = Array.prototype.slice.call(arguments)
			}
		}
		var j = this._frame || c;
		if ((k[0] ^ j[2]) | (k[1] ^ j[3])) {
			if (typeof this.sizeChanged == "function") {
				console.log("Size of " + this.classname + " changed to " + j[2] + " x " + j[3]);
				this.sizeChanged(j[2], j[3], k[0], k[1])
			}
		}
	};
	var a = h.MessageListener.subclass({
		classname: "Generic_LayoutListener"
	});
	b.LayoutMethods.createLayoutListener = function(j, m, k) {
		var l = new a();
		e.LayoutEmitter.addListener(l, m.bind(j), k);
		return l
	};
	b.LayoutMethods.sizeToLayoutEvent = function(j) {
		if (j) {
			this.setFrame(0, 0, j.width, j.height)
		}
	};
	var f = e.LayoutEmitter.Orientations;
	b.LayoutMethods.isLandscape = function(j) {
		return j == f.LandscapeLeft || j == f.LandscapeRight
	};
	b.LayoutMethods.isPortrait = function(j) {
		return j == f.Portrait || j == f.PortraitUpsideDown
	};
	b.LayoutMethods.guessLandscapeFrameHack = function() {
		var q = require("NGCore/Client/UI").UI;
		var p = q.Window.getWidth();
		var l = q.Window.getHeight();
		if (p > l) {
			console.log("TODO");
			return [0, 0, p, l]
		} else {
			var j = h.Capabilities.getScreenWidth();
			var n = h.Capabilities.getScreenHeight();
			var k = Math.max(j, n);
			var o = Math.min(j, n);
			var m = Math.max(k - l, o - p);
			p = k;
			l = o - m
		}
		console.log("Guessed frame at: " + p + "," + l);
		return [0, 0, p, l]
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/NavigableView"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/NavigableView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/NavigableView"] = c;
	var f = require("NGCore/Client/UI").UI;
	var d = f.ViewGeometry.Rect;
	var e = f.ViewGeometry.Scale;
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets");
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents").Components;
	var a = c.NavigableView = g({
		key: "content",
		component: b.View
	}, b.AddOrders.Generator("content"), {
		layoutSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			var h = new d(this.getFrame());
			var j = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost.view();
			if (j && !h.isEmpty()) {
				var k = j.standardTitleViewRect.copy();
				h.x = h.y = 0;
				h.sliceVertical(k.h);
				this.getContentView().setFrame(h)
			}
		}
	}, {
		classname: "NavigableView"
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Home"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Home"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Home"] = b;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = d.ScaledCorners;
	var e = d.ScaledTextSize;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	d.lazyLoad(b, "Home", function() {
		return {
			children: {
				_noGameText: {
					style: {
						textGravity: [0.5, 0.9],
						textSize: e(13),
						textColor: "FFFFFFFF",
						textShadow: "C000 1 {0,-2}",
						textFont: d.defaultRegularFontFace
					}
				},
				_leftPaneBackground: {
					style: {
						gradient: {
							gradient: ["99FFFFFF 0.0", "9966C2FF 1.0"],
							corners: "4"
						}
					}
				},
				_userNamePicView: {
					children: {
						userIconSmall: {
							style: {
								imageBorder: {
									corners: "4",
									outerLine: "FF000000 2.0"
								}
							}
						},
						userNameButton: {
							style: {
								textColor: "FFFFFFFF",
								textGravity: [0.2, 0.5],
								textSize: e(17),
								textFont: d.defaultBoldFontFace,
								gradient: {
									gradient: ["FF0D1E36 0.0", "FF072748 1.0"],
									corners: "4"
								},
								pressedGradient: {
									gradient: ["FF0B519F 0.0"],
									corners: "4"
								}
							}
						},
						userBadgeText: {
							style: {
								textColor: "FFFFFFFF",
								textSize: e(12),
								textGravity: [0.5, 0.5],
								textFont: d.defaultBoldFontFace
							}
						}
					}
				},
				_lastGameIcon: {
					children: {
						iconCaption: {
							style: {
								textColor: "FFFFFFFF",
								textGravity: [0.5, 0.5],
								textSize: e(12),
								textFont: d.defaultRegularFontFace
							}
						},
						iconImage: {
							style: {
								gradient: {
									gradient: ["FF0D1E36 0.0", "FF072748 1.0"],
									corners: "4"
								},
								pressedGradient: {
									gradient: ["FF0B519F 0.0"],
									corners: "4"
								}
							}
						}
					},
					extras: {
						captionHeightPct: 1 / 4,
						iconSizePct: 0.9
					}
				},
				_gamesButtonView: b.PageButton,
				_friendsButtonView: b.PageButton,
				_bankButtonView: b.PageButton,
				_gameCarousel: b.ScrollView,
				_alsoPlayingUsersList: b.ScrollView
			},
			extras: {
				contentInsetPctWidth: 12 / 800,
				headerHeight: 1 / 6,
				userNameHeightRatio: 1 / 3.5,
				leftPaneWidth: 1 / 3.4,
				leftRightPaneMargin: 1 / 64,
				rightPaneSectionMargin: 1 / 128
			}
		}
	});
	d.lazyLoad(b, "PageButton", function() {
		return {
			style: {
				textColor: "FFFFFFFF",
				gradient: {
					corners: a(4),
					gradient: ["FF0B4B93 0.0", "FF093A72 1.0"],
					outerLine: "FF081426 2.0"
				},
				pressedGradient: {
					corners: a(4),
					gradient: ["FF062C57 0.0", "FF093C76 1.0"],
					outerLine: "FF081426 2.0"
				},
				disabledGradient: {
					corners: a(4),
					gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
					outerLine: "FF081426 2.0"
				},
				pressedTextColor: "FFFFFFFF",
				disabledTextColor: "FFD1CDCD"
			},
			children: {
				buttonTextMajor: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FFFFFFFF",
						textSize: e(12),
						textGravity: [0, 0.5]
					}
				},
				buttonTextCount: {
					style: {
						textColor: "FF9fa6b9",
						textSize: e(12),
						textFont: d.defaultRegularFontFace,
						textGravity: [0.9, 0.5]
					}
				},
				buttonTextBadge: {
					style: {
						textColor: "FFFFFFFF",
						textSize: e(12),
						textGravity: [0.5, 0.5],
						textFont: d.defaultBoldFontFace
					}
				}
			},
			extras: {
				buttonIconWidthPct: 1 / 4,
				buttonBadgeWidthPct: 1 / 6
			}
		}
	});
	d.lazyLoad(b, "ScrollView", function() {
		return {
			style: {
				gradient: {
					gradient: ["00000000 0.0", "00000000 1.0"],
					corners: "0",
					outerLine: "00000000 0.0",
					innerLine: "00000000 0.0"
				}
			},
			children: {
				innerBackground: {
					style: {
						gradient: {
							gradient: ["00000000 0.0", "00000000 1.0"],
							corners: "0"
						}
					}
				},
				innerBkgTop: {
					style: {
						gradient: {
							gradient: ["00000000 0.0", "00000000 1.0"],
							corners: "0"
						}
					}
				},
				cornerButton: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FFFFFFFF",
						pressedTextColor: "FFFFFFFF",
						disabledTextColor: "FFD1CDCD",
						gradient: {
							corners: "0",
							gradient: ["AA000000 0.0", "AA000000 1.0"]
						},
						pressedGradient: {
							corners: "0",
							gradient: ["CC000000 0.0", "CC000000 1.0"]
						},
						disabledGradient: {
							corners: "0",
							gradient: ["88000000 0.0", "88000000 1.0"]
						}
					}
				},
				titleText: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FFFFFFFF",
						textGravity: [0, 0.5],
						textSize: e(14)
					}
				}
			},
			extras: {
				headerHeightRatio: 1 / 7.55555,
				cornerButtonWidthRatio: 1 / 2.815,
				listContentInset: [-0.24, 0, 0, 0]
			}
		}
	});
	d.lazyLoad(b, "FeaturedUser", function() {
		return {
			style: {
				image: c.image("no-user-icon.png"),
				pressedImageBorder: {
					gradient: ["66000000 0.0", "66000000 1.0"]
				}
			}
		}
	});
	d.lazyLoad(b, "GameCarouselImage", function() {
		return {
			style: {
				image: c.image("no-game-promo-image.png"),
				imageFit: 2
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest"] = e;
	var g = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/oauth");
	var q = require("NGCore/Client/Core");
	var c = require("NGCore/Client/Device").Device;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var n = require("NGCore/Client/Network").Network;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = require("NGCore/Client/Social/_Internal/US/Assets/Localization").Localization;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var p = e.PRLogD = function(r) {
		if (d.shouldLog(null, "PlusRequest")) {
			var s = Array.prototype.slice.call(arguments);
			s.unshift("PlusRequest: ");
			d.debug.apply(d, s)
		}
	};
	var m = e.PRLogE = function(r) {
		var s = Array.prototype.slice.call(arguments);
		s.unshift("PlusRequest: ");
		d.error.apply(d, s)
	};
	var a = true;
	var o = function(u, s) {
		var t = function(w) {
			var v = "" + w.substr(0, 1).toUpperCase() + w.substr(1, w.length - 1);
			u.prototype["set" + v] = function(x) {
				this[w] = x
			};
			u.prototype["get" + v] = function() {
				return this[w]
			}
		};
		for (var r = 0; r < s.length; r++) {
			t(s[r])
		}
	};
	var f = function() {
		f._initialize();
		this.secure = (f.getServerMode() == f.serverModes.production);
		this.apiMethod = "";
		this.attachments = [];
		this.httpMethod = "GET";
		this.httpHeaders = {};
		this.authenticationType = f.authenticationTypes.OAuth1
	};
	f.newBankRequest = function() {
		var s = new f();
		var r = (f.apiDomain.match(/\-sandbox\./) !== null);
		var t = "bank";
		if (r) {
			t = t + "-sandbox"
		}
		var u = f.getServerMode();
		if (u == f.serverModes.integration) {
			s.setApiDomain(t + ".integration.mobage.com")
		} else {
			if (u == f.serverModes.staging) {
				s.setApiDomain(t + ".staging.mobage.com")
			} else {
				if (u == f.serverModes.production) {
					s.setApiDomain(t + ".mobage.com")
				} else {
					s.setApiDomain("bank-sandbox.mobage.com")
				}
			}
		}
		s.setAuthenticationType(f.authenticationTypes.OAuth2);
		s.setSecure(true);
		return s
	};
	f._initialize = function() {
		var r = NgApplication.getInstance();
		p("Got capabilities! " + q.Core.Capabilities);
		if (q.Core.Capabilities.getPlatformOS().toLowerCase() == "flash") {
			f.apiDomain = "10.15.100.241";
			a = false
		} else {
			if (!f.apiDomain) {
				NgLogD("Plus: Could not find Plus server url in configuration.json. Defaulting to partner.");
				if (q.Core.Capabilities.getSocialServer()) {
					f.apiDomain = q.Core.Capabilities.getSocialServer();
					NgLogD("PlusRequest: Social server! " + f.apiDomain)
				} else {
					f.setServerMode(f.serverModes.partner)
				}
			}
		}
		f._initialize = function() {}
	};
	o(f, ["apiMethod", "entityTag", "secure", "httpHeaders", "httpMethod", "postBody", "apiDomain", "authenticationType"]);
	f.apiVersion = "1";
	f.ERROR_NO_CONNECTION = "No internet connection";
	f.platformAccessToken = null;
	f.platformAccessSecret = null;
	f.platformConsumerKey = null;
	f.platformConsumerSecret = null;
	f.__defineSetter__("apiDomain", function(r) {
		if (r || !f._apiDomain) {
			f._apiDomain = r
		}
	});
	f.__defineGetter__("apiDomain", function() {
		var r = f._apiDomain;
		if (!r) {
			r = "app.mobage.com"
		}
		return r
	});
	f.apiDomain = null;
	f.serverModes = {
		staging: "staging",
		integration: "integration",
		partner: "sandbox",
		sandbox: "sandbox",
		production: "production",
		unknown: "unknown"
	};
	f.authenticationTypes = {
		OAuth1: "OAuth1",
		OAuth2: "OAuth2",
		None: "None"
	};
	f.getServerMode = function() {
		f._initialize();
		var t = f.apiDomain;
		var r = f.serverModes;
		var u = r.unknown;
		var s = NgLogD;
		if (t == "staging.plusplus.com" || t == "app-staging.mobage.com" || t == "app.staging.mobage.com" || t == "app-sandbox.staging.mobage.com") {
			u = r.staging
		} else {
			if (t == "partner.plusplus.com" || t == "app-sandbox.mobage.com") {
				u = r.partner
			} else {
				if (t == "integration.plusplus.com" || t == "app-staging.mobage.com" || t == "app.integration.mobage.com" || t == "app-sandbox.integration.mobage.com") {
					u = r.integration
				} else {
					if (t == "app.plusplus.com" || t == "app.mobage.com") {
						u = r.production;
						s = p
					}
				}
			}
		}
		s("Getting server mode: " + u);
		return u
	};
	f.setServerMode = function(s) {
		var r = f.serverModes;
		if (s == r.staging) {
			f.apiDomain = "app.staging.mobage.com"
		} else {
			if (s == r.partner) {
				f.apiDomain = "app-sandbox.mobage.com"
			} else {
				if (s == r.integration) {
					f.apiDomain = "app.integration.mobage.com"
				} else {
					if (s == r.production) {
						f.apiDomain = "app.mobage.com"
					}
				}
			}
		}
	};
	f.serverModeIsProduction = function() {
		return (f.getServerMode() === f.serverModes.production)
	};
	f.prototype.sendRetry = function(r) {
		this.send(function(t, u, v, s) {
			if (s === 401) {
				b.Session.getCurrentSession().loginWithExistingSession(function() {
					NgLogD("Mobage/PluseRequest login/send request");
					this.send(r)
				}.bind(this))
			} else {
				r(t, u, v, s)
			}
		}.bind(this))
	};
	f.prototype.send = function(r) {
		r = r || f.noOp;
		var s = this._prepareRequest();
		this.sendAux(s, r)
	};
	f.prototype.sendAux = function(s, r) {
		r = r || f.noOp;
		var u = c.NetworkEmitter.getLastStatus();
		if (u === c.NetworkEmitter.Status.None) {
			r(f.ERROR_NO_CONNECTION);
			return
		}
		var v;
		var t = this._getRequestURL();
		s.onreadystatechange = function() {
			if (s.readyState == 4) {
				v = s.getUnflattenedResponseHeaders();
				var x = s.responseText;
				var w = s.error;
				var z = s.getResponseHeader("Content-Type") || "text";
				NgLogD("PlusRequest: got a Network.XHR response for " + t);
				p("Network.XHR response for " + t + " is:\n" + x);
				if (z.indexOf("application/json") != -1) {
					try {
						x = JSON.parse(x)
					} catch (y) {
						NgLogE("EXCEPTION - Could not parse JSON data: " + y + " - " + x);
						NgLogD("PlusRequest: headers:" + JSON.stringify(v));
						w = y
					}
					if (x && x.error_msg) {
						w = x.error_msg
					}
				}
				s.statusClass = s.status - (s.status % 100);
				if (s.statusClass !== 200 && s.status !== 304) {
					w = k("Please check your network connection settings.")
				}
				if (w) {
					NgLogE("PlusRequest: Error '" + w + "' in Network.XHR response: " + JSON.stringify(x))
				}
				r(w, x, v, s.status)
			}
		};
		if (this._sendComposition) {
			s.sendComposition(this._sendComposition)
		} else {
			p("Network.XHR request to " + t);
			s.send(this._postData)
		}
		if ((typeof f.mockXHR) != "undefined") {
			s.mockCallBack(r)
		}
	};
	f.prototype.addAttachmentWithNameAndFilenameOfType = function(u, s, r, t) {
		if (!u && !r) {
			return
		}
		if (!s && r) {
			s = r
		} else {
			if (!r && s) {
				r = s
			} else {
				if (!s && !r) {
					s = r = "value"
				}
			}
		}
		if (!t) {
			t = "application/octet-stream"
		}
		this.attachments.push({
			data: u,
			name: s,
			filename: r,
			type: t
		})
	};
	f.appKey = function() {
		return b.Session.getCurrentSession().appKey()
	};
	f.appVersion = function() {
		return b.Session.getCurrentSession().appVersion()
	};
	f.getPlatformVersion = function() {
		return "1.0"
	};
	f.getPlatformOAuthInfo = function() {
		return b.Session.getCurrentSession().OAuthConsumerInfo()
	};
	f.checkSessionStatus = function(r) {
		r = r || f.noOp;
		var s = new f();
		s.setApiMethod("session");
		s.setHttpMethod("GET");
		s.setPostBody(b.Session.getCurrentSession()._loginParameters());
		s.setSecure(false);
		s.send(function(t, u) {
			r(t, u)
		});
		return s
	};
	f._checkSessionStatusSecure = function(r) {
		r = r || f.noOp;
		var s = new f();
		s.setApiMethod("session");
		s.setHttpMethod("GET");
		s.setPostBody(b.Session.getCurrentSession()._loginParameters());
		s.setSecure(true);
		s.send(function(t, u) {
			r(t, u)
		});
		return s
	};
	f.loginWithUsernameAndPassword = function(t, s, r) {
		b.Session.getCurrentSession().loginWithUsernameAndPassword(t, s, r)
	};
	f.loginWithSession = function(r) {
		b.Session.getCurrentSession().loginWithSession(r)
	};
	f.sendPasswordResetEmailWithAddress = function(s, r) {
		r = r || f.noOp;
		if (!s) {
			r(k("No email address"), null);
			return
		}
		var t = new f();
		t.setSecure(true);
		t.setApiMethod("users/reset_password");
		t.setHttpMethod("POST");
		t.setPostBody({
			email: s
		});
		t.send(function(u, v) {
			if (u || (v && !v.success)) {
				r(u, null)
			} else {
				r(null, v)
			}
		})
	};
	f.getSessionTokensForConsumerKey = function(t, r) {
		r = r || f.noOp;
		var s = new f();
		s.setApiMethod("oauth/authorize_new");
		s.setHttpMethod("POST");
		s.setPostBody({
			key: t
		});
		s.send(function(u, v) {
			NgLogD("getSessionTokensForConsumerKey *" + u + "* - **" + v + "**");
			r(u, v)
		});
		return s
	};
	f.updateSessionDeviceToken = function(t, r) {
		r = r || f.noOp;
		var s = new f();
		s.setApiMethod("session");
		s.setHttpMethod("PUT");
		s.setPostBody({
			device_token: t
		});
		s.send(function(u, v) {
			r(u, v)
		});
		return s
	};
	f.prototype._getRequestURL = function() {
		var r = f.appKey();
		var t = [(this.apiDomain || f.apiDomain), f.apiVersion, r, this.apiMethod];
		var s = "" + (this.secure ? "https" : "http") + "://" + t.join("/");
		NgLogD("PlusRequest: URL " + s);
		return s
	};
	f.prototype._prepareRequest = function() {
		var K;
		var s = this.getHttpMethod();
		var D = this._getRequestURL();
		this._postData = this.postBody;
		var r = {};
		var H = this.httpHeaders["Content-Type"];
		if (!H && (s === "POST")) {
			H = "application/x-www-form-urlencoded"
		}
		if ((s !== "POST") || (H === "application/x-www-form-urlencoded")) {
			this._flattenedResultsForPostData(this._postData, "", true, r)
		}
		var I = f.getPlatformOAuthInfo();
		var z = {
			action: D,
			method: s,
			parameters: r
		};
		var x = null;
		if (this.authenticationType == f.authenticationTypes.OAuth1) {
			g.OAuth.completeRequest(z, I);
			x = g.OAuth.getAuthorizationHeader(undefined, z.parameters)
		} else {
			if (this.authenticationType == f.authenticationTypes.OAuth2) {
				x = "bearer: " + b.Session.getCurrentSession().OAuth2Token()
			}
		}
		if (s == "GET" || s == "DELETE") {
			var C = [];
			for (K in this.postBody) {
				if (this.postBody.hasOwnProperty(K)) {
					K = g.OAuth.percentEncode(K);
					var F = g.OAuth.percentEncode(this.postBody[K]);
					C.push("" + K + "=" + F)
				}
			}
			if (C.length > 0) {
				D = D + "?" + C.join("&")
			}
			p("New URL: " + D)
		}
		if ((typeof f.mockXHR) == "undefined") {
			this.request = new n.XHR()
		} else {
			this.request = f.mockXHR
		}
		this.request.open(z.method, D, true);
		if (x) {
			this.request.setRequestHeader("Authorization", x)
		}
		var J = "" + f.appKey() + "/" + f.appVersion() + " Mobage/" + f.getPlatformVersion();
		this.request.setRequestHeader("User-Agent", J);
		this.request.setRequestHeader("Accept", "application/json");
		var u = q.Core.Capabilities;
		var v = false;
		if ((typeof u.getPlatformOS() == "undefined") || (u.getPlatformOS().toLowerCase() != "android" && u.getPlatformOS().toLowerCase() != "flash")) {
			p("GZIP supported on " + u.getPlatformOS());
			v = true
		}
		this.request.setRequestHeader("Accept-Encoding", (v ? "gzip" : ""));
		this.request.setRequestHeader("Accept-Language", h.getAcceptLanguage());
		if (this.httpHeaders) {
			for (K in this.httpHeaders) {
				if (this.httpHeaders.hasOwnProperty(K)) {
					this.request.setRequestHeader(K, this.httpHeaders[K])
				}
			}
		}
		this.request.setRequestHeader("X-Stat-Session", q.Core.Analytics._getPipe().getMeta("sid"));
		if (this.entityTag) {
			this.request.setRequestHeader("If-None-Match", this.entityTag)
		}
		if (this._postData && this.httpMethod != "GET") {
			if (this.attachments.length > 0) {
				var G = "---ABlkjasfdkjsdifsdf098asdfa3lka90aflallyourbasekjas09ds0fjasdkal3lj0sa";
				var E = "\r\n";
				var A = "--" + G + E;
				var B = [];
				B.push({
					str: this._multipartPostBodyFromDataWithBoundary(this._postData, G)
				});
				for (var w in this.attachments) {
					var y = this.attachments[w];
					var t = y.type;
					if (!t) {
						t = "application/octet-stream"
					}
					B.push({
						str: A
					});
					B.push({
						str: 'Content-Disposition: form-data; name="' + y.name + '"; filename="' + y.filename + '"' + E
					});
					B.push({
						str: "Content-Type: " + t + E + E
					});
					if (y.data) {
						B.push({
							str: y.data
						})
					} else {
						B.push({
							file: y.filename
						})
					}
					B.push({
						str: E
					})
				}
				B.push({
					str: "--" + G + "--" + E
				});
				this._sendComposition = B;
				this.request.setRequestHeader("Content-Type", "multipart/form-data; boundary=" + G)
			} else {
				if (!this.request.getRequestHeader("Content-Type")) {
					this.request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded")
				}
				this._postData = this._getStringRepresentationOfPostData()
			}
		}
		return this.request
	};
	f.prototype._multipartPostBodyFromDataWithBoundary = function(w, x) {
		var s = "\r\n";
		var t = "--" + x + s;
		var r = [];
		for (var u in w) {
			var v = w[u];
			r.push(t);
			r.push('Content-Disposition: form-data; name="' + u + '"' + s + s);
			r.push(v);
			r.push(s)
		}
		return r.join("")
	};
	f.prototype._getStringRepresentationOfPostData = function(t, s) {
		if (t === null) {
			return ""
		}
		if (t === undefined) {
			t = t || this.postBody
		}
		if (typeof t !== "string") {
			var r = this._flattenedResultsForPostData(t, "", undefined, undefined, true);
			t = r.join("&")
		}
		return t
	};
	f.prototype._flattenedResultsForPostData = function(w, v, s, y, x) {
		var r = (typeof y == "undefined" ? (s === true ? {} : []) : y);
		for (var t in w) {
			if (w.hasOwnProperty(t)) {
				var u = w[t];
				if (v && v.length > 0) {
					t = "" + v + "[" + t + "]"
				}
				p("Getting " + t + ": " + (typeof u));
				if (typeof u == "object") {
					this._flattenedResultsForPostData(u, t, s, r, x)
				} else {
					if (s === true) {
						r[t] = u
					} else {
						r.push("" + encodeURIComponent(t) + "=" + encodeURIComponent(u))
					}
				}
			}
		}
		return r
	};
	for (var l in f.prototype) {
		if (f.prototype.hasOwnProperty(l)) {
			var j = f.prototype[l];
			j.displayName = "PlusRequest." + l + "()"
		}
	}
	f.noOp = function() {};
	e.PlusRequest = f;
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Updater"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Updater"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Updater"] = a;
	var g = require("NGCore/Client/Core").Core;
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemMessagesStack").SystemMessagesStack;
	var e = 5;
	var d = 240;
	var c = a.Updater = g.Class.singleton({
		classname: "Updater",
		_running: false,
		_requestedIntervals: {},
		_updateTimer: {
			uid: null,
			time: null
		},
		_updateInterval: {
			minimum: e,
			maximum: d,
			current: e
		},
		initialize: function() {},
		start: function() {
			if (!this._running) {
				this._running = true;
				this._scheduleCheck()
			}
		},
		stop: function() {
			if (this._running) {
				this._running = false;
				this._stopTimer()
			}
		},
		checkNow: function() {
			NgLogD("PlusUpdater: Checking");
			this._stopTimer();
			var j = new b.PlusRequest();
			j.setApiMethod("user_updates");
			j.setHttpMethod("GET");
			j.send(this.bind(this.handleUpdates))
		},
		handleUpdates: function(n, o) {
			if (o && o.success) {
				this._updateInterval.minimum = (o.update_interval || this._updateInterval.minimum);
				var l = [];
				for (var j in o.online_friends) {
					var m = o.online_friends[j];
					l.push(f.Session.getCurrentSession().dataCache().getObjectWithRecordID("User", m))
				}
				var k = [];
				if (o.updates) {
					NgLogD("user_updates: Got data.updates: " + JSON.stringify(o.updates));
					for (var p = 0; p < o.updates.length; p++) {
						var q = o.updates[p];
						if (q.key == "com.plusplus.system_message") {
							h.onSystemMessage(q.data)
						}
						if (q.key == "com.mobage.cpi.offer") {
							console.log("Length of Offer Array........." + k.length);
							if (q.data.offer_id && (k.indexOf(q.data.offer_id) === -1)) {
								h.onCPIMessage(q.data)
							} else {
								console.log("Message Already shown");
								continue
							}
							k.push(q.data.offer_id);
							console.log("Updated Length of Offer Array........." + k.length)
						}
						if (q.key == "com.mobage.cpi.redeem") {
							h.onCPIMessage(q.data)
						}
					}
				}
				if (o.update_interval) {
					this._updateInterval.minimum = o.update_interval
				}
				this._recalculateInterval();
				this._scheduleCheck()
			}
		},
		updateInterval: function() {
			var j = this._updateInterval;
			return (j.current > j.minimum ? j.current : j.minimum)
		},
		pushUpdateInterval: function(j) {
			var k = (this._requestedIntervals[j] || 0);
			this._requestedIntervals[j] = k + 1;
			this._recalculateInterval()
		},
		popUpdateInterval: function(j) {
			var k = this._requestedIntervals[j];
			if (k) {
				this._requestedIntervals[j] = k - 1
			}
			this._recalculateInterval()
		},
		_scheduleCheck: function(k) {
			if (!k) {
				k = this._updateInterval.current
			}
			this._stopTimer();
			var j = this;
			this._updateTimer.uid = setTimeout(function() {
				j.checkNow()
			}, k * 1000);
			NgLogD("PlusUpdater: Updating in " + k + "s")
		},
		_stopTimer: function() {
			if (this._updateTimer.uid) {
				clearTimeout(this._updateTimer.uid);
				this._updateTimer.uid = null
			}
		},
		_recalculateInterval: function() {
			var k = this.updateInterval();
			var m = d;
			for (var l = 0; l < this._requestedIntervals.length; l++) {
				var j = this._requestedIntervals[l];
				if (j < m) {
					m = j
				}
			}
			this._updateInterval.current = m
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AllGamesList"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AllGamesList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AllGamesList"] = b;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OrderedList").OrderedList;
	var c = e.subclass({
		classname: "AllGamesList",
		initialize: function($super, g) {
			var f = 0;
			$super(f);
			this._gameClassRef = g;
			this._data = {}
		},
		_hasData: function(f) {
			return this._data.hasOwnProperty(f) && this._data[f]
		},
		_getData: function(f) {
			return this._data[f]
		},
		_constructRequest: function(g) {
			var f = new d.PlusRequest();
			f.setApiMethod("games");
			f.setHttpMethod("GET");
			return f
		},
		_handleRequestData: function(h) {
			this._data = {};
			this._knownEndOfSet = h.games.length;
			if (h.games) {
				a.beginBatching();
				for (var f = 0; f < h.games.length; f++) {
					var g = this._gameClassRef.getGameWithData(h.games[f]);
					if (g) {
						this._data[f] = g
					}
				}
				a.endBatching()
			}
		}
	});
	b.AllGamesList = c;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/FeaturedGamesList"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/FeaturedGamesList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/FeaturedGamesList"] = a;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/AllGamesList").AllGamesList;
	var b = a.FeaturedGamesList = c.subclass({
		_constructRequest: function($super, e) {
			var d = $super(e);
			d.setPostBody({
				featured: true,
				sort: "position"
			});
			return d
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchingProgress"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchingProgress"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchingProgress"] = e;
	var f = require("NGCore/Client/Core/MessageListener").MessageListener;
	var a = require("NGCore/Client/UI/ProgressDialog").ProgressDialog;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GameLaunchedEmitter").GameLaunchedEmitter;
	var d = e.GameLaunchingProgress = {
		_progressDialog: null,
		_onGameLaunchedListener: null,
		_requestingObjects: [],
		showDialog: function(g, h) {
			if (d._requestingObjects.indexOf(g) !== -1) {
				return
			}
			d._requestingObjects.push(g);
			if (!d._progressDialog) {
				d._progressDialog = new a();
				d._onGameLaunchedListener = new f();
				b.addListener(d._onGameLaunchedListener, d._onGameLaunched)
			}
			d._progressDialog.setText(c("Launching %1s…", h));
			d._progressDialog.show()
		},
		hideDialog: function(g) {
			var h = d._requestingObjects.indexOf(g);
			if (h === -1) {
				return
			}
			d._requestingObjects.splice(h, 1);
			if (d._requestingObjects.length === 0) {
				d._progressDialog.hide()
			}
		},
		_onGameLaunched: function() {}
	};
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/LifecycleManagedTimeout"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/LifecycleManagedTimeout"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/LifecycleManagedTimeout"] = b;
	var a = require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter;
	var c = b.LifecycleManagedTimeout = (require("NGCore/Client/Core/MessageListener").MessageListener).subclass({
		classname: "LifecycleManagedTimeout",
		initialize: function($super, e, d) {
			if ($super && typeof $super == "function") {
				$super()
			}
			a.addListener(this, this._onLifecycleEvent.bind(this));
			this._timeoutLength = d;
			this._cb = e;
			this._onDone = this._onTimeoutDone.bind(this);
			this._startTimeout()
		},
		destroy: function() {
			if (this._activeTimeout) {
				clearTimeout(this._activeTimeout)
			}
		},
		cancel: function() {
			this.destroy()
		},
		_startTimeout: function() {
			if (!this._activeTimeout) {
				this._timeoutStarted = new Date();
				this._activeTimeout = setTimeout(this._onDone, this._timeoutLength)
			}
		},
		_pauseTimeout: function() {
			if (this._activeTimeout) {
				clearTimeout(this._activeTimeout);
				this._activeTimeout = null;
				this._timeoutLength -= ((new Date()) - this._timeoutStarted)
			}
		},
		_onTimeoutDone: function() {
			this._cb();
			this.destroy()
		},
		_onLifecycleEvent: function(d) {
			if (d === a.Event.Suspend) {
				this._pauseTimeout()
			} else {
				if (d === a.Event.Resume) {
					this._startTimeout()
				}
			}
			return true
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/UIUtils"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/UIUtils"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/UIUtils"] = c;
	var d = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var a = c.UIUtils = {
		showAlert: function(g, f) {
			var e = (new d.AlertDialog()).retain();
			e.setTitle(g);
			e.setText(f);
			e.setChoices([b("OK")]);
			e.onchoice = function(h) {
				e.release();
				e = null
			};
			e.show()
		},
		showToast: function(f) {
			var e = new d.Toast({
				text: f
			});
			e.ondisappear = function() {
				e.destroy()
			};
			e.show()
		}
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/N0kler"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/N0kler"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/N0kler"] = b;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Network: function() {
			return require("NGCore/Client/Network").Network
		},
		PlusRequest: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest
		},
		Capabilities: function() {
			return require("NGCore/Client/Core/Capabilities").Capabilities
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		}
	});
	b.N0kler = {
		getConsumerInfo: function(k, d) {
			if (!k) {
				if (d) {
					d(a.Session.NO_KEYS_ERR);
					return
				}
			}
			var h = new a.PlusRequest();
			h.setAuthenticationType(a.PlusRequest.authenticationTypes.None);
			h.setApiMethod("keys");
			h.setHttpMethod("POST");
			var c = "sandbox";
			if (a.PlusRequest.serverModeIsProduction()) {
				c = "service";
				h.setSecure(true)
			}
			var e = a.Capabilities.getUniqueId();
			var g = this.salts(c);
			var j = Math.round((new Date().getTime()) / 1000);
			var f = "app_key=" + k + "&device_id=" + e + "&salt=" + g + "&timestamp=" + j + "&version=1.0";
			a.Network._int_Util.sign(f, c, function(l) {
				h.setPostBody({
					signature: l,
					device_id: e,
					timestamp: j,
					version: "1.0"
				});
				NgLogD("@@@ mobage N0kler.js getConsumerInfo PlusRequest");
				h.send(d)
			})
		},
		serverModes: function() {
			return {
				staging: "sandbox",
				integration: "sandbox",
				partner: "sandbox",
				sandbox: "sandbox",
				production: "service",
				unknown: "sandbox"
			}
		},
		salts: function(c) {
			var d = {
				sandbox: "rALEAy8rjDuF5T8mhlNqsg==",
				service: "iLz75dKRPzeKYbOAeOdIHQ=="
			};
			return d[c]
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/oauth"] = function() {
	var J = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/oauth"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/oauth"] = J;
	var f = require("NGCore/Client/Core/SHA1").SHA1;
	var k;
	if ((typeof k == "undefined") || (k === null)) {
		k = {}
	}
	k.setProperties = function u(e, L) {
		if (e !== null && L !== null) {
			for (var K in L) {
				if (L.hasOwnProperty(K)) {
					e[K] = L[K]
				}
			}
		}
		return e
	};
	k.setProperties(k, {
		percentEncode: function y(L) {
			if ((typeof L == "undefined") || (L === null)) {
				return ""
			}
			if (L instanceof Array) {
				var M = "";
				for (var K = 0; K < L.length; ++L) {
					if (M !== "") {
						M += "&"
					}
					M += k.percentEncode(L[K])
				}
				return M
			}
			L = encodeURIComponent(L);
			L = L.replace(/\!/g, "%21");
			L = L.replace(/\*/g, "%2A");
			L = L.replace(/\'/g, "%27");
			L = L.replace(/\(/g, "%28");
			L = L.replace(/\)/g, "%29");
			return L
		},
		decodePercent: function w(e) {
			if (e !== null) {
				e = e.replace(/\+/g, " ")
			}
			return decodeURIComponent(e)
		},
		getParameterList: function q(e) {
			if ((typeof e == "undefined") || (e === null)) {
				return []
			}
			if (typeof e != "object") {
				return k.decodeForm(e + "")
			}
			if (e instanceof Array) {
				return e
			}
			var K = [];
			for (var L in e) {
				if (e.hasOwnProperty(L)) {
					K.push([L, e[L]])
				}
			}
			return K
		},
		getParameterMap: function D(K) {
			if ((typeof K == "undefined") || (K === null)) {
				return {}
			}
			if (typeof K != "object") {
				return k.getParameterMap(k.decodeForm(K + ""))
			}
			if (K instanceof Array) {
				var M = {};
				for (var L = 0; L < K.length; ++L) {
					var e = K[L][0];
					if (M[e] === undefined) {
						M[e] = K[L][1]
					}
				}
				return M
			}
			return K
		},
		getParameter: function l(K, e) {
			if (K instanceof Array) {
				for (var L = 0; L < K.length; ++L) {
					if (K[L][0] == e) {
						return K[L][1]
					}
				}
			} else {
				return k.getParameterMap(K)[e]
			}
			return null
		},
		formEncode: function t(K) {
			var e = "";
			var M = k.getParameterList(K);
			for (var N = 0; N < M.length; ++N) {
				var L = M[N][1];
				if ((typeof L == "undefined") || L === null) {
					L = ""
				}
				if (e !== "") {
					e += "&"
				}
				e += k.percentEncode(M[N][0]) + "=" + k.percentEncode(L)
			}
			return e
		},
		decodeForm: function p(M) {
			var O = [];
			var Q = M.split("&");
			for (var P = 0; P < Q.length; ++P) {
				var e = Q[P];
				if (e === "") {
					continue
				}
				var L = e.indexOf("=");
				var K;
				var N;
				if (L < 0) {
					K = k.decodePercent(e);
					N = null
				} else {
					K = k.decodePercent(e.substring(0, L));
					N = k.decodePercent(e.substring(L + 1))
				}
				O.push([K, N])
			}
			return O
		},
		setParameter: function H(L, e, M) {
			var K = L.parameters;
			if (K instanceof Array) {
				for (var N = 0; N < K.length; ++N) {
					if (K[N][0] == e) {
						if (M === undefined) {
							K.splice(N, 1)
						} else {
							K[N][1] = M;
							M = undefined
						}
					}
				}
				if (M !== undefined) {
					K.push([e, M])
				}
			} else {
				K = k.getParameterMap(K);
				K[e] = M;
				L.parameters = K
			}
		},
		setParameters: function s(L, K) {
			var M = k.getParameterList(K);
			for (var e = 0; e < M.length; ++e) {
				k.setParameter(L, M[e][0], M[e][1])
			}
		},
		completeRequest: function o(K, e) {
			if ((typeof K.method == "undefined") || K.method === null) {
				K.method = "GET"
			}
			var L = k.getParameterMap(K.parameters);
			if ((typeof L.oauth_consumer_key == "undefined") || L.oauth_consumer_key === null) {
				k.setParameter(K, "oauth_consumer_key", e.consumerKey || "")
			}
			if ((typeof L.oauth_token == "undefined") || L.oauth_token === null && e.token !== null) {
				k.setParameter(K, "oauth_token", e.token)
			}
			if ((typeof L.oauth_version == "undefined") || L.oauth_version === null) {
				k.setParameter(K, "oauth_version", "1.0")
			}
			if ((typeof L.oauth_timestamp == "undefined") || L.oauth_timestamp === null) {
				k.setParameter(K, "oauth_timestamp", k.timestamp())
			}
			if ((typeof L.oauth_nonce == "undefined") || L.oauth_nonce === null) {
				k.setParameter(K, "oauth_nonce", k.nonce(6))
			}
			k.SignatureMethod.sign(K, e)
		},
		setTimestampAndNonce: function C(e) {
			k.setParameter(e, "oauth_timestamp", k.timestamp());
			k.setParameter(e, "oauth_nonce", k.nonce(6))
		},
		addToURL: function j(e, L) {
			var N = e;
			if ((typeof L != "undefined") && L !== null) {
				var K = k.formEncode(L);
				if (K.length > 0) {
					var M = e.indexOf("?");
					if (M < 0) {
						N += "?"
					} else {
						N += "&"
					}
					N += K
				}
			}
			return N
		},
		getAuthorizationHeader: function m(e, M) {
			var Q = "OAuth ";
			if (e) {
				M = M.slice();
				M.realm = e
			}
			var L = 0;
			var N = k.getParameterList(M);
			for (var O = 0; O < N.length; ++O) {
				var P = N[O];
				var K = P[0];
				if (K.indexOf("oauth_") === 0 || K.indexOf("realm") === 0) {
					Q += (L++ === 0 ? "" : ",") + k.percentEncode(K) + '="' + k.percentEncode(P[1]) + '"'
				}
			}
			return Q
		},
		correctTimestampFromSrc: function I(e) {
			e = e || "oauth_timestamp";
			return
		},
		correctTimestamp: function h(e) {
			k.timeCorrectionMsec = (e * 1000) - (new Date()).getTime()
		},
		timeCorrectionMsec: 0,
		timestamp: function b() {
			var e = (new Date()).getTime() + k.timeCorrectionMsec;
			return Math.floor(e / 1000)
		},
		nonce: function x(N) {
			var M = k.nonce.CHARS;
			var e = "";
			for (var L = 0; L < N; ++L) {
				var K = Math.floor(Math.random() * M.length);
				e += M.substring(K, K + 1)
			}
			return e
		}
	});
	k.nonce.CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
	k.declareClass = function g(M, e, L) {
		var N = M[e];
		M[e] = L;
		if (L !== null && N !== null) {
			for (var K in N) {
				if (K != "prototype") {
					L[K] = N[K]
				}
			}
		}
		return L
	};
	k.declareClass(k, "SignatureMethod", function n() {});
	k.setProperties(k.SignatureMethod.prototype, {
		sign: function G(L) {
			var K = k.SignatureMethod.getBaseString(L);
			var e = this.getSignature(K);
			k.setParameter(L, "oauth_signature", e);
			return e
		},
		initialize: function a(L, e) {
			var K;
			if ((typeof e.accessorSecret != "undefined") && e.accessorSecret !== null && L.length > 9 && L.substring(L.length - 9) == "-Accessor") {
				K = e.accessorSecret
			} else {
				K = e.consumerSecret
			}
			this.key = k.percentEncode(K) + "&" + k.percentEncode(e.tokenSecret)
		}
	});
	k.setProperties(k.SignatureMethod, {
		sign: function G(L, e) {
			var K = k.getParameterMap(L.parameters).oauth_signature_method;
			if ((typeof K == "undefined") || K === null || K === "") {
				K = "HMAC-SHA1";
				k.setParameter(L, "oauth_signature_method", K)
			}
			k.SignatureMethod.newMethod(K, e).sign(L)
		},
		newMethod: function d(M, e) {
			var L = k.SignatureMethod.REGISTERED[M];
			if ((typeof L != "undefined") && (L !== null)) {
				var P = new L();
				P.initialize(M, e);
				return P
			}
			var O = new Error("signature_method_rejected");
			var K = "";
			for (var N in k.SignatureMethod.REGISTERED) {
				if (k.SignatureMethod.REGISTERED.hasOwnProperty(N)) {
					if (K !== "") {
						K += "&"
					}
					K += k.percentEncode(N)
				}
			}
			O.oauth_acceptable_signature_methods = K;
			throw O
		},
		REGISTERED: {},
		registerMethodClass: function A(K, e) {
			for (var L = 0; L < K.length; ++L) {
				k.SignatureMethod.REGISTERED[K[L]] = e
			}
		},
		makeSubclass: function c(e) {
			var K = k.SignatureMethod;
			var L = function() {
				K.call(this)
			};
			L.prototype = new K();
			L.prototype.getSignature = e;
			L.prototype.constructor = L;
			return L
		},
		getBaseString: function E(N) {
			var e = N.action;
			var O = e.indexOf("?");
			var M;
			if (O < 0) {
				M = N.parameters
			} else {
				M = k.decodeForm(e.substring(O + 1));
				var L = k.getParameterList(N.parameters);
				for (var K = 0; K < L.length; ++K) {
					M.push(L[K])
				}
			}
			return k.percentEncode(N.method.toUpperCase()) + "&" + k.percentEncode(k.SignatureMethod.normalizeUrl(e)) + "&" + k.percentEncode(k.SignatureMethod.normalizeParameters(M))
		},
		normalizeUrl: function F(L) {
			var M = k.SignatureMethod.parseUri(L);
			var e = M.protocol.toLowerCase();
			var O = M.authority.toLowerCase();
			var P = true;
			if (P) {
				var K = O.lastIndexOf(":");
				if (K >= 0) {
					O = O.substring(0, K)
				}
			}
			var N = M.path;
			if (!N) {
				N = "/"
			}
			return e + "://" + O + N
		},
		parseUri: function v(N) {
			var M = {
				key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
				parser: {
					strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@\/]*):?([^:@\/]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
				}
			};
			var e = M.parser.strict.exec(N);
			var L = {};
			var K = 14;
			while (K--) {
				L[M.key[K]] = e[K] || ""
			}
			return L
		},
		normalizeParameters: function r(M) {
			if ((typeof M == "undefined") || M === null) {
				return ""
			}
			var N = k.getParameterList(M);
			var P = [];
			for (var O = 0; O < N.length; ++O) {
				var K = N[O];
				if (K[0] != "oauth_signature") {
					P.push([k.percentEncode(K[0]) + " " + k.percentEncode(K[1]), K])
				}
			}
			P.sort(function(R, Q) {
				if (R[0] < Q[0]) {
					return -1
				}
				if (R[0] > Q[0]) {
					return 1
				}
				return 0
			});
			var e = [];
			for (var L = 0; L < P.length; ++L) {
				e.push(P[L][1])
			}
			return k.formEncode(e)
		}
	});
	k.SignatureMethod.registerMethodClass(["PLAINTEXT", "PLAINTEXT-Accessor"], k.SignatureMethod.makeSubclass(function z(e) {
		return this.key
	}));
	k.SignatureMethod.registerMethodClass(["HMAC-SHA1", "HMAC-SHA1-Accessor"], k.SignatureMethod.makeSubclass(function z(K) {
		var e = f.b64_hmac_sha1(this.key, K, "=");
		NgLogD("Signature: " + e);
		return e
	}));
	try {
		k.correctTimestampFromSrc()
	} catch (B) {}
	if ((typeof J != "undefined") && J) {
		J.OAuth = k
	}
	return J
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserBuddiesList"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserBuddiesList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserBuddiesList"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserList").UserList;
	var e = a.subclass({
		classname: "UserBuddiesList",
		initialize: function($super, h, g, j, f) {
			$super(h, g, j, f);
			this.apiMethod = "users/" + g + "/buddies"
		}
	});
	c.UserBuddiesList = e;
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserGameFriendsList"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserGameFriendsList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserGameFriendsList"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserList").UserList;
	var e = a.subclass({
		classname: "UserGameFriendsList",
		initialize: function($super, g, f, h, j) {
			$super(g, f, h);
			this.apiMethod = "users/" + f + "/friends";
			this._groupName = j;
			this._afterValue = undefined
		},
		_postBodyForPage: function(g) {
			var f = {
				relation: this.relation,
				count: this._requestPageSize
			};
			if (this._groupName) {
				f.group = this._groupName
			}
			if (this._afterValue) {
				f.after = this._afterValue
			}
			return f
		},
		_handleRequestData: function(k) {
			this._knownEndOfSet = k.total;
			var h = this.userList.length || 0;
			if (k.friends.length > 0) {
				b.beginBatching();
				for (var f in k.friends) {
					if (k.friends.hasOwnProperty(f)) {
						var j = k.friends[f];
						var g = this._userClassRef.getUserWithData(j);
						var l = h + parseInt(f, 10);
						this.userList[l] = g
					}
				}
				b.endBatching()
			}
		}
	});
	c.UserGameFriendsList = e;
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/FeaturedUsersList"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/FeaturedUsersList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/FeaturedUsersList"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserList").UserList;
	var e = a.subclass({
		classname: "FeaturedUsersList",
		initialize: function($super, g, f) {
			$super(g, f);
			if (f) {
				this.apiMethod = "users/" + f + "/featured_users"
			} else {
				this.apiMethod = "featured_users"
			}
		},
		_postBodyForPage: function(f) {
			return {
				full: true
			}
		},
		_handleRequestData: function(j) {
			if (j.featured_users) {
				this._knownEndOfSet = j.featured_users.length;
				b.beginBatching();
				for (var f in j.featured_users) {
					if (j.featured_users.hasOwnProperty(f)) {
						var h = j.featured_users[f];
						if (!h[this._userClassRef.PhotoKey]) {
							h[this._userClassRef.PhotoKey] = h.photourl
						}
						if (!h.user_id) {
							h.user_id = h.userid
						}
						var g = this._userClassRef.getUserWithData(h);
						this.userList[f] = g
					}
				}
				b.endBatching()
			}
		}
	});
	c.FeaturedUsersList = e;
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OwnedGamesList"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OwnedGamesList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OwnedGamesList"] = b;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OrderedList").OrderedList;
	var e = d.subclass({
		classname: "OwnedGamesList",
		initialize: function($super, g, h) {
			var f = 0;
			$super(f);
			this._gameClassRef = g;
			this._data = {};
			this.userID = h;
			this.apiMethod = "users/" + h + "/games"
		},
		_hasData: function(f) {
			return this._data.hasOwnProperty(f) && this._data[f]
		},
		_getData: function(f) {
			return this._data[f]
		},
		_constructRequest: function(g) {
			var f = new c.PlusRequest();
			f.setApiMethod(this.apiMethod);
			f.setHttpMethod("GET");
			return f
		},
		_handleRequestData: function(h) {
			this._data = {};
			this._knownEndOfSet = h.games.length;
			if (h.games) {
				a.beginBatching();
				for (var f = 0; f < h.games.length; f++) {
					var g = this._gameClassRef.getGameWithData(h.games[f]);
					if (g) {
						this._data[f] = g
					}
				}
				a.endBatching()
			}
		}
	});
	b.OwnedGamesList = e;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserList"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/UserList"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OrderedList").OrderedList;
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var a = f.subclass({
		classname: "UserList",
		initialize: function($super, k, j, l, h) {
			var g = 100;
			$super(g);
			this._userClassRef = k;
			this.relation = l;
			this.game = h || null;
			this.userList = {};
			this.userID = j;
			NgLogD("PRIVILEGED UserList " + JSON.stringify(this.relation) + " " + JSON.stringify(this.userID))
		},
		_hasData: function(g) {
			return this.userList.hasOwnProperty(g) && this.userList[g]
		},
		_getData: function(g) {
			return this.userList[g]
		},
		_postBodyForPage: function(h) {
			var g = {
				slim: true,
				relation: this.relation,
				offset: (h * this._requestPageSize),
				count: this._requestPageSize
			};
			if (this.game) {
				g.game_only = this.game.recordID
			}
			return g
		},
		_constructRequest: function(h) {
			var g = new d.PlusRequest();
			var j = this._postBodyForPage(h);
			g.setApiMethod(this.apiMethod);
			g.setHttpMethod("GET");
			g.setPostBody(j);
			return g
		},
		_handleRequestData: function(j) {
			this._knownEndOfSet = j.total;
			var p = e.Session.getCurrentSession() ? e.Session.getCurrentSession().user() : null;
			var h = (p && p.recordID === this.userID);
			var m = j.count;
			if (m > 0) {
				var g = j.list.length;
				if (m != g) {
					NgLogE("ERROR: BAD SERVER RESPONSE: UserList._handleRequestData: Size of data returned by server doesn't match count provided! Server needs to fix! list.length = " + j.list.length + ", data.count = " + j.count)
				}
				if (g > 0) {
					b.beginBatching()
				}
				for (var n = 0; n < m; n++) {
					var k = parseInt(j.offset, 10) + parseInt(n, 10);
					if (n < g) {
						var o = j.list[n];
						if (!h) {
							this._userClassRef.purgeContextSensitiveKeysFromDictionary(o)
						}
						var l = this._userClassRef.getUserWithData(o);
						if (p && p.recordID === l.recordID) {
							l = p
						}
						this.userList[k] = l
					} else {
						NgLogE("ERROR: BAD SERVER RESPONSE: UserList._handleRequestData: Adding a noOp user at index " + k + "! Server needs to fix! (See above error)");
						this.userList[k] = f.noOp
					}
				}
				if (g) {
					b.endBatching()
				}
			}
		}
	});
	c.UserList = a;
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OrderedList"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OrderedList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OrderedList"] = b;
	var c = require("NGCore/Client/Core/Class");
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var f = b.OLLogD = function(g) {
		if (a.shouldLog(null, "OrderedList")) {
			var h = Array.prototype.slice.call(arguments);
			h.unshift("OrderedList: ");
			a.debug.apply(a, h)
		}
	};
	var d = b.OLLogE = function(g) {
		var h = Array.prototype.slice.call(arguments);
		h.unshift("OrderedList: ");
		a.error.apply(a, h)
	};
	var e = c.Class.subclass({
		classname: "OrderedList",
		$noOp: {},
		initialize: function(g) {
			this._requestPageSize = g;
			this._knownEndOfSet = undefined;
			this._pagesPending = [];
			this._pageETags = []
		},
		forAll: function(j, g) {
			var h = arguments.length >= 3 ? arguments[2] : null;
			this._newCursor(0, -1, j, g, h)
		},
		forRange: function(l, k, j, g) {
			if (k > 0) {
				var h = arguments.length >= 5 ? arguments[4] : null;
				this._newCursor(l, l + k, j, g, h)
			}
		},
		forItem: function(h, k, g) {
			var j = arguments.length >= 4 ? arguments[3] : null;
			this._newCursor(h, h + 1, k, g, j)
		},
		_hasData: function(g) {
			return true
		},
		_getData: function(g) {
			return undefined
		},
		_constructRequest: function(g) {
			return undefined
		},
		_handleRequestData: function(g) {},
		_newCursor: function(k, j, l, g, h) {
			if (!l) {
				d("Ordered List DataModel " + this.recordID + " got request with no perItemCb, can't process this.");
				return
			}
			this._processCursor({
				curIdx: k,
				endIdx: j,
				perItemCb: l,
				doneCb: g,
				isClosed: false,
				startIdx: k,
				staleData_optIn: h
			})
		},
		_checkForCursorComplete: function(h) {
			var g = h.curIdx;
			if (g == h.endIdx || (h.haxcheckedonserver && this._knownEndOfSet === 0) || (typeof this._knownEndOfSet !== "undefined" && this._knownEndOfSet !== 0 && g >= this._knownEndOfSet)) {
				this._closeCursor(h, undefined);
				return 2
			}
			if (this._getData(g) === e.noOp) {
				h.curIdx++;
				return 1
			}
			return 0
		},
		_processCursor: function(p) {
			while (true) {
				var l = this._checkForCursorComplete(p);
				if (l === 2) {
					return
				} else {
					if (l === 0) {
						break
					}
				}
			}
			var k = p.curIdx;
			p.haxcheckedonserver = true;
			var m = this._requestPageSize > 0 ? Math.floor(k / this._requestPageSize) : 0;
			if (!this._hasData(k) || (p._curPage != m && !p.staleData_optIn)) {
				p.dataIsFresh = true;
				p._curPage = m;
				var o = true;
				for (var g in this._pagesPending) {
					if (this._pagesPending.hasOwnProperty(g)) {
						if (this._pagesPending[g].pageNum == m) {
							var h = false;
							for (var n = 0; n < this._pagesPending[g].waitingCursors.length; n++) {
								var j = this._pagesPending[g].waitingCursors[n];
								if (!j.isClosed && !(typeof this._knownEndOfSet !== "undefined" && j.curIdx < this._knownEndOfSet)) {
									h = true;
									break
								}
							}
							if (h) {
								o = false;
								this._pagesPending[g].waitingCursors.push(p)
							}
							break
						}
					}
				}
				if (o) {
					var q = {
						waitingCursors: [p],
						pageNum: m
					};
					this._pagesPending.push(q);
					this._retrievePage(m, q)
				}
				p.waitingOnServer = true
			} else {
				p.curIdx++;
				p.waitingOnServer = false;
				this._returnData(p, this._getData(k), k)
			}
		},
		_closeCursor: function(h, g) {
			if (h.isClosed) {
				return
			}
			h.isClosed = true;
			if (h.doneCb) {
				h.doneCb(g)
			}
			if (h.staleData_optIn) {
				this._closeCacheCursor(h)
			}
		},
		_closeCacheCursor: function(k) {
			if (k.dataIsFresh) {
				f("Had to get fresh data, no need for extra requests.");
				if (typeof k.staleData_optIn === "function") {
					k.staleData_optIn(null, false)
				}
			} else {
				if (k.staleData_optIn === true) {
					f("User wanted purely stale data, don't generate a new cursor to freshen.")
				} else {
					f("Had cached data, create new requests to freshen.");
					var h = k.curIdx == k.endIdx;
					var g = k.curIdx;
					var j = 0;
					this._newCursor(k.startIdx, k.endIdx, function(l) {
						l(h || g > (++j))
					}, this.bind(function(l) {
						if (typeof k.staleData_optIn === "function") {
							k.staleData_optIn(l, true)
						}
					}), false)
				}
			}
		},
		_waitingCursorsUnblocked: function(h) {
			for (var g in h) {
				if (h.hasOwnProperty(g)) {
					this._processCursor(h[g])
				}
			}
		},
		_waitingCursorsGotError: function(j, h) {
			for (var g in j) {
				if (j.hasOwnProperty(g)) {
					this._closeCursor(j[g], h)
				}
			}
		},
		_returnData: function(l, j, h) {
			var g = this;
			var k = function(m) {
				if (m) {
					g._processCursor(l)
				} else {
					g._closeCursor(l, undefined)
				}
			};
			l.perItemCb(k, j, h)
		},
		_retrievePage: function(k, h) {
			var g = this;
			var j = this._constructRequest(k);
			if (this._pageETags.hasOwnProperty(k)) {
				j.setEntityTag(this._pageETags[k])
			}
			j.send(function(n, o, p, l) {
				if (n) {
					g._waitingCursorsGotError(h.waitingCursors, n)
				} else {
					if (l == 304) {
						g._waitingCursorsUnblocked(h.waitingCursors)
					} else {
						if (o.success !== true) {
							g._waitingCursorsGotError(h.waitingCursors, o.error)
						} else {
							if (p.etag) {
								g._pageETags[k] = p.etag
							}
							g._handleRequestData(o);
							g._waitingCursorsUnblocked(h.waitingCursors)
						}
					}
				}
				var m = g._pagesPending.indexOf(h);
				if (m == -1) {
					d("Ordered List DataModel " + g.recordID + " had an in progress request that wasn't in the pending pages list?")
				} else {
					g._pagesPending.splice(m, 1)
				}
			})
		}
	});
	b.OrderedList = e;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Host"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Host"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Host"] = d;
	var c = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Capabilities: function() {
			return require("NGCore/Client/Core/Capabilities").Capabilities
		},
		LifecycleEmitter: function() {
			return require("NGCore/Client/Device/LifecycleEmitter").LifecycleEmitter
		},
		AlertDialog: function() {
			return require("NGCore/Client/UI/AlertDialog").AlertDialog
		},
		GSNavController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/GSNavController").GSNavController
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		}
	});
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var e = d.Host = a.subclass({
		classname: "Host",
		dismissCallbacks: null,
		navController: null,
		navLogic: null,
		_showing: false,
		isShowing: function() {
			return this._showing
		},
		_showNavButtons: false,
		enableSoftNavButtons: function() {
			if (c.Capabilities.getPlatformOS().toLowerCase() === "android") {
				this._showNavButtons = false
			} else {
				this._showNavButtons = true
			}
			if (this.isShowing()) {
				this.resurfaceControls()
			}
		},
		disableSoftNavButtons: function() {
			this._showNavButtons = false;
			if (this.isShowing()) {
				this.resurfaceControls()
			}
		},
		initialize: function($super) {
			$super();
			NgLogD("mobage: Initializing the mobage host container.");
			this.dismissCallbacks = [];
			this.navController = (new c.GSNavController(this)).retain();
			this._showNavButtons = !c.Capabilities.getHasBackButton();
			if (c.Capabilities.getPlatformOS().toLowerCase() === "android") {
				this._showNavButtons = false
			}
			this.view()
		},
		destroy: function() {
			this.navController.setDelegate(null);
			this.navLogic.release();
			this.navController.release();
			this.clearTitleView()
		},
		show: function(g) {
			var f = null;
			if (g) {
				f = g.dismissCallback;
				g.dismissCallback = null
			}
			this.dismissCallbacks.push(f);
			if (this._showing) {
				return
			}
			this._showing = true;
			var h = false;
			if (!(c.Session.getCurrentSession()) || (h = (c.Session.getCurrentSession().appKey() == "default-Dev"))) {
				if (h) {
					NgLogE('Error!!! Application appears to have been configured with a bad or missing appKey, Mobage received "default-Dev" when it should not have!')
				} else {
					NgLogE("Error: Mobage tried to show the service without any session at all, this is a fatal error.")
				}
				var j = new c.AlertDialog();
				j.setTitle(b("Service Unavailable"));
				j.setText(b("Sorry to keep you waiting! We'll be back ASAP."));
				j.setChoices([b("Exit")]);
				j.onchoice = function() {
					c.LifecycleEmitter.exitProcess()
				};
				j.show()
			}
			NgLogD("mobage-Host-show: finished.")
		},
		hide: function() {
			NgLogD("mobage-Host: hide");
			this._showing = false;
			var f = null;
			NgLogD("mobage-Host-hide: processing dismissCallbacks (" + this.dismissCallbacks.length + ")");
			var h = this.dismissCallbacks.slice();
			var k = [];
			for (var g in h) {
				if (h.hasOwnProperty(g)) {
					NgLogD("mobage-Host-hide: processing dismissCallback");
					f = h[g];
					if (typeof f == "function") {
						f()
					}
					k.push(g)
				}
			}
			for (var j = k.length - 1; j >= 0; j--) {
				this.dismissCallbacks.splice(j, 1)
			}
		},
		resurfaceControls: function(f) {},
		menuKeyPressed: function() {
			return false
		},
		closeMenuDrawer: function(g, f) {},
		isMenuDrawerClosedOrClosing: function() {
			return true
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageNavLogic"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageNavLogic"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageNavLogic"] = f;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting").ReferenceCounting;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavPlaceholder").GamePlaceholder;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedRegistrationStepOne").DisaggregatedRegistrationStepOne;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig;
	var l = require("NGCore/Client/UI/Toast").Toast;
	var j = require("NGCore/Client/Core/Capabilities").Capabilities;
	var m = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var k = function(t) {
		var r = [c.Home, c.Catalog, c.GameProfile, c.MyPage, c.UserProfilePage, c.AccountSettings, c.Gamercard];
		if (j.getPlatformOS().toLowerCase() !== "android") {
			r.push(c.BankController)
		}
		var p = new l();
		if (a.nonDevFacingUIEnabled()) {
			return true
		} else {
			for (var s in r) {
				var q = r[s];
				if (q && t instanceof q) {
					NgLogD("MobageNavLogic: " + t.classname + " is disabled, NOT showing");
					p.setText(m("Coming soon!"));
					p.show();
					return false
				}
			}
			return true
		}
	};
	f.MobageNavLogic = {};
	var o = f.MobageNavLogic.HomeResettingNav = n.subclass({
		classname: "HomeResettingNav",
		initialize: function($super, p) {
			$super();
			this.hostController = p
		},
		hostController: null,
		setHostController: function(p) {
			this.hostController = p
		},
		navControllerShouldPopViewController: function(r, q, p) {
			if (!q) {
				return true
			}
			if (q instanceof b && q.isLocked) {
				return false
			}
			if (r.length() == 1) {
				if (q instanceof b) {
					return false
				}
			}
			return true
		},
		navControllerShouldPushViewController: function(p, w, A) {
			NgLogD("mobage-HomeResettingNav: navControllerShouldPush");
			if (!k(w)) {
				return false
			}
			var v, x;
			if (w instanceof c.Home) {
				x = p.getViewControllers();
				for (v in x) {
					if (x.hasOwnProperty(v)) {
						if (x[v] instanceof c.Home) {
							p.popToViewController(x[v], A);
							return false
						}
					}
				}
			} else {
				if (w instanceof b) {
					x = p.getViewControllers();
					for (v in x) {
						if (x.hasOwnProperty(v)) {
							var s = x[v];
							if (s instanceof b) {
								if (s == p.getBottomViewController() && s.isLocked) {
									continue
								}
								if (s.targetGame == w.targetGame) {
									break
								} else {
									var r = [];
									var z = false;
									for (var t = x.length; t >= 0; t++) {
										s = x[t];
										if (!z && !(s instanceof b)) {
											continue
										}
										z = true;
										r.push(s)
									}
									for (v in r) {
										if (r.hasOwnProperty(v)) {
											p.removeViewController(r[v]);
											r[v].didPop()
										}
									}
									p.insertViewControllerAtIndex(new c.Home(), 0);
									NgLogD("TODO: MobageNavLogic, how does one actually launch a new game???");
									break
								}
							} else {
								continue
							}
						}
					}
				}
			}
			if (p.length() >= a.getMaxNavStackDepth()) {
				var u = p.getBottomViewController();
				var q = 0;
				if (u && u instanceof b && u.isLocked) {
					q++;
					u = p.viewControllerAtIndex(q)
				}
				if (u && !(u instanceof c.Home)) {
					var y = new c.Home();
					p.insertViewControllerAtIndex(y, q);
					if (u) {
						p.removeViewControllerAtIndex(q + 1);
						u.didPop();
						u = p.viewControllerAtIndex(q + 1)
					}
				}
				if (u) {
					p.removeViewControllerAtIndex(q + 1);
					u.didPop()
				}
			}
			return true
		}
	});
	var e = f.MobageNavLogic.BackPreservingNav = n.subclass({
		classname: "BackPreservingNav",
		initialize: function($super, p) {
			$super();
			this.hostController = p
		},
		hostController: null,
		setHostController: function(p) {
			this.hostController = p
		},
		navControllerShouldPopViewController: function(r, q, p) {
			if (!q) {
				return true
			}
			if (q instanceof b && q.isLocked) {
				return false
			}
			if (q instanceof c.Home && !this.hostController.isRunningActiveGame()) {
				return false
			}
			if (r.length() == 1) {
				if (q instanceof b) {
					return false
				}
			}
			return true
		},
		navControllerShouldPushViewController: function(p, w, A) {
			NgLogD("mobage-BackPreservingNav: navControllerShouldPush");
			if (!k(w)) {
				return false
			}
			var v, x;
			if (w instanceof b) {
				x = p.getViewControllers();
				for (v in x) {
					if (x.hasOwnProperty(v)) {
						var s = x[v];
						if (s instanceof b) {
							if (s == p.getBottomViewController() && s.isLocked) {
								continue
							}
							if (s.targetGame == w.targetGame) {
								break
							} else {
								var r = [];
								var z = false;
								for (var t = x.length; t >= 0; t++) {
									s = x[t];
									if (!z && !(s instanceof b)) {
										continue
									}
									z = true;
									r.push(s)
								}
								for (v in r) {
									if (r.hasOwnProperty(v)) {
										p.removeViewController(r[v]);
										r[v].didPop()
									}
								}
								p.insertViewControllerAtIndex(new c.Home(), 0);
								NgLogD("TODO: MobageNavLogic, how does one actually launch a new game???");
								break
							}
						} else {
							continue
						}
					}
				}
			}
			if (p.length() >= a.getMaxNavStackDepth()) {
				var u = p.getBottomViewController();
				var q = 0;
				if (u && u instanceof b && u.isLocked) {
					q++;
					u = p.viewControllerAtIndex(q)
				}
				if (u && !(u instanceof c.Home)) {
					var y = new c.Home();
					p.insertViewControllerAtIndex(y, q);
					if (u) {
						p.removeViewControllerAtIndex(q + 1);
						u.didPop();
						u = p.viewControllerAtIndex(q + 1)
					}
				}
				if (u) {
					p.removeViewControllerAtIndex(q + 1);
					u.didPop()
				}
			}
			return true
		}
	});
	var h = f.MobageNavLogic.CredentialsBackPreservingNav = e.subclass({
		navControllerShouldPopViewController: function($super, r, q, p) {
			if (!q) {
				return true
			}
			if (r.getViewControllers().length == 1) {
				return false
			}
			if (q instanceof g) {
				return false
			}
			if (q instanceof b) {
				return false
			}
			return $super(r, q, p)
		}
	});
	var d = f.MobageNavLogic.ServiceNavLogic = n.subclass({
		classname: "ServiceNavLogic",
		initialize: function($super, p) {
			$super();
			this.hostController = p
		},
		hostController: null,
		setHostController: function(p) {
			this.hostController = p
		},
		navControllerShouldPopViewController: function(r, q, p) {
			if (!q) {
				return true
			}
			if (q instanceof b && q.isLocked) {
				return false
			}
			if (q instanceof c.Home && !this.hostController.isRunningActiveGame()) {
				return false
			}
			if (r.length() == 1) {
				return false
			}
			return true
		},
		navControllerShouldPushViewController: function(p, w, C) {
			NgLogD("mobage-ServiceNavLogic: navControllerShouldPush");
			if (!k(w)) {
				return false
			}
			var v, x;
			if (w instanceof c.Home) {
				x = p.getViewControllers();
				for (v in x) {
					if (x.hasOwnProperty(v)) {
						if (x[v] instanceof c.Home) {
							p.popToViewController(x[v], C);
							return false
						}
					}
				}
			} else {
				if (w instanceof b) {
					x = p.getViewControllers();
					for (v in x) {
						if (x.hasOwnProperty(v)) {
							var t = x[v];
							if (t instanceof b) {
								if (t == p.getBottomViewController() && t.isLocked) {
									continue
								}
								if (t.targetGame == w.targetGame) {
									break
								} else {
									var r = [];
									var z = false;
									for (var s = 0; s >= x.length; s++) {
										var B = x[s];
										if (B === t) {
											break
										}
										r.push(B)
									}
									r.push(t);
									for (var A = 0; A < r.length; A++) {
										p.removeViewController(r[A]);
										r[A].didPop()
									}
									break
								}
							} else {
								continue
							}
						}
					}
				}
			}
			if (p.length() >= a.getMaxNavStackDepth()) {
				var u = p.getBottomViewController();
				var q = 0;
				if (u && u instanceof b && u.isLocked) {
					q++;
					u = p.viewControllerAtIndex(q)
				}
				if (u && !(u instanceof c.Home)) {
					var y = new c.Home();
					p.insertViewControllerAtIndex(y, q);
					if (u) {
						p.removeViewControllerAtIndex(q + 1);
						u.didPop();
						u = p.viewControllerAtIndex(q + 1)
					}
				}
				if (u) {
					p.removeViewControllerAtIndex(q + 1);
					u.didPop()
				}
			}
			return true
		},
		jumpToPageWithJSON: function(q, u, v, w) {
			if (u && c[u]) {
				var p = q.getViewControllers();
				var t = p[p.length - 1];
				if (t instanceof c[u]) {
					NgLogD("ServiceNavLogic - Passing json through to current page");
					var s = t.onJSON(v);
					if (s) {
						q.pushViewController(s, w)
					}
					return true
				} else {
					NgLogD("ServiceNavLogic - Jumping to new page");
					var r = c[u].initWithJSON(v);
					if (r) {
						q.pushViewController(r, w);
						return true
					} else {
						NgLogD("ServiceNavLogic - Could not load new page")
					}
				}
			} else {
				NgLogE('ServiceNavLogic - jumpToPageWithJSON - Could not find page "' + u + '"')
			}
			return false
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ServiceHostView"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ServiceHostView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ServiceHostView"] = c;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		UI: function() {
			return require("NGCore/Client/UI").UI
		},
		Scale: function() {
			return b.UI.ViewGeometry.Scale
		},
		UIStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		LocText: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString
		},
		MenuDrawer: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MenuDrawer").MenuDrawer
		},
		Capabilities: function() {
			return require("NGCore/Client/Core/Capabilities").Capabilities
		},
		SystemInfoHook: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemInfoScreen").SystemInfoScreen.hook
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		GlobalDownloadingIcon: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/GlobalDownloadingIcon").GlobalDownloadingIcon
		},
		FullScreenLoader: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/FullScreenLoader").FullScreenLoader
		}
	});
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets");
	var a = c.ServiceHostView = b.UI.View.subclass({
		classname: "ServiceHostView",
		backgroundView: null,
		titleBarView: null,
		titleBarLine: null,
		mobageButton: null,
		activeGameButton: null,
		doneButton: null,
		cancelButton: null,
		backButton: null,
		currentDownload: null,
		navControllerView: null,
		standardTitleViewRect: new b.UI.ViewGeometry.Rect([0, 0, 100, 100]),
		menuDrawerClosedOrClosing: true,
		titleBarHidden: false,
		initialize: function($super, d) {
			$super(d);
			this.menuDrawerIsLocked = false;
			this.backgroundView = (new b.UI.Image()).retain();
			this.titleBarView = (new b.UI.View()).retain();
			this.titleBarLine = (new b.UI.View()).retain();
			this.mobageButton = (new b.UnspammableButton()).retain();
			this.backButton = (new b.UnspammableButton()).retain();
			this.activeGameButton = (new b.UnspammableButton()).retain();
			this.doneButton = (new b.UnspammableButton()).retain();
			this.cancelButton = (new b.UnspammableButton()).retain();
			this.menuDrawer = (new b.MenuDrawer()).retain();
			this.menuDrawerCover = (new b.UI.View()).retain();
			this.spinner = (new b.UI.Spinner()).retain();
			this.loadingLabel = (new b.UI.Label()).retain();
			this.currentDownload = (new b.GlobalDownloadingIcon()).retain();
			this.addChild(this.backgroundView);
			this.addChild(this.titleBarView);
			this.addChild(this.titleBarLine);
			this.addChild(this.currentDownload);
			this.titleBarView.addChild(this.mobageButton);
			this.titleBarView.addChild(this.spinner);
			this.titleBarView.addChild(this.loadingLabel);
			this._fullScreenLoader = new b.FullScreenLoader().retain();
			b.SystemInfoHook(this)
		},
		destroy: function() {
			this.activeGameButton.release();
			this.backButton.release();
			this.mobageButton.release();
			this.titleBarLine.release();
			this.titleBarView.release();
			this.backgroundView.release();
			this.doneButton.release();
			this.cancelButton.release();
			this.spinner.release();
			this.loadingLabel.release();
			this.currentDownload.release();
			if (this.menuDrawer) {
				this.menuDrawer.removeFromParent();
				this.menuDrawer.release();
				this.menuDrawer = null
			}
			if (this.menuDrawerCover) {
				this.menuDrawerCover.removeFromParent();
				this.menuDrawerCover.release();
				this.menuDrawerCover = null
			}
		},
		layoutSubviews: function() {
			NgLogD("mobage-ServiceHostView-layoutSubviews");
			var p = new b.UI.ViewGeometry.Rect(this.getFrame());
			var k = p.copy();
			var e = p.sliceVertical(13.75, b.UI.Scale.Percent);
			this.layoutMenuDrawer(k.w, k.h);
			var j = new b.UI.ViewGeometry.Rect();
			j.x = -1;
			j.y = e.y + e.h;
			j.w = e.w + 2;
			j.h = 2;
			this.backgroundView.setFrame(k);
			var l = this.titleBarView;
			l.setFrame(e);
			this.titleBarLine.setFrame(j);
			this.navControllerView.setFrame(k);
			var h = new b.UI.ViewGeometry.Rect(0.01 * k.w, 0.0125 * k.h, 0.2375 * k.w, 0.1125 * k.h);
			this.mobageButton.setFrame(h);
			var d = h.w + 2 * h.x;
			var w = 0.18;
			var n = 0.3;
			var g = k.w * 0.18;
			var u = 0.1 * e.h;
			var f = e.copy();
			var q = e.sliceHorizontal(g);
			q.inset(u);
			this.backButton.setFrame(q);
			this.backButton.setText(b.LocText("Back"));
			this.cancelButton.setText(b.LocText("Cancel"));
			this.cancelButton.setFrame(q);
			this.cancelButton.setVisible(false);
			this.cancelButton.onclick = function() {
				if (this.cancelButtonCB && ((typeof this.cancelButtonCB) === "function")) {
					this.cancelButtonCB()
				}
				this.setEditMode(false)
			}.bind(this);
			var m = e.copy();
			var t = e.sliceHorizontal(-(e.h * 2));
			t.inset(e.h * 0.18);
			this.activeGameButton.setFrame(t);
			this.activeGameButton.setText(b.LocText("Back To\nGame"));
			this.activeGameButton.setImageInsets([t.h * 0.2, t.w * 0.03, t.h * 0.2, t.w * 2 / 3]);
			this.activeGameButton.setTextInsets([0, t.w * 1.1 / 3, 0, 0]);
			this.activeGameButton.setImageFit(b.UI.ViewGeometry.FitModes.Inside);
			this._currentDownloadRect = m.sliceHorizontal(-(e.h * 2.4));
			this._currentDownloadRect.inset(k.h * 0.015);
			this._currentDownloadRectWithGame = e.sliceHorizontal(-(e.h * 2.4));
			this._currentDownloadRectWithGame.inset(k.h * 0.015);
			this.currentDownload.setFrame(this._currentDownloadRect);
			this.currentDownload.initLayout();
			var r = f.sliceHorizontal(-g);
			r.inset(u);
			this.doneButton.setFrame(r);
			this.doneButton.setText(b.LocText("Done"));
			this.doneButton.onclick = function() {
				if (this.doneButtonCB && ((typeof this.doneButtonCB) === "function")) {
					this.doneButtonCB()
				}
				this.setEditMode(false)
			}.bind(this);
			this.doneButton.setVisible(false);
			var s = new b.UI.ViewGeometry.Rect(0.018 * k.w + 0.45 * k.w, 0.03 * k.h, 0.18 * k.w, 0.07 * k.h);
			var o = new b.UI.ViewGeometry.Rect(0.018 * k.w + 0.425 * k.w, 0.04 * k.h, 0.05 * k.h, 0.05 * k.h);
			this.spinner.setFrame(o);
			this.loadingLabel.setMaxLines(1);
			this.loadingLabel.setFrame(s);
			this.loadingLabel.setTextSize(0.029 * k.h);
			this.loadingLabel.setTextColor("FFFFFFFF");
			this.loadingLabel.setText(" " + b.LocText("Loading..."));
			this.spinner.setVisible(false);
			this.loadingLabel.setVisible(false);
			var v = k.copy();
			v.sliceVertical(0 - (k.h - e.h));
			v.sliceHorizontal(-e.h);
			v.sliceHorizontal(d);
			NgLogD("MobageTitleRect old:" + e + " new:" + v);
			this.setTitleViewFrame(v);
			if (!this.getStyle()) {
				this.setStyle(new b.UIStyle())
			}
		},
		layoutMenuDrawer: function(e, d) {
			var f = Math.ceil(102 / 480 * Math.min(e, d));
			this.menuDrawerRect = new b.UI.ViewGeometry.Rect(0, d - f, e, f);
			this.menuDrawerOutRect = this.menuDrawerRect.copy();
			this.menuDrawerOutRect.y += this.menuDrawerOutRect.h;
			if (this.menuDrawer) {
				this.menuDrawer.setFrame(this.menuDrawerOutRect)
			}
			if (this.menuDrawerCover) {
				this.menuDrawerCover.setFrame(new b.UI.ViewGeometry.Rect(0, 0, e, d));
				this.menuDrawerCover.onclick = function() {
					this.closeMenuDrawer()
				}.bind(this)
			}
		},
		setStyle: function($super, e) {
			$super(e);
			e.defaultsFrom("social.us.servicehost");
			for (var f in e.props()) {
				if (e.props().hasOwnProperty(f) && this.hasOwnProperty(f) && this[f]) {
					this[f].setAttributes(e.props()[f])
				}
			}
			this.backButton.setImage(b.Assets.image("back_button_ios.png"));
			this.backButton.setImage(b.Assets.image("back_button_ios_down.png"), b.UI.State.Pressed);
			var d = b.UIStyle.registeredStyle("social.us.commonelements").props();
			this.doneButton.setAttributes(d.standardButton);
			this.cancelButton.setAttributes(d.standardButton);
			this.activeGameButton.setAttributes(e.props()["activeGameButton"]);
			this.activeGameButton.setGradient(e.props()["activeGameButton"].gradientPressed, b.UI.State.Pressed);
			this.activeGameButton.setTextColor(e.props()["activeGameButton"].textColorPressed, b.UI.State.Pressed);
			this.activeGameButton.setImage(b.Assets.image("backtogamearrow.png"))
		},
		setTitleViewFrame: function(d) {
			this.standardTitleViewRect = d.copy();
			this.standardTitleImageWidth = d.h / 2.5
		},
		hideTitleBar: function(d) {
			if (d && !this.titleBarHidden) {
				this.titleBarView.removeFromParent();
				this.titleBarLine.removeFromParent()
			} else {
				if (this.titleBarHidden) {
					this.addChild(this.titleBarView);
					this.addChild(this.titleBarLine)
				}
			}
			this.titleBarHidden = d;
			console.log("hideTitleBar called")
		},
		editMode: function(e, d) {
			this.cancelButtonCB = e;
			this.doneButtonCB = d;
			this.setEditMode(true)
		},
		setEditMode: function(d) {
			if (d) {
				this.backButton.setVisible(false);
				this.activeGameButton.setVisible(false);
				this.cancelButton.setVisible(true);
				this.doneButton.setVisible(true)
			} else {
				this.backButton.setVisible(true);
				this.activeGameButton.setVisible(true);
				this.cancelButton.setVisible(false);
				this.doneButton.setVisible(false)
			}
		},
		setNavControllerView: function(d) {
			this.navControllerView = d;
			this.addChild(this.navControllerView, 2)
		},
		animateMenuDrawerIn: function() {
			if (!this._menuDrawerLayer) {
				this._menuDrawerLayer = b.UI.Window._getLayer(100)
			}
			if (this.menuDrawerIsLocked || this.menuDrawerRect.isEmpty() || b.Capabilities.getPlatformOS().toLowerCase() !== "android") {
				return
			}
			var d = this;
			this.menuDrawerClosedOrClosing = false;
			if (this.menuDrawerCover) {
				this.menuDrawerCover.removeFromParent();
				this._menuDrawerLayer.addChild(this.menuDrawerCover)
			}
			if (this.menuDrawer) {
				this.menuDrawer.removeFromParent();
				this.menuDrawer.setFrame(this.menuDrawerOutRect);
				this._menuDrawerLayer.addChild(this.menuDrawer);
				b.UI.animate(function() {
					if (d.menuDrawer) {
						d.menuDrawer.setFrame(d.menuDrawerRect)
					}
				}, undefined, function() {})
			}
		},
		animateMenuDrawerOut: function(f, e) {
			if (this.menuDrawerRect.isEmpty() || b.Capabilities.getPlatformOS().toLowerCase() !== "android") {
				return
			}
			if (f !== undefined) {
				if (f) {
					this.menuDrawerIsLocked = true;
					return
				} else {
					this.menuDrawerIsLocked = false
				}
			}
			var d = this;
			this.menuDrawerClosedOrClosing = true;
			if (this.menuDrawerCover) {
				this.menuDrawerCover.removeFromParent()
			}
			if (this.menuDrawer) {
				if (e === undefined || e) {
					b.UI.animate(function() {
						if (d.menuDrawer) {
							d.menuDrawer.setFrame(d.menuDrawerOutRect)
						}
					}, undefined, function() {
						if (d.menuDrawer) {
							d.menuDrawer.removeFromParent()
						}
					})
				} else {
					this.menuDrawer.setFrame(this.menuDrawerOutRect);
					this.menuDrawer.removeFromParent()
				}
			}
		},
		menuKeyPressed: function() {
			if (this.menuDrawerClosedOrClosing) {
				this.animateMenuDrawerIn()
			} else {
				this.animateMenuDrawerOut()
			}
			return true
		},
		closeMenuDrawer: function(e, d) {
			this.animateMenuDrawerOut(e, d)
		},
		isMenuDrawerClosedOrClosing: function() {
			return this.menuDrawerClosedOrClosing
		},
		showFullScreenLoadingSpinner: function(d) {
			if (!this._menuDrawerLayer) {
				this._menuDrawerLayer = b.UI.Window._getLayer(100)
			}
			this._fullScreenLoader.setOpaque(!!d);
			this._menuDrawerLayer.addChild(this._fullScreenLoader)
		},
		hideFullScreenLoadingSpinner: function() {
			if (this._menuDrawerLayer) {
				this._menuDrawerLayer.removeChild(this._fullScreenLoader)
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CustomModalDialog"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CustomModalDialog"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CustomModalDialog"] = f;
	var g = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/Device").Device;
	var e = require("NGCore/Client/UI").UI;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		Credentials: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials").Credentials
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		ModalDialogStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ModalDialogStyle")
		}
	});
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = g.MessageListener.subclass({
		classname: "CustomModalDialog_KeyListener"
	});
	var a = f.CustomModalDialog = d.subclass({
		classname: "CustomModalDialog",
		_inFlight: false,
		initialize: function($super, l) {
			$super();
			a.currentDialog = this;
			this._curUser = l;
			var k = this;
			b.ModalDialogStyle;
			this._modalStyle = b.OldStyle.registeredStyle("social.us.loginmodaldialog").props();
			this._transparentBase = new e.Button().retain();
			e.Window.document.addChild(this._transparentBase);
			this._topBarBgPane = new e.View().retain();
			this._topBarBgPane.setAttributes(this._modalStyle.topBarBackgroundPane);
			e.Window.document.addChild(this._topBarBgPane);
			this._label1 = new e.Label().retain();
			this._topBarBgPane.addChild(this._label1);
			this._label2 = new e.Label().retain();
			this._topBarBgPane.addChild(this._label2);
			this._goButton = new e.Button().retain();
			this._goButton.setText(j("Let's go!"));
			this._goButton.setAttributes(this._modalStyle.standardButton);
			this._goButton.onclick = function(n) {
				if (!this._inFlight) {
					this._inFlight = true;
					this.destroy();
					b.ServiceHost.hide();
					b.Credentials.showRegistration(function() {
						var o = b.ServiceHost.navController.getTopViewController();
						b.ServiceHost.show();
						o.onUserLogin()
					});
					this._inFlight = false
				}
			}.bind(this);
			this._topBarBgPane.addChild(this._goButton);
			this._closeButton = new e.Button().retain();
			this._closeButton.setImage(b.Assets.image("closebutton_up.png"));
			this._closeButton.setImage(b.Assets.image("closebutton_down.png"), e.State.Pressed);
			e.Window.document.addChild(this._closeButton);
			var m = function(n) {
				if (!this._inFlight) {
					this._inFlight = true;
					this.destroy();
					this._inFlight = false
				}
			}.bind(this);
			this._transparentBase.onclick = m;
			this._closeButton.onclick = m;
			this.layoutViews();
			this.kListener = new h();
			b.UnspammableButton.addDeviceKeyListener(this.kListener, this.onKeyPressed.bind(this), 99999);
			return this
		},
		loadView: function($super) {
			$super()
		},
		layoutViews: function() {
			var m = g.Capabilities.getScreenWidth();
			var o = g.Capabilities.getScreenHeight();
			this._transparentBase.setGradient({
				gradient: ["66000000 0.0", "66000000 0.0"]
			});
			this._transparentBase.setFrame(0, 0, o, m);
			var p = [o / 8, m / 4, o * 6 / 8, m * 2 / 4];
			this._topBarBgPane.setFrame(p);
			var n = 10;
			var q = p[3] / 5;
			var l = p[3] / 4;
			this._goButton.setFrame([p[2] / 5, p[3] - l * 1.5, p[2] - p[2] / 5 * 2, l]);
			this._goButton.setTextSize(l * 1 / 3);
			this._label1.setTextSize(q * 0.5);
			this._label1.setAttributes(this._modalStyle.textHeader);
			this._label1.setText(j("You look great today!"));
			this._label1.setFrame([0, p[3] / 6 - q / 3, p[2], q]);
			this._label2.setTextSize(q * 0.45);
			this._label2.setAttributes(this._modalStyle.textBody);
			this._label2.setText(j("Choose your Mobage name to play."));
			this._label2.setFrame([0, p[3] / 6 + q, p[2], q]);
			var k = p[3] / 6;
			this._closeButton.setFrame(o * 7 / 8 - k, m / 4, k, k)
		},
		onKeyPressed: function(k) {
			if (k.code === c.KeyEmitter.Keycode.back) {
				if (this._transparentBase) {
					this.destroy();
					return true
				}
			}
			return false
		},
		destroy: function() {
			a.currentDialog = undefined;
			this._transparentBase.release();
			this._topBarBgPane.release();
			this._label1.release();
			this._label2.release();
			this._closeButton.release();
			c.KeyEmitter.removeListener(this.kListener);
			this.kListener = undefined
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GSNavController"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GSNavController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/GSNavController"] = g;
	var e = require("NGCore/Client/UI").UI;
	var b = e.ViewGeometry.Rect;
	var k = require("NGCore/Client/Core/Capabilities").Capabilities;
	var j = require("NGCore/Client/Core/MessageListener").MessageListener;
	var c = require("NGCore/Client/Device").Device;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		MobageAnalytics: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		PlusRequest: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest
		},
		LayoutMethods: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		}
	});
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var m = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var l = function(p) {
		if (p == c.OrientationEmitter.Orientation.LandscapeLeft || p == c.OrientationEmitter.Orientation.LandscapeRight) {
			return true
		}
		return false
	};
	var h = j.subclass({
		classname: "GSNavController_orientationListener"
	});
	var o = j.subclass({
		classname: "GSNavController_KeyListener"
	});
	var n = g.GSNavController = d.subclass({
		classname: "GSNavController",
		navStack: null,
		length: function() {
			return (this.navStack && this.navStack.length) ? this.navStack.length : 0
		},
		_host: null,
		_isTransitioningViews: false,
		_transitionEventQueue: null,
		transitionAnimationTime: null,
		initialize: function($super, p) {
			$super();
			if (!this.navStack) {
				this.navStack = []
			}
			this._transitionEventQueue = [];
			NgLogD("Mobage/GSNavController/initialize: host=" + p);
			this._host = p;
			this.kListener = new o();
			a.UnspammableButton.addDeviceKeyListener(this.kListener, this.onKeyPressed.bind(this), 1000);
			this.lListener = a.LayoutMethods.createLayoutListener(this, this.onLayout);
			this.transitionAnimationTime = (k.getPlatformOS().toLowerCase() !== "android") ? 400 : 600;
			return this
		},
		_delegate: null,
		setDelegate: function(p) {
			this._delegate = p
		},
		delegate: function() {
			return this._delegate
		},
		viewControllerAtIndex: function(p) {
			p = (p < this.length()) ? p : -1;
			p = (p >= 0 && this.length() > 0) ? p : -1;
			if (p == -1) {
				return null
			}
			return this.navStack[p]
		},
		indexOfViewController: function(p) {
			return this.navStack.indexOf(p)
		},
		removeViewController: function(q) {
			var p = this.navStack.indexOf(q);
			if (q && p != -1) {
				this.removeViewControllerAtIndex(p)
			}
		},
		removeViewControllerAtIndex: function(p) {
			if (p >= 0 && p < this.length()) {
				var q = this.navStack[p];
				this.navStack.splice(p, 1);
				q.autorelease()
			}
		},
		removeUntilViewController: function(p) {
			this.removeUntilIndex(this.indexOfViewController(p))
		},
		removeUntilIndex: function(p) {
			if (p >= -1 && p < this.length() - 1) {
				var q = this.navStack.slice(p + 1);
				this.navStack.splice(p + 1, q.length);
				for (p = q.length; q >= 0; q--) {
					q[p].autorelease()
				}
			}
		},
		insertViewControllerAtIndex: function(q, p) {
			if (!q || !(q instanceof d)) {
				return
			}
			q.retain();
			if (p >= this.length()) {
				this.navStack.push(q)
			} else {
				if (p <= 0) {
					this.navStack.unshift(q)
				} else {
					this.navStack.splice(p, 0, q)
				}
			}
		},
		getBottomViewController: function() {
			return (this.length()) ? this.navStack[0] : null
		},
		getTopViewController: function() {
			return (this.length()) ? this.navStack[this.navStack.length - 1] : null
		},
		getViewControllers: function() {
			return this.navStack.slice(0)
		},
		pushViewController: function(r, z, s) {
			if (this._isTransitioningViews) {
				var x = {
					eventType: "PUSH_VIEW_CONTROLLER",
					destVC: r,
					buttonRef: z,
					cb: s
				};
				this._transitionEventQueue.push(x);
				NgLogD("GSNavController.pushViewController - queued push view to " + r.classname);
				return
			}
			var y = false;
			if (!this._isTransitioningViews) {
				this._isTransitioningViews = true;
				y = true
			}
			var v = this.getTopViewController();
			var A = this;
			var q = null;
			var t;
			var u = c.NetworkEmitter.getLastStatus();
			if (u === c.NetworkEmitter.Status.None) {
				var p = (new e.AlertDialog()).retain();
				p.setTitle(m("No Network Connection"));
				p.setText(m("Please check your network connection settings."));
				p.setChoices([m("OK")]);
				p.onchoice = function(B) {
					p.release();
					p = null;
					if (typeof s == "function") {
						s(a.PlusRequest.ERROR_NO_CONNECTION)
					}
				};
				p.show();
				if (y) {
					this._isTransitioningViews = false
				}
				return
			}
			if (v === r) {
				t = "Already on this controller";
				NgLogD("GSNavController.pushViewController - " + t);
				if (s) {
					s(t)
				}
				if (y) {
					this._isTransitioningViews = false
				}
				return
			} else {
				if (v && v.equals(r)) {
					t = "Controller is the same as the current controller, according to: " + v.equals;
					NgLogD("GSNavController.pushViewController - " + t);
					if (r._launchedGame) {
						v._launchedGame = r._launchedGame;
						if (v._updateGameIconWidget) {
							v._updateGameIconWidget()
						}
					}
					if (s) {
						s(t)
					}
					if (y) {
						this._isTransitioningViews = false
					}
					return
				}
			}
			if (r && r instanceof d) {
				r.retain()
			}
			if (r && (!this._delegate || (this._delegate && typeof this._delegate.navControllerShouldPushViewController === "function" && this._delegate.navControllerShouldPushViewController(this, r, z)))) {
				NgLogD("GSNavController-pushViewController: nodelegate or delegate said push was okay!");
				var w = (new e.ViewGeometry.Rect(this.view().getFrame()));
				if (!w.isEmpty()) {
					r.view().setFrame(w)
				}
				if (v) {
					v.performEventCallback({
						eventType: "willHide",
						host: this._host,
						navController: this
					})
				}
				r.performEventCallback({
					eventType: "willPush",
					host: this._host,
					navController: this
				});
				if (v) {
					q = function() {
						if (v) {
							v.performEventCallback({
								eventType: "didHide",
								host: A._host,
								navController: A
							})
						}
						r.performEventCallback({
							eventType: "didPush",
							host: A._host,
							navController: A
						})
					}
				}
				this.navStack.push(r);
				this._transitionNVCs(v, r, false, z, q)
			} else {
				if (r && r instanceof d) {
					t = "Delegate refused push of view controller";
					r.release();
					if (s) {
						s(t)
					}
					if (y) {
						this._isTransitioningViews = false
					}
					return
				}
			}
			if (s) {
				s()
			}
		},
		popViewController: function(p) {
			var q = null;
			if (this.length() > 1) {
				q = this.viewControllerAtIndex(this.navStack.length - 2)
			}
			var r = this.popToViewController(q, p);
			if (r.length) {
				return r[0]
			}
			return null
		},
		back: function() {
			return this.popViewController()
		},
		popToViewController: function(u, q) {
			NgLogD("Mobage/GSNavController/popToViewController begin");
			if (this.navStack.length > 0 && this.navStack[this.navStack.length - 1] == u) {
				u.view().setFrame(this.view().getFrame());
				u.performEventCallback({
					eventType: "willReshow",
					host: this._host,
					navController: this
				});
				u.performEventCallback({
					eventType: "didReshow",
					host: this._host,
					navController: this
				});
				return null
			}
			var v = [];
			var w;
			var t = (this.navStack.length) ? this.navStack[this.navStack.length - 1] : null;
			while (this.navStack.length && (w = this.navStack[this.navStack.length - 1])) {
				if (w && (!this._delegate || (this._delegate && typeof this._delegate.navControllerShouldPopViewController === "function" && this._delegate.navControllerShouldPopViewController(this, w, q)))) {
					v.push(w);
					this.navStack.pop()
				} else {
					break
				}
				if (this.getTopViewController() == u) {
					break
				}
				if (t != w && w && w instanceof d) {
					w.autorelease()
				}
			}
			if (v.length > 0) {
				var p = this;
				for (var s = 0; s < v.length; s++) {
					v[s].performEventCallback({
						eventType: "willPop",
						host: p._host,
						navController: p
					})
				}
				var r = function() {
					for (var x = 0; x < v.length; x++) {
						v[x].performEventCallback({
							eventType: "didPop",
							host: p._host,
							navController: p
						});
						v[x].autorelease()
					}
				};
				this._transitionNVCs(t, this.getTopViewController(), true, q, r)
			}
			return v
		},
		_transitionNVCs: function(v, s, q, C, r) {
			NgLogD("Mobage/GSNavController/_transitionNVCs - setting _isTransitioningViews fromNVC= " + v + " toNVC=" + s);
			this._isTransitioningViews = true;
			NgLogD("Mobage/GSNavController/_transitionNVCs toNVC=" + s);
			var D = this;
			if (q && s) {
				s.performEventCallback({
					eventType: "willReshow",
					host: this._host,
					navController: this
				})
			}
			var u = new b(this.view().getFrame());
			if (u.isEmpty()) {
				NgLogE("Can't transition view controllers with an unset frame!, this.view() = " + this.view());
				this._isTransitioningViews = false;
				return
			}
			var A = u.w;
			var x = u.h;
			var B = new b((q ? -A : A), 0, A, x);
			var z = new b((q ? A : -A), 0, A, x);
			var t = new b(0, 0, A, x);
			if (s) {
				s.view().setFrame(B);
				this.view().addChild(s.view())
			}
			if (this._host && this._host.onNavTransition) {
				this._host.onNavTransition(v, s, this.transitionAnimationTime, q)
			}
			if (!this.view().getRoot()) {
				if (v) {
					v.view().removeFromParent()
				}
				if (typeof r === "function") {
					r()
				}
				if (q && s) {
					s.performEventCallback({
						eventType: "didReshow",
						host: this._host,
						navController: this
					})
				}
				if (s) {
					s.view().setFrame(t)
				}
				this._isTransitioningViews = false;
				return
			}
			var y = null;
			var p = false;
			e.animate(function() {
				if (v) {
					v.retain();
					v.view().setFrame(z)
				}
				if (s) {
					s.retain();
					s.view().setFrame(t)
				}
			}, this.transitionAnimationTime, y = function() {
				if (p) {
					return
				}
				p = true;
				if (v) {
					v.view().removeFromParent();
					v.autorelease()
				}
				if (typeof r === "function") {
					r()
				}
				if (q && s) {
					s.performEventCallback({
						eventType: "didReshow",
						host: D._host,
						navController: D
					})
				}
				if (s) {
					s.autorelease()
				}
				if (D._transitionEventQueue.length === 0) {
					NgLogD("GSNavController - resetting _isTransitioningViews - no queued event");
					D._isTransitioningViews = false;
					return
				}
				var w = D._transitionEventQueue.shift();
				if (w && (w.eventType == "PUSH_VIEW_CONTROLLER")) {
					NgLogD("GSNavController - resetting _isTransitioningViews - push view event - replaying");
					D._isTransitioningViews = false;
					D.pushViewController(w.destVC, w.buttonRef, w.cb)
				} else {
					if (w && w.eventType == "BACK_KEY") {
						NgLogD("GSNavController - resetting _isTransitioningViews - back key event - replaying");
						D._isTransitioningViews = false;
						D.back()
					} else {
						NgLogD("GSNavController - resetting _isTransitioningViews - unknown event - skipping");
						D._isTransitioningViews = false
					}
				}
				NgLogD("GSNavController: animation complete!")
			});
			setTimeout(y, this.transitionAnimationTime * 3);
			a.MobageAnalytics.logNavEvent(v, s, C)
		},
		onLayout: function(q) {
			if (this._landscapeOnly && q.width < q.height) {
				return
			}
			this.view().setFrame(0, 0, q.width, q.height);
			if (this.getTopViewController()) {
				var p = this.getTopViewController().view();
				p.setFrame(0, 0, q.width, q.height)
			}
		},
		setLandscapeOnly: function(p) {
			if (p) {
				this.view().setVisibleInOrientations(e.Commands.OrientationFlag.Landscape)
			} else {
				this.view().setVisibleInOrientations(e.Commands.OrientationFlag.Landscape | e.Commands.OrientationFlag.Portrait)
			}
			this._landscapeOnly = p
		},
		onKeyPressed: function(q) {
			var p;
			var s = null;
			if (q.code === c.KeyEmitter.Keycode.back) {
				if (this._host && !this._host.isMenuDrawerClosedOrClosing()) {
					this._host.closeMenuDrawer();
					return true
				} else {
					if (!this._host || this._host.isShowing()) {
						if (!this._isTransitioningViews) {
							p = this.back()
						} else {
							var r = {
								eventType: "BACK_KEY"
							};
							this._transitionEventQueue.push(r);
							p = true;
							NgLogD("GSNavController.onKeyPressed - queued back key event")
						}
						return p ? true : false
					}
				}
			} else {
				if (q.code === c.KeyEmitter.Keycode.backunhandled) {
					if (!this._host || this._host.isShowing()) {
						return false
					} else {
						if (this._host && !this._host.isMenuDrawerClosedOrClosing()) {
							this._host.closeMenuDrawer();
							return true
						} else {
							p = this.back();
							return p ? true : false
						}
					}
				} else {
					if (q.code === c.KeyEmitter.Keycode.menu && (s = a.Session.getCurrentSession()) && s.user() && this._host.menuKeyPressed()) {
						return true
					}
				}
			}
			return false
		},
		jumpToPageWithJSON: function(p, q, r) {
			if (this._delegate && typeof this._delegate.jumpToPageWithJSON === "function") {
				return this._delegate.jumpToPageWithJSON(this, p, q, r)
			}
			return false
		}
	});
	var f = null;
	g.GSNavController.getInstance = function() {
		if (!f) {
			f = new n();
			var p = [e.Window.getWidth(), e.Window.getHeight()];
			f.view().setFrameSize(p);
			e.Window.document.addChild(f.view())
		}
		return f
	};
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController"] = e;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting").ReferenceCounting;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var c = require("NGCore/Client/UI/Element").Element;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives.View;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutGroup").LayoutGroup;
	var b = e.ViewController = d.subclass({
		classname: "ViewController",
		$UIStateError: 65536,
		$UIStateSelected: 65537,
		initialize: function($super) {
			$super();
			return this
		},
		loadView: function() {
			if (!this._view) {
				this.setView(new h())
			}
		},
		loadStyles: function(l) {
			if (!this.view().getStyle()) {
				this.view().setStyle(new f())
			}
			var j = this.view().getStyle();
			j.defaultsFrom(l);
			for (var k in j.props()) {
				if (j.props().hasOwnProperty(k) && this.hasOwnProperty(k) && this[k]) {
					this[k].setAttributes(j.props()[k])
				}
			}
		},
		destroy: function() {
			this.setView(null);
			this._cleanKeyboardWorkarounds();
			this._cleanViews()
		},
		view: function() {
			if (!this._view) {
				this.loadView()
			}
			if (!this._view.controller) {
				this._view.controller = this
			}
			return this._view
		},
		setView: function(j) {
			if (j && (j instanceof c || j instanceof g)) {
				j.retain();
				j.controller = this
			} else {
				j = null
			}
			if (this._view && (this._view instanceof c || this._view instanceof g)) {
				if (this._view.controller == this && this._view != j) {
					this._view.controller = null
				}
				this._view.release()
			}
			this._view = j;
			this.logd("setView end: this._view=", this._view)
		},
		_cleanViews: function() {
			if (this._retainedViews) {
				for (var j = 0; j < this._retainedViews.length; j++) {
					var k = this._retainedViews[j];
					if (k && !k.__destroyed__) {
						k.release()
					}
				}
			}
			this._retainedViews = new Array()
		},
		retainView: function(j) {
			if (j) {
				j.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(j)
			}
			return j
		},
		applyKeyboardWorkaround: function(j) {
			if ((!j) || (a.getPlatformOS().toLowerCase() !== "android")) {
				return
			}
			if (!this._keyboardWAViews) {
				this._keyboardWAViews = new Array()
			}
			this._keyboardWAViews.push(j)
		},
		_cleanKeyboardWorkarounds: function() {
			this._keyboardWAViews = undefined
		},
		analyticsName: null
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton"] = b;
	var d = require("NGCore/Client/Device").Device;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var c = function() {
		this.timeout = 300;
		this.lastInvocation = 0
	};
	c.prototype.acquire = function() {
		if (!this.peekAcquire()) {
			return false
		}
		NgLogD("SpamProtectionLock acquired.");
		this.lastInvocation = new Date().getTime();
		return true
	};
	c.prototype.peekAcquire = function() {
		var h = Math.abs(new Date().getTime() - this.lastInvocation);
		NgLogD("SpamProtectionLock delta: " + h + " timeout: " + this.timeout);
		if (h <= this.timeout) {
			return false
		}
		return true
	};
	var e = {};
	var g = b.getSpamProtectionLockForName = function(j) {
		var h;
		if (!(h = e[j])) {
			h = new c();
			if (j) {
				e[j] = h
			}
		}
		return h
	};
	var a = b.UnspammableButton = f.Button.subclass({
		classname: "UnspammableButton",
		_spamProtectionEnabled: null,
		_spamProtectionLock: null,
		_spamProtectionLockName: null,
		initialize: function($super, h) {
			$super(h);
			this._spamProtectionEnabled = true;
			this.setSpamLockName("default");
			return this
		},
		performEventCallback: function($super, h) {
			switch (h.eventType) {
				case "click":
					if (this._spamProtectionEnabled && !this._spamProtectionLock.acquire()) {
						this.loge("Spam Protection abort! LockPool: [", this._spamProtectionLockName || "", "]");
						return
					}
				default:
					if ($super) {
						$super(h)
					}
					break
			}
		},
		getSpamLock: function() {
			return this._spamProtectionLock
		},
		getSpamLockName: function() {
			return this._spamProtectionLockName
		},
		setSpamLockName: function(h) {
			this._spamProtectionLockName = h;
			this._spamProtectionLock = g(h)
		},
		getSpamProtectionEnabled: function() {
			return this._spamProtectionEnabled
		},
		setSpamProtectionEnabled: function(h) {
			this._spamProtectionEnabled = h
		}
	});
	b.UnspammableButton.addDeviceKeyListener = function(j, h, k) {
		d.KeyEmitter.addListener(j, function(n) {
			if ((n.code !== d.KeyEmitter.Keycode.back) && (n.code !== d.KeyEmitter.Keycode.backunhandled) && (n.code !== d.KeyEmitter.Keycode.menu)) {
				return h(n)
			}
			var l = "default";
			var m = g(l);
			if (!m.peekAcquire()) {
				NgLogE("Hardware Key Spam Protection abort! LockPool: [", l || "", "]");
				return true
			}
			if (h(n)) {
				m.acquire();
				return true
			}
			return false
		}, k)
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives"] = d;
	var b = require("NGCore/Client/UI").UI;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/TextScaling");
	var n = function(o) {
		var p = o.length;
		while (p--) {
			if (isNaN(o[p])) {
				return true
			}
		}
		return false
	};
	var m = d.ElementEnhancements = {
		toString: function() {
			return "<Element:" + this.classname + ">"
		}
	};
	var f = [0, 0, 0, 0];
	var e = d.ViewEnhancements = {
		toString: function() {
			return "<View:" + this.classname + ">"
		},
		getFrameSize: function() {
			return (this.getFrame() || f).slice(2)
		},
		setFrameSize: function(o) {
			var p = this.getFrame() || f;
			this.setFrame([p[0] | 0, p[1] | 0, o[0], o[1]])
		},
		getFrameOrigin: function() {
			return (this.getFrame() || f).slice(0, 2)
		},
		setFrameOrigin: function(o) {
			var p = this.getFrame() || f;
			this.setFrame([o[0], o[1], p[2] | 0, p[3] | 0])
		}
	};
	var c = Array.prototype.slice;

	function g(o, q) {
		function p(t, u) {
			return function() {
				t.apply(this, [u.bind(this)].concat(c.call(arguments)))
			}
		}
		for (var r in q) {
			var s = o.prototype[r];
			if (typeof s == "function") {
				o.prototype[r] = p(q[r], s)
			} else {
				o.prototype[r] = q[r]
			}
		}
	}
	var k = require("NGCore/Client/UI/AbstractView").AbstractView;
	k.subclass({});
	a.addLogHelpers(b.Element);
	a.addLogHelpers(b.ListViewItem);
	g(b.Element, m);
	g(k, e);
	g(b.Label, h.TextScalingEnhancements);
	g(b.Button, h.TextScalingEnhancements);
	b.Button.prototype.textScalingBehavior = h.TextMeasuredScalingBehaviors.StrictMultiLine;
	var l = function(p) {
		var o = function() {
			return this
		};
		o.prototype = p;
		return new o()
	};
	var j = d.Primitives = l(b);
	j.__defineGetter__("LayoutGroup", function() {
		delete j.LayoutGroup;
		return j.LayoutGroup = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutGroup").LayoutGroup
	});
	j.__defineGetter__("ImageLabel", function() {
		delete j.ImageLabel;
		return j.ImageLabel = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ImageLabel").ImageLabel
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/TextScaling"] = function() {
	var l = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/TextScaling"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/TextScaling"] = l;
	var h = require("NGCore/Client/UI").UI;
	var c = h.ViewGeometry.Rect;
	var b = h.ViewGeometry.Scale;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var e = l.TSLogD = function(n) {
		if (f.shouldLog(null, "TextScaling")) {
			var o = Array.prototype.slice.call(arguments);
			o.unshift("TextScaling: ");
			f.debug.apply(f, o)
		}
	};
	var d = l.TSLogE = function(n) {
		var o = Array.prototype.slice.call(arguments);
		o.unshift("TextScaling: ");
		f.error.apply(f, o)
	};
	var j = l.TextScalingModes = {
		None: 0,
		ScaleTextDown: 1,
		ScaleTextUp: 1 << 1,
		ScaleTextDownOrUp: (1 | (1 << 1)),
		EllipsifyText: 1 << 2,
		TruncateText: 1 << 3
	};
	var k = 6;
	var a = 0.95;
	l.setText = function($super, o, n) {
		if ($super) {
			$super(o, n)
		} else {
			console.log("setText $super was undefined ", this);
			this.textScalingBehavior = m.StrictMultiLine;
			console.log("and now set ", this)
		}
		if (!this.textScalingBehavior) {
			d("textScalingBehavior undefined", this);
			return
		}
		if (!this.getTextMeasurementForState) {
			console.log("getTextMeasurementForState");
			this.getTextMeasurementForState = function(s) {
				var p = (this.getFrame() || [0, 0, -1, -1]);
				var u = this.getTextFont(s) || this.getTextFont();
				var r = this.getTextSize();
				var q = this.getText(s);
				console.log("measureText: " + q + " " + JSON.stringify(p) + " " + JSON.stringify(u) + " " + JSON.stringify(r));
				h.measureText(q, p[2], p[3], u, r, this.textScalingBehavior.bind(this))
			}
		}
		this.getTextMeasurementForState(n)
	};
	l.getTextMeasurementForState = function(q) {
		var n = (this.getFrame() || [0, 0, -1, -1]);
		var r = this.getTextFont(q) || this.getTextFont();
		var p = this.getTextSize();
		var o = this.getText(q);
		e("measureText: " + o + " " + JSON.stringify(n) + " " + JSON.stringify(r) + " " + JSON.stringify(p));
		h.measureText(o, n[2], n[3], r, p, this.textScalingBehavior.bind(this))
	};
	var m = l.TextMeasuredScalingBehaviors = {
		None: null,
		DynamicMultiLine: function(p) {
			if (!p || !this.maxLines) {
				return
			}
			var o = this.getText(p.state) || "";
			if (!o.split) {
				d("view.getText returned a non-string, how? " + JSON.stringify(o));
				o = ""
			}
			var n = this.getTextSize(p.state) * (p.lineWidths[0] / p.totalWidth)
		},
		StrictMultiLine: function(p) {
			console.log("StrictMultiLine callback", JSON.stringify(p));
			if (!p) {
				return
			}
			var o = this.getText(p.state) || "";
			if (!o.split) {
				d("view.getText returned a non-string, how? " + JSON.stringify(o));
				o = ""
			}
			var n = this.getTextSize(p.state) * (p.lineWidths[0] / p.totalWidth);
			this.setTextSize(n, p.state)
		},
		SingleLine: null
	};
	var g = l.TextScalingEnhancements = {
		setMaxLines: function(n) {
			this.maxLines = n
		},
		getMaxLines: function() {
			return this.maxLines
		},
		setTextScalingBehavior: function(n) {
			this.textScalingBehavior = n
		},
		getTextScalingBehavior: function() {
			return this.textScalingBehavior
		},
		setTextScalingMode: function(n) {
			this._textScalingMode = n
		},
		getTextScalingMode: function() {
			return this._textScalingMode
		},
		setText: l.setText,
		getTextMeasurementForState: l.getTextMeasurementForState,
		textScalingBehavior: l.TextMeasuredScalingBehaviors.DynamicMultiLine,
		setTextCutOffOneLine: function(p, n) {
			n = n || 40;
			var o = p.replace(/\n/g, " ");
			if (o.length > n) {
				o = o.substr(0, n - 1) + "…"
			}
			this.setText(o);
			return
		}
	};
	return l
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/AbstractView"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/UI/AbstractView"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/AbstractView"] = e;
	var d = require("NGCore/Client/UI/Element").Element;
	var b = require("NGCore/Client/UI/Commands").Commands;
	var g = require("NGCore/Client/UI/ViewGeometry").Rect;
	var c = require("NGCore/Client/Core/ObjectRegistry").ObjectRegistry;
	var a = require("NGCore/Client/UI/Style").Style;
	var f = {
		normal: b.State.Normal,
		focused: b.State.Focused,
		pressed: b.State.Pressed,
		disabled: b.State.Disabled,
		selected: b.State.Focused,
		highlighted: b.State.Pressed
	};
	var h = e.AbstractView = d.subclass({
		type: "<com.ngmoco.view.abstract>",
		initialize: function($super, j) {
			if (h._init) {
				h._init()
			}
			this._assignedVisible = true;
			$super(j)
		},
		destroy: function($super) {
			this.removeFromParent();
			$super()
		},
		getParent: function() {
			return this._parent
		},
		addToParent: function(j, k) {
			j.addChild(this, k)
		},
		removeFromParent: function() {
			if (this._parent && !this._parent._destroyed) {
				this._parent.removeChild(this);
				this._parent = null
			}
			return this
		},
		addState: function(j) {
			this.setState(this._state | j)
		},
		clearState: function(j) {
			this.setState(this._state & ~j)
		},
		getRoot: function() {
			return this._parent ? this._parent.getRoot() : undefined
		},
		_setVisible: function(k) {
			var l = k && this._assignedVisible && this._parent && this._parent._visible;
			if (this._visible != l) {
				this._visible = l;
				var j = (k ? this.getOnAppear() : this.getOnDisappear());
				if (typeof j == "function") {
					j.call(this)
				}
			}
		},
		clearAnimations: b.clearAnimations,
		$synthesizePropertyWithState: function(n, m) {
			function j(o, s, q) {
				var p = "get" + o;
				var t = "set" + o;
				var u = function() {
					return this[p].call(this, q)
				};
				var r = function(v) {
					return this[t].call(this, v, q)
				};
				this.registerAccessors(s + o, u, r)
			}
			d.synthesizePropertyWithState.call(this, n, m);
			var k = n.charAt(0).toUpperCase() + n.substr(1);
			for (var l in f) {
				j.call(this, k, l, f[l])
			}
		}
	});
	h._init = function() {
		delete h._init;
		if (d._init) {
			d._init()
		}
		var m = function() {
			return this._visible
		};
		var l = function(n) {
			this._assignedVisible = n;
			b.setIsVisible.call(this, n);
			this._setVisible(n)
		};
		h.registerAccessors("visible", m, l);
		h.synthesizeProperty("backgroundColor", b.setBackgroundColor);
		h.synthesizeProperty("enabled", function(n) {
			this[(n ? "clearState" : "setState")](b.State.Disabled)
		});
		h.synthesizeProperty("state", b.setState);
		var k = function() {
			return this._frame
		};
		var j = function(o) {
			if (this.sizeChanged) {
				var n = this._frame ? this._frame[2] : 0;
				var p = this._frame ? this._frame[3] : 0
			}
			if (o instanceof g) {
				this._frame = o.array()
			} else {
				if (o instanceof Array) {
					this._frame = o
				} else {
					this._frame = Array.prototype.slice.call(arguments)
				}
			}
			try {
				if (!this._frame || isNaN(this._frame[0]) || isNaN(this._frame[1]) || isNaN(this._frame[2]) || isNaN(this._frame[3])) {
					throw new Error("Attempt to call setFrame with at least one undefined element: " + this._frame)
				}
			} catch (q) {
				NgLogException(q)
			}
			b.setFrame.apply(this, this._frame);
			if (this.sizeChanged && ((n ^ this._frame[2]) | (p ^ this._frame[3]))) {
				this.sizeChanged(this._frame[2], this._frame[3], n, p)
			}
		};
		h.registerAccessors("frame", k, j);
		h.synthesizePropertyWithState("gradient", b.setGradient);
		h.synthesizeProperty("touchable", b.setTouchable);
		h.synthesizeProperty("alpha", b.setAlpha);
		h.synthesizeProperty("style", function(n) {
			if (n instanceof a) {
				b.setStyle.call(this, c.objectToId(n))
			}
		});
		h.registerEventType("appear");
		h.registerEventType("disappear");
		h.registerEventType("click");
		h.registerEventType("clickDown");
		h.registerEventType("clickCancel");
		h.registerEventType("swipe");
		h.registerEventType("longPress")
	};
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutGroup"] = function() {
	var z = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutGroup"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutGroup"] = z;
	var h = require("NGCore/Client/UI").UI;
	var d = h.ViewGeometry.Rect;
	var c = h.Commands;
	var o = require("NGCore/Client/UI/AbstractView").AbstractView;
	var w = require("NGCore/Client/UI/WindowLayer").WindowLayer;
	var s = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting").ReferenceCounting;
	var y = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var u = 0;
	var m;
	var t = function(A) {
		var B = "set" + A.charAt(0).toUpperCase() + A.slice(1);
		return function(F) {
			this["_" + A] = F;
			var E;
			var D = this._children;
			for (var C = 0; C < D.length; C++) {
				if ((E = D[C])) {
					E[B](F)
				}
			}
		}
	};
	var x = function(A) {
		return function(B) {
			this["_" + A] = B
		}
	};
	var a = function(A) {
		return function() {
			return this["_" + A]
		}
	};

	function e(D, C) {
		if (!C) {
			return
		}
		C._parent = D;
		if (C instanceof m) {
			var B = C.getChildren();
			for (var A = 0; A < B.length; A++) {
				e(D, B[A])
			}
		} else {
			c.addSubview.call(D, C.__objectRegistryId, -1)
		}
	}

	function f(C) {
		if (!C) {
			return
		}
		C._parent = undefined;
		if (C instanceof o) {
			if (C.__objectRegistryId) {
				c.removeFromSuperview.call(C)
			}
		} else {
			if (C instanceof m) {
				var B = C.getChildren();
				for (var A = 0; A < B.length; A++) {
					f(B[A])
				}
			}
		}
	}

	function l(A) {
		return function(C, B) {
			if (C instanceof m) {
				e(this, C)
			} else {
				return A.apply(this, Array.prototype.slice.call(arguments))
			}
			return this
		}
	}

	function n(A) {
		return function(B) {
			if (this instanceof o || this instanceof w) {
				if (B instanceof m) {
					f(B)
				} else {
					A.call(this, B)
				}
			} else {
				if (this instanceof m) {
					if (B._layoutGroupParent == this) {
						B._setVisible(false);
						var C = this._children.indexOf(B);
						if (C != -1) {
							this._children.splice(C, 1)
						}
					}
					B._layoutGroupParent = null;
					f(B)
				}
			}
		}
	}

	function j() {
		return this._layoutGroup_virtualFrame ? this._layoutGroup_virtualFrame.array() : [0, 0, 0, 0]
	}

	function g(B) {
		var D = new d(B instanceof Object ? B : Array.prototype.slice.call(arguments));
		var A = this._layoutGroupParent._adjustToGlobalCoords(new d(D));
		if (A && !A.isEmpty()) {
			this.constructor.prototype.setFrame.call(this, A);
			this._layoutGroup_virtualFrame = D
		} else {
			var C = ("LayoutGroup-childNode: Invalid rect for childNode hooked setFrame. " + JSON.stringify(A) + " frame: " + D);
			(this.loge || NgLogE)(C)
		}
	}

	function b() {
		return this._layoutGroupParent || this._parent
	}
	var p = h.View.prototype.addChild;
	var r = w.prototype.addChild;
	h.View.prototype.addChild = l(p);
	w.prototype.addChild = l(r);
	var q = h.View.prototype.removeChild;
	var v = w.prototype.removeChild;
	h.View.prototype.removeChild = n(q);
	w.prototype.removeChild = n(v);
	var k = n(null);
	m = z.LayoutGroup = s.subclass({
		type: "LayoutGroup",
		classname: "LayoutGroup",
		_layoutUID: null,
		_children: null,
		initialize: function($super, A) {
			this._layoutUID = "layout" + (++u);
			$super(A);
			this._children = [];
			return this
		},
		destroy: function() {
			var B = this.getChildren();
			var A;
			for (A = B.length - 1; A >= 0; --A) {
				this.removeChild(B[A])
			}
		},
		getParent: function() {
			return this._layoutGroupParent || this._parent
		},
		getChildren: function() {
			return this._children
		},
		getChildCount: function() {
			return this._children.length
		},
		addChild: function(B, A) {
			if (B instanceof o || B instanceof m) {
				if (B._parent) {
					B.removeFromParent()
				}
				if (B instanceof o) {
					this._hookForChild(B)
				}
				if (A === 0 || A > 0) {
					A = +A;
					this._children.splice(A, 0, B)
				} else {
					A = -1;
					this._children.push(B)
				}
				B._layoutGroupParent = this;
				B._setVisible(this._visible);
				if (this._parent && B instanceof m) {
					e(this._parent, B)
				} else {
					if (B._parent && B instanceof o) {
						c.addSubview.call(B._parent, B.__objectRegistryId, A)
					}
				}
			} else {
				throw {
					message: this.type + ".addChild: " + B + " is not a view or LayoutGroup!"
				}
			}
			if (B._frame) {
				B.setFrame(B._frame)
			}
		},
		removeChild: function(A) {
			k.call(this, A);
			this._unhookForChild(A)
		},
		removeFromParent: function() {
			if (this._parent && !this._parent._destroyed) {
				this._parent.removeChild(this)
			}
			return this
		},
		setGradient: function(B, A) {
			A = +(A || 0);
			if (!this._gradient) {
				this._gradient = []
			}
			this._gradient[A] = B
		},
		setFrame: function($super, G) {
			var H = Array.prototype.slice.call(arguments);
			H.shift();
			if (this.sizeChanged) {
				var E = this._frame ? this._frame[2] : 0;
				var I = this._frame ? this._frame[3] : 0
			}
			if (G instanceof d) {
				this._frame = G.array()
			} else {
				if (G instanceof Array) {
					this._frame = G
				} else {
					this._frame = H
				}
			}
			var F, D;
			var A;
			var B = this.getChildren();
			for (var C = 0; C < B.length; C++) {
				if ((A = B[C])) {
					D = A.getFrame();
					F = new d(D);
					if (!F.isEmpty()) {
						A.setFrame(F)
					}
				}
			}
			if (this.sizeChanged && ((E ^ this._frame[2]) | (I ^ this._frame[3]))) {
				this.sizeChanged(this._frame[2], this._frame[3], E, I)
			}
		},
		getFrame: a("frame"),
		setVisible: function(A) {
			this._assignedVisible = A;
			this._setVisible(A)
		},
		getVisible: a("visible"),
		_setVisible: function(D) {
			var C = this._visible;
			this._visible = D;
			if (this._visible != C) {
				var A = this._children.length;
				for (var B = 0; B < A; B++) {
					this._children[B]._setVisible(D)
				}
			}
		},
		setVisibleInOrientations: function(A) {
			this._assignedOrientationFlags = A;
			this._setVisibleInOrientations(A)
		},
		getVisibleInOrientations: function() {
			return this._assignedOrientationFlags
		},
		_setVisibleInOrientations: function(B) {
			var A = this._children.length;
			for (var C = 0; C < A; C++) {
				if (this._children[C].setVisibleInOrientations) {
					this._children[C].setVisibleInOrientations(B)
				}
			}
		},
		_hookForChild: function(A) {
			A._layoutGroupParent = this;
			A.getFrame = j;
			A.setFrame = g;
			A.getParent = b
		},
		_unhookForChild: function(A) {
			delete A.getParent;
			delete A.getFrame;
			delete A.setFrame;
			delete A._layoutGroupParent
		},
		_adjustToGlobalCoords: function(A) {
			if (!this._frame) {
				return A
			}
			if (A instanceof d) {
				A.x += this._frame[0];
				A.y += this._frame[1]
			} else {
				if (A instanceof Array) {
					A[0] += this._frame[0];
					A[1] += this._frame[1]
				} else {
					A = [0, 0, 0, 0]
				}
			}
			if (this._layoutGroupParent instanceof m) {
				this._layoutGroupParent._adjustToGlobalCoords(A)
			}
			return A
		},
		setState: t("state"),
		getState: a("state"),
		setEnabled: t("enabled"),
		getEnabled: a("enabled"),
		setTouchable: t("touchable"),
		getTouchable: a("touchable"),
		setAlpha: t("alpha"),
		getAlpha: a("alpha"),
		setAttributes: x("attributes"),
		getAttributes: a("attributes"),
		setStyle: x("style"),
		getStyle: a("style"),
		setImage: x("image"),
		getImage: a("image"),
		setImageFit: x("imageFit"),
		getImageFit: a("imageFit"),
		setImageBorder: x("imageBorder"),
		getImageBorder: a("imageBorder"),
		setImageGravity: x("imageGravity"),
		getImageGravity: a("imageGravity")
	});
	return z
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ImageLabel"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ImageLabel"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ImageLabel"] = a;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var c = a.ImageLabel = b.Button.subclass({
		initialize: function(d) {
			if (!d || !("touchable" in d)) {
				this.setTouchable(false);
				this.setTouchable = function() {}
			}
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/WindowLayer"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/UI/WindowLayer"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/WindowLayer"] = c;
	var b = require("NGCore/Client/UI/Element").Element;
	var d = require("NGCore/Client/UI/ViewParent").ViewParent;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var e = c.WindowLayer = b.subclass({
		type: "windowlayer",
		initialize: function($super, f) {
			if (e.init) {
				e.init()
			}
			$super(f);
			if (e._init) {
				e._init()
			}
			d.initialize.call(this);
			this._visible = true
		},
		getRoot: function() {
			return this
		},
		getParent: function() {
			return undefined
		},
		getChildCount: d.getChildCount,
		getChildren: d.getChildren,
		addChild: d.addChild,
		removeChild: d.removeChild
	});
	e.init = function() {
		delete e._init;
		if (b._init) {
			b._init()
		}
		e.synthesizeProperty("level", a.setIntValue)
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting"] = c;
	var d = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var a = c.ReferenceCounting = d.Class.subclass({
		classname: "ReferenceCounting",
		initialize: function() {
			this.__retainCount = 0
		},
		retain: function() {
			if (isNaN(this.__retainCount)) {
				b.error("Error: ReferenceCounting subclass: this.__retainCount isNaN for: " + this.classname);
				return this
			}++this.__retainCount;
			return this
		},
		release: function() {
			if (--this.__retainCount === 0) {
				this.destroy()
			}
		},
		autorelease: function() {
			a.addToAutoreleasePool(this);
			return this
		},
		destroy: function() {
			for (var e in this) {
				if (this.hasOwnProperty(e)) {
					delete this[e]
				}
			}
			this._destroyed = true;
			delete this.prototype
		},
		zombieSafeCallback: function(g, f) {
			var e = this;
			return function() {
				if (e._destroyed) {
					if (f) {
						f(e)
					}
					return
				}
				return g.apply(e, Array.prototype.slice.call(arguments))
			}
		}
	});
	b.decorateDescendants(a);
	c.ReferenceCounting.pool = null;
	c.ReferenceCounting.tickListener = null;
	c.ReferenceCounting.lastTickWasEmpty = false;
	c.ReferenceCounting.addToAutoreleasePool = function(e) {
		if (!a.pool) {
			a.pool = []
		}
		if (!a.tickListener) {
			a.tickListener = d.MessageListener.singleton({
				initialize: function($super) {
					if ($super) {
						$super()
					}
				},
				onUpdate: function(f) {
					a.autoreleasePoolDrain()
				},
				_startListeningEmitter: function($super, f) {
					this.listening = true;
					return $super(f)
				},
				_stopListeningEmitter: function($super, f) {
					this.listening = false;
					return $super(f)
				}
			});
			a.tickListener.instantiate()
		}
		if (!a.tickListener.listening) {
			NgLogD("ReferenceCounting: hook autorelease pool.");
			d.UpdateEmitter.addListener(a.tickListener, a.tickListener.onUpdate)
		}
		a.pool.push(e)
	};
	c.ReferenceCounting.autoreleasePoolDrain = function() {
		var f = a.pool;
		NgLogD("ReferenceCounting: Autorelease pool drain! (" + f.length + " objects)");
		a.pool = [];
		var g;
		for (var e in f) {
			if (f.hasOwnProperty(e) && (g = f[e]) && g.retain && typeof g.retain == "function") {
				g.release()
			}
		}
		if (a.pool.length || f.length) {
			a.lastTickWasEmpty = false
		} else {
			if (a.lastTickWasEmpty) {
				NgLogD("ReferenceCounting: unhook autorelease pool.");
				d.UpdateEmitter.removeListener(a.tickListener)
			}
			a.lastTickWasEmpty = true
		}
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/UI/ViewParent"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/UI/ViewParent"] || {};
	$MODULE_REGISTRY["NGCore/Client/UI/ViewParent"] = b;
	var a = require("NGCore/Client/UI/Commands").Commands;
	var c = require("NGCore/Client/UI/AbstractView").AbstractView;
	b.ViewParent = {
		initialize: function() {
			this._children = []
		},
		getChildCount: function() {
			return this._children.length
		},
		getChildren: function() {
			return this._children.slice()
		},
		addChild: function(e, d) {
			if (e === this) {
				throw new Error("Cannot add " + e + " as a child of itself!")
			}
			if (e instanceof c) {
				if (e._parent) {
					e.removeFromParent()
				}
				if (d === 0 || d > 0) {
					d = +d;
					this._children.splice(d, 0, e)
				} else {
					d = -1;
					this._children.push(e)
				}
				e._parent = this;
				e._setVisible(this._visible);
				a.addSubview.call(this, e.__objectRegistryId, d)
			} else {
				throw new Error(this.type + ".addChild: " + e + " is not a view!")
			}
			return this
		},
		removeChild: function(d) {
			if (d instanceof c) {
				if (d._parent == this) {
					d._setVisible(false);
					var e = this._children.indexOf(d);
					if (e != -1) {
						this._children.splice(e, 1)
					}
				}
				d._parent = undefined;
				a.removeFromSuperview.call(d)
			} else {
				throw {
					message: this.type + ".removeChild: " + d + " is not a view!"
				}
			}
			return d
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Color"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Color"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Color"] = a;

	function b(e) {
		var d = e.toString(16);
		if (d.length == 1) {
			d = "0" + d
		}
		return d
	}
	var c = a.Color = {
		argb: function(g) {
			var d = arguments;
			if (g && g instanceof Array) {
				d = g
			}
			if (d.length == 4 || d.length == 3) {
				for (var f = 0; f < d.length; f++) {
					if (d[f] === undefined || d[f] === null || !(d[f] instanceof Number)) {
						NgLogD("Color::argb tried to parse invalid input");
						return null
					}
				}
				var e = b(d[0]) + b(d[1]) + b(d[2]);
				if (d.length == 4) {
					return e + b(d[3])
				} else {
					return "FF" + e
				}
			}
			NgLogD("Color::argb tried to parse invalid input");
			return null
		},
		setAlpha: function(h, j) {
			if (isNaN(j) || j > 1) {
				j = 1
			} else {
				if (j < 0) {
					j = 0
				}
			}
			if (h && h instanceof Array && h.length >= 2) {
				var f = [];
				for (var g = 0; g < h.length; g++) {
					var e = h[g].split(" ");
					var d = e[1];
					e = e[0];
					f.push(c.setAlpha(e, j) + " " + d)
				}
				return f
			} else {
				if (h instanceof String) {
					if (h.length == 6) {
						return b(255 * j) + h
					} else {
						if (h.length == 8) {
							return b(255 * j) + h.substring(2)
						}
					}
				}
			}
			NgLogD("Color::setAlpha tried to parse invalid input");
			return null
		},
		gradientFromColors: function(g) {
			var d = arguments;
			if (g && g instanceof Array) {
				d = g
			}
			if (d.length == 1) {
				d = [d[0], d[0]]
			}
			var e = [];
			var h = 1 / (d.length - 1);
			for (var f = 0; f < d.length; f++) {
				e.push(d[f] + " " + (f * h))
			}
			return e
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicValue"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicValue"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicValue"] = c;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var b = require("NGCore/Client/Core/Class").Class;
	var d = c.DynamicValue = b.subclass({
		realize: function() {
			throw new Error("Must implement realize()")
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicTextSize"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicTextSize"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicTextSize"] = b;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicValue").DynamicValue;
	var c = b.DynamicTextSize = d.subclass({
		initialize: function(e) {
			this._rawSize = e;
			return this
		},
		$_screenRatio: null,
		$_isIOS: null,
		_getScreenRatio: function() {
			if (c._screenRatio === null) {
				c._screenRatio = a.getScreenHeight() / 800
			}
			return c._screenRatio
		},
		_isIOS: function() {
			if (c._isIOS === null) {
				c._isIOS = a.getPlatformOS().toLowerCase() == "iphone os"
			}
			return c._isIOS
		},
		_getAndroidTabletScale: function() {
			var e = a.getScreenUnits();
			var f = this._getScreenRatio();
			if (f > e) {
				return 1 / e * f * 1.5
			} else {
				return 1
			}
		},
		realize: function() {
			if (this._isIOS()) {
				return Math.round(this._rawSize * this._getScreenRatio() * 1.5)
			} else {
				return this._rawSize * this._getAndroidTabletScale()
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/ProportionalCorners"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/ProportionalCorners"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/ProportionalCorners"] = c;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicValue").DynamicValue;
	var b = c.ProportionalCorners = d.subclass({
		corners: null,
		initialize: function(f) {
			if (!f && isNaN(f)) {
				return this
			}
			var h = null;
			var e;
			var g;
			if (f instanceof b) {
				this.corners = [];
				for (e in f.corners) {
					if (f.corners.hasOwnProperty(e)) {
						this.corners.push(f.corners[e])
					}
				}
				return this
			}
			if (f instanceof String) {
				h = f.split(" ");
				for (e in h) {
					g = parseFloat(h[e]);
					if (!isNaN(g)) {
						h[e] = g
					} else {
						h[e] = 0
					}
				}
			}
			if (f instanceof Array) {
				h = f
			} else {
				if (arguments.length >= 1) {
					h = Array.prototype.slice.call(arguments)
				}
			}
			this.corners = h;
			return this
		},
		realize: function() {
			if (b.screenWidth === null) {
				b.screenWidth = a.getScreenHeight()
			}
			var e = [];
			var g;
			for (var f in this.corners) {
				if (this.corners.hasOwnProperty(f)) {
					g = this.corners[f];
					g = g * b.screenWidth / 800;
					e.push(g)
				}
			}
			return e.join(" ")
		},
		$screenWidth: null
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/FontCascade"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/FontCascade"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/FontCascade"] = b;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicValue").DynamicValue;
	var c = b.FontCascade = d.subclass({
		_faces: null,
		initialize: function(f) {
			this._faces = [];
			var e;
			if (!f) {
				return this
			} else {
				if (f instanceof c) {
					this._faces = f._faces.slice();
					return this
				} else {
					if (f instanceof String && arguments.length > 0) {
						for (e in arguments) {
							if (arguments.hasOwnProperty(e)) {
								this._faces.push({
									face: arguments[e]
								})
							}
						}
						return this
					} else {
						if (f instanceof Array) {
							this._faces = f;
							return this
						}
					}
				}
			}
		},
		realize: function() {
			for (var e = 0; e < this._faces.length; e++) {
				if (c._osMatch(this._faces[e].os)) {
					return this._faces[e].face
				}
			}
			return null
		},
		$_curOS: null,
		$_osMatch: function(e) {
			if (!c._curOS) {
				c._curOS = a.getPlatformOS().toLowerCase()
			}
			if (!e || (e.toLowerCase() == "ios" && c._curOS == "iphone os") || (e.toLowerCase() == "droid" && c._curOS == "android") || (e.toLowerCase() == "flash" && c._curOS == "flash")) {
				return true
			}
			return false
		}
	});
	b.FontCascade.defaultRegularFontFace = new c([{
		face: "DroidSans",
		os: "droid"
	}, {
		face: "HelveticaNeue",
		os: "ios"
	}, {
		face: "Helvetica",
		os: "ios"
	}, {
		face: "DroidSansFallback"
	}, {
		face: "Helvetica"
	}]);
	b.FontCascade.defaultBoldFontFace = new c([{
		face: "DroidSans-Bold",
		os: "droid"
	}, {
		face: "HelveticaNeue-Bold",
		os: "ios"
	}, {
		face: "Helvetica-Bold",
		os: "ios"
	}, {
		face: "DroidSansFallback"
	}, {
		face: "Helvetica"
	}]);
	b.FontCascade.defaultItalicFontFace = new c([{
		face: "DroidSerif-Italic",
		os: "droid"
	}, {
		face: "HelveticaNeue-Italic",
		os: "ios"
	}, {
		face: "Helvetica-Italic",
		os: "ios"
	}, {
		face: "DroidSansFallback"
	}, {
		face: "Helvetica"
	}]);
	b.FontCascade.defaultBoldItalicFontFace = new c([{
		face: "DroidSerif-BoldItalic",
		os: "droid"
	}, {
		face: "HelveticaNeue-Bold",
		os: "ios"
	}, {
		face: "Helvetica-Bold",
		os: "ios"
	}, {
		face: "DroidSansFallback"
	}, {
		face: "Helvetica"
	}]);
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedRegistrationStepOne"] = function() {
	var w = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedRegistrationStepOne"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedRegistrationStepOne"] = w;
	var a = require("NGCore/Client/Core").Core;
	var n = require("NGCore/Client/UI").UI;
	var j = n.ViewGeometry.Scale;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var r = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var s = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHeaderView").DisaggregatedCredentialsHeaderView;
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/RegistrationRecord").RegistrationRecord;
	var u = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var o = require("NGCore/Client/Core/Analytics").Analytics;
	var v = require("NGCore/Client/Core/MessageListener").MessageListener;
	var d = require("NGCore/Client/Device").Device;
	var q = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var t = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics;
	var h = n.View.subclass({
		classname: "DisaggregatdRegistrationStepOne_SizeReporterView",
		setFrame: l.setFrame,
		sizeChanged: function() {
			if (this.controller && this.controller.sizeChanged) {
				this.controller.sizeChanged.apply(this.controller, arguments)
			}
		}
	});
	var x = w.DisaggregatedRegistrationStepOne = f.subclass({
		classname: "DisaggregatedRegistrationStepOne",
		_registrationRecord: null,
		_onCompleteCallback: null,
		_hasBeenLoaded: false,
		_isAnimating: false,
		_isTransitioning: false,
		_isOnTop: false,
		initialize: function($super, y) {
			$super();
			this._onCompleteCallback = y;
			this.setView(new h());
			this._invisibleButtonHack = true;
			this._disableAnimation = false;
			this._startOnTop = false;
			if (this._startOnTop) {
				this._isOnTop = true
			}
		},
		destroy: function() {
			for (var y = 0; y < this.retainedViews.length; y++) {
				this.retainedViews[y].release()
			}
		},
		sizeChanged: function(z, L) {
			var C = a.Capabilities.getScreenWidth();
			var N = a.Capabilities.getScreenHeight();
			var A = C / 480;
			var D = N / 800;
			if (z * L) {
				this.loadView()
			}
			var K = new n.ViewGeometry.Rect(g.navController.view().getFrame());
			K.x = 0;
			K.y = 0;
			this.view().setFrame(K);
			var F = 14;
			var J = 14;
			var M = 480 - 2 * J - 2 * F;
			var E = 14;
			var B = (M - E) / 2;
			var I = J + B + E;
			var G = 10;
			var y = {
				backgroundViewOnBottom: K.copy().inset(360 * D, F * A, (F - G) * D, F * A),
				backgroundViewOnTop: K.copy().inset(F * D, F * A, (360 - G) * D, F * A),
				gamernameTitle: [J * A, 30 * D, M * A, 80 * D],
				gamernameEditText: [J * A, 117 * D, M * A, 60 * D],
				passwordEditText: [J * A, 195 * D, M * A, 60 * D],
				continueLoginButton: [J * A, 280 * D, B * A, 60 * D],
				continueSignupButton: [I * A, 280 * D, B * A, 60 * D],
				forgotPasswordButton: [J * A, 350 * D, B * A, 60 * D],
				mobageLogo: [I * A, 350 * D, B * A, 60 * D]
			};
			this._LAYOUT_RECTS = y;
			this.backgroundView.setFrame(this._startOnTop ? y.backgroundViewOnTop : y.backgroundViewOnBottom);
			this.backgroundView.layoutSubviews();
			this.gamernameTitle.setFrame(y.gamernameTitle);
			this.gamernameTitle.setTextShadow("FF00 3.0 {0,-2}");
			this.mobageLogo.setFrame(y.mobageLogo);
			this.gamernameEditText.setFrame(y.gamernameEditText);
			this.gamernameEditText.setInputType(n.Commands.InputType.None);
			this.gamernameEditText.setEnterKeyType(n.Commands.EnterKeyType.Next);
			if (!this.gamernameEditText.getText()) {
				this.gamernameEditText.setText(" ");
				this.gamernameEditText.setText("")
			}
			this.passwordEditText.setFrame(y.passwordEditText);
			this.passwordEditText.setInputType(n.Commands.InputType.Password);
			this.passwordEditText.setTextFont(s.defaultRegularFontFace);
			this.passwordEditText.setEnterKeyType(n.Commands.EnterKeyType.Done);
			if (!this.passwordEditText.getText()) {
				this.passwordEditText.setText(" ");
				this.passwordEditText.setText("")
			}
			this.continueLoginButton.setFrame(y.continueLoginButton);
			this.continueSignupButton.setFrame(y.continueSignupButton);
			this.forgotPasswordButton.setFrame(y.forgotPasswordButton);
			if (this._invisibleButtonHack) {
				this.gamernameClickButton.setFrame(y.gamernameEditText);
				this.passwordClickButton.setFrame(y.passwordEditText)
			}
		},
		loadView: function($super) {
			if (this._hasBeenLoaded) {
				return
			}
			this._hasBeenLoaded = true;
			NgLogD("AJT: DSRO laodView!");
			$super();
			this._registrationRecord = new e();
			var y = this;
			this.retainedViews = [];
			var z = function(C) {
				C.retain();
				y.retainedViews.push(C);
				return C
			};
			this.backgroundView = z(new c());
			this.mobageLogo = (new n.Image()).retain();
			this.backgroundView.addChild(this.mobageLogo);
			this.gamernameTitle = new n.Label();
			this.backgroundView.addChild(this.gamernameTitle);
			this.gamernameEditText = new n.EditText();
			this.backgroundView.addChild(this.gamernameEditText);
			this.passwordEditText = new n.EditText();
			this.backgroundView.addChild(this.passwordEditText);
			this.forgotPasswordButton = new n.Button();
			this.backgroundView.addChild(this.forgotPasswordButton);
			this.continueLoginButton = new n.Button();
			this.backgroundView.addChild(this.continueLoginButton);
			this.continueSignupButton = new n.Button();
			this.backgroundView.addChild(this.continueSignupButton);
			if (this._invisibleButtonHack) {
				this.gamernameClickButton = new n.Button();
				this.backgroundView.addChild(this.gamernameClickButton);
				this.passwordClickButton = new n.Button();
				this.backgroundView.addChild(this.passwordClickButton)
			}
			this.gamernameTitle.setText(b("Enter a username to PLAY!"));
			this.continueLoginButton.setText(b("Log In"));
			this.continueSignupButton.setText(b("Sign Me Up"));
			this.gamernameEditText.setPlaceholder(b("Username (new, existing or Plus+)"));
			this.passwordEditText.setPlaceholder(b("Password (min. 4 characters)"));
			this.forgotPasswordButton.setText(b("Forgot Password?"));
			this.gamernameEditText.setOnFocus(this.bind(function() {
				this._animateToTop()
			}));
			this.passwordEditText.setOnFocus(this.bind(function() {
				this._animateToTop()
			}));
			this.continueSignupButton.setOnClick(this.bind(function() {
				this._doRegStep()
			}));
			this.continueLoginButton.setOnClick(this.bind(function() {
				this._doLogin()
			}));
			this.forgotPasswordButton.setOnClick(this.bind(function() {
				this._forgotPassword()
			}));
			if (this._invisibleButtonHack) {
				this.gamernameClickButton.setOnClick(this.bind(function() {
					this._wasGamernameClickButtonClicked = true;
					this._animateToTop()
				}));
				this.passwordClickButton.setOnClick(this.bind(function() {
					this._animateToTop()
				}))
			}
			this.view().setFrame(n.Window.getFrame());
			var B = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/DisaggregatedRegistration").RegistrationStepOne;
			B.applyTo(this);
			for (var A = 0; A < this.retainedViews.length; A++) {
				this.view().addChild(this.retainedViews[A])
			}
		},
		applySuggestedName: function(y) {
			NgLogD("Selected Suggested Name: " + y);
			this.gamernameEditText.setText(y);
			this.gamernameEditText.setEnabled(false);
			this.passwordEditText.setEnabled(false);
			this._registrationRecord.gamername = y;
			var z = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedEmailConfirmation").DisaggregatedEmailConfirmation;
			this.navController.pushViewController(new z(this._onCompleteCallback, this._registrationRecord))
		},
		_configureHost: function(y) {
			y.setRegHeaderEnabled(false, 0)
		},
		_unconfigureHost: function(y) {
			y.setIsFooterEnabled(false);
			y.setRegHeaderEnabled(false)
		},
		willPush: function($super, z) {
			var y = z.host;
			$super(z);
			if (z.host) {
				this._configureHost(z.host)
			}
		},
		didPush: function($super, y) {
			o.reportFunnelStage("DisaggregatedRegistration02", 1, "SignUp01");
			t.logStartupFlowEvent("ReachedLoginSignup");
			$super(y)
		},
		willReshow: function($super, y) {
			$super(y);
			this._isTransitioning = false;
			if (y.host) {
				this._configureHost(y.host)
			}
			this.gamernameEditText.setState(n.State.Normal);
			this.passwordEditText.setState(n.State.Normal)
		},
		willHide: function($super, y) {
			$super(y);
			if (y.host) {
				this._unconfigureHost(y.host)
			}
		},
		getIsOnTop: function() {
			return this._isOnTop
		},
		_doRegStep: function() {
			if (this._isAnimating || this._isTransitioning) {
				return
			}
			t.logStartupFlowEvent("RegClickedSignUp");
			var z = this;
			this.gamernameEditText.setState(n.State.Normal);
			this.passwordEditText.setState(n.State.Normal);
			this._registrationRecord.gamername = this.gamernameEditText.getText();
			this._registrationRecord.password = this.passwordEditText.getText();
			var y = false;
			var A;
			this._registrationRecord.testLocalGamername(function(B) {
				if (B) {
					y = true;
					z.gamernameEditText.setState(u.UIStateError);
					A = new n.Toast();
					A.setText(B);
					A.show()
				}
			});
			if (y) {
				return
			}
			this._registrationRecord.testLocalPassword(function(B) {
				if (B) {
					y = true;
					z.passwordEditText.setState(u.UIStateError);
					A = new n.Toast();
					A.setText(B);
					A.show()
				}
			});
			if (y) {
				return
			}
			if (!this.progressDialog) {
				this.progressDialog = new n.ProgressDialog();
				this.progressDialog.setText(b("Checking availability..."))
			}
			this.progressDialog.show();
			this._isTransitioning = true;
			this._registrationRecord.testRemoteGamername(function(E, C) {
				z.progressDialog.hide();
				z.progressDialog.destroy();
				z.progressDialog = undefined;
				if (E && E.length > 0) {
					z._isTransitioning = false;
					if (C.length > 0) {
						z._nameTaken(C)
					} else {
						z.gamernameEditText.setState(u.UIStateError);
						A = new n.Toast();
						A.setText(E);
						A.show()
					}
					o.reportGameEvent("DisaggregatedRegErr", {
						errors: E
					});
					for (var D = 0; D < E.length; D++) {
						t.logStartupFlowError("RegClickedSignUp", E[D])
					}
				} else {
					z.gamernameEditText.setEnabled(false);
					z.passwordEditText.setEnabled(false);
					var B = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedEmailConfirmation").DisaggregatedEmailConfirmation;
					z.navController.pushViewController(new B(z._onCompleteCallback, z._registrationRecord))
				}
			})
		},
		_doLogin: function() {
			if (this._isAnimating || this._isTransitioning) {
				return
			}
			NgLogD("Log in Clicked\n");
			this.passwordEditText.setState(n.State.Normal);
			this.gamernameEditText.setState(n.State.Normal);
			if (!this.progressDialog) {
				this.progressDialog = new n.ProgressDialog({
					title: "Logging in to Mobage",
					text: "Please wait..."
				})
			}
			this.progressDialog.show();
			this._isTransitioning = true;
			t.logStartupFlowEvent("LoginClickedLogin");
			var A = this.gamernameEditText.getText();
			var y = this.passwordEditText.getText();
			var z = q.Session.getCurrentSession();
			z.newSessionWithUsernameAndPassword(A, y, this.bind(function(C, F) {
				if (this.progressDialog) {
					this.progressDialog.hide();
					this.progressDialog.destroy();
					this.progressDialog = undefined
				}
				if (C) {
					this._isTransitioning = false;
					NgLogD("************** Failed Login Error: " + JSON.stringify(C) + "\n");
					if (C.indexOf("gamername") != -1 || C.indexOf("login") != -1) {
						this.gamernameEditText.setState(x.UIStateError)
					}
					if (C.indexOf("password") != -1) {
						this.passwordEditText.setState(x.UIStateError)
					}
					var E = new n.Toast();
					E.setText("" + C);
					E.ondisappear = function() {
						E.destroy()
					};
					E.show()
				} else {
					NgLogD("Successful login! ********************\n");
					this.gamernameEditText.blur();
					this.passwordEditText.blur();
					t.logStartupFlowEvent("LoginSucceeded");
					var D = new n.ViewGeometry.Rect(this.view().getFrame());
					var B = new n.ViewGeometry.Rect(-D.w, 0, D.w, D.h);
					n.animate(function() {
						this.view().setFrame(B)
					}.bind(this), g.navController.transitionAnimationTime, function() {
						this._onCompleteCallback(F.user())
					}.bind(this))
				}
			}));
			NgLogD("Log in click done, pending results.\n")
		},
		_forgotPassword: function() {
			if (this._isAnimating || this._isTransitioning) {
				return
			}
			this._isTransitioning = true;
			var y = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedForgotPassword").DisaggregatedForgotPassword;
			this.navController.pushViewController(new y(this._onCompleteCallback, this))
		},
		_nameTaken: function(y) {
			var z = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedNameTaken").DisaggregatedNameTaken;
			this.navController.pushViewController(new z(this._onCompleteCallback, y, this))
		},
		_animateToTop: function() {
			if (this._isAnimating || this._isOnTop || this._disableAnimation || this._startOnTop || this._isTransitioning) {
				return
			}
			var y = 300;
			var z = this;
			n.animate(function() {
				z.backgroundView.setFrame(z._LAYOUT_RECTS.backgroundViewOnTop);
				z._isAnimating = true
			}, y, function() {
				z._isOnTop = true;
				z._isAnimating = false;
				if (z._invisibleButtonHack) {
					z.backgroundView.removeChild(z.gamernameClickButton);
					z.gamernameClickButton.destroy();
					z.backgroundView.removeChild(z.passwordClickButton);
					z.passwordClickButton.destroy();
					if (z._wasGamernameClickButtonClicked) {
						z.gamernameEditText.focus()
					} else {
						z.passwordEditText.blur()
					}
				}
			})
		}
	});
	return w
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets"] = a;
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main");
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Debug");
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = b.ScaledCorners;
	var h = b.ScaledTextSize;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = f.ScaledCorners;
	var g = f.ScaledTextSize;
	c.CommonElements = {};
	var e = function(j, k) {
		f.lazyLoad(c.CommonElements, j, k)
	};
	e("standardButton", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
					innerLine: "4484C3E9 2.0"
				},
				pressedGradient: {
					corners: a(8),
					gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
					innerLine: "2B003366 2.0"
				},
				textFont: f.defaultBoldFontFace,
				textSize: g(14),
				textColor: "FFFFFFFF",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}"
			}
		}
	});
	e("largeStandardButton", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
					outerLine: "FF233656 2.0",
					innerLine: "4484C3E9 2.0"
				},
				pressedGradient: {
					corners: a(8),
					gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
					outerLine: "FF233656 2.0",
					innerShadow: "23000000 1.0 {0.0,-2.0}"
				},
				textFont: f.defaultBoldFontFace,
				textSize: g(16),
				textColor: "FFFFFFFF",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}"
			}
		}
	});
	e("largeActionButton", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"],
					outerLine: "FF233656 2.0",
					innerLine: "4484C3E9 2.0"
				},
				pressedGradient: {
					corners: a(8),
					gradient: ["FF5B971B 0.000", "FF397210 1.000"],
					outerLine: "FF233656 2.0",
					innerShadow: "23000000 1.0 {0.0,-2.0}"
				},
				textFont: f.defaultBoldFontFace,
				textSize: g(16),
				textColor: "FFFFFFFF",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}",
				disabledGradient: {},
				disabledTextColor: "FF000000"
			}
		}
	});
	e("disabledButton", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
					innerLine: "44FFFFFF 2.0"
				},
				pressedGradient: {
					corners: d(8),
					gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
					innerLine: "44FFFFFF 2.0"
				},
				textFont: f.defaultBoldFontFace,
				textSize: g(14),
				textColor: "FFD1CDCD",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}"
			}
		}
	});
	e("textBox", function() {
		return {
			style: {
				gradient: {
					corners: a(6),
					gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
					outerLine: "FF000000 2.0",
					insets: "{0.0,0.0,2.0,0.0}"
				},
				errorGradient: {
					corners: a(6),
					gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
					outerLine: "FFFF0000 2.0",
					insets: "{0.0,0.0,2.0,0.0}"
				},
				textFont: f.defaultRegularFontFace,
				textColor: "FF000000",
				textSize: g(14)
			}
		}
	});
	e("invisibleButton", function() {
		return {
			style: {
				pressedGradient: {
					corners: a(6),
					gradient: ["44000000 0.000"],
					insets: "{0.0,0.0,2.0,0.0}"
				}
			}
		}
	});
	e("checkBox", function() {
		return {
			style: {
				gradient: {
					insets: "{0, 0, 0, 0}",
					outerLine: "00000000 3",
					outerShadow: "0000 0 {0,0}",
					corners: a(6),
					innerShadow: "FF7A7E80 2 {0,-1}",
					gradient: ["FFE0E6EC 0", "FFF3F7FD 1"]
				},
				pressedGradient: {
					insets: "{0, 0, 0, 0}",
					innerShadow: "FF00 6.0 {0.0,-1.0}",
					gradient: ["FF80 0.000", "FF80 1.000"],
					outerLine: "0000 3",
					outerShadow: "0000 0.0 {0.0,0.0}",
					corners: a(6)
				},
				checkedGradient: {
					insets: "{0, 0, 0, 0}",
					outerLine: "00000000 3",
					outerShadow: "0000 0 {0,0}",
					corners: a(6),
					innerShadow: "FF00 0 {0,0}",
					gradient: ["FF75B624 0", "FF4D8D1F 1"]
				},
				pressedCheckedGradient: {
					innerShadow: "FF0F610F 5.0 {0.0,-1.0}",
					insets: "{0, 0, 0, 0}",
					gradient: ["FF179117 0.000", "FF179117 1.000"],
					outerLine: "0000 3",
					outerShadow: "0000 0.0 {0.0,0.0}",
					corners: a(6)
				},
				disabledGradient: {
					insets: "{0, 0, 0, 0}",
					outerLine: "00000000 3",
					outerShadow: "3300 3 {0,0}",
					corners: a(6),
					gradient: ["FFEEEEEE 0", "FFD6D6D6 1"]
				}
			}
		}
	});
	e("topPageNavigationTab", function() {
		return {
			style: {
				gradient: {
					insets: "{4.0,0.0,0.0,0.0}",
					corners: "6.0 6.0 0.0 0.0",
					innerLine: "26B7F5FF 1.5",
					gradient: ["FF2976BB 0.0", "FF0B4B93 0.94", "FF073161 0.95"]
				},
				pressedGradient: {
					insets: "{4.0,0.0,0.0,0.0}",
					corners: "6.0 6.0 0.0 0.0",
					innerLine: "26B7F5FF 1.5",
					gradient: ["FF85C4EA 0.0", "FF4799D3 0.94", "FF3674A1 0.95"]
				},
				focusedGradient: {
					insets: "{0.0,0.0,0.0,0.0}",
					corners: "6.0 6.0 0.0 0.0",
					innerLine: "26B7F5FF 1.5",
					gradient: ["FF2976BB 0.0", "FF1B61A3 0.94", "FF134370 0.95"]
				},
				textFont: f.defaultRegularFontFace,
				textFontSelected: f.defaultBoldFontFace,
				textSize: g(14),
				textColor: "FFFF",
				textGravity: [0.5, 0.5],
				textShadow: "66000000 1.0 {0.0,-2.0}",
				textShadowSelected: "66000000 1.0 {0.0,1.0}"
			}
		}
	});
	e("userPhoto", function() {
		return {
			style: {
				imageBorder: {
					corners: d(4),
					outerLine: "FFFFFFFF 3",
					innerLine: "FFB2B2B2 2"
				}
			}
		}
	});
	e("zeroCase", function() {
		return {
			extras: {
				heightFactor: 200 / 480
			}
		}
	});
	e("header", function() {
		return {
			style: {
				gradient: {
					gradient: ["FF143558 0.0", "FF295D8D 1.0"]
				}
			},
			children: {
				content: {
					style: {
						textSize: g(14),
						textGravity: [0, 0.25],
						textFont: f.defaultBoldFontFace,
						textColor: "FFFFFFFF"
					}
				},
				button: {
					style: {
						textColor: "FFFFFFFF",
						textSize: g(12),
						textFont: f.defaultBoldFontFace,
						gradient: {
							corners: a(8),
							gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
							innerLine: "4484C3E9 2.0"
						},
						pressedGradient: {
							corners: a(8),
							gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
							innerLine: "2B003366 2.0"
						}
					}
				}
			},
			extras: {
				headerHeightRatio: 1 / 8
			}
		}
	});
	b.sheet("social.us.commonelements", {
		standardButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				innerLine: "4484C3E9 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
				innerLine: "2B003366 2.0"
			},
			textFont: b.defaultBoldFontFace,
			textSize: h(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		largeStandardButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				outerLine: "FF233656 2.0",
				innerLine: "4484C3E9 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
				outerLine: "FF233656 2.0",
				innerShadow: "23000000 1.0 {0.0,-2.0}"
			},
			textFont: b.defaultBoldFontFace,
			textSize: h(16),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		largeActionButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"],
				outerLine: "FF233656 2.0",
				innerLine: "4484C3E9 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF5B971B 0.000", "FF397210 1.000"],
				outerLine: "FF233656 2.0",
				innerShadow: "23000000 1.0 {0.0,-2.0}"
			},
			textFont: b.defaultBoldFontFace,
			textSize: h(16),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		disabledButton: {
			gradient: {
				corners: d(8),
				gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
				innerLine: "44FFFFFF 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
				innerLine: "44FFFFFF 2.0"
			},
			textFont: b.defaultBoldFontFace,
			textSize: h(14),
			textColor: "FFD1CDCD",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		textBox: {
			gradient: {
				corners: d(6),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FF000000 2.0",
				insets: "{0.0,0.0,2.0,0.0}"
			},
			gradientError: {
				corners: d(6),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FFFF0000 2.0",
				insets: "{0.0,0.0,2.0,0.0}"
			},
			textFont: b.defaultRegularFontFace,
			textColor: "FF000000",
			textSize: h(14)
		},
		checkBoxGradients: {
			checkBoxChecked: {
				insets: "{0, 0, 0, 0}",
				outerLine: "00000000 3",
				outerShadow: "0000 0 {0,0}",
				corners: "6 6 6 6",
				innerShadow: "FF00 0 {0,0}",
				gradient: ["FF75B624 0", "FF4D8D1F 1"]
			},
			checkBoxUnChecked: {
				insets: "{0, 0, 0, 0}",
				outerLine: "00000000 3",
				outerShadow: "0000 0 {0,0}",
				corners: "6 6 6 6",
				innerShadow: "FF7A7E80 2 {0,-1}",
				gradient: ["FFE0E6EC 0", "FFF3F7FD 1"]
			},
			checkBoxPressed: {
				insets: "{0, 0, 0, 0}",
				innerShadow: "FF00 6.0 {0.0,-1.0}",
				gradient: ["FF80 0.000", "FF80 1.000"],
				outerLine: "0000 3",
				outerShadow: "0000 0.0 {0.0,0.0}",
				corners: "6 6 6 6"
			},
			checkBoxCheckedPressed: {
				innerShadow: "FF0F610F 5.0 {0.0,-1.0}",
				insets: "{0, 0, 0, 0}",
				gradient: ["FF179117 0.000", "FF179117 1.000"],
				outerLine: "0000 3",
				outerShadow: "0000 0.0 {0.0,0.0}",
				corners: "6 6 6 6"
			},
			checkBoxInActive: {
				insets: "{0, 0, 0, 0}",
				outerLine: "00000000 3",
				outerShadow: "3300 3 {0,0}",
				corners: "6 6 6 6",
				gradient: ["FFEEEEEE 0", "FFD6D6D6 1"]
			}
		},
		topPageNavigationTab: {
			gradient: {
				insets: "{4.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 0.0 0.0",
				innerLine: "26B7F5FF 1.5",
				gradient: ["FF2976BB 0.0", "FF0B4B93 0.94", "FF073161 0.95"]
			},
			pressedGradient: {
				insets: "{4.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 0.0 0.0",
				innerLine: "26B7F5FF 1.5",
				gradient: ["FF85C4EA 0.0", "FF4799D3 0.94", "FF3674A1 0.95"]
			},
			gradientSelected: {
				insets: "{0.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 0.0 0.0",
				innerLine: "26B7F5FF 1.5",
				gradient: ["FF2976BB 0.0", "FF1B61A3 0.94", "FF134370 0.95"]
			},
			textFont: b.defaultRegularFontFace,
			textFontSelected: b.defaultBoldFontFace,
			textSize: h(14),
			textColor: "FFFF",
			textGravity: [0.5, 0.5],
			textShadow: "66000000 1.0 {0.0,-2.0}",
			textShadowSelected: "66000000 1.0 {0.0,1.0}"
		},
		zeroCaseHeightFactor: 200 / 480,
		userPhoto: {
			imageBorder: {
				corners: d(4),
				outerLine: "FFFFFFFF 3",
				innerLine: "FFB2B2B2 2"
			}
		}
	});
	b.sheet("social.us.host", {
		parent: "social.us.commonelements",
		backgroundView: {
			gradient: {
				gradient: ["FF05162c 0.0", "FF132337 1.0"]
			},
			imageGravity: [0, 0]
		},
		backButton: {
			textFont: b.defaultBoldFontFace,
			textSize: h(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		}
	});
	b.sheet("social.us.servicehost", {
		parent: "social.us.host",
		backgroundView: {
			gradient: {
				gradient: ["FF061b3d 0.0"]
			},
			imageFit: 6
		},
		titleBarView: {
			backgroundColor: "80000000"
		},
		titleBarLine: {
			gradient: {
				outerLine: "2EA3D9FF 1.0"
			}
		},
		homeButton: {
			gradient: {
				outerShadow: "FF20719F 0.0 {0.0,-4.0}",
				insets: "{0.0,0.0,4.0,0.0}",
				corners: "6.0 6.0 6.0 6.0",
				innerShadow: "FFFFFEFE 2.0 {0.0,-1.0}",
				gradient: ["FF42BEF0 0.000", "FF35A2DC 1.000"],
				outerLine: "FF7DD1F4 1.0"
			},
			textColor: "FFFFFFFF"
		},
		mobageButton: {},
		activeGameButton: {
			gradient: {
				corners: d(6),
				gradient: ["FF1969B6 0.000", "FF00347E 1.000"],
				innerLine: "4484C3E9 1.0"
			},
			gradientPressed: {
				corners: d(6),
				gradient: ["FF002B69 0.000", "FF0A468D 1.000"],
				innerLine: "4484C3E9 1.0"
			},
			textColor: "FFFFFFFF",
			textColorPressed: "FFBFBFBF",
			textShadow: "33000000 1.0 {0.0,1.0}",
			textShadowPressed: "33FFFFFF 1.0 {0.0,1.0}",
			textFont: b.defaultBoldFontFace,
			textSize: h(10),
			textGravity: [1, 0.5]
		}
	});
	b.sheet("social.us.credentialshost", {
		parent: "social.us.host",
		titleBarView: {
			gradient: {
				gradient: ["FF0F3455 0.0", "FF061A35 1.0"],
				outerLine: "CC446B8E 2.0"
			}
		},
		titleBarLine: {
			gradient: {
				outerLine: "CC446B8E 2.0"
			}
		},
		footerView: {
			gradient: {
				gradient: ["CC000D21 0.0", "CC000D21 1.0"]
			}
		},
		footerLine: {
			gradient: {
				outerLine: "CC7D8996 2.0"
			}
		},
		mobageLogo: {
			imageFit: 1,
			imageGravity: [0.5, 0]
		},
		subtitle: {
			textFont: b.defaultRegularFontFace,
			textSize: h(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "66000000 4.0 {0.0,-4.0}"
		},
		footerLabel: {
			textFont: b.defaultRegularFontFace,
			textSize: h(14),
			textColor: "FFFFFFFF",
			textGravity: [0, 0.5],
			textShadow: "66000000 1.0 {0.0,-2.0}"
		},
		welcomeText0: {
			textFont: b.defaultBoldFontFace,
			textSize: h(12),
			textColor: "FF27A0F7",
			textGravity: [0.5, 1]
		},
		welcomeText1: {
			textFont: b.defaultBoldFontFace,
			textSize: h(12),
			textColor: "9927A0F7",
			textGravity: [0.5, 1]
		},
		welcomeText2: {
			textFont: b.defaultBoldFontFace,
			textSize: h(12),
			textColor: "6627A0F7",
			textGravity: [0.5, 1]
		}
	});
	b.sheet("social.us.disaggregated", {
		parent: "social.us.commonelements",
		backgroundView: {
			gradient: {
				corners: a(10),
				gradient: ["E5011E4C 0.0", "E5011E4C 1.0"],
				innerLine: "FF000000 3.0",
				insets: "{0,0,10,0}"
			}
		},
		inputLabel: {
			textFont: b.defaultRegularFontFace,
			textSize: g(16),
			textColor: "FFFFFFFF",
			textGravity: [0, 1]
		},
		forgotPasswordButton: {
			gradient: {
				corners: a(0),
				gradient: ["00000000 0.000", "00000000 1.000"],
				outerLine: "00000000 0.0",
				innerLine: "00000000 0.0"
			},
			pressedGradient: {
				corners: a(5),
				gradient: ["40000000 0.000", "80000000 1.000"],
				outerLine: "00000000 0.0",
				innerShadow: "00000000 1.0 {0.0,-2.0}",
				insets: "{5,0,5,0}"
			},
			textFont: b.defaultRegularFontFace,
			textColor: "FF4F89D5",
			textSize: g(15),
			textGravity: [0, 0.5],
			textShadow: "00000000 1.0 {0.0,-2.0}"
		},
		title: {
			textFont: b.defaultBoldFontFace,
			textSize: g(18),
			textColor: "FFFFFFFF",
			textGravity: [0, 1],
			textShadow: "CC000000 1.0 {0.0,-2.0}"
		},
		descText: {
			textFont: b.defaultRegularFontFace,
			textSize: g(14),
			textColor: "FFFFFFFF",
			textGravity: [0, 0.5]
		},
		invisibleButton: {
			pressedGradient: {
				corners: a(6),
				gradient: ["66000000 0.000"],
				insets: "{0.0,0.0,2.0,0.0}"
			}
		}
	});
	b.sheet("social.us.standardtitle", {
		content: {
			textColor: "FFFFFFFF",
			textSize: h(15)
		},
		accessory: {}
	});
	b.sheet("social.us.ccview", {
		_headerHeightRatio: 1 / 8,
		_insetRatio: 0.1,
		_borderThicknessRatio: 5 / 480,
		_bgHeightGrowthRatio: 1 / 480,
		bgAttributes: {
			gradient: {
				corners: d(4),
				gradient: ["FFE9EFF3 0.0", "FFE9EFF3 1.0"]
			}
		},
		borderAttributes: {
			gradient: {
				corners: d(2),
				outerLine: "FF0E1D3B 1.0"
			}
		}
	});
	b.sheet("social.us.usericonview", {
		gradient: {
			outerLine: "FFFFFEFE 2.5",
			innerLine: "FF00 1.5",
			corners: d(6)
		},
		imageBorder: {
			outerLine: "FFFFFEFE 2.5",
			innerLine: "FF00 1.5",
			corners: d(6)
		}
	});
	b.sheet("social.us.userbutton", {
		userButtonLabel: {
			textColor: "FF333333",
			textSize: h(11),
			textFont: b.defaultBoldFontFace
		},
		maxFriendNameChars: 7,
		userButtonIconY: 0,
		userButtonIconWidth: 62,
		userButtonLabelY: 66,
		userButtonLabelHeight: 22
	});
	b.sheet("social.us.interstitialsplash", {
		attributes: {
			gradient: {
				gradient: ["FF091847 0.0", "FF091847 1.0"]
			}
		}
	});
	b.sheet("social.us.progressveil", {
		gradient: {
			gradient: ["FF0B4B93 0.0", "FF0B4B93 1.0"]
		}
	});
	b.sheet("social.us.menudrawer", {
		menuDrawer: {
			gradient: {
				insets: "{0.0,-5.0,-5.0,-5.0}",
				gradient: ["EE011732 0.0", "EE002A5A 1.0"],
				innerLine: "FF334A62 3.0"
			}
		},
		menuDrawerButton: {
			textColor: "FFFFFFFF",
			textSize: h(14)
		},
		menuDrawerButtonPressed: {
			textColor: "FFB2B2B2",
			gradient: {
				gradient: ["FF011733 0.0", "FF002A5A 1.0"],
				innerLine: "FF334A62 3.0"
			},
			centerGradient: {
				gradient: ["FF011733 0.0", "FF002A5A 1.0"],
				innerLine: "FF334A62 1.0"
			}
		},
		centerButtonGradient: {
			insets: "{0.0,0.0,-5.0,0.0}",
			innerLine: "FF334A62 1.0"
		},
		imageHeightRatio: 50 / 102,
		topMarginRatio: 12 / 102,
		bottomMarginRatio: 10 / 102
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Debug"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Debug"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Debug"] = a;
	var b = {};
	b.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	b.Style.sheet("RedBackground", {
		gradient: {
			gradient: ["FFFF0000 0.0", "FFFF0000 1.0"]
		}
	});
	b.Style.sheet("GreenBackground", {
		gradient: {
			gradient: ["FF00FF00 0.0", "FF00FF00 1.0"]
		}
	});
	b.Style.sheet("BlueBackground", {
		gradient: {
			gradient: ["FF0000FF 0.0", "FF0000FF 1.0"]
		}
	});
	b.Style.sheet("YellowBackground", {
		gradient: {
			gradient: ["FFFFFF00 0.0", "FFFFFF00 1.0"]
		}
	});
	b.Style.sheet("BlackBackground", {
		gradient: {
			gradient: ["FF000000 0.0", "FF000000 1.0"]
		}
	});
	b.Style.sheet("WhiteBackground", {
		gradient: {
			gradient: ["FFFFFFFF 0.0", "FFFFFFFF 1.0"]
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle"] = b;
	var h = require("NGCore/Client/UI").UI;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Color").Color;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/DynamicTextSize").DynamicTextSize;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/ProportionalCorners").ProportionalCorners;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/FontCascade").FontCascade;
	var e = b.MobageStyle = h.Style.subclass({
		classname: "MobageStyle",
		OddState: 15859712,
		ErrorState: 4096,
		$lazyLoad: function(l, j, k) {
			l.__defineGetter__(j, function() {
				delete l[j];
				return l[j] = new e(k())
			})
		},
		initialize: function($super, k) {
			if (k) {
				$super(k.style);
				if (k.children) {
					for (var j in k.children) {
						if (!(k.children[j] instanceof e)) {
							k.children[j] = new e(k.children[j])
						}
					}
					this.children = k.children
				}
				this.extras = k.extras
			} else {
				$super()
			}
		},
		applyTo: function(j) {
			if (j.setStyle) {
				j.setStyle(this)
			}
			for (var k in this.children) {
				var l = this.children[k];
				if (j[k]) {
					l.applyTo(j[k])
				}
			}
		},
		toString: function() {
			return "<MobageStyle>"
		}
	});
	e.bindPropertyState("gradient", "odd", e.OddState);
	e.bindPropertyState("gradient", "pressedOdd", h.State.Pressed | e.OddState);
	e.bindPropertyState("gradient", "error", e.ErrorState);
	e.bindPropertyState("textColor", "error", e.ErrorState);
	e.bindPropertyState("gradient", "focused", h.State.Focused);
	e.bindPropertyState("gradient", "selected", h.State.Selected);
	e.bindPropertyState("gradient", "checked", h.State.Checked);
	e.bindPropertyState("gradient", "pressedChecked", h.State.Pressed | h.State.Checked);
	e.ScaledCorners = function(j) {
		if (!j) {
			return new a()
		}
		if (j instanceof String || j instanceof a || j instanceof Array) {
			return new a(j)
		}
		return (new a(Array.prototype.slice.call(arguments))).realize()
	};
	e.ScaledTextSize = function(j) {
		return (new f(j)).realize()
	};
	var c = function(j, k) {
		e.__defineGetter__(j, function() {
			delete e[j];
			console.log("MobageStyle: Lazy Font Loading", j);
			return e[j] = k.realize()
		})
	};
	c("defaultRegularFontFace", d.defaultRegularFontFace);
	c("defaultBoldFontFace", d.defaultBoldFontFace);
	c("defaultItalicFontFace", d.defaultItalicFontFace);
	c("defaultBoldItalicFontFace", d.defaultBoldItalicFontFace);
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeLayouts"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeLayouts"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeLayouts"] = f;
	var d = require("NGCore/Client/UI").UI;
	var a = d.ViewGeometry.Rect;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Logger").Logger;
	var j = f.Layouts = {};
	var l = f.AddOrders = {};
	var g = function(o) {
		var n = Array.prototype.slice.call(arguments);
		return {
			addSubviews: function() {
				for (var p = 0; p < n.length; p++) {
					try {
						this.addChild(this[n[p]])
					} catch (q) {
						this.loge("Failed Initializing subview '" + n[p] + "' of '" + this.classname + "'");
						throw q
					}
				}
			}
		}
	};
	l.One = g("content");
	l.TwoSuperimposed = g("background", "content");
	l.TwoHorizontal = g("content", "accessory");
	l.TwoVerticalContentSubtitle = g("content", "subtitle");
	l.TwoVerticalTitleContent = g("title", "content");
	l.ThreeHorizontal = g("content", "leftAccessory", "rightAccessory");
	l.Generator = g;
	var e = j.SuperimposedGenerator = function(o) {
		var p = Array.prototype.slice.call(arguments);
		var r = [];
		var q = function(s) {
			return function(t) {
				if (this[s]) {
					var u = t.copy();
					if (this._insets[s]) {
						u.inset.apply(u, this._insets[s])
					}
					this[s].setFrame(u)
				}
			}
		};
		for (var n = 0; n < p.length; n++) {
			r.push(q(p[n]))
		}
		return {
			layoutSubviews: function($super) {
				if ($super && typeof $super === "function") {
					$super()
				}
				var t = new a(this.getFrame());
				if (t.isEmpty()) {
					this.logd(this.classname + ": abort layoutSubviews, no-frame.");
					return
				}
				t.x = t.y = 0;
				for (var s = 0; s < r.length; s++) {
					r[s].apply(this, [t])
				}
			}
		}
	};
	var c = j.TwoHorizontalGenerator = function(o, n) {
		return {
			layoutSubviews: function($super) {
				if ($super && typeof $super === "function") {
					$super()
				}
				var r = new a(this.getFrame());
				if (r.isEmpty()) {
					NgLogD(this.classname + ": abort layoutSubviews, no-frame.");
					return
				}
				r.x = r.y = 0;
				var q = o;
				if ("content" === o) {
					q = n
				}
				var p = 0;
				if (this[q] && this[q].getFrame()) {
					p = this[q].getFrame()[2]
				}
				var t = this._insets[q][1] + this._insets[q][3] + p;
				if (p === 0) {
					this[q].setVisible(false);
					t = 0
				} else {
					if (!this[q].getVisible()) {
						this[q].setVisible(true)
					}
				}
				if ("content" === o) {
					t = -t
				}
				var s = r.sliceHorizontal(t);
				if (this[q]) {
					s.inset.apply(s, this._insets[q]);
					this[q].setFrame(s)
				}
				if (this.content) {
					r.inset.apply(r, this._insets.content);
					this.content.setFrame(r)
				}
			}
		}
	};
	var m = j.TwoVerticalGenerator = function(o, n) {
		return {
			layoutSubviews: function($super) {
				if ($super && typeof $super === "function") {
					$super()
				}
				var r = new a(this.getFrame());
				if (r.isEmpty()) {
					return
				}
				r.x = r.y = 0;
				var q = o;
				if ("content" === o) {
					q = n
				}
				var s = 0;
				if (this[q] && this[q].getFrame()) {
					s = this[q].getFrame()[3]
				}
				var p = this._insets[q][0] + this._insets[q][2] + s;
				if ("content" === o) {
					p = -p
				}
				var t = r.sliceVertical(p);
				if (this[q]) {
					t.inset.apply(t, this._insets[q]);
					this[q].setFrame(t)
				}
				if (this.content) {
					r.inset.apply(r, this._insets.content);
					this.content.setFrame(r)
				}
			}
		}
	};
	var k = j.ThreeVerticalGenerator = function(r, s, q) {
		var n = function(v, x) {
			var w = 0;
			if (this[r] && this[r].getFrame()) {
				w = this[r].getFrame()[3]
			}
			var u = this._insets[r][0] + this._insets[r][2] + w;
			if (w === 0 && !x) {
				this[r].setVisible(false);
				u = 0
			} else {
				if (!this[r].getVisible()) {
					this[r].setVisible(true)
				}
			}
			if (x) {
				u = 0
			}
			if (this[r]) {
				var t = v;
				if (!x) {
					t = v.sliceVertical(u)
				}
				t.inset.apply(t, this._insets[r]);
				this[r].setFrame(t)
			}
		};
		var o = function(v, x) {
			var u = 0;
			if (this[q] && this[q].getFrame()) {
				u = this[q].getFrame()[3]
			}
			var t = this._insets[q][0] + this._insets[q][2] + u;
			if (u === 0 && !x) {
				this[q].setVisible(false);
				t = 0
			} else {
				if (!this[q].getVisible()) {
					this[q].setVisible(true)
				}
			}
			if (x) {
				t = 0
			}
			if (this[q]) {
				var w = v;
				if (!x) {
					w = v.sliceVertical(-t)
				}
				w.inset.apply(w, this._insets[q]);
				this[q].setFrame(w)
			}
		};
		var p = function(v, x) {
			var u = 0;
			if (this[s] && this[s].getFrame()) {
				u = this[s].getFrame()[3]
			}
			var t = this._insets[s][0] + this._insets[s][2] + u;
			if (u === 0 && !x) {
				this[s].setVisible(false);
				t = 0
			} else {
				if (!this[s].getVisible()) {
					this[s].setVisible(true)
				}
			}
			if (x) {
				t = 0
			}
			if (r === "content") {
				t = 0 - t
			}
			if (this[s]) {
				var w = v;
				if (!x) {
					w = v.sliceVertical(t)
				}
				w.inset.apply(w, this._insets[s]);
				this[s].setFrame(w)
			}
		};
		return {
			layoutSubviews: function($super) {
				if ($super && typeof $super === "function") {
					$super()
				}
				var u = new a(this.getFrame());
				if (u.isEmpty()) {
					NgLogD(this.classname + ": abort layoutSubviews, no-frame.");
					return
				}
				u.x = u.y = 0;
				var t;
				if (r !== "content") {
					n.apply(this, [u, false])
				} else {
					t = n
				}
				if (q !== "content") {
					o.apply(this, [u, false])
				} else {
					t = o
				}
				if (s !== "content") {
					p.apply(this, [u, false])
				} else {
					t = p
				}
				t.apply(this, [u, true])
			}
		}
	};
	var h = j.ThreeHorizontalGenerator = function(s, r, n) {
		var p = function(u, x) {
			var t = 0;
			if (this[s] && this[s].getFrame()) {
				t = this[s].getFrame()[2]
			}
			var w = this._insets[s][1] + this._insets[s][3] + t;
			if (t === 0 && !x) {
				this[s].setVisible(false);
				w = 0
			} else {
				if (!this[s].getVisible()) {
					this[s].setVisible(true)
				}
			}
			if (x) {
				w = 0
			}
			if (this[s]) {
				var v = u;
				if (!x) {
					v = u.sliceHorizontal(w)
				}
				v.inset.apply(v, this._insets[s]);
				this[s].setFrame(v)
			}
		};
		var q = function(v, x) {
			var t = 0;
			if (this[n] && this[n].getFrame()) {
				t = this[n].getFrame()[2]
			}
			var w = this._insets[n][1] + this._insets[n][3] + t;
			if (t === 0 && !x) {
				this[n].setVisible(false);
				w = 0
			} else {
				if (!this[n].getVisible()) {
					this[n].setVisible(true)
				}
			}
			if (x) {
				w = 0
			}
			if (this[n]) {
				var u = v;
				if (!x) {
					u = v.sliceHorizontal(-w)
				}
				u.inset.apply(u, this._insets[n]);
				this[n].setFrame(u)
			}
		};
		var o = function(t, x) {
			var w = 0;
			if (this[r] && this[r].getFrame()) {
				w = this[r].getFrame()[2]
			}
			var v = this._insets[r][1] + this._insets[r][3] + w;
			if (w === 0 && !x) {
				this[r].setVisible(false);
				v = 0
			} else {
				if (!this[r].getVisible()) {
					this[r].setVisible(true)
				}
			}
			if (x) {
				v = 0
			}
			if (s === "content") {
				v = 0 - v
			}
			if (this[r]) {
				var u = t;
				if (!x) {
					u = t.sliceHorizontal(v)
				}
				u.inset.apply(u, this._insets[r]);
				this[r].setFrame(u)
			}
		};
		return {
			layoutSubviews: function($super) {
				if ($super && typeof $super === "function") {
					$super()
				}
				var u = new a(this.getFrame());
				if (u.isEmpty()) {
					NgLogD(this.classname + ": abort layoutSubviews, no-frame.");
					return
				}
				u.x = u.y = 0;
				var t;
				if (s !== "content") {
					p.apply(this, [u, false])
				} else {
					t = p
				}
				if (n !== "content") {
					q.apply(this, [u, false])
				} else {
					t = q
				}
				if (r !== "content") {
					o.apply(this, [u, false])
				} else {
					t = o
				}
				t.apply(this, [u, true])
			}
		}
	};
	j.One = function($super) {
		this.logd("Layouts.One");
		if ($super && typeof $super === "function") {
			$super()
		}
		var n = new a(this.getFrame());
		if (n.isEmpty()) {
			NgLogD(this.classname + ": abort layoutSubviews, no-frame.");
			return
		}
		n.x = n.y = 0;
		if (this.content) {
			n.inset.apply(n, this._insets.content);
			this.content.setFrame(n)
		}
	};
	j.TwoSuperimposed = e("background", "content");
	j.TwoHorizontal = c("content", "accessory");
	j.TwoHorizontal_AccessoryLeft = c("accessory", "content");
	j.TwoVerticalContentSubtitle = m("content", "subtitle");
	j.TwoVerticalTitleContent = m("title", "content");
	j.ThreeHorizontal = h("leftAccessory", "content", "rightAccessory");
	(function() {
		var n;
		for (n in j) {
			if (j.hasOwnProperty(n) && typeof j[n] === "function" && n.indexOf("Generator") === -1) {
				j[n] = {
					layoutSubviews: j[n]
				}
			}
		}
	}());
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHeaderView"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHeaderView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHeaderView"] = f;
	var h = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/UI").UI;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var e = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/RegistrationHeaderView").RegistrationHeaderView;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game;
	var a = require("NGCore/Client/Device").Device;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var d = f.DisaggregatedCredentialsHeaderView = c.View.subclass({
		classname: "DisaggregatedCredentialsHeaderView",
		stepsAreaBackground: null,
		stepLabels: null,
		initialize: function($super, m) {
			$super(m);
			this.backButton = (new j()).retain();
			this.backgroundImage = (new c.Image()).retain();
			if (h.Capabilities.getPlatformOS().toLowerCase() !== "android") {
				this.addChild(this.backButton)
			}
			this.addChild(this.backgroundImage);
			this.setBackButton(false);
			var n = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/DisaggregatedRegistration").CredentialsHeader;
			n.applyTo(this);
			if (!this.getStyle()) {
				this.setStyle(new g())
			}
		},
		destroy: function($super) {
			this.navReference.release();
			this.backButton.release();
			this.backgroundImage.release();
			$super()
		},
		sizeChanged: function() {
			this.layoutSubviews()
		},
		layoutSubviews: function($super) {
			$super();
			var n = h.Capabilities.getScreenWidth();
			var q = h.Capabilities.getScreenHeight();
			var p = n / 480;
			var r = q / 800;
			var m = new c.ViewGeometry.Rect(this.getFrame());
			m.x = 0;
			m.y = 0;
			var o = {
				backRec: [5, 5, 130 * p, 60 * r]
			};
			this.backgroundImage.setImageFit(c.ViewGeometry.FitModes.Stretch);
			this.backgroundImage.setFrame(m);
			this.backButton.setFrame(o.backRec);
			this.backButton.setText(k("Back"));
			this.backButton.setImage(e.image("back_button_ios.png"));
			this.backButton.setImage(e.image("back_button_ios_down.png"), c.State.Pressed);
			this.backButton.onclick = function(s) {
				this.navReference.navController.back();
				this.setBackButton(false)
			}.bind(this)
		},
		setBackButton: function(m) {
			if (h.Capabilities.getPlatformOS().toLowerCase() !== "android") {
				this.backButton.setVisible(m)
			}
		},
		showLoginText: function(n, m) {},
		setGameIcon: function(m) {},
		showRegText: function(n, m) {},
		revealRegHeader: function(n, m) {},
		hideRegHeader: function(n, m) {}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/RegistrationRecord"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/RegistrationRecord"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/RegistrationRecord"] = e;
	var d = require("NGCore/Client/Core/Class");
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var g = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User");
	var h = require("NGCore/Client/Core/SHA1").SHA1;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var j = require("NGCore/Client/Core/Capabilities").Capabilities;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;

	function a(l) {
		this.length = (this.__value__ = l || "").length;
		this.field = null
	}
	a.prototype = new String;
	a.prototype.toString = function() {
		return this.__value__
	};
	a.prototype.toJSON = a.prototype.toString;
	a.prototype.valueOf = a.prototype.toString;
	var f = d.Class.subclass({
		classname: "RegistrationRecord",
		gamername: null,
		password: null,
		email: null,
		birthdate: null,
		gender: null,
		firstName: null,
		lastName: null,
		motto: null,
		profileImage: null,
		profileURLString: null,
		userRecord: null,
		optIn: false,
		lite: false,
		alternateGamernames: null,
		isUnderage: function() {
			var l = this.getAge();
			return (l < 14)
		},
		getAge: function() {
			if (!this.birthdate) {
				return -1
			}
			var l = new Date();
			var o = l.getYear();
			var p = l.getMonth() + 1;
			var n = this.birthdate.getYear();
			var q = this.birthdate.getMonth() + 1;
			var m = o - n;
			if (p < q) {
				m -= 1
			} else {
				if (p == q && this.birthdate.getDate() < l.getDate()) {
					m -= 1
				}
			}
			return m
		},
		createUser: function(l) {
			l = l || c.PlusRequest.noOp;
			var m = this;
			NgLogD("Creating user from registration record");
			this.testInformationForCreation(function(q) {
				if (q && q.length > 0) {
					l(q, null)
				} else {
					NgLogD("Preparing to send user registration request");
					var p = {
						password: m.password,
						password_confirmation: m.password,
						age_restricted: (m.isUnderage() ? 1 : 0)
					};
					if (!m.lite) {
						NgLogD("Populating nonlite data");
						p.gamertag = m.gamername;
						p.email = m.email.replace(/^\s+|\s+$/g, "");
						p.motto = (m.motto ? m.motto : "");
						p.first_name = m.firstName;
						p.last_name = m.lastName;
						p.birth_date = "" + m.birthdate.getFullYear() + "-" + (m.birthdate.getMonth() + 1) + "-" + m.birthdate.getDay();
						p.gender = m.gender;
						p.last_name = m.lastName;
						p.opt_in = (m.optIn ? 1 : 0);
						if (j.getDistributionName() && j.getDistributionName().length > 0) {
							p.distribution_name = j.getDistributionName()
						}
					} else {
						NgLogD("Populating lite data");
						p.lite = 1
					}
					var n = b.Session.getCurrentSession()._loginParameters();
					n.user = p;
					NgLogD("Got login data");
					var o = new c.PlusRequest();
					o.setHttpMethod("POST");
					o.setApiMethod("users");
					o.setPostBody(n);
					NgLogD("Sending registration request for user: " + JSON.stringify(n));
					o.send(function(s, t, u, r) {
						b.Session.getCurrentSession()._handleLoginResponse(s, t, u, r, function(v, w) {
							l((v ? [v] : null), w)
						})
					})
				}
			});
			return null
		},
		testBasicInformation: function(l) {
			l = l || c.PlusRequest.noOp;
			this._performTests([this.testLocalGamername, this.testLocalGamernameForIllegalNames, this.testLocalPassword, this.testRemoteGamername], l)
		},
		testInformationForCreation: function(l) {
			l = l || c.PlusRequest.noOp;
			this._performTests([this.testLocalGamername, this.testLocalGamernameForIllegalNames, this.testLocalPassword, this.testLocalEmail, this.testRemoteEmail, this.testRemoteGamername], l)
		},
		testBatchChangesForFinalization: function(l) {
			l = l || c.PlusRequest.noOp;
			this._performTests([this.testUnderageRequirements], l)
		},
		_performTests: function(o, l) {
			l = l || c.PlusRequest.noOp;
			var m = this;
			var p = [];
			var n = function(q) {
				if (q) {
					p.push(q)
				}
				if (o.length > 0) {
					var r = o.shift();
					r.call(m, n)
				} else {
					if (p.length > 0) {
						NgLogD("Registration tests errored: " + JSON.stringify(p))
					} else {
						NgLogD("Registration: No errors!")
					}
					l(p)
				}
			};
			n()
		},
		testLocalGamername: function(l) {
			l = l || c.PlusRequest.noOp;
			var m = null;
			if (!this.gamername) {
				m = new a(k("Please enter a Mobage name."))
			} else {
				if (/\s/g.test(this.gamername)) {
					m = new a(k("Oops! Mobage name must not contain spaces or tabs."))
				} else {
					if (this.gamername.length < 4) {
						m = new a(k("Oops! Mobage name must be at least 4 characters."))
					} else {
						if (this.gamername.length > 15) {
							m = new a(k("Oops! Mobage name can't be more than 15 characters."))
						}
					}
				}
			}
			if (m) {
				NgLogD("****** Setting Gamername Error Field!");
				m.field = "gamername"
			}
			l(m)
		},
		testLocalGamernameForIllegalNames: function(l) {
			l = l || c.PlusRequest.noOp;
			var m = null;
			var n = this.gamername.match(/(mobage|ngmoco)/i);
			if (n !== null) {
				m = new a("Oops! Your Mobage name can't contain \"" + n[0] + '"! ')
			}
			if (m) {
				NgLogD("****** Setting Gamername Error Field!");
				m.field = "gamername"
			}
			l(m)
		},
		testLocalPassword: function(l) {
			l = l || c.PlusRequest.noOp;
			var m = null;
			if (!this.password) {
				m = new a(k("Please enter a password."))
			} else {
				if (/\s/g.test(this.password)) {
					m = new a(k("Password must not contain spaces or tabs."))
				} else {
					if (this.password.length < 4) {
						m = new a(k("Password must be at least 4 characters."))
					} else {
						if (this.password.length > 25) {
							m = new a(k("Password can't be more than 25 characters."))
						}
					}
				}
			}
			if (m) {
				m.field = "password"
			}
			l(m)
		},
		testLocalEmail: function(l) {
			l = l || c.PlusRequest.noOp;
			var m = null;
			if (!this.email) {
				m = new a(k("Please enter an email address."))
			} else {
				if (g.User.emailAddressLooksValid(this.email) === false) {
					m = new a(k("Please enter a valid email address."))
				}
			}
			if (m) {
				m.field = "email"
			}
			l(m)
		},
		testRemoteEmail: function(l) {
			l = l || c.PlusRequest.noOp;
			if (!this.email) {
				var m = new a(k("You must enter an email address."));
				m.field = "email";
				l(m);
				return
			}
			var n = new c.PlusRequest();
			n.setApiMethod("users/validate");
			n.setPostBody({
				field: g.User.EmailAddressKey,
				value: this.email.replace(/^\s+|\s+$/g, "")
			});
			n.setHttpMethod("POST");
			n.send(function(p, q) {
				var o = null;
				if ((q && !q.success)) {
					o = new a(q.error_msg);
					o.field = "email"
				} else {
					if (p) {
						o = new a(p);
						o.field = "email"
					}
				}
				l(o)
			})
		},
		testRemoteGamername: function(l) {
			l = l || c.PlusRequest.noOp;
			if (!this.gamername) {
				var n = new a(k("Please enter a Mobage name."));
				n.field = "gamername";
				l(n);
				return
			}
			var m = this;
			var o = new c.PlusRequest();
			o.setApiMethod("users/validate");
			o.setPostBody({
				field: g.User.GamertagKey,
				value: this.gamername
			});
			o.setHttpMethod("POST");
			o.send(function(r, s) {
				m.alternateGamernames = [];
				var q = (s && s.suggestions ? s.suggestions : []);
				for (var p = 0; p < q.length; p++) {
					m.alternateGamernames.push(q[p]);
					NgLogD("name suggestions: " + q[p])
				}
				if (r || (s && !s.success)) {
					n = new a(s ? s.error_msg : r);
					n.field = "gamername"
				}
				l(n, m.alternateGamernames)
			})
		},
		testLocalAge: function(l) {
			l = l || c.PlusRequest.noOp;
			var n = null;
			if (typeof this.birthMonth === "undefined" || typeof this.birthYear === "undefined" || this.birthMonth.toString().length > 2 || this.birthYear.toString().length !== 4 || this.birthMonth === "" || this.birthYear === "" || this.birthYear < 1800 || this.birthMonth.indexOf(".") !== -1 || this.birthMonth.indexOf(",") !== -1 || this.birthYear.indexOf(".") !== -1 || this.birthYear.indexOf(",") !== -1) {
				n = new a(k("Please enter a valid birth date."));
				n.field = "birthdate"
			} else {
				if ((this.birthMonth < 1 || this.birthMonth > 12)) {
					n = new a(k("Please enter a valid birth date."));
					n.field = "birthdate"
				} else {
					var m = this.getAge();
					if (isNaN(m) || m < 2 || m > 160) {
						n = new a(k("Please enter a valid birth date."));
						n.field = "birthdate"
					} else {
						if (m < 14) {
							n = new a(k("Sorry, you must be at least 14 years old to enter Mobage."));
							n.field = "birthdate"
						}
					}
				}
			}
			l(n)
		},
		testUnderageRequirements: function(l) {
			l = l || c.PlusRequest.noOp;
			if (this.isUnderage()) {
				this.optIn = false;
				this.lastName = ""
			}
			l(null)
		}
	});
	f.createLiteUser = function(l) {
		l = l || c.PlusRequest.noOp;
		var m = new f();
		m.lite = true;
		m.password = h.b64_sha1(j.getUniqueId()).substr(0, 24);
		m.createUser(l);
		return null
	};
	e.RegistrationRecord = f;
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/DisaggregatedRegistration"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/DisaggregatedRegistration"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/DisaggregatedRegistration"] = c;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var b = e.ScaledCorners;
	var f = e.ScaledTextSize;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	e.lazyLoad(c, "RegistrationBackground", function() {
		return {
			style: {
				gradient: {
					corners: b(10),
					gradient: ["FF011E4C 1.0"],
					innerLine: "FF000000 3.0"
				}
			},
			children: {
				backgroundImage: {
					style: {
						image: d.image("credentials_sunburst.png"),
						imageFit: 6,
						imageGravity: [1, 0.5]
					}
				}
			}
		}
	});
	e.lazyLoad(c, "Title", function() {
		return {
			style: {
				textFont: e.defaultRegularFontFace,
				textSize: f(16),
				textColor: "FFFFFFFF",
				textGravity: [0, 1]
			}
		}
	});
	e.lazyLoad(c, "Description", function() {
		return {
			style: {
				textFont: e.defaultRegularFontFace,
				textSize: f(14),
				textColor: "FFFFFFFF",
				textGravity: [0, 0.5]
			}
		}
	});
	e.lazyLoad(c, "CredentialsHeader", function() {
		return {
			children: {
				backButton: a.backButton
			}
		}
	});
	e.lazyLoad(c, "InputLabel", function() {
		return {
			style: {
				textFont: e.defaultRegularFontFace,
				textSize: f(16),
				textColor: "FFFFFFFF",
				textGravity: [0, 1]
			}
		}
	});
	e.lazyLoad(c, "TermsText", function() {
		return {
			style: {
				textFont: e.defaultRegularFontFace,
				textSize: f(12),
				textColor: "FFFFFFFF",
				textGravity: [0.5, 0]
			}
		}
	});
	e.lazyLoad(c, "TermsLink", function() {
		return {
			style: {
				textFont: e.defaultRegularFontFace,
				textSize: f(12),
				textColor: "FF85CEF0",
				textGravity: [0.5, 0]
			}
		}
	});
	e.lazyLoad(c, "RegistrationStepOne", function() {
		return {
			children: {
				backgroundView: c.RegistrationBackground,
				gamernameTitle: {
					style: {
						textFont: e.defaultBoldFontFace,
						textSize: f(22),
						textColor: "FFFFFF",
						textShadow: "FF00 3.0 {0,-2}",
						textGravity: [0.5, 0.5]
					}
				},
				mobageLogo: {
					style: {
						image: d.image("mobagelogotm.png")
					}
				},
				gamernameEditText: a.textBox,
				passwordEditText: a.textBox,
				forgotPasswordButton: {
					style: {
						pressedGradient: {
							corners: b(5),
							gradient: ["40000000 0.000", "80000000 1.000"],
							outerLine: "00000000 0.0",
							innerShadow: "00000000 1.0 {0.0,-2.0}",
							insets: "{5,0,5,0}"
						},
						textFont: e.defaultRegularFontFace,
						textColor: "FF4F89D5",
						textSize: f(15),
						textGravity: [0, 0.5],
						textShadow: "00000000 1.0 {0.0,-2.0}"
					}
				},
				continueLoginButton: a.largeStandardButton,
				continueSignupButton: a.largeStandardButton,
				gamernameClickButton: a.invisibleButton,
				passwordClickButton: a.invisibleButton
			}
		}
	});
	e.lazyLoad(c, "NameTaken", function() {
		return {
			children: {
				backgroundView: c.RegistrationBackground,
				titleLabel: {
					style: {
						textFont: e.defaultBoldFontFace,
						textSize: f(20),
						textColor: "FFFFFFFF",
						textGravity: [0, 0.5]
					}
				},
				descLabel: c.Description
			}
		}
	});
	e.lazyLoad(c, "ForgotPassword", function() {
		return {
			children: {
				backgroundView: c.RegistrationBackground,
				titleLabel: {
					style: {
						textFont: e.defaultBoldFontFace,
						textSize: f(20),
						textColor: "FFFFFFFF",
						textGravity: [0, 0.5]
					}
				},
				descLabel: c.Description,
				emailLabel: c.InputLabel,
				emailEditText: a.textBox,
				sendButton: a.largeStandardButton
			}
		}
	});
	e.lazyLoad(c, "EmailConfirmation", function() {
		return {
			children: {
				backgroundView: c.RegistrationBackground,
				labelTitle: {
					style: {
						textFont: e.defaultBoldFontFace,
						textSize: f(20),
						textColor: "FFFFFFFF",
						textGravity: [0, 0.5]
					}
				},
				emailTitle: {
					style: {
						textFont: e.defaultRegularFontFace,
						textSize: f(14),
						textColor: "FFFFFFFF",
						errorTextColor: "FFFF0000",
						textGravity: [0, 1]
					}
				},
				emailEditText: a.textBox,
				_goButton: a.standardButton,
				updatesCheckBox: a.checkBox,
				updatesLabel: {
					style: {
						textFont: e.defaultRegularFontFace,
						textSize: f(14),
						textColor: "FFFFFFFF",
						textGravity: [0, 0.5]
					}
				},
				termsAndConditionsLabel1: c.TermsText,
				termsAndConditionsLabel2: c.TermsText,
				termsAndConditionsLabel3: c.TermsText,
				termsLinkButton: c.TermsLink,
				conditionsLinkButton: c.TermsLink
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedEmailConfirmation"] = function() {
	var s = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedEmailConfirmation"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedEmailConfirmation"] = s;
	var a = require("NGCore/Client/Core").Core;
	var k = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHeaderView").DisaggregatedCredentialsHeaderView;
	var r = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost;
	var l = require("NGCore/Client/Core/Analytics").Analytics;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var n = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User");
	var t = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationWebScreen").RegistrationWebScreen;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var q = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics;
	var g = k.View.subclass({
		setFrame: h.setFrame,
		sizeChanged: function() {
			if (this.controller && this.controller.sizeChanged) {
				this.controller.sizeChanged.apply(this.controller, arguments)
			}
		}
	});
	var m = s.DisaggregatedEmailConfirmation = e.subclass({
		classname: "DisaggregatedEmailConfirmation",
		_optInUpdates: true,
		_registrationRecord: null,
		_onCompleteCallback: null,
		_hasBeenLoaded: false,
		initialize: function($super, v, w) {
			$super();
			this._onCompleteCallback = v;
			this._registrationRecord = w;
			var x = 4;
			var u = 1906;
			this._registrationRecord.birthMonth = x;
			this._registrationRecord.birthYear = u;
			this._registrationRecord.birthdate = new Date(u, x - 1, 1, 0, 0, 0, 0);
			this.setView(new g());
			this._totalWidth = a.Capabilities.getScreenWidth();
			this._totalHeight = a.Capabilities.getScreenHeight()
		},
		destroy: function() {
			for (var u = 0; u < this.retainedViews.length; u++) {
				this.retainedViews[u].release()
			}
			NgLogD("DESTROY REG 1")
		},
		sizeChanged: function(v, F) {
			if (v * F) {
				this.loadView()
			}
			var E = new k.ViewGeometry.Rect(f.navController.view().getFrame());
			E.x = 0;
			E.y = 0;
			var H = E.copy();
			this.view().setFrame(E);
			var J = (16 / 480 * a.Capabilities.getScreenWidth());
			var w = (300 / 800) * E.h;
			var y = E.copy().inset(J, J, w, J);
			this.backgroundView.setFrame(y);
			H.sliceVertical(80 * (this._totalHeight / 800));
			var A = H.sliceVertical(218 / 800 * this._totalHeight);
			A = A.inset(0, 26 / 480 * this._totalWidth);
			A = A.inset(10 / 480 * this._totalWidth, 0);
			var I = A.sliceVertical(40 / 800 * this._totalHeight).inset(0, 2);
			this.labelTitle.setFrame(I);
			var C = A.sliceVertical(32 / 800 * this._totalHeight).inset(0, 2);
			this.emailTitle.setFrame(C);
			var B = A.sliceVertical((5 + 70) / 800 * this._totalHeight).inset(5 / 800 * this._totalHeight, 0);
			this.emailEditText.setFrame(B);
			var z = A.sliceVertical((5 + 50) / 800 * this._totalHeight);
			this.updatesCheckBox.setFrame(z);
			this.updatesCheckBox.setChecked(this._optInUpdates);
			this.updatesLabel.setFrame(z.x + this._totalWidth / 7, z.y, z.w, z.h);
			var D = H.sliceVertical(66 / 800 * this._totalHeight);
			D.w = 208 / 480 * this._totalWidth;
			D.x = (this._totalWidth - D.w) / 2;
			this._goButton.setFrame(D);
			H.sliceVertical(16 * (this._totalHeight / 800));
			var x = H.sliceVertical(28 / 800 * this._totalHeight);
			var u = H.sliceVertical(28 / 800 * this._totalHeight);
			var G = H.sliceVertical(28 / 800 * this._totalHeight);
			this.termsAndConditionsLabel1.setFrame(x);
			this.termsAndConditionsLabel3.setFrame(G);
			k.measureText(" " + this.termsLinkButton.getText(), -1, -1, this.termsLinkButton.getStyle().getTextFont(), this.termsLinkButton.getStyle().getTextSize(), function(K) {
				k.measureText(" " + this.termsAndConditionsLabel2.getText() + " ", -1, -1, this.termsAndConditionsLabel2.getStyle().getTextFont(), this.termsAndConditionsLabel2.getStyle().getTextSize(), function(L) {
					k.measureText(this.conditionsLinkButton.getText() + " ", -1, -1, this.conditionsLinkButton.getStyle().getTextFont(), this.conditionsLinkButton.getStyle().getTextSize(), function(P) {
						var M = K.totalWidth + L.totalWidth + P.totalWidth;
						var Q = this._totalWidth / 2 - M / 2;
						var O = Q + K.totalWidth;
						var N = O + L.totalWidth;
						this.termsLinkButton.setFrame(Q, u.y, K.totalWidth, u.h);
						this.termsAndConditionsLabel2.setFrame(O, u.y, L.totalWidth, u.h);
						this.conditionsLinkButton.setFrame(N, u.y, P.totalWidth, u.h)
					}.bind(this))
				}.bind(this))
			}.bind(this))
		},
		loadView: function($super) {
			if (this._hasBeenLoaded) {
				return
			}
			this._hasBeenLoaded = true;
			$super();
			var v = this;
			this.retainedViews = [];
			var w = function(A) {
				A.retain();
				v.retainedViews.push(A);
				return A
			};
			this.backgroundView = w(new c());
			this.labelTitle = w(new k.Label());
			this.emailTitle = w(new k.Label());
			this.emailEditText = w(new k.EditText());
			this.updatesCheckBox = w(new k.CheckBox());
			this._goButton = w(new j());
			this.updatesCheckBox = w(new k.CheckBox());
			this.updatesLabel = w(new k.Label());
			this.termsLinkButton = w(new j());
			this.conditionsLinkButton = w(new j());
			this.termsAndConditionsLabel1 = w(new k.Label());
			this.termsAndConditionsLabel2 = w(new k.Label());
			this.termsAndConditionsLabel3 = w(new k.Label());
			this.labelTitle.setText(b("One last thing!"));
			this.emailTitle.setText(b("Please confirm your email."));
			this.emailEditText.setPlaceholder(b("Enter email here"));
			this.emailEditText.onchange = function(A) {
				if (!this.emailEditText._wasModified && A.text !== "" && A.text != this.emailEditText._prepopEmail) {
					this.emailEditText._wasModified = true;
					q.logStartupFlowEvent("RegUserEnteredEmail")
				}
			}.bind(this);
			var z = a.Capabilities._getAccts();
			for (var u in z) {
				if (z[u]["com.google"]) {
					if (n.User.emailAddressLooksValid(z[u]["com.google"])) {
						q.logStartupFlowEvent("RegPrepopEmail");
						this.emailEditText._prepopEmail = z[u]["com.google"];
						this.emailEditText.setText(z[u]["com.google"]);
						break
					}
				}
			}
			this._goButton.setText(b("OK"));
			this.updatesLabel.setText(b("Get Mobage news & updates"));
			this.termsAndConditionsLabel1.setText(b('By tapping "OK", you agree to our'));
			this.termsLinkButton.setText(b("Terms of Service"));
			this.termsAndConditionsLabel2.setText(b("and"));
			this.termsAndConditionsLabel3.setText(b("and that you are at least 14 years old."));
			this.conditionsLinkButton.setText(b("Privacy Policy"));
			this.view().setFrame(k.Window.getFrame());
			var y = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/DisaggregatedRegistration").EmailConfirmation;
			y.applyTo(this);
			this.emailEditText.setInputType(k.Commands.InputType.None);
			this.emailEditText.setEnterKeyType(k.Commands.EnterKeyType.Done);
			this._goButton.onclick = function(A) {
				this._doRegStep()
			}.bind(this);
			this.updatesCheckBox.onclick = this.bind(function(A) {
				if (A.eventType == "click") {
					this._optInUpdates = !this._optInUpdates
				}
			});
			this.termsLinkButton.onclick = this.bind(function() {
				this.emailEditText.setEnabled(false);
				f.navController.pushViewController(new t("http://app.mobage.com/terms"))
			});
			this.conditionsLinkButton.onclick = this.bind(function() {
				this.emailEditText.setEnabled(false);
				f.navController.pushViewController(new t("http://app.mobage.com/privacy"))
			});
			for (var x = 0; x < this.retainedViews.length; x++) {
				this.view().addChild(this.retainedViews[x])
			}
		},
		_configureHost: function(u) {
			u.setRegHeaderEnabled(false, 0)
		},
		_unconfigureHost: function(u) {
			NgLogD("UNCONFIG REG");
			u.setIsFooterEnabled(false);
			u.setRegHeaderEnabled(false)
		},
		willPush: function($super, v) {
			var u = v.host;
			$super(v);
			if (v.host) {
				this._configureHost(v.host)
			}
		},
		didPush: function($super, u) {
			l.reportFunnelStage("DisaggregatedRegistration02", 2, "EmailConfirmation");
			q.logStartupFlowEvent("RegReachedEmailConfirmation");
			$super(u)
		},
		willReshow: function($super, u) {
			NgLogD("WILL RESHOW");
			$super(u);
			if (u.host) {
				this._configureHost(u.host)
			}
			this.emailEditText.setEnabled(true)
		},
		willHide: function($super, u) {
			NgLogD("WILL HIDE");
			$super(u);
			if (u.host) {
				this._unconfigureHost(u.host)
			}
		},
		_doRegStep: function() {
			var v = this;
			l.reportFunnelStage("DisaggregatedRegistration02", 3, "CreatingIdentity");
			q.logStartupFlowEvent("RegAttemptedCreateUser");
			this.emailEditText.setState(k.State.Normal);
			this._registrationRecord.email = this.emailEditText.getText().replace(/^\s+|\s+$/g, "");
			var u = false;
			var w;
			this._registrationRecord.testLocalEmail(function(x) {
				if (x) {
					u = true;
					v.emailEditText.setState(o.ErrorState);
					v.emailTitle.setState(o.ErrorState);
					v.emailTitle.setText(b("Please enter a valid email"));
					w = new k.Toast();
					w.setText(x);
					w.show()
				}
			});
			if (u) {
				return
			}
			if (!this.progressDialog) {
				this.progressDialog = new k.ProgressDialog();
				this.progressDialog.setText(b("Verifying..."))
			}
			this.progressDialog.show();
			this._registrationRecord.testRemoteEmail(function(x) {
				if (x) {
					NgLogD("testRemoteEmail Error:" + JSON.stringify(x));
					v.emailEditText.setState(r.UIStateError);
					var y = new k.Toast();
					y.setText(x);
					y.show();
					u = true;
					if (v.progressDialog) {
						v.progressDialog.hide();
						v.progressDialog.destroy();
						v.progressDialog = undefined
					}
				} else {
					NgLogD("EMAIL VERIFIED");
					v._registrationRecord.optIn = this._optInUpdates;
					NgLogD("Registration: Record ready to submit, record's data: " + JSON.stringify(this._registrationRecord));
					v._registrationRecord.createUser(function(C, z) {
						if (C && C.length) {
							a.Analytics.reportGameEvent("DisaggregatedRegErr", {
								errors: C
							});
							NgLogD("Registration: Errors while submitting for user creation: " + JSON.stringify(C));
							v.progressDialog.hide();
							v.progressDialog.destroy();
							v.progressDialog = undefined;
							for (var B = 0; B < C.length; B++) {
								q.logStartupFlowError("RegAttemptedCreateUser", C[B]);
								var A = new k.Toast();
								A.setText(C[B]);
								A.show()
							}
						} else {
							NgLogD("Registration: Created user successfully!");
							l.reportFunnelStage("DisaggregatedRegistration02", 4, "IdentityCreated");
							q.logStartupFlowEvent("RegUserCreated");
							v.emailEditText.setEnabled(false);
							v._waitingForGameLaunch = true;
							if (v._onCompleteCallback) {
								NgLogD("Registration: Calling _onCompleteCallback");
								v._onCompleteCallback(z.user())
							}
							if (v.progressDialog) {
								v.progressDialog.hide();
								v.progressDialog.destroy();
								v.progressDialog = undefined
							}
						}
					})
				}
			})
		}
	});
	return s
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedForgotPassword"] = function() {
	var h = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedForgotPassword"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedForgotPassword"] = h;
	var m = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/UI").UI;
	var a = d.ViewGeometry.Scale;
	var o = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var g = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHeaderView").DisaggregatedCredentialsHeaderView;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost;
	var q = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics;
	var p = d.View.subclass({
		setFrame: q.setFrame,
		sizeChanged: function() {
			if (this.controller && this.controller.sizeChanged) {
				this.controller.sizeChanged.apply(this.controller, arguments)
			}
		}
	});
	var l = h.DisaggregatedForgotPassword = k.subclass({
		classname: "DisaggregatedForgotPassword",
		_onCompleteCallback: null,
		_hasBeenLoaded: false,
		initialize: function($super, r, s) {
			$super();
			this._onCompleteCallback = r;
			this.setView(new p());
			this._disaggregatedRegistrationStepOne = s
		},
		destroy: function() {
			for (var r = 0; r < this.retainedViews.length; r++) {
				this.retainedViews[r].release()
			}
		},
		sizeChanged: function(s, B) {
			if (s * B) {
				this.loadView()
			}
			var u = m.Capabilities.getScreenWidth();
			var E = m.Capabilities.getScreenHeight();
			var t = u / 480;
			var v = E / 800;
			var w = 14;
			var z = 14;
			var C = 480 - 2 * z - 2 * w;
			var D = 28;
			var F = 480 - 2 * D - 2 * w;
			var x = 140;
			var A = 480 - 2 * x - 2 * w;
			var y = new d.ViewGeometry.Rect(f.navController.view().getFrame());
			var r = {
				backgroundViewOnBottom: y.copy().inset(350 * v, w * t, w * v, w * t),
				backgroundViewOnTop: y.copy().inset(w * v, w * t, 350 * v, w * t),
				titleLabel: [z * t, 80 * v, C * t, 40 * v],
				descLabel: [z * t, 100 * v, F * t, 120 * v],
				emailLabel: [z * t, 185 * v, C * t, 60 * v],
				emailEditText: [z * t, 250 * v, C * t, 60 * v],
				sendButton: [x * t, 330 * v, A * t, 60 * v]
			};
			this._LAYOUT_RECTS = r;
			if (this._disaggregatedRegistrationStepOne.getIsOnTop()) {
				this.backgroundView.setFrame(r.backgroundViewOnTop)
			} else {
				this.backgroundView.setFrame(r.backgroundViewOnBottom)
			}
			this.backgroundView.layoutSubviews();
			this.titleLabel.setFrame(r.titleLabel);
			this.descLabel.setFrame(r.descLabel);
			this.emailLabel.setFrame(r.emailLabel);
			this.emailEditText.setFrame(r.emailEditText);
			this.emailEditText.setInputType(d.Commands.InputType.None);
			this.emailEditText.setEnterKeyType(d.Commands.EnterKeyType.Done);
			if (!this.emailEditText.getText()) {
				this.emailEditText.setText(" ");
				this.emailEditText.setText("")
			}
			this.sendButton.setFrame(r.sendButton)
		},
		loadView: function($super) {
			if (this._hasBeenLoaded) {
				return
			}
			this._hasBeenLoaded = true;
			$super();
			var r = this;
			this.retainedViews = [];
			var s = function(v) {
				v.retain();
				r.retainedViews.push(v);
				return v
			};
			this.backgroundView = s(new e());
			this.titleLabel = new d.Label();
			this.backgroundView.addChild(this.titleLabel);
			this.descLabel = new d.Label();
			this.backgroundView.addChild(this.descLabel);
			this.emailLabel = new d.Label();
			this.backgroundView.addChild(this.emailLabel);
			this.emailEditText = new d.EditText();
			this.backgroundView.addChild(this.emailEditText);
			this.sendButton = new n();
			this.backgroundView.addChild(this.sendButton);
			this.titleLabel.setText(o("Forgot Your Password?"));
			this.descLabel.setText(o("No problem We'll send a password reset email to the address you used to create your Mobage or Plus+ account."));
			this.emailLabel.setText(o("Email Address"));
			this.sendButton.setText(o("Send"));
			this.sendButton.onclick = this.bind(function() {
				this._resetPassword()
			});
			this.view().setFrame(d.Window.getFrame());
			var u = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/DisaggregatedRegistration").ForgotPassword;
			u.applyTo(this);
			for (var t = 0; t < this.retainedViews.length; t++) {
				this.view().addChild(this.retainedViews[t])
			}
		},
		_configureHost: function(r) {
			r.setRegHeaderEnabled(false, 0)
		},
		_unconfigureHost: function(r) {
			r.setIsFooterEnabled(false);
			r.setRegHeaderEnabled(false)
		},
		willPush: function($super, s) {
			var r = s.host;
			$super(s);
			if (s.host) {
				this._configureHost(s.host)
			}
		},
		didPush: function($super, r) {
			$super(r);
			c.logStartupFlowEvent("LoginReachedForgotPassword")
		},
		willReshow: function($super, r) {
			$super(r)
		},
		willHide: function($super, r) {
			NgLogD("WILL HIDE");
			$super(r);
			if (r.host) {
				this._unconfigureHost(r.host)
			}
		},
		_resetPassword: function() {
			NgLogD("Send email clicked.");
			this._resetViewState();
			if (!this.progressDialog) {
				this.progressDialog = new d.ProgressDialog();
				this.progressDialog.setText(o("Sending request"))
			}
			this.progressDialog.show();
			var r = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest;
			r.sendPasswordResetEmailWithAddress(this.emailEditText.getText(), this.bind(function(s) {
				this.progressDialog.hide();
				this.progressDialog.destroy();
				this.progressDialog = undefined;
				NgLogD("Mobage/ForgotPassword/Plus Request response=" + JSON.stringify(s));
				if (!s) {
					var t = new d.Toast();
					t.setText(o("Email sent!"));
					t.show();
					this.navController.popViewController(this)
				} else {
					if (s.indexOf("email") != -1) {
						this.emailEditText.setState(l.UIStateError)
					}
					var u = new d.Toast();
					u.setText(s);
					u.show()
				}
			}))
		},
		_resetViewState: function() {
			this.emailEditText.setState(d.State.Normal)
		}
	});
	return h
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedNameTaken"] = function() {
	var j = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedNameTaken"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/DisaggregatedNameTaken"] = j;
	var n = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var b = e.ViewGeometry.Scale;
	var p = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHeaderView").DisaggregatedCredentialsHeaderView;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost;
	var r = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var l = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics;
	var q = e.View.subclass({
		setFrame: r.setFrame,
		sizeChanged: function() {
			if (this.controller && this.controller.sizeChanged) {
				this.controller.sizeChanged.apply(this.controller, arguments)
			}
		}
	});
	var a = j.DisaggregatedNameTaken = m.subclass({
		classname: "DisaggregatedNameTaken",
		_onCompleteCallback: null,
		_hasBeenLoaded: false,
		initialize: function($super, t, s, u) {
			$super();
			this._onCompleteCallback = t;
			this.setView(new q());
			this._totalWidth = n.Capabilities.getScreenWidth();
			this._totalHeight = n.Capabilities.getScreenHeight();
			this._suggestedNames = s.slice().reverse();
			this._disaggregatedRegistrationStepOne = u
		},
		destroy: function() {
			for (var s = 0; s < this.retainedViews.length; s++) {
				this.retainedViews[s].release()
			}
		},
		sizeChanged: function(t, D) {
			if (t * D) {
				this.loadView()
			}
			var w = n.Capabilities.getScreenWidth();
			var G = n.Capabilities.getScreenHeight();
			var v = w / 480;
			var y = G / 800;
			var A = 14;
			var C = 14;
			var E = 480 - 2 * C - 2 * A;
			var F = 28;
			var I = 480 - 2 * F - 2 * A;
			var u = 100;
			var x = 480 - 2 * u - 2 * A;
			var B = new e.ViewGeometry.Rect(g.navController.view().getFrame());
			var s = {
				backgroundView: [A * v, A * y, (480 - 2 * A) * v, 416 * y],
				titleLabel: [C * v, 75 * y, E * v, 40 * y],
				descLabel: [C * v, 80 * y, I * v, 120 * y],
				nameButtons: [
					[u * v, 180 * y, x * v, 60 * y],
					[u * v, 254 * y, x * v, 60 * y],
					[u * v, 328 * y, x * v, 60 * y]
				]
			};
			this.backgroundView.setFrame(s.backgroundView);
			this.titleLabel.setFrame(s.titleLabel);
			this.descLabel.setFrame(s.descLabel);
			for (var z = 0; z < 3; ++z) {
				if (this.nameButtons[z]) {
					this.nameButtons[z].setFrame(s.nameButtons[z])
				}
			}
		},
		loadView: function($super) {
			if (this._hasBeenLoaded) {
				return
			}
			this._hasBeenLoaded = true;
			$super();
			var s = this;
			this.retainedViews = [];
			var u = function(x) {
				x.retain();
				s.retainedViews.push(x);
				return x
			};
			this.backgroundView = u(new f());
			this.titleLabel = new e.Label();
			this.backgroundView.addChild(this.titleLabel);
			this.descLabel = new e.Label();
			this.backgroundView.addChild(this.descLabel);
			this.titleLabel.setText(p("Name Taken"));
			this.descLabel.setText(p("Looks like someone beat you to it.\nHow about one of these Mobage names."));
			this.view().setFrame(e.Window.getFrame());
			var w = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/DisaggregatedRegistration").NameTaken;
			w.applyTo(this);
			this.nameButtons = [];
			for (var t = 0; t < 3; t++) {
				(function(z) {
					var x = s._suggestedNames[z];
					if (x) {
						var y = new o();
						s.nameButtons[z] = y;
						s.backgroundView.addChild(y);
						y.setText(x);
						y.onclick = function() {
							s._disaggregatedRegistrationStepOne.applySuggestedName(x)
						};
						l.largeStandardButton.applyTo(y)
					}
				}(t))
			}
			for (var v = 0; v < this.retainedViews.length; v++) {
				this.view().addChild(this.retainedViews[v])
			}
		},
		_configureHost: function(s) {
			s.setRegHeaderEnabled(false, 0)
		},
		_unconfigureHost: function(s) {
			NgLogD("UNCONFIG REG");
			s.setIsFooterEnabled(false);
			s.setRegHeaderEnabled(false)
		},
		willPush: function($super, t) {
			var s = t.host;
			$super(t);
			if (t.host) {
				this._configureHost(t.host)
			}
		},
		didPush: function($super, s) {
			$super(s);
			d.logStartupFlowEvent("RegReachedNameTaken")
		},
		willReshow: function($super, s) {
			$super(s)
		},
		willHide: function($super, s) {
			NgLogD("WILL HIDE");
			$super(s);
			if (s.host) {
				this._unconfigureHost(s.host)
			}
		}
	});
	return j
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/RegistrationHeaderView"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/RegistrationHeaderView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/RegistrationHeaderView"] = d;
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	var f = require("NGCore/Client/UI").UI;
	var c = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		CredentialsStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Credentials")
		}
	});
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var e = d.RegistrationHeaderView = f.View.subclass({
		stepsAreaBackground: null,
		stepLabels: null,
		initialize: function($super, h) {
			$super(h);
			this.setTouchable(false);
			this.stepsAreaBackground = (new f.View()).retain();
			this.stepLabels = [];
			this.numSteps = 3;
			this._currentStep = -1;
			for (var g = 0; g < this.numSteps; g++) {
				this.stepLabels[g] = (new f.Label()).retain()
			}
		},
		destroy: function() {
			this.stepsAreaBackground.release();
			for (var g = 0; g < this.numSteps; g++) {
				this.stepLabels[g].release()
			}
		},
		setCurrentStep: function(g) {
			for (var h = 0; h < this.stepLabels.length; h++) {
				this.stepLabels[h].setState((g === h) ? f.State.Selected : f.State.Normal)
			}
			this._currentStep = g
		},
		layoutSubviews: function() {
			var g = new f.ViewGeometry.Rect(this.getFrame());
			g.x = 0;
			g.y = 0;
			var o = a.getScreenHeight();
			var k = g.copy();
			var m = k.sliceVertical(36 * (o / 800));
			var n = new f.ViewGeometry.Rect(m);
			n.inset(0, -10, -4, -10);
			m.y += 2;
			this.stepsAreaBackground.setFrame(n);
			this.addChild(this.stepsAreaBackground);
			var l = (m.w) / 3;
			var h = new f.ViewGeometry.Rect([m.x - 1, m.y, l, m.h]);
			for (var j = 0; j < this.numSteps; j++) {
				this.stepLabels[j].setFrame(h);
				this.stepLabels[j].setText(b("Step %1d", j + 1));
				h.x += l;
				this.addChild(this.stepLabels[j])
			}
		},
		setStyle: function($super, j) {
			c.CredentialsStyles;
			$super(j);
			j.defaultsFrom("social.us.registration.header");
			this.stepsAreaBackground.setAttributes(this.getStyle().props()["stepsAreaBackground"]);
			var g = this.getStyle().props()["stepHilitedGradient"];
			for (var h = 0; h < this.numSteps; h++) {
				this.stepLabels[h].setAttributes(this.getStyle().props()["stepLabel"]);
				this.stepLabels[h].setGradient(g, f.State.Selected)
			}
			this.setCurrentStep(this._currentStep)
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Credentials"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Credentials"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Credentials"] = b;
	var d = {};
	d.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var a = d.Style.ScaledCorners;
	var c = d.Style.ScaledTextSize;
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main");
	d.Style.sheet("social.us.credentials", {
		parent: "social.us.commonelements",
		title: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(22),
			textColor: "FFFFFFFF",
			textGravity: [0, 1],
			textShadow: "CC000000 1.0 {0.0,-2.0}"
		},
		inputLabel: {
			textFont: d.Style.defaultRegularFontFace,
			textSize: c(17),
			textColor: "FFFFFFFF",
			textGravity: [0, 1]
		},
		inputLabelMinor: {
			textFont: d.Style.defaultRegularFontFace,
			textSize: c(12),
			textColor: "FFBBBBBB",
			textGravity: [1, 1]
		}
	});
	d.Style.sheet("social.us.login", {
		parent: "social.us.credentials",
		subtitle: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(14),
			textColor: "FFEDEDED",
			textGravity: [0.5, 1],
			textShadow: "CC000000 1.0 {0.0,-2.0}"
		},
		forgotPwdButton: {
			gradient: {
				corners: a(6),
				gradient: ["FFA1B2C2 0.000", "FF788A99 1.000"],
				outerLine: "FF000000 2.0",
				innerLine: "44BBC7D3 2.0"
			},
			gradientPressed: {
				corners: a(6),
				gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
				outerLine: "FF000000 2.0",
				innerLine: "44FFFFFF 2.0"
			},
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(16),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		}
	});
	d.Style.sheet("social.us.forgotpassword", {
		parent: "social.us.credentials",
		subtitle: {
			textFont: d.Style.defaultRegularFontFace,
			textSize: c(14),
			textColor: "FFFFFFFF",
			textGravity: [0, 0.5]
		}
	});
	d.Style.sheet("social.us.registration", {
		parent: "social.us.credentials",
		title: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(22),
			textColor: "FFFFFFFF",
			textGravity: [0, 0.5],
			textShadow: "CC000000 1.0 {0.0,-2.0}"
		},
		stepsAreaBackground: {
			gradient: {
				gradient: ["FFA1B2C2 0.000", "FF788A99 1.000"]
			}
		},
		stepHilitedGradient: ["FFFFA0A0 0.000", "FFFF7C7C 1.000"],
		stepNormalGradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
		termsText: {
			textFont: d.Style.defaultRegularFontFace,
			textSize: c(12),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0]
		},
		termsLink: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(12),
			textColor: "FF85CEF0",
			textGravity: [0.5, 0]
		},
		updatesLabel: {
			textFont: d.Style.defaultRegularFontFace,
			textSize: c(14),
			textColor: "FFFFFFFF",
			textGravity: [0, 0.5]
		},
		genderRadioGradients: {
			normal: {
				outerShadow: "0000 0.0 {0.0,0.0}",
				insets: "{0.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 6.0 6.0",
				innerShadow: "FF7A7E80 7.0 {0.0,-4.0}",
				gradient: ["FFC7 0.000", "FFFF 1.000"]
			},
			checked: {
				outerShadow: "0000 1.0 {0.0,0.0}",
				insets: "{1.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 6.0 6.0",
				innerShadow: "FF00 0.0 {0.0,0.0}",
				gradient: ["FF73D100 0.000", "FF6FB023 1.000"]
			}
		},
		genderButtonLabel: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(14),
			textColor: "FFFFFFFF",
			textGravity: [0, 0.5]
		},
		avatarButtonFrame: {
			gradient: {
				corners: a(6),
				outerLine: "F999 2.0",
				gradient: ["F000 0.0"]
			},
			pressedGradient: {
				corners: a(6),
				outerLine: "F999 2.0",
				gradient: ["FFFF 0.0"]
			}
		},
		avatarButtonWithImage: {
			imageBorder: {
				corners: a(6),
				outerLine: "F999 2.0",
				innerLine: "6000 2.0"
			}
		},
		avatarPlaceholder: {
			gradient: {
				corners: a(6),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				innerLine: "4484C3E9 2.0"
			},
			imageBorder: {
				insets: "{6.0,6.0,6.0,6.0}"
			}
		}
	});
	d.Style.sheet("social.us.registration.header", {
		parent: "social.us.credentials",
		stepLabel: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(12),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			gradient: {
				gradient: ["3FFF 0.000"],
				outerLine: "F000 1.0"
			}
		},
		stepHilitedGradient: {
			gradient: ["FF43AA12 0.000", "FF2E8411 1.0"],
			outerLine: "F000 1.0"
		},
		stepsAreaBackground: {
			gradient: {
				corners: a(6),
				outerLine: "F000 2.0",
				gradient: ["0000 0.000"]
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsHostView"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsHostView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsHostView"] = d;
	var b = require("NGCore/Client/UI").UI;
	var a = b.ViewGeometry.Scale;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets");
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsHeaderView").CredentialsHeaderView;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/TextScaling");
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var l = d.CredentialsHostView = j.View.subclass({
		classname: "CredentialsHostView",
		backgroundView: null,
		backButton: null,
		doneButton: null,
		cancelButton: null,
		navControllerView: null,
		standardTitleViewRect: new b.ViewGeometry.Rect([0, 0, 100, 100]),
		initialize: function($super, n) {
			$super(n);
			this.backgroundView = (new b.Image()).retain();
			this.backButton = (new g()).retain();
			this.footerView = (new b.View()).retain();
			this.footerLine = (new b.View()).retain();
			this.footerLabel = (new b.Label()).retain();
			this.footerButton = (new g()).retain();
			this.credentialsHeaderView = (new h()).retain();
			this.doneButton = (new g()).retain();
			this.cancelButton = (new g()).retain()
		},
		destroy: function() {
			this.backButton.release();
			this.backgroundView.release();
			this.footerView.release();
			this.footerLine.release();
			this.footerLabel.release();
			this.footerButton.release();
			this.credentialsHeaderView.release();
			this.doneButton.release();
			this.cancelButton.release()
		},
		sizeChanged: function(F, t) {
			console.log(this.classname + " laying out in " + F + " by " + t);
			var A = new b.ViewGeometry.Rect(0, 0, F, t);
			var z = new b.ViewGeometry.Rect(0, 0, F, t);
			var n = z.sliceVertical(112 / 800 * A.h);
			var y = this.footerRect = z.sliceVertical(-104 / 800 * A.h);
			var o = this.fOutRect = this.footerRect.copy();
			o.y += o.h;
			var q = y.copy();
			q.x = -2;
			q.y = 0;
			q.w += 4;
			q.h += 2;
			this.backgroundView.setFrame(A);
			this.addChild(this.backgroundView);
			this.addChild(this.credentialsHeaderView);
			this.credentialsHeaderView.layoutSubviews();
			var r = this.footerView;
			r.setFrame(o);
			this.addChild(r);
			this.footerLine.setFrame(q);
			r.addChild(this.footerLine);
			this.navControllerView.setFrame(A);
			this.addChild(this.navControllerView);
			var E = 120 / 480;
			var s = A.w * E;
			var p = n.copy();
			var B = n.copy().sliceHorizontal(s);
			var H = 0.25 * 100;
			var D = 0.2 * 100;
			B.inset(H, D, H, D, b.Scale.Percent);
			this.backButton.setFrame(B);
			this.backButton.setText(k("Back"));
			this.cancelButton.setText(k("Cancel"));
			this.cancelButton.setFrame(B);
			this.cancelButton.setVisible(false);
			this.cancelButton.onclick = function() {
				if (this.cancelButtonCB && ((typeof this.cancelButtonCB) === "function")) {
					this.cancelButtonCB()
				}
				this.setEditMode(false)
			}.bind(this);
			var C = p.sliceHorizontal(-s);
			C.inset(D);
			this.doneButton.setFrame(C);
			this.doneButton.setText(k("Done"));
			this.doneButton.onclick = function() {
				if (this.doneButtonCB && ((typeof this.doneButtonCB) === "function")) {
					this.doneButtonCB()
				}
				this.setEditMode(false)
			}.bind(this);
			this.doneButton.setVisible(false);
			var u = y.copy();
			u.x = 0;
			u.y = 0;
			var w = u.sliceHorizontal((311 + 16) / 480 * A.w);
			this.footerLabel.setFrame(w);
			var x = 16 / 480 * A.w;
			this.footerLabel.setTextInsets(0, x, 0, x);
			r.addChild(this.footerLabel);
			if (this.footerView && this.footerView.getParent()) {
				this.footerView.setFrame(y);
				this.footerView.getParent().addChild(this.footerView)
			}
			var G = (104 - 56) / 2 / 800 * A.h;
			var v = (480 - 347 - 118) / 480 * A.w;
			u.inset(G, v);
			this.footerButton.setFrame(u);
			r.addChild(this.footerButton);
			this.setTitleViewFrame(n.copy());
			if (!this.getStyle()) {
				this.setStyle(new e())
			}
			this.footerButton.setAttributes(this.getStyle().props()["standardButton"]);
			this.footerButton.setGradient(this.getStyle().props()["standardButton"]["pressedGradient"], b.State.Pressed);
			this.footerButton.setTextScalingBehavior(f.TextMeasuredScalingBehaviors.DynamicMultiLine)
		},
		animateFooterOut: function(o) {
			if (this.footerRect.isEmpty()) {
				return
			}
			var n = this;
			if (this.footerView) {
				b.animate(function() {
					if (n.footerView) {
						n.footerView.setFrame(n.fOutRect)
					}
				}, o, function() {
					if (n.footerView) {
						n.footerView.removeFromParent()
					}
				})
			}
		},
		animateFooterIn: function(o) {
			if (this.footerRect.isEmpty()) {
				return
			}
			var n = this;
			if (this.footerView) {
				this.footerView.removeFromParent();
				this.footerView.setFrame(this.fOutRect);
				b.Window.document.addChild(this.footerView);
				b.animate(function() {
					if (n.footerView) {
						n.footerView.setFrame(n.footerRect)
					}
				}, o, function() {})
			}
		},
		setStyle: function($super, o) {
			$super(o);
			o.defaultsFrom("social.us.credentialshost");
			for (var p in o.props()) {
				if (o.props().hasOwnProperty(p) && this.hasOwnProperty(p) && this[p]) {
					this[p].setAttributes(o.props()[p])
				}
			}
			this.credentialsHeaderView.setStyle(o);
			this.backButton.setImage(c.image("back_button_ios.png"));
			this.backButton.setImage(c.image("back_button_ios_down.png"), b.State.Pressed);
			var n = e.registeredStyle("social.us.commonelements").props();
			this.doneButton.setAttributes(n.standardButton);
			this.cancelButton.setAttributes(n.standardButton)
		},
		setFooterText: function(n) {
			this.footerLabel.setText(n)
		},
		getFooterButton: function() {
			return this.footerButton
		},
		setTitleViewFrame: function(n) {
			this.standardTitleViewRect = n.copy();
			this.standardTitleImageWidth = n.w / 2
		},
		editMode: function(o, n) {
			this.cancelButtonCB = o;
			this.doneButtonCB = n;
			this.setEditMode(true)
		},
		setEditMode: function(n) {
			if (n) {
				this.backButton.setVisible(false);
				this.cancelButton.setVisible(true);
				this.doneButton.setVisible(true)
			} else {
				this.backButton.setVisible(true);
				this.cancelButton.setVisible(false);
				this.doneButton.setVisible(false)
			}
		},
		setNavControllerView: function(n) {
			this.navControllerView = n;
			this.addChild(this.navControllerView, 2)
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHostView"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHostView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHostView"] = e;
	var h = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/UI").UI;
	var a = b.ViewGeometry.Scale;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var l = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets");
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DisaggregatedCredentialsHeaderView").DisaggregatedCredentialsHeaderView;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods;
	var g = e.DisaggregatedCredentialsHostView = k.View.subclass({
		classname: "DisaggregatedCredentialsHostView",
		backgroundView: null,
		backButton: null,
		doneButton: null,
		cancelButton: null,
		navControllerView: null,
		standardTitleViewRect: new b.ViewGeometry.Rect([0, 0, 100, 100]),
		initialize: function($super, n) {
			$super(n);
			this.backgroundView = (new b.View()).retain();
			this.backButton = (new j()).retain();
			this.credentialsHeaderView = (new c()).retain();
			this.doneButton = (new j()).retain();
			this.cancelButton = (new j()).retain();
			if (h.Capabilities.getBootGame() === "") {
				this.setGradient({
					gradient: ["FF84CAFF 0.0", "FF005CBA 0.8"]
				})
			}
		},
		destroy: function() {
			this.backButton.release();
			this.backgroundView.release();
			this.credentialsHeaderView.release();
			this.doneButton.release();
			this.cancelButton.release()
		},
		setFrame: m.setFrame,
		sizeChanged: function(n, v) {
			var u = new b.ViewGeometry.Rect(this.getFrame());
			var z = u.copy();
			var w = z.sliceVertical(112 / 800 * u.h);
			var o = new b.ViewGeometry.Rect((16 / 480) * h.Capabilities.getScreenWidth(), (18 / 800) * h.Capabilities.getScreenHeight(), (448 / 480) * h.Capabilities.getScreenWidth(), (415 / 800) * h.Capabilities.getScreenHeight());
			this.backgroundView.setFrame(o);
			this.navControllerView.setFrame(u);
			this.addChild(this.navControllerView);
			var y = 120 / 480;
			var p = u.w * y;
			var x = w.copy();
			var t = w.copy().sliceHorizontal(p);
			var s = 0.25 * 100;
			var r = 0.2 * 100;
			t.inset(s, r, s, r, b.Scale.Percent);
			this.backButton.setFrame(t);
			this.backButton.setText(l("Back"));
			this.cancelButton.setText(l("Cancel"));
			this.cancelButton.setFrame(t);
			this.cancelButton.setVisible(false);
			this.cancelButton.onclick = function() {
				if (this.cancelButtonCB && ((typeof this.cancelButtonCB) === "function")) {
					this.cancelButtonCB()
				}
				this.setEditMode(false)
			}.bind(this);
			var q = x.sliceHorizontal(-p);
			q.inset(r);
			this.doneButton.setFrame(q);
			this.doneButton.setText(l("Done"));
			this.doneButton.onclick = function() {
				if (this.doneButtonCB && ((typeof this.doneButtonCB) === "function")) {
					this.doneButtonCB()
				}
				this.setEditMode(false)
			}.bind(this);
			this.doneButton.setVisible(false)
		},
		animateFooterOut: function(n) {},
		animateFooterIn: function(n) {},
		setStyle: function($super, o) {
			$super(o);
			o.defaultsFrom("social.us.dissaggregatedcredentialshost");
			for (var p in o.props()) {
				if (o.props().hasOwnProperty(p) && this.hasOwnProperty(p) && this[p]) {
					this[p].setAttributes(o.props()[p])
				}
			}
			this.credentialsHeaderView.setStyle(o);
			this.backButton.setImage(d.image("back_button_ios.png"));
			this.backButton.setImage(d.image("back_button_ios_down.png"), b.State.Pressed);
			var n = f.registeredStyle("social.us.commonelements").props();
			this.doneButton.setAttributes(n.standardButton);
			this.cancelButton.setAttributes(n.standardButton)
		},
		setFooterText: function(n) {},
		getFooterButton: function() {
			return this.footerButton
		},
		setTitleViewFrame: function(n) {
			this.standardTitleViewRect = n.copy();
			this.standardTitleImageWidth = n.w / 2
		},
		editMode: function(o, n) {
			this.cancelButtonCB = o;
			this.doneButtonCB = n;
			this.setEditMode(true)
		},
		setEditMode: function(n) {
			if (n) {
				this.backButton.setVisible(false);
				this.cancelButton.setVisible(true);
				this.doneButton.setVisible(true)
			} else {
				this.backButton.setVisible(true);
				this.cancelButton.setVisible(false);
				this.doneButton.setVisible(false)
			}
		},
		setNavControllerView: function(n) {
			this.navControllerView = n;
			this.addChild(this.navControllerView)
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsHeaderView"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsHeaderView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsHeaderView"] = c;
	var e = require("NGCore/Client/Device").Device;
	var f = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		RegistrationHeaderView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/RegistrationHeaderView").RegistrationHeaderView
		},
		Game: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game
		},
		CredentialsStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Credentials")
		}
	});
	var g = c.CredentialsHeaderView = f.View.subclass({
		stepsAreaBackground: null,
		stepLabels: null,
		initialize: function($super, h) {
			$super(h);
			this.setTouchable(false);
			this.underContainer = (new f.View()).retain();
			this.overContainer = (new f.View()).retain();
			this.titleBarView = (new f.View()).retain();
			this.mobageLogo = (new f.Image()).retain();
			this.gameIcon = (new f.Image()).retain();
			this.loginSubtitle = (new f.Label()).retain();
			this.regSubtitle = (new f.Label()).retain();
			this.regHeaderView = (new a.RegistrationHeaderView()).retain();
			this.loginSubtitle.setText(b("Connecting people through great free games."));
			this.regSubtitle.setText(b("Play great games with great people!"))
		},
		destroy: function() {
			this.underContainer.release();
			this.overContainer.release();
			this.titleBarView.release();
			this.mobageLogo.release();
			this.gameIcon.release();
			this.loginSubtitle.release();
			this.regSubtitle.release();
			this.regHeaderView.release()
		},
		layoutSubviews: function($super) {
			$super();
			var h = new f.ViewGeometry.Rect(this.getParent().getFrame());
			this.setFrame(h);
			this.underContainer.setFrame(h);
			this.overContainer.setFrame(h);
			this.addChild(this.underContainer);
			this.addChild(this.overContainer);
			var k = h.copy();
			var n = h.copy();
			var m = n.sliceVertical(65 * (h.h / 800));
			var j = 40 * (h.h / 800);
			this.titleOutRect = m.copy();
			this.titleOutRect.inset(-j - 2, -4, 0, -4);
			this.titleInRect = this.titleOutRect.copy();
			this.titleInRect.y = -2;
			this.titleBarView.setFrame(this.titleInRect);
			this.overContainer.addChild(this.titleBarView);
			k.sliceVertical(10 * (h.h / 800));
			this.logoAreaRect = (k.sliceVertical(80 * (h.h / 800)));
			this.logoAreaRect.inset(0, 10, 0, 0);
			this.gameIcon.setFrame(this.logoAreaRect);
			this.gameIcon.setImageGravity(f.ViewGeometry.Gravity.Right);
			this.mobageLogo.setFrame(this.logoAreaRect);
			this.overContainer.addChild(this.mobageLogo);
			var l = k.sliceVertical(80 * (h.h / 800));
			this.loginSubtitle.inFrame = l;
			this.loginSubtitle.preInFrame = l.copy();
			this.loginSubtitle.preInFrame.x += l.w;
			this.loginSubtitle.outFrame = l.copy();
			this.loginSubtitle.outFrame.x -= l.w;
			this.regSubtitle.inFrame = this.loginSubtitle.inFrame;
			this.regSubtitle.preInFrame = this.loginSubtitle.preInFrame;
			this.regSubtitle.outFrame = this.loginSubtitle.outFrame;
			this.loginSubtitle.setFrame(this.loginSubtitle.preInFrame);
			this.regSubtitle.setFrame(this.regSubtitle.inFrame);
			this.overContainer.addChild(this.regSubtitle);
			this.regHeaderView.setFrame(n.sliceVertical(j));
			this.regHeaderView.layoutSubviews();
			this.underContainer.addChild(this.regHeaderView)
		},
		setStyle: function($super, h) {
			$super(h);
			this.titleBarView.setAttributes(h.props()["titleBarView"]);
			this.loginSubtitle.setAttributes(h.props()["subtitle"]);
			this.regSubtitle.setAttributes(h.props()["subtitle"]);
			this.mobageLogo.setImage(d.image("mobagelogotm.png"));
			a.CredentialsStyles;
			this.regHeaderView.setStyle(a.OldStyle.registeredStyle("social.us.registration.header"))
		},
		showLoginText: function(k, h) {
			var j = this;
			j.loginSubtitle.setFrame(j.loginSubtitle.preInFrame);
			j.regSubtitle.setFrame(j.regSubtitle.inFrame);
			j.overContainer.addChild(j.loginSubtitle);
			f.animate(function() {
				j.loginSubtitle.setFrame(j.loginSubtitle.inFrame);
				j.regSubtitle.setFrame(j.regSubtitle.outFrame)
			}, k, function() {
				j.regSubtitle.removeFromParent()
			})
		},
		setGameIcon: function(h) {
			a.Game._getGameWithAndroidPackageName(h, this.bind(function(k, j) {
				NgLogD("Market app " + h + " has game " + j);
				if (!k && j) {
					NgLogD("Credentials Header imports.Game Icon url=" + j.iconURL + ", name=" + j.name);
					this.gameIcon.setImage(j.iconURL);
					this.overContainer.addChild(this.gameIcon)
				} else {
					NgLogE("Credentials Header cant find the game Icon, Err: " + k)
				}
			}))
		},
		showRegText: function(k, h) {
			var j = this;
			j.loginSubtitle.setFrame(j.loginSubtitle.inFrame);
			j.regSubtitle.setFrame(j.regSubtitle.preInFrame);
			j.overContainer.addChild(j.regSubtitle);
			NgLogD("xxx showRegText ");
			f.animate(function() {
				j.loginSubtitle.setFrame(j.loginSubtitle.outFrame);
				j.regSubtitle.setFrame(j.regSubtitle.inFrame)
			}, k, function() {
				j.loginSubtitle.removeFromParent()
			})
		},
		revealRegHeader: function(k, h) {
			if (!this.titleInRect || this.titleInRect.isEmpty()) {
				return
			}
			var j = this;
			if (this.titleBarView) {
				j.regSubtitle.setFrame(j.regSubtitle.inFrame);
				f.animate(function() {
					j.regSubtitle.setFrame(j.regSubtitle.outFrame);
					j.titleBarView.setFrame(j.titleOutRect)
				}, k, function() {})
			}
		},
		hideRegHeader: function(k, h) {
			if (!this.titleOutRect || this.titleOutRect.isEmpty()) {
				return
			}
			var j = this;
			if (this.titleBarView) {
				j.regSubtitle.setFrame(j.regSubtitle.preInFrame);
				f.animate(function() {
					j.titleBarView.setFrame(j.titleInRect);
					j.regSubtitle.setFrame(j.regSubtitle.inFrame)
				}, k, function() {})
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationWebScreen"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationWebScreen"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationWebScreen"] = b;
	var e = require("NGCore/Client/UI").UI;
	var c = e.ViewGeometry.Scale;
	var g = require("NGCore/Client/Social/_Internal/US/Assets/Localization").Localization;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost;
	var f = b.RegistrationWebScreen = a.subclass({
		classname: "RegistrationWebScreen",
		initialize: function($super, h) {
			$super();
			this._contentUrl = h
		},
		destroy: function() {
			for (var h = 0; h < this.retainedViews.length; h++) {
				this.retainedViews[h].release()
			}
		},
		loadView: function($super) {
			$super();
			var h = this;
			this.retainedViews = [];
			var j = function(k) {
				k.retain();
				h.retainedViews.push(k);
				return k
			};
			this.webView = j(new e.WebView())
		},
		_configureHost: function(h) {
			h.setIsFooterEnabled(false);
			h.setRegHeaderEnabled(true, 0)
		},
		_unconfigureHost: function(h) {
			h.setIsFooterEnabled(false);
			h.setRegHeaderEnabled(false)
		},
		willPush: function($super, l) {
			this.setView(new e.View());
			$super(l);
			var j = new e.ViewGeometry.Rect(d.navController.view().getFrame());
			var m = j.copy();
			this.view().setFrame(j);
			j.x = 0;
			j.y = 0;
			var h = require("NGCore/Client/Core/Capabilities").Capabilities;
			if (!h.getIsDisaggregated()) {
				j.sliceVertical(j.h * (160 / 800))
			}
			this.webView.setFrame(j);
			this.view().addChild(this.webView);
			this.webView.setGradient({
				gradient: ["FFFF 0.0"]
			});
			this.webView.loadUrl(this._contentUrl, {
				"Accept-Language": g.getAcceptLanguage()
			});
			for (var k = 0; k < this.retainedViews.length; k++) {
				this.view().addChild(this.retainedViews[k])
			}
			if (l.host) {
				this._configureHost(l.host)
			}
		},
		willReshow: function($super, h) {
			$super(h);
			if (h.host) {
				this._configureHost(h.host)
			}
		},
		willHide: function($super, h) {
			$super(h);
			if (h.host) {
				this._unconfigureHost(h.host)
			}
		},
		willPop: function($super, h) {
			$super(h);
			if (h.host) {
				this._unconfigureHost(h.host)
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MenuDrawer"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MenuDrawer"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MenuDrawer"] = c;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		UI: function() {
			return require("NGCore/Client/UI").UI
		},
		Device: function() {
			return require("NGCore/Client/Device").Device
		},
		UIStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		LocText: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString
		},
		Settings: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Settings").Settings
		},
		SupportWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen").SupportWebScreen
		},
		CredentialsR: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials")
		},
		ServiceHostR: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost")
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		}
	});
	var a = c.MenuDrawer = b.UI.View.subclass({
		classname: "MenuDrawer",
		initialize: function($super) {
			$super();
			this._sheet = b.UIStyle.registeredStyle("social.us.menudrawer").props();
			this.setAttributes(this._sheet.menuDrawer);
			this._mobageButtons = new Array();
			this._gameButtons = new Array();
			this.addMobageButton("support", b.Assets.image("menudrawer_support.png"), b.Assets.image("menudrawer_support_pressed.png"), "", function() {
				if (b.ServiceHostR.ServiceHost.navController) {
					if (b.ServiceHostR.ServiceHost.navController.getTopViewController().classname != "SupportWebScreen") {
						b.ServiceHostR.ServiceHost.showLoadingHelper(function() {
							b.ServiceHostR.ServiceHost.navController.pushViewController(new b.SupportWebScreen())
						})
					}
				}
			});
			this.addMobageButton("settings", b.Assets.image("menudrawer_settings.png"), b.Assets.image("menudrawer_settings_pressed.png"), b.LocText("Settings"), function() {
				if (b.ServiceHostR.ServiceHost.navController) {
					if (b.ServiceHostR.ServiceHost.navController.getTopViewController().classname != "Settings") {
						b.ServiceHostR.ServiceHost.showLoadingHelper(function() {
							var d = b.Settings.initWithJSON({
								tab: "profile"
							});
							b.ServiceHostR.ServiceHost.navController.pushViewController(d)
						})
					}
				}
			});
			this.addMobageButton("home", b.Assets.image("menudrawer_home.png"), b.Assets.image("menudrawer_home_pressed.png"), b.LocText("Home"), function() {
				if (b.ServiceHostR.ServiceHost) {
					if (b.ServiceHostR.ServiceHost.navController.getTopViewController().classname != "Home") {
						b.ServiceHostR.ServiceHost.showLoadingHelper(function() {
							b.ServiceHostR.ServiceHost.popToHome()
						})
					}
				}
			});
			this.addGameButton("home", b.Assets.image("menudrawer_home.png"), b.Assets.image("menudrawer_home_pressed.png"), b.LocText("Mobage Home"), function() {
				if (b.ServiceHostR.ServiceHost) {
					b.ServiceHostR.ServiceHost.popToHome()
				}
			})
		},
		destroy: function() {
			this._mobageButtons = new Array();
			this._gameButtons = new Array();
			if (this._retainedViews) {
				for (var d = 0; d < this._retainedViews.length; d++) {
					var e = this._retainedViews[d];
					if (e) {
						e.release()
					}
				}
			}
			this._retainedViews = new Array()
		},
		sizeChanged: function() {
			this.layoutSubviews()
		},
		retainView: function(d) {
			if (d) {
				d.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(d)
			}
			return d
		},
		addMobageButton: function(f, d, h, g, e) {
			this.addButton(this._mobageButtons, f, d, h, g, e)
		},
		addGameButton: function(f, d, h, g, e) {
			this.addButton(this._gameButtons, f, d, h, g, e)
		},
		addButton: function(k, g, d, j, h, e) {
			var f = this.retainView(new b.UnspammableButton());
			f.setAttributes(this._sheet.menuDrawerButton);
			f.setGradient(this._sheet.menuDrawerButtonPressed.gradient, b.UI.State.Pressed);
			f.setImage(d);
			f.setImage(j, b.UI.State.Pressed);
			f.setImageGravity(b.UI.ViewGeometry.Gravity.TopCenter);
			f.setText(h);
			f.setTextColor(this._sheet.menuDrawerButtonPressed.textColor, b.UI.State.Pressed);
			f.setTextGravity(b.UI.ViewGeometry.Gravity.BottomCenter);
			f.onclick = this.bind(function() {
				if (!b.ServiceHostR.ServiceHost.isMenuDrawerClosedOrClosing()) {
					b.ServiceHostR.ServiceHost.closeMenuDrawer();
					e()
				}
			});
			if (k) {
				k.splice(0, 0, {
					key: g,
					button: f
				})
			}
			this.layoutSubviews()
		},
		getMobageButtonByKey: function(d) {
			return this.getButtonByKey(this._mobageButtons, d)
		},
		getGameButtonByKey: function(d) {
			return this.getButtonByKey(this._gameButtons, d)
		},
		getButtonByKey: function(f, e) {
			for (var d = 0; d < f.length; d++) {
				if (f[d].key === e) {
					return f[d].button
				}
			}
			return null
		},
		isInMobage: function() {
			return true
		},
		isLandscape: function(d) {
			return d == b.Device.OrientationEmitter.Orientation.LandscapeLeft || d == b.Device.OrientationEmitter.Orientation.LandscapeRight
		},
		layoutSubviews: function() {
			var s = null;
			var h = null;
			if (this.isInMobage()) {
				s = this._mobageButtons;
				h = this._gameButtons;
				var l = this.getMobageButtonByKey("support");
				if (l) {
					var e = b.LocText("Support");
					if (this.isLandscape(b.Device.OrientationEmitter.getInterfaceOrientation())) {
						e = b.LocText("Support & Feedback")
					}
					l.setText(e)
				}
			} else {
				s = this._gameButtons;
				h = this._mobageButtons
			}
			if (h) {
				for (var p = 0; p < h.length; p++) {
					var q = h[p].button;
					if (q) {
						q.removeFromParent()
					}
				}
			}
			var g = this.getFrame();
			if (s && g) {
				var d = new b.UI.ViewGeometry.Rect(g);
				if (!d.isEmpty()) {
					var t = Math.floor(d.w / s.length);
					var k = d.w - (t * (s.length - 1));
					var r = this._sheet.imageHeightRatio * d.h;
					var o = this._sheet.topMarginRatio * d.h;
					var f = this._sheet.bottomMarginRatio * d.h;
					for (var n = 0; n < s.length; n++) {
						var m = s[n].button;
						if (m) {
							m.setFrame([n * t, 0, n < s.length - 1 ? t : k, d.h]);
							m.setImageInsets([o, 0, d.h - r - o, 0]);
							m.setTextInsets([o + r, 0, f, 0]);
							if (!m.getParent()) {
								this.addChild(m)
							}
						}
					}
				}
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemInfoScreen"] = function() {
	var B = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemInfoScreen"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SystemInfoScreen"] = B;
	var z = require("NGCore/Client/Core/Capabilities").Capabilities;
	var n = require("NGCore/Client/UI").UI;
	var j = n.ViewGeometry.Rect;
	var g = n.ViewGeometry.Scale;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var y = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var C = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListView").AccordionListView;
	var w = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection;
	var v = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ContactsSectionTitleView").ContactsSectionTitleView;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/SystemInfoCell").SystemInfoCell;
	var u = y.ScaledTextSize;
	var q = ["getSocialServer", "getAppReleaseVersion", "getSDKVersion", "getSDKBuildDate", "getSDKBuildHash", "getBundleIdentifier", "getBinaryVersion", "getBinaryBuildDate", "getBinaryBuildHash", "getPlatformOS", "getPlatformOSVersion", "_getBootServer", "_getBoot", "getBootGame", "getStartingServer", "getBundleServer", "getBundleGame", "getGame", "getServer", "getUrl"];
	var e = {
		SDKVersion: "SDK Version",
		SDKBuildDate: "SDK Build Date",
		SDKBuildHash: "SDK Build Hash",
		PlatformOS: "Platform OS",
		PlatformOSVersion: "Platform OS Version",
		PlatformHW: "Platform Hardware",
		OglExtensions: "OpenGL Extensions",
		SourceAppID: "Source Application ID"
	};
	var k = {};
	var s = function(E) {
		return JSON.stringify(E)
	};
	var m = function(E) {
		return function(F) {
			if (typeof F === "string") {
				return F.replace(E, E + "\n")
			}
			return F.join(",\n")
		}
	};
	var A = {
		getConfigs: s
	};
	var b;
	var D;
	var h;
	var x = 0;
	var l = 0;
	var t = B.SystemInfoScreen = d.subclass({
		classname: "SystemInfoScreen",
		$hook: function(F) {
			NgLogD("Hooking SystemInfoScreen!");
			var E = function(G) {
				if (!(F.controller.navController.getTopViewController() instanceof p.Home)) {
					return
				}
				NgLogD("ServiceHost swiped: " + G);
				switch (G) {
					case n.Commands.SwipeDirection.Left:
						x = (new Date()).getTime();
						break;
					case n.Commands.SwipeDirection.Right:
						l = (new Date()).getTime();
						break;
					default:
						break
				}
				var H = Math.abs(x - l);
				if (H < 2000) {
					NgLogD("DoubleSwipe detected! Pushing SystemInfoScreen!");
					F.controller.navController._host.showLoadingHelper(function() {
						F.controller.navController.pushViewController(t.initWithJSON())
					})
				}
			};
			F.titleBarLine.onswipe = E;
			F.mobageButton.onswipe = E
		},
		$initWithJSON: function(E) {
			return new t()
		},
		initialize: function($super) {
			$super();
			this.logd("Instantiating");
			this.setTitle(c("System Information"));
			this._data = new Object();
			var F;
			for (F in z) {
				this.logd("key: ", F);
				b(F, z, this._data)
			}
			b("_getBootServer", z, this._data);
			b("_getBoot", z, this._data);
			this.importantItems = [];
			this.optionalItems = [];
			var E;
			for (E = 0; E < q.length; E++) {
				F = q[E];
				if (this._data.hasOwnProperty(F)) {
					this.importantItems.push(new D(this._data[F]));
					this.importantItems[this.importantItems.length - 1].odd = E % 2;
					delete this._data[F]
				}
			}
			for (F in this._data) {
				if (this._data.hasOwnProperty(F)) {
					this.optionalItems.push(new D(this._data[F]));
					this.optionalItems[this.optionalItems.length - 1].odd = E % 2;
					E++
				}
			}
			delete this._data;
			return this
		},
		destroy: function() {},
		loadView: function($super) {
			$super();
			this.view().setContentView(new C());
			this.importantSection = new h();
			this.optionalSection = new h();
			this.importantSection.header.setTitle(c("Mobage Information"));
			this.optionalSection.header.setTitle(c("Additional System Details"));
			this.importantSection.setItems(this.importantItems);
			this.optionalSection.setItems(this.optionalItems)
		},
		didPush: function($super, E) {
			$super(E);
			this.navController._host.hideLoadingLabel();
			this.view().getContentView().setSections([this.importantSection, this.optionalSection])
		}
	});
	h = w.subclass({
		classname: "SystemInfoSection",
		initialize: function($super, E) {
			$super(E);
			if (!this._items) {
				this._items = []
			}
			var F = this.header = new v();
			F.setFrameSize([480, 50]);
			F.setTitle("moop.");
			this.setSectionHeader(F);
			return this
		},
		destroy: function() {}
	});
	D = f.ListViewItem.subclass({
		classname: "SystemInfoListItem",
		_reuseId: "systeminfolistitem",
		_cellProps: null,
		section: null,
		initialize: function($super, E) {
			this.key = E[0];
			this.value = E[1];
			return $super()
		},
		_onCreateView: function() {
			return new o()
		},
		_onReleaseView: function(E) {
			if (this.cell == E) {
				this.cell = null
			}
		},
		_onSetView: function(E) {
			this.cell = E;
			if (!E.keyFrameInited) {
				var F = E.content.getFrameSize();
				E.key.setFrameSize([F[0] / 5, F[1]]);
				var G = F[1] / 8;
				E.setContentInset([G, G, G, 0]);
				E.keyFrameInited = true
			}
			E.setState(n.State.Normal);
			E.layoutSubviews();
			E.key.setText(this.key);
			E.content.setText(this.value);
			E.key.setTextSize(u(13).realize());
			if (this.odd) {
				E.markOdd()
			} else {
				E.markEven()
			}
			E.content.setOnClick(this.bind(this.rowTapped))
		},
		rowTapped: function() {}
	});
	var a = /([A-Z])/g;
	var r = function(F) {
		if (F[0] === "_") {
			F = F.slice(1)
		}
		var E = F.slice(3);
		NgLogD("PreProcessedKey: " + E);
		if (E in e) {
			return e[E]
		}
		return E[0] + E.slice(1).replace(a, " $1")
	};
	b = function(F, H, E) {
		if (typeof H[F] === "function" && F.indexOf("get") === 0 && !(F in k)) {
			var G = H[F]();
			if (F in A) {
				G = A[F](G)
			}
			E[F] = [r(F), G];
			NgLogD("Loading Capabilities " + F + " (" + E[F][0] + ", " + E[F][1] + ")")
		}
	};
	return B
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GlobalDownloadingIcon"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GlobalDownloadingIcon"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GlobalDownloadingIcon"] = f;
	var j = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var l = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost");
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		GameDownloadStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameDownloadStyle")
		}
	});
	var h = f.GlobalDownloadingIcon = e.View.subclass({
		classname: "GlobalDownloadingIcon",
		initialize: function() {
			this._game = null;
			a.GameDownloadStyle;
			this._sheet = g.registeredStyle("social.us.globalgamedownloadicon").props();
			this._showing = false;
			this._lastProgress = 0;
			this._button = (new k()).retain();
			this._progressBar = (new e.ProgressBar()).retain();
			this._label = (new e.Label()).retain();
			this._label.setText(l("Updating game..."));
			this._button.onclick = function() {
				if (this._game) {
					var m = c.GameProfile.initWithJSON({
						game: this._game
					});
					b.ServiceHost.navController.pushViewController(m)
				}
			}.bind(this);
			this._progressBar.setTouchable(false);
			this._label.setTouchable(false);
			this._globalDownloadListener = new j.MessageListener();
			d.addGlobalDownloadListener(this._globalDownloadListener, this._onGlobalGameDownload.bind(this))
		},
		destroy: function() {
			d.removeGlobalDownloadListener(this._globalDownloadListener);
			this._globalDownloadListener.destroy();
			this._button.release();
			this._progressBar.release();
			this._label.release();
			if (this._game) {
				this._game.removeDownloadListener(this)
			}
		},
		_onGlobalGameDownload: function(m) {
			this._setGame(m.game)
		},
		initLayout: function() {
			var m = new e.ViewGeometry.Rect(this.getFrame());
			m.h *= 1 - this._sheet.insetFromBottomRatio;
			this._button.setGradient(this._sheet.clickableBackgroundPressedGradient, e.State.Pressed);
			this._button.setFrame([0, 0, m.w, m.h]);
			this._progressBar.setAttributes(this._sheet.progressBar);
			var o = m.h * this._sheet.progressBarHeightRatio;
			this._progressBar.setFrame([2, m.h - o, m.w - 4, o]);
			var n = m.h * this._sheet.labelHeightRatio;
			this._label.setAttributes(this._sheet.label);
			this._label.setFrame([0, m.h - n - o, m.w, n])
		},
		_setGame: function(m) {
			if ((!this._game && !m) || (this.game && m && this.game.recordID == m.recordID)) {
				return
			}
			if (this._game) {
				this._game.removeDownloadListener(this)
			}
			if (m) {
				m.addDownloadListener(this)
			}
			this._game = m;
			this._lastProgress = 0;
			this._progressBar.setProgress(0, 0);
			this.update()
		},
		update: function() {
			if (!this._progressBar || !this._label || !this._button) {
				return
			}
			if (!this._game || !this._game.isDownloading() || this._lastProgress >= 1) {
				if (this._showing) {
					this._button.removeFromParent();
					this._label.removeFromParent();
					this._progressBar.removeFromParent();
					this._showing = false
				}
			} else {
				if (!this._showing) {
					this.addChild(this._button);
					this.addChild(this._label);
					this.addChild(this._progressBar);
					this._showing = true
				}
			}
		},
		downloadStarted: function(m) {
			this._lastProgress = 0;
			this._progressBar.setProgress(0, 0);
			this.update()
		},
		downloadProgress: function(m, n, p, o) {
			this._lastProgress = n;
			if (n >= 1) {
				this.update()
			} else {
				this._progressBar.setProgress(n, n)
			}
		},
		downloadCompleted: function(m, n) {
			this._lastProgress = 1;
			this._progressBar.setProgress(1, 1);
			this.update()
		},
		downloadError: function(m, n) {
			this._lastProgress = 1;
			this._progressBar.setProgress(1, 1);
			this.update()
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/FullScreenLoader"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/FullScreenLoader"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/FullScreenLoader"] = b;
	var c = require("NGCore/Client/UI").UI;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		LayoutMethods: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutMethods").LayoutMethods
		}
	});
	b.FullScreenLoader = c.View.subclass({
		classname: "FullScreenLoader",
		initialize: function($super) {
			$super();
			this.landscapeFrame = new c.View({
				gradient: {
					gradient: ["DD000000 0.0"]
				}
			}).retain();
			this.landscapeFrame.setGradient({
				gradient: ["F000 0.0"]
			}, c.State.Selected);
			this.landscapeFrame.setVisibleInOrientations(c.Commands.OrientationFlag.Landscape);
			this.addChild(this.landscapeFrame);
			this.portraitFrame = new c.View({
				gradient: {
					gradient: ["DD000000 0.0"]
				}
			}).retain();
			this.portraitFrame.setGradient({
				gradient: ["F000 0.0"]
			}, c.State.Selected);
			this.portraitFrame.setVisibleInOrientations(c.Commands.OrientationFlag.Portrait);
			this.addChild(this.portraitFrame);
			this.landscapeSpinner = new c.Spinner().retain();
			this.landscapeFrame.addChild(this.landscapeSpinner);
			this.portraitSpinner = new c.Spinner().retain();
			this.portraitFrame.addChild(this.portraitSpinner);
			this.layout(c.Window.getWidth(), c.Window.getHeight());
			a.LayoutMethods.createLayoutListener(this, this.layoutEventHandler)
		},
		setOpaque: function(d) {
			this.landscapeFrame.setState(d ? c.State.Selected : c.State.Normal);
			this.portraitFrame.setState(d ? c.State.Selected : c.State.Normal)
		},
		destroy: function($super) {
			this.spinner.release();
			$super()
		},
		layout: function(h, d) {
			var g = Math.max(c.Window.getWidth(), c.Window.getHeight());
			var e = Math.min(c.Window.getWidth(), c.Window.getHeight());
			this.setFrame([0, 0, g, g]);
			this.landscapeFrame.setFrame([0, 0, g, e]);
			this.portraitFrame.setFrame([0, 0, e, g]);
			var f = 0.075 * g;
			this.landscapeSpinner.setFrame([(g - f) / 2, (e - f) / 2, f, f]);
			this.portraitSpinner.setFrame([(e - f) / 2, (g - f) / 2, f, f])
		},
		layoutEventHandler: function(d) {
			console.log("Layout Event!", d);
			this.layout(d.width, d.height)
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Settings"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Settings"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/Settings"] = a;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController").MobageVerticalTabController;
	var b = (require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations).Settings = a.Settings = c.subclass({
		classname: "Settings",
		editProfileController: null,
		accountSettingsController: null,
		passwordController: null,
		initialize: function($super, f) {
			$super();
			var e = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ProfileSettingsController").ProfileSettingsController;
			var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccountSettingsController").AccountSettingsController;
			var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/PasswordController").PasswordController;
			this.editProfileController = (new e()).retain();
			this.accountSettingsController = (new d()).retain();
			this.passwordController = (new g()).retain();
			this.tabToSelect = f;
			return this
		},
		$initWithJSON: function(e) {
			var d = null;
			if (e.tab) {
				d = e.tab
			}
			return new b(d)
		},
		onJSON: function(d) {
			if (d.tab) {
				if (d.tab == "password") {
					this.selectTabAtIndex(2)
				} else {
					if (d.tab == "account") {
						this.selectTabAtIndex(1)
					} else {
						this.selectTabAtIndex(0)
					}
				}
			}
			return null
		},
		loadView: function($super) {
			$super();
			NgLogD("Settings: loadView");
			this.batchChangeMode = true;
			var f = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
			var e = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
			this.addTabWithTextImageAndContent(e("Edit Profile"), f.image("settings_tabbadge_profile.png"), this.editProfileController.view());
			var d = e("Account Settings");
			if (d == "Account-Einstellungen") {
				d = "Account-\nEinstellungen"
			}
			this.addTabWithTextImageAndContent(d, f.image("settings_tabbadge_account.png"), this.accountSettingsController.view());
			this.addTabWithTextImageAndContent(e("Change Password"), f.image("settings_tabbadge_password.png"), this.passwordController.view());
			this.addJumpWithTitleAndCallback(e("My Page"), function() {
				var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost");
				g.ServiceHost.showLoadingHelper(function() {
					NgLogD("My Page Button Clicked.");
					var h = (require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations).MyPage.initWithJSON({
						tab: "profile"
					});
					g.ServiceHost.navController.pushViewController(h, this)
				}.bind(this))
			});
			this.batchChangeMode = false;
			NgLogD("Settings: loadView finished.")
		},
		destroy: function() {
			NgLogD("Settings: destroy");
			if (this.editProfileController !== null) {
				this.editProfileController.release();
				this.editProfileController = null
			}
			if (this.accountSettingsController !== null) {
				this.accountSettingsController.release();
				this.accountSettingsController = null
			}
			if (this.passwordController !== null) {
				this.passwordController.release();
				this.passwordController = null
			}
		},
		selectTabByView: function($super, d) {
			$super(d)
		},
		willPush: function($super, d) {
			$super(d);
			if (this.tabToSelect == "password") {
				this.selectTabAtIndex(2)
			} else {
				if (this.tabToSelect == "account") {
					this.selectTabAtIndex(1)
				} else {
					this.selectTabAtIndex(0)
				}
			}
			return
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen"] = d;
	var h = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/UI").UI;
	var b = c.ViewGeometry.Scale;
	var f = require("NGCore/Client/Social/_Internal/US/Assets/Localization").Localization;
	var j = require("NGCore/Client/Core/Analytics").Analytics;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var g = d.SupportWebScreen = e.subclass({
		classname: "SupportWebScreen",
		initialize: function($super, k) {
			$super();
			if (k && k !== "") {
				this._contentUrl = k
			} else {
				this._contentUrl = this.createDefaultURL()
			}
			NgLogD("SupportWebScreen: url = " + this._contentUrl);
			this._totalWidth = h.Capabilities.getScreenHeight();
			this._totalHeight = h.Capabilities.getScreenWidth()
		},
		destroy: function() {
			if (this._retainedViews) {
				for (var k = 0; k < this._retainedViews.length; k++) {
					var l = this._retainedViews[k];
					if (l) {
						l.release()
					}
				}
			}
			this._retainedViews = new Array()
		},
		retainView: function(k) {
			if (k) {
				k.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(k)
			}
			return k
		},
		loadView: function($super) {
			$super();
			var k = new c.ViewGeometry.Rect([0, 0, this._totalWidth, this._totalHeight]);
			k.sliceVertical(13.75, c.Scale.Percent);
			k.y += 2;
			k.h -= 2;
			this.webView = this.retainView(new c.WebView());
			this.webView.setFrame(k);
			this.webView.setGradient({
				gradient: ["FFFF 0.0"]
			});
			this.webView.loadUrl(this._contentUrl, {
				"Accept-Language": f.getAcceptLanguage()
			});
			this.view().addChild(this.webView)
		},
		willPush: function($super, l) {
			if (typeof $super === "function") {
				$super(l)
			}
			var k;
			if (this.navController && this.navController.getTopViewController && (k = this.navController.getTopViewController())) {
				j.reportNavigation((k.classname || "UNKNOWN"), this.classname)
			}
		},
		didPush: function($super, k) {
			if (typeof $super === "function") {
				$super(k)
			}
			this.navController._host.hideLoadingLabel()
		},
		createDefaultURL: function() {
			var l = "";
			var r = "";
			var t = "";
			var m = "";
			var k = a.Session.getCurrentSession();
			if (k) {
				var p = k.user();
				if (p) {
					l = p.gamertag;
					r = p.emailAddress
				}
				t = k.appKey();
				m = k.appVersion()
			}
			var q = h.Capabilities.getSDKVersion();
			var s = h.Capabilities.getUniqueId();
			var n = h.Capabilities.getDeviceName();
			var u = h.Capabilities.getPlatformOS() + h.Capabilities.getPlatformOSVersion();
			var o = "http://support.mobage.com/home_mob?gamertag=" + encodeURIComponent(l) + "&email=" + encodeURIComponent(r) + "&game=" + encodeURIComponent(t) + "&game_version=" + encodeURIComponent(m) + "&device_id=" + encodeURIComponent(s) + "&device_type=" + encodeURIComponent(n) + "&device_os=" + encodeURIComponent(u) + "&sdk_version=" + encodeURIComponent(q);
			return o
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController"] = function() {
	var k = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/MobageVerticalTabController"] = k;
	var f = require("NGCore/Client/UI").UI;
	var o = require("NGCore/Client/Core").Core;
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = f.ViewGeometry.Rect;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/VerticalTabController").VerticalTabController;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ButtonLibrary").ButtonLibrary;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var r = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var q = r.Component;
	var n = r.ComponentInheritForKey;
	var h = r.Components;
	var g = r.ACCESSOR_PASSTHROUGH;
	var a = k.MobageTabButton = f.CellView.subclass({
		classname: "MobageTabButton",
		initialize: function($super, t, s) {
			$super(t);
			var u = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").TabButton;
			this._sizing = u.extras;
			this._hasNumber = s;
			this._leftImageWidth = null;
			this._rightImageWidth = null;
			if (this._hasNumber) {
				this.rightAccessory = (new f.Label()).retain();
				this.addChild(this.rightAccessory)
			}
			u.applyTo(this);
			this.setImageGravity([0, 0.5]);
			this.setTextGravity([0, 0.5]);
			return this
		},
		destroy: function() {
			if (this.rightAccessory) {
				this.rightAccessory.release()
			}
		},
		layoutSubviews: function($super) {
			var x = new d(this.getFrame());
			if (!x || x.isEmpty() || !this.getParent() || !this.getParent().getFrame()) {
				this.logd("layoutSubviews inputs not ready.");
				return
			}
			if (!this._leftImageWidth) {
				this._leftImageWidth = this._sizing.leftImageWidthRatio * x.w
			}
			if (!this._rightImageWidth) {
				this._rightImageWidth = this._sizing.rightImageWidthRatio * x.w
			}
			var w = this._leftImageWidth;
			var u = this._rightImageWidth;
			var z = this._sizing.leftImageInsetRatio * x.h;
			var y = this._sizing.rightImageInsetRatio * x.h;
			var s = this._sizing.leftTextSpacingRatio * x.h;
			var t = this._sizing.rightTextSpacingRatio * x.h;
			var v = this._sizing.numberRightTextSpacingRatio * x.h;
			this._setLeftImageFrame([(z * 2 / 3), z, w, x.h - z * 2]);
			if (this._hasNumber) {
				this.rightAccessory.setFrame([this._frame[2] - u, 0, u, x.h])
			}
			var A = x.w - w - u;
			if (this._fixedContentWidth === undefined) {
				this._fixedContentWidth = A - s - t
			}
			t = A - s - this._fixedContentWidth;
			if (this.rightAccessory) {
				this.rightAccessory.setTextInsets([y, v, y, 0]);
				this.rightAccessory.setTextGravity([1, 0.5])
			}
			this.setTextInsets([(-1 / 2) * this._frame[3], -y, 0, -z])
		},
		getHeightRatio: function() {
			return this._sizing.heightRatio
		},
		_setLeftImageFrame: function(s) {
			this._leftImageFrame = new d(s);
			var t = [this._leftImageFrame.y, 0, this._leftImageFrame.y, this._leftImageFrame.x];
			this.setImageInsets(t)
		},
		_getLeftImageFrame: function() {
			return this._leftImageFrame
		},
		_setRightImageFrame: function(s) {
			this._rightImageFrame = new d(s);
			var t = [this._rightImageFrame.y, this._frame[2] - this.rightImageFrame.w - this._rightImageFrame.x, this._frame[3] - this._rightImageFrame.h - this._rightImageFrame.y, 32 - this._rightImageFrame.x];
			this.setRightImageInsets(t)
		},
		_getRightImageFrame: function() {
			return this._rightImageFrame
		},
		setSelected: function(s) {
			if (s) {
				this.setState(f.State.Selected);
				this.setTouchable(false)
			} else {
				this.setState(f.State.Normal);
				this.setTouchable(true)
			}
		},
		sizeChanged: function() {
			this.layoutSubviews()
		}
	});
	var c = k.MobageJumpButton = b({
		key: "background",
		component: h.View
	}, {
		key: "content",
		component: q(h.Button, n(h.ImageLabel, "accessory"), {
			initializeViewWithKey: function(s) {
				this[s] = (new p.Label_ImageLabelButton()).retain()
			},
			getAccessoryInset: g,
			setAccessoryInset: g,
			getContentInset: g,
			setContentInset: g
		}),
		disableViewAccessorRemapping: true
	}, h.AddOrders.TwoSuperimposed, {
		classname: "MobageJumpButton",
		initialize: function($super, s) {
			$super(s);
			var t = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").JumpButton;
			this._options = t.extras;
			t.applyTo(this);
			this.content.accessory.setImage(j.image("mobageverticaltab_jumpbutton_arrowright.png"));
			this.showCaret();
			this._rightImageWidthMultiplier = 1;
			return this
		},
		showCaret: function() {
			this._caretMode = true;
			if (this.content.getFrame()) {
				this.layoutSubviews()
			}
		},
		showCustomAccessoryImage: function(s) {
			this._caretMode = false;
			this.content.accessory.setImage(s);
			if (this.content.getFrame()) {
				this.layoutSubviews()
			}
		},
		layoutSubviews: function($super) {
			var w = new d(this.getFrame());
			if (!w || w.isEmpty()) {
				this.logd("layoutSubviews inputs not ready.");
				return
			}
			var v = o.Capabilities.getScreenHeight() / 800;
			var u = (this._options.insetRatio * w.h) * v;
			var t = (this._options.leftTextSpacingRatio * w.h) * v;
			this.setContentInset([u * 3, u, 0, 0]);
			this.getContentView().setContentInset([0, t, 0, t]);
			if (this.content.accessory.getImage()) {
				var x = this._options.rightImageWidthRatio * w.w * this._rightImageWidthMultiplier;
				this.content.accessory.setFrameSize([x, w.h])
			}
			var s = this._options.rightImageInsetRatio * w.h;
			if (this._caretMode) {
				this.content.setAccessoryInset([s * 2, s, s * 2, 0])
			} else {
				this.content.setAccessoryInset([s, s, s, 0])
			}
			this.content.accessory.setTextInsets([0, 0, 0, s]);
			this.content.layoutSubviews();
			h.Layouts.TwoSuperimposed.layoutSubviews.call(this, $super)
		}
	});
	var m = k.MobageVerticalTabController = e.subclass({
		classname: "MobageVerticalTabController",
		initialize: function() {},
		addTabWithTextImageAndContent: function(x, v, u, s) {
			this.logd("addTabWithTextImageAndContent: " + x);
			var t = this;
			if (u.controller && u.controller.parentController != undefined) {
				u.controller.parentController = this
			}
			var w = new Object({
				tabView: null,
				contentView: u
			});
			if (s == undefined) {
				s = false
			}
			w.tabView = (new a(undefined, s)).retain();
			w.tabView.onclick = function() {
				NgLogD("Tab Clicked (" + w.tabView.getText() + ")");
				t.selectTabByView(w.tabView, true)
			};
			var y = new f.ViewGeometry.Rect(0, 0, 20, 20);
			w.tabView.setFrame(y);
			if (x) {
				w.tabView.setText(x)
			}
			if (v) {
				w.tabView.setImage(v)
			}
			if (s) {
				w.tabView.rightAccessory.setText("")
			}
			return this.addTabPair(w)
		},
		addTabWithTextAndContent: function(t, s) {
			return this.addTabWithTextImageAndContent(t, null, s)
		},
		addJumpWithTitleAndCallback: function(w, x) {
			var t = this;
			var v = new Object({
				isJumpButton: true,
				tabView: null
			});
			var u = o.Capabilities.getScreenHeight() / 800;
			var s = new f.ViewGeometry.Rect(0, 0, 200, 84 * u);
			v.tabView = (new c()).retain();
			v.tabView.setFrame(s);
			v.tabView.content.setOnClick(x);
			v.tabView.content.content.setText(w);
			return this.addTabPair(v)
		},
		destroy: function($super) {
			$super()
		}
	});
	return k
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ProfileSettingsController"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ProfileSettingsController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ProfileSettingsController"] = c;
	var g = require("NGCore/Client/Core").Core;
	var f = require("NGCore/Client/UI").UI;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		ViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		SupportWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen").SupportWebScreen
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		ProfileSettingsView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ProfileSettingsView").ProfileSettingsView
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var e = c.ProfileSettingsController = d.subclass({
		classname: "ProfileSettingsController",
		analyticsName: "EditProfile",
		_isLastNameChanged: false,
		_isFirstNameChanged: false,
		_isMottoChanged: false,
		initialize: function() {
			var h = b.Session.getCurrentSession();
			this._user = h.user();
			this._commonElements = b.CommonElements
		},
		loadView: function($super) {
			this.setView(new b.ProfileSettingsView());
			if (typeof $super == "function") {
				$super()
			}
			this.view()._headerHeightRatio = 0
		},
		didActivateTab: function($super, h) {
			if (typeof $super == "function") {
				$super(h)
			}
			this.parentController.navController._host.hideLoadingLabel()
		},
		_validateLastName: function() {
			return true
		},
		_validateFirstName: function() {
			return true
		},
		startProgress: function() {
			this._setSaveButtonState(false, a("Saving..."));
			this.view()._firstNameEdit.setState(f.State.Disabled);
			this.view()._lastNameEdit.setState(f.State.Disabled);
			this.view()._editMotto.setState(f.State.Disabled)
		},
		stopProgress: function() {
			if (this._loadingProgess) {
				this._loadingProgess.hide();
				this._loadingProgess.release();
				this._loadingProgess = undefined
			}
			this._setSaveButtonState(true, a("Save"));
			this.view()._firstNameEdit.setState(f.State.Normal);
			this.view()._lastNameEdit.setState(f.State.Normal);
			this.view()._editMotto.setState(f.State.Normal)
		},
		firstNameEditOnFocus: function() {
			this._isFirstNameChanged = true
		},
		lastNameEditOnFocus: function() {
			this._isLastNameChanged = true
		},
		editMottoOnFocus: function() {
			this._isMottoChanged = true;
			this.view()._editMottoText = this.view()._editMotto.getText();
			this.parentController.navController._host.editMode(this.cancelCB, this.doneCB)
		},
		cancelCB: function() {
			this.view()._editMotto.setEnabled(false);
			this.view()._editMotto.setEnabled(true);
			this.view()._editMotto.setText(this._editMottoText)
		},
		doneCB: function() {
			this.view()._editMotto.setEnabled(false);
			this.view()._editMotto.setEnabled(true)
		},
		_setSaveButtonState: function(j, h) {
			if (j) {
				this.view()._buttonSaveChanges.setState(f.State.Normal);
				this._commonElements.standardButton.applyTo(this.view()._buttonSaveChanges)
			} else {
				this.view()._buttonSaveChanges.setState(f.State.Disabled);
				this._commonElements.disabledButton.applyTo(this.view()._buttonSaveChanges)
			}
			if (typeof h == "string") {
				this.view()._buttonSaveChanges.setText(h)
			}
		},
		buttonSupportOnClick: function() {
			if (b.ServiceHost.navController) {
				b.ServiceHost.navController.pushViewController(new b.SupportWebScreen())
			}
		},
		buttonSaveChangesOnClick: function() {
			this.view()._firstNameEdit.setState(f.State.Normal);
			this.view()._lastNameEdit.setState(f.State.Normal);
			this.view()._editMotto.setState(f.State.Normal);
			if (!this._validateLastName()) {
				this.view()._lastNameEdit.setState(b.ViewController.UIStateError);
				return
			}
			if (!this._validateFirstName()) {
				this.view()._firstNameEdit.setState(b.ViewController.UIStateError);
				return
			}
			var h = 0;
			var k = false;
			var j = null;
			var l = 0;
			var m = this.bind(function(n) {
				if (h === 3) {
					this.stopProgress();
					if (k) {
						this.view()._alertDialog.setChoices([a("OK")]);
						this.view()._alertDialog.setTitle(a("Unable to Save"));
						if (j) {
							if (j.length > 0 && j[j.length - 1] != ".") {
								j += "."
							}
							this.view()._alertDialog.setText(a("%1s\nSorry, we weren't able to save changes. Please try again later.", j))
						} else {
							this.view()._alertDialog.setText(a("Sorry, we weren't able to save changes. Please try again later."))
						}
						var o = this;
						this.view()._alertDialog.onchoice = function() {
							o._setSaveButtonState(true, a("Save"))
						};
						this.view()._alertDialog.show()
					} else {
						this._setSaveButtonState(false, a("Saved!"));
						setTimeout(this.bind(function() {
							this._setSaveButtonState(true, a("Save"))
						}), 2000)
					}
					return
				}
			});
			if (this._isFirstNameChanged) {
				this.startProgress();
				this._user.setFirstName(this.view()._firstNameEdit.getText(), (function(n, o) {
					h = h + 1;
					if (n) {
						k = true;
						j = n;
						this.view()._firstNameEdit.setState(b.ViewController.UIStateError);
						m(n);
						return
					}
					m()
				}).bind(this))
			} else {
				h = h + 1
			}
			if (this._isLastNameChanged) {
				this.startProgress();
				this._user.setLastName(this.view()._lastNameEdit.getText(), (function(n, o) {
					h = h + 1;
					if (n) {
						k = true;
						j = n;
						this.view()._lastNameEdit.setState(b.ViewController.UIStateError);
						m(n);
						return
					}
					m()
				}).bind(this))
			} else {
				h = h + 1
			}
			if (this._isMottoChanged) {
				this.startProgress();
				this._user.setMotto(this.view()._editMotto.getText(), (function(n, o) {
					h = h + 1;
					if (n) {
						k = true;
						j = n;
						this.view()._editMotto.setState(b.ViewController.UIStateError);
						m(n);
						return
					}
					m()
				}).bind(this))
			} else {
				h = h + 1
			}
		},
		_showErr: function(h) {
			this.view()._alertDialog.setTitle(a("Unable to Save"));
			this.view()._alertDialog.setText(a("Sorry, we weren't able to save changes. Please try again later."));
			this.view()._alertDialog.setChoices([a("OK")]);
			this.view()._alertDialog.errDialog.show();
			return
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/PasswordController"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/PasswordController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/PasswordController"] = c;
	var g = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		MobageStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		PlusRequest: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest
		},
		SupportWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen").SupportWebScreen
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		PasswordView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PasswordView").PasswordView
		},
		LargeActionButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Password").LargeActionButton
		}
	});
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var f = c.PasswordController = d.subclass({
		classname: "PasswordController",
		analyticsName: "ChangePassword",
		_currentPage: 0,
		_CHANGE_PASSWORD: 1,
		_FORGOT_PASSWORD: 2,
		initialize: function() {
			var h = b.Session.getCurrentSession();
			this._user = h.user();
			this._currentPage = this._CHANGE_PASSWORD
		},
		loadView: function($super) {
			this.setView(new b.PasswordView());
			$super();
			this.view()._headerHeightRatio = 0
		},
		destroy: function() {},
		didActivateTab: function($super, h) {
			$super(h);
			this.parentController.navController._host.hideLoadingLabel();
			this._changeContent(this._CHANGE_PASSWORD)
		},
		_changeContent: function(h) {
			if (this._currentPage == h) {
				return
			}
			if (h == this._CHANGE_PASSWORD) {
				this.view().showChangePass()
			} else {
				if (h == this._FORGOT_PASSWORD) {
					this.view().showForgotPass()
				}
			}
			this._currentPage = h
		},
		_setControlError: function(h) {
			h.setState(b.MobageStyle.ErrorState)
		},
		_setControlNormal: function(h) {
			h.setState(e.State.Normal)
		},
		buttonSavePasswordOnClick: function() {
			this._setControlNormal(this.view()._editCurrPassword);
			this._setControlNormal(this.view()._editNewPassword);
			this._setControlNormal(this.view()._editReEnterPassword);
			var h = this.view()._editCurrPassword.getText();
			if ((!h) || (h.length <= 0)) {
				this._showErr(a("Please enter Current Password."));
				this._setControlError(this.view()._editCurrPassword);
				return
			}
			if (!this._validatePassword(this.view()._editNewPassword.getText(), a("New Password"))) {
				this._setControlError(this.view()._editNewPassword);
				return
			}
			if (!this._validatePassword(this.view()._editReEnterPassword.getText(), a("Re-enter Password"))) {
				this._setControlError(this.view()._editReEnterPassword);
				return
			}
			if (this.view()._editReEnterPassword.getText() !== this.view()._editNewPassword.getText()) {
				this._setControlError(this.view()._editNewPassword);
				this._setControlError(this.view()._editReEnterPassword);
				this._showErr(a("New passwords do not match."));
				return
			}
			this._user.updatePassword(this.view()._editCurrPassword.getText(), this.view()._editNewPassword.getText(), this.view()._editReEnterPassword.getText(), (function(k, l) {
				var j = null;
				if (k) {
					if (k.indexOf("password_invalid") !== -1) {
						k = a("Wrong password.");
						this._setControlError(this.view()._editCurrPassword)
					}
					this._showErr(k);
					this.view()._buttonSavePassword.setText(a("Error"));
					this.view()._buttonSavePassword.setState(e.State.Disabled);
					b.LargeActionButton.applyTo(this.view()._buttonSavePassword)
				} else {
					this.view()._buttonSavePassword.setText(a("Saved!"));
					this.view()._buttonSavePassword.setState(e.State.Disabled);
					b.LargeActionButton.applyTo(this.view()._buttonSavePassword)
				}
				setTimeout(this.bind(function() {
					this.view()._buttonSavePassword.setText(a("Save"));
					this.view()._buttonSavePassword.setState(e.State.Normal);
					b.CommonElements.standardButton.applyTo(this.view()._buttonSavePassword)
				}), 2000)
			}).bind(this));
			this.view()._buttonSavePassword.setState(e.State.Disabled);
			this.view()._buttonSavePassword.setText(a("Saving..."));
			b.CommonElements.disabledButton.applyTo(this.view()._buttonSavePassword)
		},
		_validatePassword: function(h, j) {
			if (h.length < 4) {
				this._showErr(a("Password must be at least 4 characters."));
				return false
			}
			if (h.length > 15) {
				this._showErr(a("Password can't be more than 15 characters."));
				return false
			}
			if (h.indexOf(" ") >= 0) {
				this._showErr(a("Password cannot contain spaces."));
				return false
			}
			return true
		},
		_showErr: function(h) {
			this.view()._toast.setText(h);
			this.view()._toast.show()
		},
		buttonForgotPasswordOnClick: function() {
			this._changeContent(this._FORGOT_PASSWORD)
		},
		buttonSendEmailOnClick: function() {
			if (this.view()._editEmailAddress.getText() !== "") {
				this.view()._progressDialog.show()
			}
			b.PlusRequest.sendPasswordResetEmailWithAddress(this.view()._editEmailAddress.getText(), this.bind(function(h) {
				this.view()._progressDialog.hide();
				NgLogD("Mobage/ForgotPassword/Plus Request response=" + JSON.stringify(h));
				if (!h) {
					this.view()._toast.setText(a("Email sent!"));
					this.view()._toast.show();
					this.parentController.navController.back();
					if (this._onCompleteCallback) {
						this._onCompleteCallback()
					}
					if (this.view()._editEmailAddress) {
						this.view()._editEmailAddress.setText("")
					}
				} else {
					if (h.indexOf("email") != -1) {
						this.view()._editEmailAddress.setState(b.MobageStyle.ErrorState)
					}
					this._showErr(h)
				}
			}))
		},
		buttonSupportOnClick: function() {
			b.ServiceHost.showLoadingHelper(function() {
				b.ServiceHost.navController.pushViewController(new b.SupportWebScreen())
			}).bind(this)
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ButtonLibrary"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ButtonLibrary"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ButtonLibrary"] = c;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents").Components;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeButton").CompositeButton;
	var a = c.ButtonLibrary = {};
	var d = function(g, h) {
		a.__defineGetter__(g, function() {
			NgLogD("ButtonLibrary: Delayed Class Generation of " + g);
			delete this[g];
			return this[g] = h()
		})
	};
	d("Label_ImageLabelButton", function() {
		return f({
			key: "content",
			component: b.Label
		}, {
			key: "accessory",
			component: b.ImageLabel
		}, b.Layouts.TwoHorizontal, b.AddOrders.TwoHorizontal, {
			classname: "ButtonLibrary_Label_ImageLabelButton"
		}, e)
	});
	(function() {
		var g;
		NgLogD("ButtonLibrary initialized. Available Buttons:");
		for (g in a) {
			if (a.hasOwnProperty(g)) {
				NgLogD("\t" + g)
			}
		}
	}());
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = d.ScaledCorners;
	var e = d.ScaledTextSize;
	d.lazyLoad(c, "TabButton", function() {
		return {
			style: {
				gradient: {
					innerLine: "19FFFFFF 1.0",
					innerShadow: "6600 0.0 {0.0,2.0}",
					gradient: ["FF0B4B93 0.0", "FF0A3F7C 1.0"],
					corners: a(6, 0, 0, 6)
				},
				selectedGradient: {
					innerShadow: "6600 0.0 {0.0,2.0}",
					gradient: ["FF1B61A3 0.0", "FF2976BB 1.0"],
					corners: a(6, 0, 0, 6)
				},
				pressedGradient: {
					innerLine: "33000000 1.0",
					innerShadow: "6600 0.0 {0.0,2.0}",
					gradient: ["FF85C4EA 0.0", "FF4799D3 1.0"],
					corners: a(6, 0, 0, 6)
				},
				textColor: "FFFFFFFF",
				textShadow: "6600 0.0 {0.0,-2.0}",
				selectedTextShadow: "6600 0.0 {0.0,1.0}",
				textSize: e(13),
				textFont: d.defaultRegularFontFace
			},
			children: {
				rightAccessory: {
					style: {
						textColor: "FFD2EDFF",
						textGravity: [1, 0.5],
						textSize: e(13),
						textFont: d.defaultRegularFontFace
					}
				}
			},
			extras: {
				leftImageWidthRatio: 0.15,
				rightImageWidthRatio: 0.2,
				leftImageInsetRatio: 0.2,
				rightImageInsetRatio: 0.2,
				leftTextSpacingRatio: 0.07,
				rightTextSpacingRatio: 0.07,
				numberRightTextSpacingRatio: 0.07,
				heightRatio: 0.18
			}
		}
	});
	d.lazyLoad(c, "JumpButton", function() {
		return {
			children: {
				content: {
					style: {
						gradient: {
							innerLine: "5900 1.0",
							innerShadow: "9900 0.0 {0.0,1.0}",
							gradient: ["FF4F9E1D 0.000", "FF296B0D 1.000"],
							corners: a(8)
						},
						pressedGradient: {
							innerLine: "5900 1.0",
							innerShadow: "FF00 0.0 {0.0,2.0}",
							gradient: ["FF296B0D 0.000", "FF397B12 1.000"],
							corners: a(8)
						}
					},
					children: {
						content: {
							style: {
								textColor: "FFFFFFFF",
								textGravity: [0.5, 0.5],
								textFont: d.defaultBoldFontFace,
								textSize: e(13)
							}
						},
						accessory: {
							style: {
								textColor: "FFFFFFFF",
								textGravity: [0.5, 0.5],
								textSize: e(12),
								textFont: d.defaultBoldFontFace
							}
						}
					}
				}
			},
			extras: {
				rightImageWidthRatio: 0.13,
				rightImageInsetRatio: 0.12,
				insetRatio: 0.08,
				leftTextSpacingRatio: 0.1
			}
		}
	});
	c.VerticalTabViewSizing = {
		insetRatio: 0.02,
		buttonContainerRatio: (202 / 800)
	};
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/VerticalTabView"] = function() {
	var j = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/VerticalTabView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/VerticalTabView"] = j;
	var e = require("NGCore/Client/UI").UI;
	var n = require("NGCore/Client/Core").Core;
	var d = e.ViewGeometry.Rect;
	var c = e.ViewGeometry.Scale;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/NavigableView").NavigableView;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		}
	});
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView");
	var a = k.Composite;
	var g = k.CompositeLayoutGroup;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents").Components;
	var m = e.View.subclass({
		classname: "VTabViewBody",
		initialize: function($super) {
			$super();
			this._buttonsRect = new e.ViewGeometry.Rect(0, 0, 0, 0);
			this._contentRect = new e.ViewGeometry.Rect(0, 0, 0, 0);
			this._hackedContentRect = new e.ViewGeometry.Rect(0, 0, 0, 0);
			this._buttonContainerInset = 0;
			this._contentInset = [0, 0, 0, 0];
			this._selectedTab = null;
			this._rootPerfHacked = false;
			return this
		},
		layoutSubviews: function($super) {
			if (typeof($super) == "function") {
				$super()
			}
			this.layoutButtonContainer();
			this._contentRect.x = this._buttonsRect.x + this._buttonsRect.w;
			this._contentRect.y = 0;
			this._contentRect.w = this._frame[2] - this._contentRect.x;
			this._contentRect.h = this._frame[3];
			this._contentRect.inset(this._contentInset[0], this._contentInset[1], this._contentInset[2], this._contentInset[3]);
			this._hackedContentRect.x = this._contentRect.x + this._frame[0];
			this._hackedContentRect.y = this._contentRect.y + this._frame[1];
			this._hackedContentRect.w = this._contentRect.w;
			this._hackedContentRect.h = this._contentRect.h;
			var o;
			var q = this.getParent().tabContent;
			for (var p = 0; p < q.length; p++) {
				if ((o = q[p].contentView)) {
					if (this._rootPerfHacked) {
						o.setFrame(this._hackedContentRect)
					} else {
						o.setFrame(this._contentRect)
					}
				}
			}
		},
		layoutButtonContainer: function() {
			if (this._buttonsRect.isEmpty()) {
				this.loge(" can't layoutButtonContainer with an empty frame!");
				return
			}
			var w = new e.ViewGeometry.Rect(this._buttonsRect);
			w.sliceVertical(this._buttonContainerInset / 8);
			var v = null;
			var t = null;
			var s = null;
			var o = this.getParent().tabContent;
			var r = n.Capabilities.getScreenHeight() / 800;
			var p = 4 * r;
			for (var q = 0; q < o.length; q++) {
				v = o[q];
				if (v.tabView.getParent() != this) {
					this.addChild(v.tabView)
				}
				var u = 0;
				if (typeof(v.tabView.getHeightRatio) == "function") {
					u = v.tabView.getHeightRatio() * this._buttonsRect.h
				} else {
					if (v.tabView.getFrame()) {
						u = v.tabView.getFrame()[3]
					}
				}
				t = w.sliceVertical(u + p);
				t.inset(0 + p, 0, 0, this._buttonContainerInset);
				v.tabView.setFrame(t)
			}
			if (this._selectedTab) {
				this._adjustTabButton(this._selectedTab, true)
			}
		},
		setButtonContainerInsetAmount: function(o) {
			if (isNaN(o)) {
				return
			}
			this._buttonContainerInset = o
		},
		setContentView: function(o) {
			if (this._contentView) {
				this.removeChild(this._contentView)
			}
			if (this._rootPerfHacked) {
				e.Window.document.addChild(this._contentView);
				o.setFrame(this._hackedContentRect)
			} else {
				this.addChild(o);
				o.setFrame(this._contentRect)
			}
			this._contentView = o
		},
		setButtonContainerRect: function(o) {
			this._buttonsRect = o
		},
		getButtonContainerRect: function() {
			return this._buttonsRect
		},
		setContentInset: function(o) {
			this._contentInset = o
		},
		setSelectedTab: function(o) {
			if (o !== this._selectedTab) {
				if (this._selectedTab) {
					this._adjustTabButton(this._selectedTab, false);
					this._selectedTab.setSelected(false)
				}
				this._adjustTabButton(o, true);
				o.setSelected(true)
			}
			this._selectedTab = o
		},
		_adjustTabButton: function(r, p) {
			var o = this._buttonContainerInset / 2;
			if (!p) {
				o = -o
			}
			var q = r.getFrame();
			q[0] -= o;
			q[2] += o;
			r.setFrame(q)
		},
		_rootPerformanceHack: function() {
			if (!this._rootPerfHacked) {
				if (this._contentView) {
					this.removeChild(this._contentView);
					this._contentView.setFrame(this._hackedContentRect);
					e.Window.document.addChild(this._contentView);
					this._contentView.setVisibleInOrientations(e.Commands.OrientationFlag.Landscape)
				}
			}
			this._rootPerfHacked = true
		},
		_undoRootPerformanceHack: function() {
			if (this._rootPerfHacked && this._contentView) {
				e.Window.document.removeChild(this._contentView);
				this._contentView.setFrame(this._contentRect);
				this.addChild(this._contentView)
			}
			this._rootPerfHacked = false
		}
	});
	var l = j.VerticalTabView = f.subclass({
		classname: "VerticalTabView",
		initialize: function($super, o) {
			this._compositePrepare();
			this._compositeInits.content = function(p) {
				this[p] = (new m()).retain()
			};
			$super(o);
			this.tabContent = [];
			this.setFrameSize([100, 100]);
			NgLogD("VerticalTabView initialized.");
			return this
		},
		tabContent: null,
		destroy: function() {
			for (var o in this.tabContent) {
				if (this.tabContent.hasOwnProperty(o)) {
					var p = this.tabContent[o];
					p.tabView.release();
					if (p.contentView) {
						p.contentView.release()
					}
				}
			}
		},
		layoutSubviews: function($super) {
			$super();
			var p = new e.ViewGeometry.Rect(this.content.getFrame());
			p.x = p.y = 0;
			if (p.isEmpty()) {
				NgLogD("VerticalTabView: layoutSubviews EmptyRect");
				return
			}
			var r = this.getContentView();
			var x = p.w * b.VerticalTabViewSizing.insetRatio;
			this.logd("ButtonContainerInsetAmount:" + x);
			var v = r.getButtonContainerRect();
			var s = Math.min(n.Capabilities.getScreenHeight(), n.Capabilities.getScreenWidth());
			var o = Math.max(n.Capabilities.getScreenHeight(), n.Capabilities.getScreenWidth());
			var t = 800 / 480;
			var q = t * s;
			var w = b.VerticalTabViewSizing.buttonContainerRatio * q / o;
			v.w = w * p.w;
			v.h = p.h;
			var u = x / 4;
			v.x = v.y = u;
			r.setButtonContainerRect(v);
			r.setContentInset([u, u, u, 0]);
			r.setButtonContainerInsetAmount(x);
			r.layoutSubviews()
		},
		layoutButtonContainer: function() {
			this.getContentView().layoutButtonContainer()
		}
	});
	return j
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeButton"] = function() {
	var h = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeButton"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeButton"] = h;
	var e = require("NGCore/Client/UI").UI;
	var d = e.ViewGeometry.Rect;
	var c = e.ViewGeometry.Scale;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/LayoutGroup").LayoutGroup;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").CompositeLayoutGroup;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives");
	var l = f.Primitives;
	var a = f.ButtonEnhancements;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var m = 0;
	var j = h.CompositeButton = function(s) {
		if (!s.classname) {
			m++;
			s.classname = "AnonymousCompositeButton(" + m + ")"
		}
		if (!s.CompositeClass) {
			s.CompositeClass = g
		}
		s.isCompositeButton = function() {
			return true
		};
		for (var q in a) {
			if (a.hasOwnProperty(q)) {
				s[q] = a[q]
			}
		}
		var r = s.setGradient;
		if (!r || typeof r !== "function") {
			r = null
		}
		s.setGradient = function($super, v, t) {
			var u = Array.prototype.slice.call(arguments);
			if (r) {
				r.apply(this, u)
			}
			u.shift();
			this._button.setGradient.apply(this._button, u)
		};
		s.setStyle = function($super, t) {
			this._button.setStyle(t);
			$super(t)
		};
		s.setState = function($super, t) {
			$super(t);
			this._button.setState(t)
		};
		s.setOnClick = function(t) {
			this.onclick = t
		};
		s.getOnClick = function() {
			return this.onclick
		};
		var n = s.initSubviews;
		if (!n || typeof n !== "function") {
			n = null
		}
		s.initSubviews = function($super) {
			if (n) {
				n.apply(this, [$super])
			} else {
				$super()
			}
			this._button = (new k()).retain();
			this.addChild(this._button);
			this._compositeDestroys._button = function() {
				this._button.release();
				this._button = null
			};
			this.performEventCallback = this._button.performEventCallback;
			this._spamProtectionLock = this._button._spamProtectionLock;
			this._spamProtectionEnabled = this._button._spamProtectionEnabled;
			this._spamProtectionLockName = this._button._spamProtectionLockName;
			this.getSpamLock = this._button.getSpamLock;
			this.getSpamLockName = this._button.getSpamLockName;
			this.setSpamLockName = this._button.setSpamLockName;
			this.getSpamProtectionEnabled = this._button.getSpamProtectionEnabled;
			this.setSpamProtectionEnabled = this._button.setSpamProtectionEnabled;
			this._button.performEventCallback = this.performEventCallback.bind(this);
			this.enableEvent = this.enableEvent.bind(this._button);
			this._button.setTextColor("00FFFFFF");
			NgLogD("CompositeButton/initSubviews " + this.classname + " end.")
		};
		var o = s.addSubviews;
		if (!o || typeof o !== "function") {
			o = function($super) {
				$super.apply(this)
			}
		}
		s.addSubviews = function($super) {
			this.addChild(this._button);
			o.apply(this, [$super]);
			var t = this._button;
			var u = function(y) {
				return y == t || (y instanceof e.Button) || (typeof(y.isCompositeButton) === "function" && y.isCompositeButton())
			};
			var x = function(A) {
				if (u(A)) {
					A.setTouchable(true)
				}
				var z = A.getChildren ? A.getChildren() : [];
				for (var y = 0; z && y < z.length; y++) {
					if (u(z[y])) {
						z[y].setTouchable(true)
					} else {
						z[y].setTouchable(false);
						x(z[y])
					}
				}
			};
			var w = this.getChildren();
			for (var v = 0; w && v < w.length; v++) {
				if (w[v] == this._button) {
					continue
				}
				x(w[v])
			}
		};
		var p = s.layoutSubviews;
		if (!p || typeof p !== "function") {
			p = function($super) {
				$super.apply(this)
			}
		}
		s.layoutSubviews = function($super) {
			p.apply(this, [$super]);
			var t = (this.getFrameSize()) ? (this.getFrameSize()) : ([0, 0]);
			this._button.setFrameSize(t)
		};
		return s
	};
	return h
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ProfileSettingsView"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ProfileSettingsView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ProfileSettingsView"] = d;
	var h = require("NGCore/Client/Core").Core;
	var g = require("NGCore/Client/UI").UI;
	var f = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView").CCView;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		PickableAvatar: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PickableAvatar").PickableAvatar
		},
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		EditProfile: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/ProfileSettingsStyle").EditProfile
		}
	});
	d.ProfileSettingsView = e.subclass({
		classname: "ProfileSettingsView",
		_viewHeader: null,
		_labelPageName: null,
		_avatarPicker: null,
		_buttonEdit: null,
		_editNameAndMotto: null,
		_labelFullName: null,
		_firstNameEdit: null,
		_lastNameEdit: null,
		_labelAboutme: null,
		_editMotto: null,
		_buttonSaveChanges: null,
		_footerArea: null,
		_buttonSupport: null,
		_alertDialog: null,
		initSubviews: function($super) {
			$super();
			this._style = b.EditProfile;
			this._totalWidth = h.Capabilities.getScreenHeight();
			this._totalHeight = h.Capabilities.getScreenWidth();
			var j = b.Session.getCurrentSession();
			this._user = j.user();
			this._initializeContent()
		},
		_initializeContent: function() {
			this._scrollArea = this.getContentView();
			this._viewHeader = (new g.View()).retain();
			this._labelPageName = (new g.Label()).retain();
			this._avatarPicker = (new b.PickableAvatar(this._user)).retain();
			this._buttonEdit = (new b.UnspammableButton()).retain();
			this._editNameAndMotto = (new g.View()).retain();
			this._labelFullName = (new g.Label()).retain();
			this._firstNameEdit = (new g.EditText()).retain();
			this._lastNameEdit = (new g.EditText()).retain();
			this._labelAboutme = (new g.Label()).retain();
			this._editMotto = (new g.EditTextArea()).retain();
			this._buttonSaveChanges = (new b.UnspammableButton()).retain();
			this._footerArea = (new g.View()).retain();
			this._buttonSupport = (new b.UnspammableButton()).retain();
			this._alertDialog = (new g.AlertDialog()).retain();
			this._labelPageName.setText(c("Edit Profile Information"));
			this._buttonEdit.setText(c("Edit"));
			this._labelFullName.setText(c("Full Name"));
			this._firstNameEdit.setText(this._user.firstName);
			this._lastNameEdit.setText(this._user.lastName);
			this._labelAboutme.setText(c("About Me"));
			this._editMotto.setText(this._user.motto);
			this._buttonSaveChanges.setText(c("Save"));
			this._buttonSupport.setText(c("Support"));
			this._firstNameEdit.setTextGravity(g.ViewGeometry.Gravity.Left);
			this._firstNameEdit.setInputType(g.Commands.InputType.None);
			this._applyKeyboardWorkaround(this._firstNameEdit);
			this._lastNameEdit.setTextGravity(g.ViewGeometry.Gravity.Left);
			this._lastNameEdit.setInputType(g.Commands.InputType.None);
			this._applyKeyboardWorkaround(this._lastNameEdit);
			this._editMotto.setTextGravity(g.ViewGeometry.Gravity.Left);
			this._firstNameEdit.setOnFocus(function() {
				if (this.controller) {
					this.controller.firstNameEditOnFocus()
				}
			}.bind(this));
			this._lastNameEdit.setOnFocus(function() {
				if (this.controller) {
					this.controller.lastNameEditOnFocus()
				}
			}.bind(this));
			this._editMotto.setOnFocus(function() {
				if (this.controller) {
					this.controller.editMottoOnFocus()
				}
			}.bind(this));
			this._buttonEdit.onclick = this._avatarPicker._avatarImage.onclick;
			this._buttonSaveChanges.onclick = (function() {
				if (this.controller) {
					this.controller.buttonSaveChangesOnClick()
				}
			}).bind(this);
			this._buttonSupport.onclick = (function() {
				if (this.controller) {
					this.controller.buttonSupportOnClick()
				}
			}).bind(this);
			this._style.applyTo(this)
		},
		addSubviews: function($super) {
			$super();
			this._scrollArea.addChild(this._viewHeader);
			this._scrollArea.addChild(this._labelPageName);
			this._scrollArea.addChild(this._avatarPicker);
			this._scrollArea.addChild(this._buttonEdit);
			this._editNameAndMotto.addChild(this._labelFullName);
			this._editNameAndMotto.addChild(this._firstNameEdit);
			this._editNameAndMotto.addChild(this._lastNameEdit);
			this._editNameAndMotto.addChild(this._labelAboutme);
			this._editNameAndMotto.addChild(this._editMotto);
			this._editNameAndMotto.addChild(this._buttonSaveChanges);
			this._scrollArea.addChild(this._editNameAndMotto);
			this._footerArea.addChild(this._buttonSupport);
			this._scrollArea.addChild(this._footerArea)
		},
		_applyKeyboardWorkaround: function(j) {
			if (this.controller) {
				this.controller.applyKeyboardWorkaround(j)
			}
		},
		destroy: function() {
			if (this._viewHeader) {
				this._viewHeader.release()
			}
			if (this._labelPageName) {
				this._labelPageName.release()
			}
			if (this._avatarPicker) {
				this._avatarPicker.release()
			}
			if (this._buttonEdit) {
				this._buttonEdit.release()
			}
			if (this._editNameAndMotto) {
				this._editNameAndMotto.release()
			}
			if (this._labelFullName) {
				this._labelFullName.release()
			}
			if (this._firstNameEdit) {
				this._firstNameEdit.release()
			}
			if (this._lastNameEdit) {
				this._lastNameEdit.release()
			}
			if (this._labelAboutme) {
				this._labelAboutme.release()
			}
			if (this._editMotto) {
				this._editMotto.release()
			}
			if (this._buttonSaveChanges) {
				this._buttonSaveChanges.release()
			}
			if (this._footerArea) {
				this._footerArea.release()
			}
			if (this._buttonSupport) {
				this._buttonSupport.release()
			}
			if (this._alertDialog) {
				this._alertDialog.release()
			}
		},
		layoutSubviews: function($super) {
			$super();
			var l = this._style.extras.viewRatio;
			var j = this.getContentWidth();
			this._viewHeader.setFrame([this.getX(l.viewHeaderX, l.contentAreaX), this.getY(l.viewHeaderY, l.contentAreaY), j, this.ySize(l.viewHeaderH)]);
			this._avatarPicker.setFrame([this.getX(l.avatarImageX, l.contentAreaX), this.getY(l.avatarImageY, l.contentAreaY), this.xSize(l.avatarImageW), this.xSize(l.avatarImageW)]);
			this._editNameAndMotto.setFrame([this.xSize(l.avatarBackground[2]), this.ySize(l.viewHeaderH), j - this.xSize(l.avatarBackground[2]), this.ySize(l.avatarBackground[3])]);
			this._footerArea.setFrame([0, this.ySize(l.avatarBackground[3] + l.viewHeaderH), j, this.ySize(l.footerAreaH)]);
			this._labelPageName.setFrame(this._getSize(l.labelPageName, l.contentAreaX, l.contentAreaY));
			this._buttonEdit.setFrame(this._getSize(l.avatarBtnEdit, l.contentAreaX, l.contentAreaY));
			this._labelFullName.setFrame(this._getSize(l.labelFullName, l.contentAreaX, l.contentAreaY));
			this._firstNameEdit.setFrame(this._getSize(l.editFName, l.contentAreaX, l.contentAreaY));
			this._lastNameEdit.setFrame(this._getSize(l.editLName, l.contentAreaX, l.contentAreaY));
			this._labelAboutme.setFrame(this._getSize(l.labelAboutMe, l.contentAreaX, l.contentAreaY));
			this._editMotto.setFrame(this._getSize(l.editMotto, l.contentAreaX, l.contentAreaY));
			this._buttonSaveChanges.setFrame(this._getSize(l.buttonSaveChanges, l.footerAreaX, l.footerAreaY));
			this._buttonSupport.setFrame(this._getSize(l.buttonSupport, l.footerAreaX, l.footerAreaY));
			this._avatarPicker.layoutSubviews();
			this._avatarPicker.setStyle(new b.OldStyle());
			var k = this._footerArea.getFrame();
			this._scrollArea.setContentSize(j, k[1] + k[3])
		},
		_getSize: function(l, j, k) {
			return [this.getX(l[0], j), this.getY(l[1], k), this.xSize(l[2]), this.ySize(l[3])]
		},
		xSize: function(j) {
			return (j / 800) * this._totalWidth
		},
		ySize: function(j) {
			return (j / 480) * this._totalHeight
		},
		getX: function(k, j) {
			return this.xSize(k - j)
		},
		getY: function(j, k) {
			return this.ySize(j - k)
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController"] = c;
	var e = require("NGCore/Client/UI").UI;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCViewList").CCViewList;
	var d = c.ContentViewController = a.subclass({
		classname: "ContentViewController",
		parentController: null,
		_realParentView: null,
		initialize: function($super) {
			$super();
			return this
		},
		destroy: function() {
			this._undoRootPerformanceHack()
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new b())
			}
			$super()
		},
		getDynamicTabTitle: function() {
			return null
		},
		getDynamicPageTitle: function() {
			return null
		},
		getDynamicPageTitleImage: function() {
			return null
		},
		willActivateTab: function() {
			if (this._keyboardWAViews) {
				for (var f in this._keyboardWAViews) {
					var g = this._keyboardWAViews[f];
					g.setEnabled(true)
				}
			}
		},
		didActivateTab: function() {
			this._rootPerformanceHack()
		},
		willDeactivateTab: function() {
			this._undoRootPerformanceHack();
			if (this._keyboardWAViews) {
				for (var f in this._keyboardWAViews) {
					NgLogD("xxx enable item " + f);
					var g = this._keyboardWAViews[f];
					g.setEnabled(false)
				}
			}
		},
		didDeactivateTab: function() {},
		swapViews: function(g, f) {
			var h = g.getParent();
			if (typeof(h.setContentView) == "function") {
				h.setContentView(f)
			} else {
				g.removeFromParent();
				h.addChild(f)
			}
		},
		_rootPerformanceHack: function() {
			if (this.parentController) {
				this.parentController.view().content._rootPerformanceHack()
			}
		},
		_undoRootPerformanceHack: function() {
			if (this.parentController) {
				this.parentController.view().content._undoRootPerformanceHack()
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView"] = function() {
	var s = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView"] = s;
	var h = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Core").Core;
	var f = h.ViewGeometry.Rect;
	var e = h.ViewGeometry.Scale;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets");
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView");
	var q = o.Composite;
	var m = o.CompositeLayoutGroup;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var r = j.Components;
	var k = j.Component;
	var n = j.ComponentInheritForKey;
	var g = j.ACCESSOR_PASSTHROUGH;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var c = q({
		key: "content",
		component: r.Label,
		altKey: "field"
	}, {
		key: "button",
		component: r.UnspammableButton
	}, r.Layouts.TwoHorizontalGenerator("content", "button"), r.AddOrders.Generator("content", "button"), {
		classname: "CCViewHeader"
	});
	var a = k(r.Label, n(r.UnspammableButton, "button"), {
		initializeViewWithKey: function(t) {
			this[t] = (new c()).retain()
		},
		getContentInset: g,
		setContentInset: g,
		getButtonInset: g,
		setButtonInset: g,
		setAttributes: g,
		setGradient: g
	});
	var l = s.CCView = q({
		CompositeClass: m
	}, {
		key: "header",
		component: a
	}, {
		key: "content",
		component: r.ScrollView
	}, {
		key: "footer",
		component: r.View
	}, {
		classname: "CCView",
		_headerHeightRatio: null,
		_insetRatio: null,
		_borderThicknessRatio: null,
		_bgHeightGrowthRatio: null,
		_secretBackgroundView: null,
		_secretBorderView: null,
		initialize: function($super, t) {
			$super(t);
			return this
		},
		initSubviews: function($super) {
			this._secretBackgroundView = (new d.View()).retain();
			this._secretBorderView = (new d.View()).retain();
			$super();
			var v = new p();
			v.defaultsFrom("social.us.ccview");
			var w = v.props();
			this._secretBackgroundView.setAttributes(w.bgAttributes);
			delete w.bgAttributes;
			this._secretBorderView.setAttributes(w.borderAttributes);
			delete w.borderAttributes;
			for (var u in w) {
				if (w.hasOwnProperty(u)) {
					this[u] = w[u]
				}
			}
		},
		destroy: function() {
			this._secretBorderView.release();
			this._secretBackgroundView.release()
		},
		addSubviews: function($super) {
			this.addChild(this._secretBackgroundView);
			this._secretBackgroundView.addChild(this._secretBorderView);
			this._secretBorderView.addChild(this.header);
			this._secretBorderView.addChild(this.content);
			this._secretBorderView.addChild(this.footer)
		},
		layoutSubviews: function($super) {
			var C = new f(this.getFrame());
			if (C.isEmpty()) {
				return
			}
			C.x = C.y = 0;
			var y = C.h * this._borderThicknessRatio;
			var B = C.copy();
			B.h += C.h * this._bgHeightGrowthRatio;
			this._secretBackgroundView.setFrame(B);
			var u = B.copy();
			u.x = u.y = 0;
			u.inset(y);
			this._secretBorderView.setFrame(u);
			var v = u.copy();
			v.x = v.y = 0;
			var E = 1;
			var z = C.h * this._headerHeightRatio;
			var F = v.sliceVertical(z).inset(E, E, 0, E);
			var x = F.h * this._insetRatio + y;
			this.header.setContentInset([x, x / 2, x, x]);
			this.header.setButtonInset([x, x, x, x / 2]);
			this.header.button.setImageInsets([x / 2, x / 2, x / 2, x / 2]);
			this.header.setFrame(F);
			var w = 0;
			if (z < E) {
				w = E
			}
			var t = v.copy().inset(w, E, 0, E);
			var A = (this.footer.getFrameSize() && this.footer.getFrameSize().length && !isNaN(this.footer.getFrameSize()[1])) ? this.footer.getFrameSize()[1] : 0;
			var D = t.sliceVertical(0 - A);
			this.content.setFrame(t);
			if (A > 0) {
				this.footer.setFrame(D)
			} else {
				this.footer.setFrame([0, 0, 0, 0])
			}
			this.logd("CCView layout: our: ", C, " header:", new f(this.header.getFrame()), " background", B, " border:", u, " content:", t)
		},
		getContentWidth: function() {
			var t = this.content.getFrame();
			return t ? t[2] : 86
		}
	});
	return s
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PickableAvatar"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PickableAvatar"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PickableAvatar"] = g;
	var h = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/UI").UI;
	var b = d.ViewGeometry.Rect;
	var a = d.ViewGeometry.Scale;
	var f = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/AvatarImagePickerController").AvatarImagePickerController;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/AppUpdater").AppUpdater;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/UIUtils").UIUtils;
	var m = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var e = g.PickableAvatar = d.View.subclass({
		classname: "PickableAvatar",
		_doingUpload: false,
		initialize: function($super, o) {
			$super(undefined);
			var n = function() {
				this._avatarImage.setImage(this._user.getDefinedIcon())
			}.bind(this);
			var p = function() {
				j.blockApplyingJSUpdates(this);
				d.choosePhotoCamera(256, 256, "avatar.png", {
					fit: d.FitMode.Fill,
					gravity: [0.5, 0.5]
				}, this._onPhotoPicked.bind(this), this._avatarImage)
			}.bind(this);
			var r = function() {
				j.blockApplyingJSUpdates(this);
				d.choosePhoto(256, 256, "avatar.png", {
					fit: d.FitMode.Fill,
					gravity: [0.5, 0.5]
				}, this._onPhotoPicked.bind(this), this._avatarImage)
			}.bind(this);
			var q = function(s) {
				if (s) {
					if (e._AvatarPickerController) {
						e._AvatarPickerController.cleanup();
						e._AvatarPickerController = null
					}
					this._doingUpload = true;
					var t = this._avatarImage.getImage();
					this.addChild(this._avatarUploadingSpinner);
					this._user.setAvatarImage(s, this.bind(function(u, v) {
						this._doingUpload = false;
						if (u) {
							NgLogD("chooseAvatarCB - couldn't save on server: " + u);
							this._avatarUploadingSpinner.removeFromParent();
							c.showToast(m("Failed to update avatar. Try again."))
						} else {
							NgLogD("chooseAvatarCB - saved to server OK: " + JSON.stringify(v));
							this._avatarUploadingSpinner.removeFromParent();
							this._avatarImage.setImage(this._user.getDefinedIcon())
						}
					}))
				}
			}.bind(this);
			this._avatarImage = (new l()).retain();
			this._avatarImage.setImage(f.image("no-user-icon.png"));
			this._avatarImage.onclick = function() {
				if (!this._doingUpload) {
					e._AvatarPickerController = this.retainView(new k(p, r, q, n))
				}
			}.bind(this);
			this.addChild(this._avatarImage);
			this._avatarUploadingSpinner = (new d.Spinner()).retain();
			this._user = o;
			this._avatarImage.setImage(this._user.getDefinedIcon())
		},
		destroy: function() {
			j.allowApplyingJSUpdates(this);
			this._avatarImage.release();
			this._avatarUploadingSpinner.release()
		},
		_onPhotoPicked: function(o) {
			j.allowApplyingJSUpdates(this);
			if (typeof o.filename != "string" || o.filename.indexOf("Error:") !== -1) {
				this.uploadPhotoForCurrentUser(null);
				return
			}
			var n = h.Capabilities.getBootDir() + "/" + o.filename;
			this.uploadPhotoForCurrentUser(n)
		},
		retainView: function(n) {
			if (n) {
				n.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(n)
			}
			return n
		},
		uploadPhotoForCurrentUser: function(o) {
			if (o) {
				if (e._AvatarPickerController) {
					e._AvatarPickerController.cleanup();
					e._AvatarPickerController = null
				}
				this._doingUpload = true;
				var n = this._avatarImage.getImage();
				this.addChild(this._avatarUploadingSpinner);
				this._user.setPhoto(o, this.bind(function(p, q) {
					this._doingUpload = false;
					if (p) {
						NgLogD("uploadPhotoForCurrentUser - couldn't save on server: " + p);
						this._avatarUploadingSpinner.removeFromParent();
						c.showToast(m("Failed to update photo. Try again."))
					} else {
						NgLogD("uploadPhotoForCurrentUser - saved to server OK: " + JSON.stringify(q));
						this._avatarUploadingSpinner.removeFromParent();
						this._avatarImage.setImage(this._user.getDefinedIcon())
					}
				}))
			}
		},
		layoutSubviews: function() {
			var n = this.getFrame();
			n[0] = n[1] = 0;
			this._avatarImage.setFrame(n);
			this._avatarUploadingSpinner.setFrame([n[0] + n[2] * 0.1, n[1] + n[3] * 0.1, n[2] * 0.8, n[3] * 0.8])
		},
		setStyle: function($super, n) {
			$super(n);
			n.defaultsFrom("social.us.commonelements");
			this._avatarImage.setAttributes(n.props()["userPhoto"])
		},
		_getNgBootMD5: function() {
			if (!this._ngBootMD5) {
				this.ngBootMD5 = h.Capabilities.getBootDir()
			}
			return this._ngBootMD5
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/ProfileSettingsStyle"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/ProfileSettingsStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/ProfileSettingsStyle"] = c;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var b = e.ScaledCorners;
	var f = e.ScaledTextSize;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Main").CommonElements;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	e.lazyLoad(c, "EditProfile", function() {
		return {
			children: {
				_viewHeader: {
					style: {
						gradient: {
							gradient: ["FF143558 0.000", "FF295D8D 1.000"]
						}
					}
				},
				_labelPageName: {
					style: {
						textFont: e.defaultBoldFontFace,
						textSize: f(14),
						textColor: "FFFFFFFF",
						textShadow: "33000000 1.0 {0.0,-2.0}",
						textGravity: [0, 0]
					}
				},
				_buttonEdit: a.standardButton,
				_editNameAndMotto: {
					style: {
						gradient: {
							gradient: ["FFDBE2EA 0.000", "FFE9EFF3 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_labelFullName: {
					style: {
						textSize: f(12),
						textFont: e.defaultBoldFontFace,
						textGravity: [0, 0]
					}
				},
				_firstNameEdit: a.textBox,
				_lastNameEdit: a.textBox,
				_labelAboutme: {
					style: {
						textSize: f(12),
						textFont: e.defaultBoldFontFace,
						textGravity: [0, 0]
					}
				},
				_editMotto: a.textBox,
				_buttonSaveChanges: a.standardButton,
				_buttonSupport: a.standardButton,
				_footerArea: {
					style: {
						gradient: {
							gradient: ["FFDBE2EA 0.000", "FFE9EFF3 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				}
			},
			extras: {
				viewRatio: {
					viewHeaderX: 206,
					viewHeaderY: 84,
					viewHeaderH: 57,
					contentAreaX: 206,
					contentAreaY: 84,
					avatarImageX: 229,
					avatarImageY: 152,
					avatarImageW: 98,
					footerAreaX: 206,
					footerAreaY: 395,
					footerAreaH: 100,
					labelPageName: [221, 100, 540, 30],
					avatarBackground: [206, 140, 144, 329],
					avatarBtnEdit: [214, 257, 128, 46],
					labelFullName: [355 - 129, 158 - 56, 408, 22],
					editFName: [350 - 129, 188 - 56, 196, 60],
					editLName: [617 - 198, 188 - 56, 198, 60],
					labelAboutMe: [354 - 129, 256 - 56, 408, 22],
					editMotto: [350 - 129, 286 - 56, 396, 60],
					buttonSaveChanges: [317, 652, 210, 46],
					buttonSupport: [218, 420, 534, 46]
				}
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/AvatarImagePickerController"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/AvatarImagePickerController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/AvatarImagePickerController"] = f;
	var g = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/Device").Device;
	var e = require("NGCore/Client/UI").UI;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		AvatarImagePickerCell: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/AvatarImagePickerCell").AvatarImagePickerCell
		},
		UIStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		AvatarPickerStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/AvatarPickerStyle")
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		},
		UIUtils: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/UIUtils").UIUtils
		}
	});
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = g.MessageListener.subclass({
		classname: "AvatarImagePickerKeyListener"
	});
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var j = f.AvatarImagePickerController = d.subclass({
		classname: "AvatarImagePickerController",
		_mobageUserListItems: [],
		initialize: function($super, n, p, o, m) {
			if ($super && typeof $super == "function") {
				$super()
			}
			b.AvatarPickerStyle;
			this._retrievingAvatars = true;
			var l = this;
			j._AvatarImagePickerController = 1;
			this._finalCB = m;
			this._choosePhotoCameraCB = n;
			this._choosePhotoCB = p;
			this._chooseAvatarCB = o;
			this._avatarPickerStyle = b.UIStyle.registeredStyle("social.us.avatarpicker");
			this._baseView = new e.View().retain();
			e.Window.document.addChild(this._baseView);
			this._gameCoverView = new e.Button().retain();
			this._gameCoverView.onclick = function(q) {
				l.cleanup()
			};
			this._topBarBgPane = new e.View().retain();
			this._topBarBgPane.setAttributes(this._avatarPickerStyle.props()["topBarBackgroundPane"]);
			this._baseView.addChild(this._topBarBgPane);
			this._topBarBorderPane = new e.View().retain();
			this._topBarBorderPane.setAttributes(this._avatarPickerStyle.props()["borderUnderTopPane"]);
			this._baseView.addChild(this._topBarBorderPane);
			this._selectLabel = new e.Label().retain();
			this._selectLabel.setText(k("Select a User Image"));
			this._selectLabel.setTextGravity(e.ViewGeometry.Gravity.Left);
			this._selectLabel.setAttributes(this._avatarPickerStyle.props()["selectLabel"]);
			this._topBarBgPane.addChild(this._selectLabel);
			this._cancelButton = new e.Button().retain();
			this._cancelButton.setText(k("Cancel"));
			b.CommonElements.standardButton.applyTo(this._cancelButton);
			this._cancelButton.onclick = function(q) {
				l.cleanup()
			};
			this._topBarBgPane.addChild(this._cancelButton);
			this._listViewBgOuterPane = new e.View().retain();
			this._listViewBgOuterPane.setAttributes(this._avatarPickerStyle.props()["listContainerBgOuterPane"]);
			this._baseView.addChild(this._listViewBgOuterPane);
			this._listViewBgInnerPane = new e.View().retain();
			this._listViewBgInnerPane.setAttributes(this._avatarPickerStyle.props()["listContainerBgInnerPane"]);
			this._baseView.addChild(this._listViewBgInnerPane);
			this._listView = new e.ListView().retain();
			this._loadingItemsSection = (new e.Label()).retain();
			this._loadingItemsSection.setAttributes(this._avatarPickerStyle.props()["loadingLabel"]);
			this._loadingItemsSection.setText(k("Loading..."));
			this._listViewBgInnerPane.addChild(this._loadingItemsSection);
			this._spinner = (new e.Spinner()).retain();
			this._listViewBgInnerPane.addChild(this._spinner);
			this.layoutViews(e.Window.getWidth(), e.Window.getHeight());
			this.kListener = new h();
			b.UnspammableButton.addDeviceKeyListener(this.kListener, this.onKeyPressed.bind(this), 99999);
			this._getAvatarImages();
			return this
		},
		loadView: function($super) {
			$super()
		},
		layoutViews: function(m, r) {
			this._orientedScreenWidth = m;
			this._orientedScreenHeight = r;
			var l = g.Capabilities.getScreenWidth();
			var n = g.Capabilities.getScreenHeight();
			var q = m >= r;
			var x = new e.ViewGeometry.Rect(0, 0, m, r);
			var w = l / 480;
			var p = n / 800;
			var t;
			if (q) {
				t = x.sliceVertical(60 * p);
				this._gameCoverView.setGradient({
					gradient: ["66000000 0.0", "66000000 0.94", "B3000000 1.0"],
					gradientAngle: 180
				});
				this.rowHeight = 158
			} else {
				t = x.sliceVertical(150 * p);
				this._gameCoverView.setGradient({
					gradient: ["66000000 0.0", "66000000 0.94", "B3000000 1.0"]
				});
				this.rowHeight = 150
			}
			this._baseView.setFrame([0, r, m, r]);
			this._gameCoverView.setFrame(t);
			var o = x.sliceVertical(66 * p);
			this._topBarBgPane.setFrame(o);
			var s = 10 * w;
			var u = 176 * w;
			this._selectLabel.setFrame([s, s, this._orientedScreenWidth, 46 * p]);
			this._cancelButton.setFrame([o.w - s - u, s, u, 46 * p]);
			this._topBarBorderPane.setFrame(x.sliceVertical(2));
			var v = x.copy();
			this._listViewBgOuterPane.setFrame(v);
			v.inset(2, 2, 0, 2);
			this._listViewBgInnerPane.setFrame([v.x, v.y, v.w, v.h + 2]);
			this._spinner.setFrame(v.w / 2 - 110, (v.h + 2) / 2 - 15, 30, 30);
			this._loadingItemsSection.setFrame(0, 0, v.w, v.h);
			v.x = 0;
			v.y = 0;
			v.inset(2, 2, 0, 2);
			this._listView.setFrame(v);
			e.measureText(this._loadingItemsSection.getText(), 200, 40, this._loadingItemsSection.getTextFont(), this._loadingItemsSection.getTextSize(), function(A) {
				var y = A.totalWidth;
				var B = y + 40;
				var z = (v.w - B) / 2;
				this._spinner.setFrame(z, (v.h + 2) / 2 - 15, 30, 30);
				this._loadingItemsSection.setFrame(z + 40, (v.h + 2) / 2 - 20, y, A.height)
			}.bind(this));
			this._maxPerRow = Math.floor(this._listView.getFrame()[2] / this.rowHeight);
			e.animate(function() {
				this._baseView.setFrame([0, 0, m, r])
			}.bind(this), 400, function() {
				this._baseView.addChild(this._gameCoverView)
			}.bind(this))
		},
		onKeyPressed: function(l) {
			if (l.code === c.KeyEmitter.Keycode.back) {
				if (this._gameCoverView) {
					this.cleanup();
					return true
				}
			}
			return false
		},
		destroy: function() {
			j._AvatarImagePickerController = 0;
			if (this._baseView) {
				this._baseView.release()
			}
			if (this._topBarBgPane) {
				this._topBarBgPane.release()
			}
			if (this._topBarBorderPane) {
				this._topBarBorderPane.release()
			}
			if (this._cancelButton) {
				this._cancelButton.release()
			}
			if (this._selectLabel) {
				this._selectLabel.release()
			}
			if (this._listView) {
				this._listView.release()
			}
			if (this._listViewBgOuterPane) {
				this._listViewBgOuterPane.release()
			}
			if (this._listViewBgInnerPane) {
				this._listViewBgInnerPane.release()
			}
			if (this._loadingItemsSection) {
				this._loadingItemsSection.release()
			}
			if (this._spinner) {
				this._spinner.release()
			}
		},
		cleanup: function() {
			if (this.kListener) {
				c.KeyEmitter.removeListener(this.kListener);
				this.kListener = null
			}
			if (this._gameCoverView) {
				this._gameCoverView.release();
				this._gameCoverView = null
			}
			e.animate(function() {
				this._baseView.setFrame([0, this._orientedScreenHeight, this._orientedScreenWidth, this._orientedScreenHeight])
			}.bind(this), 400, function() {
				this.destroy()
			}.bind(this))
		},
		_getAvatarImages: function() {
			NgLogD("AvatarImagePickerController - Retrieving avatar images");
			this._retrievingAvatars = true;
			this._mobageUserListItems = [];
			var n = this;
			var o = b.Session.getCurrentSession();
			var l = o.user();
			var m = [];
			m = this._addItem(m, "choosePhotoCamera");
			m = this._addItem(m, "choosePhoto");
			if (o) {
				if (l) {
					l.getAvatars(function(q, r) {
						if (!q) {
							for (var p = 0; p < r.length; p++) {
								m = this._addItem(m, r[p])
							}
							if (m.length > 0 && m.length < this._maxPerRow) {
								this._addRow(m)
							}
							NgLogD("AvatarImagePickerController - Retrieved " + r.length + " avatar images");
							this._onImagesRetrieved()
						} else {
							NgLogD("AvatarImagePickerController: Error: " + JSON.stringify(q))
						}
					}.bind(this))
				}
			}
		},
		_addRow: function(m) {
			var l = new a(this._maxPerRow, this._choosePhotoCameraCB, this._choosePhotoCB, this._chooseAvatarCB, this._finalCB);
			l.data = {
				photo: m,
				AvatarPickerController: this
			};
			this._mobageUserListItems.push(l)
		},
		_addItem: function(m, l) {
			m.push(l);
			if (m.length == this._maxPerRow) {
				this._addRow(m);
				m = []
			}
			return m
		},
		_onImagesRetrieved: function() {
			this._retrievingAvatars = false;
			this._populateList()
		},
		_waitingOnData: function() {
			return this._retrievingAvatars
		},
		_populateList: function() {
			var m;
			var p = [];
			var n = false;
			if (!this._waitingOnData()) {
				this._loadingItemsSection.removeFromParent();
				this._spinner.removeFromParent();
				this._listViewBgInnerPane.addChild(this._listView);
				var o = [];
				var l = new e.ListViewSection({
					rowHeight: this.rowHeight,
					items: o
				});
				for (m = 0; m < this._mobageUserListItems.length; m++) {
					o.push(this._mobageUserListItems[m])
				}
				if (o.length > 0) {
					this._listViewBgInnerPane.addChild(this._listView);
					p.push(l)
				} else {
					b.UIUtils.showToast(k("Could not retrieve Images, Please check your connection"));
					this.cleanup()
				}
			}
			this._listView.setSections(p)
		}
	});
	var a = e.ListViewItem.subclass({
		classname: "MyListItemsArray",
		initialize: function($super, m, n, p, o, l) {
			if ($super && typeof $super == "function") {
				$super()
			}
			this._avatarPickerStyle = b.UIStyle.registeredStyle("social.us.avatarpicker");
			this._avatarsPerRow = m;
			this._finalCB = l;
			this._choosePhotoCameraCB = n;
			this._choosePhotoCB = p;
			this._chooseAvatarCB = o
		},
		_onCreateView: function() {
			return new b.AvatarImagePickerCell(this._avatarsPerRow, this.data.AvatarPickerController, this._choosePhotoCameraCB, this._choosePhotoCB, this._chooseAvatarCB, this._finalCB)
		},
		_onSetView: function(l) {
			if (l) {
				l.listItem = this;
				this.cell = l;
				l.setImageBordersWithStyle(this._avatarPickerStyle);
				l.setupListItem(this.data.photo)
			}
		},
		_onReleaseView: function(l) {}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/AvatarImagePickerCell"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/AvatarImagePickerCell"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/AvatarImagePickerCell"] = b;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var e = require("NGCore/Client/UI").UI;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = e.View.subclass({
		classname: "AvatarImagePickerCell",
		initialize: function($super, g, k, j, m, l, h) {
			if ($super && typeof $super == "function") {
				$super()
			}
			this._maxPerRow = g;
			this._controller = k;
			this._finalCB = h;
			this._choosePhotoCameraCB = j;
			this._choosePhotoCB = m;
			this._chooseAvatarCB = l;
			this.setFrame([15, 15, 15, 15]);
			this._userAvatars = [];
			for (var f = 0; f < this._maxPerRow; f++) {
				this._userAvatars.push((new e.Button()).retain());
				this.addChild(this._userAvatars[f])
			}
		},
		setupListItem: function(n) {
			var g = this;
			var j = this.getFrame();
			var l = j[2];
			var m = j[3];
			var h = (70 / 75) * m;
			var k = (l - (h * this._maxPerRow)) / (this._maxPerRow + 1);
			for (var f = 0; f < n.length; f++) {
				this._userAvatars[f].setFrame([k + k * f + f * (h), (m - h) / 2, h, h]);
				if (n[f]) {
					this._userAvatars[f].setImageInsets([2, 2, 1, 1]);
					if (n[f] === "choosePhotoCamera") {
						this._userAvatars[f].setImage(c.image("button_outcamera.png"));
						this._userAvatars[f].onclick = function() {
							this._choosePhotoCameraCB()
						}.bind(this)
					} else {
						if (n[f] === "choosePhoto") {
							this._userAvatars[f].setImage(c.image("button_outgallery.png"));
							this._userAvatars[f].onclick = function() {
								this._choosePhotoCB()
							}.bind(this)
						} else {
							this._userAvatars[f].setImage(n[f]);
							this._userAvatars[f].avatar = n[f];
							this._userAvatars[f].onclick = function() {
								g._chooseAvatarCB(this.avatar)
							}.bind(this._userAvatars[f])
						}
					}
				}
			}
		},
		setImageBordersWithStyle: function(g) {
			for (var f in this._userAvatars) {
				this._userAvatars[f].setImageBorder(g.props()["iconImageBorder"]);
				this._userAvatars[f].setImageBorder(g.props()["iconImageBorderPressed"], e.State.Pressed)
			}
		},
		cleanUp: function() {
			if (this._userAvatars) {
				for (var f in this._userAvatars) {
					this._userAvatars[f].release()
				}
				this._userAvatars = null
			}
		},
		destroy: function() {
			this.cleanUp()
		}
	});
	b.AvatarImagePickerCell = d;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/AvatarPickerStyle"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/AvatarPickerStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/AvatarPickerStyle"] = a;
	var c = {};
	c.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var b = c.Style.ScaledTextSize;
	c.Style.sheet("social.us.avatarpicker", {
		topBarBackgroundPane: {
			gradient: {
				gradient: ["FF074983 0.0", "FF062C52 1.0"]
			}
		},
		borderUnderTopPane: {
			backgroundColor: "FF2C4B6F"
		},
		baseView: {
			gradient: {
				gradient: ["FF0A1D34 0.0", "FF0A1D34 1.0"]
			}
		},
		selectLabel: {
			textColor: "FFFFFFFF",
			textFont: c.Style.defaultBoldFontFace,
			textSize: b(14)
		},
		loadingLabel: {
			textColor: "FFFFFFFF",
			textFont: c.Style.defaultRegularFontFace,
			textSize: b(20)
		},
		userAvatar: {
			corners: "2.0 2.0 2.0 2.0",
			gradient: [],
			outerLine: "FFFF 2",
			innerLine: "6000 2"
		},
		listContainerBgOuterPane: {
			gradient: {
				gradient: ["FF051935 0.0", "FF073F70 0.2"],
				corners: "4 4 0 0"
			}
		},
		listContainerBgInnerPane: {
			gradient: {
				gradient: ["FF051935 0.0", "FF073F70 1.0"],
				innerLine: "FF0E1D3B 2.0",
				corners: "4 4 0 0"
			}
		},
		iconImageBorder: {
			corners: "6 6 6 6",
			innerLine: "FFB2B2B2 2"
		},
		iconImageBorderPressed: {
			corners: "6 6 6 6",
			outerLine: "FFB2B2B2 3",
			innerLine: "66000000 6"
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Main"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Main"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Main"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = b.ScaledCorners;
	var h = b.ScaledTextSize;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = f.ScaledCorners;
	var g = f.ScaledTextSize;
	c.CommonElements = {};
	var e = function(j, k) {
		f.lazyLoad(c.CommonElements, j, k)
	};
	e("standardButton", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
					innerLine: "4484C3E9 2.0"
				},
				pressedGradient: {
					corners: a(8),
					gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
					innerLine: "2B003366 2.0"
				},
				textFont: f.defaultBoldFontFace,
				textSize: g(14),
				textColor: "FFFFFFFF",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}"
			}
		}
	});
	e("largeStandardButton", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
					outerLine: "FF233656 2.0",
					innerLine: "4484C3E9 2.0"
				},
				pressedGradient: {
					corners: a(8),
					gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
					outerLine: "FF233656 2.0",
					innerShadow: "23000000 1.0 {0.0,-2.0}"
				},
				textFont: f.defaultBoldFontFace,
				textSize: g(16),
				textColor: "FFFFFFFF",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}"
			}
		}
	});
	e("largeActionButton", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"],
					outerLine: "FF233656 2.0",
					innerLine: "4484C3E9 2.0"
				},
				pressedGradient: {
					corners: a(8),
					gradient: ["FF5B971B 0.000", "FF397210 1.000"],
					outerLine: "FF233656 2.0",
					innerShadow: "23000000 1.0 {0.0,-2.0}"
				},
				textFont: f.defaultBoldFontFace,
				textSize: g(16),
				textColor: "FFFFFFFF",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}",
				disabledGradient: {},
				disabledTextColor: "FF000000"
			}
		}
	});
	e("disabledButton", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
					innerLine: "44FFFFFF 2.0"
				},
				pressedGradient: {
					corners: d(8),
					gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
					innerLine: "44FFFFFF 2.0"
				},
				textFont: f.defaultBoldFontFace,
				textSize: g(14),
				textColor: "FFD1CDCD",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}"
			}
		}
	});
	e("textBox", function() {
		return {
			style: {
				gradient: {
					corners: a(6),
					gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
					outerLine: "FF000000 2.0",
					insets: "{0.0,0.0,2.0,0.0}"
				},
				errorGradient: {
					corners: a(6),
					gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
					outerLine: "FFFF0000 2.0",
					insets: "{0.0,0.0,2.0,0.0}"
				},
				textFont: f.defaultRegularFontFace,
				textColor: "FF000000",
				textSize: g(14)
			}
		}
	});
	e("invisibleButton", function() {
		return {
			style: {
				pressedGradient: {
					corners: a(6),
					gradient: ["44000000 0.000"],
					insets: "{0.0,0.0,2.0,0.0}"
				}
			}
		}
	});
	e("checkBox", function() {
		return {
			style: {
				gradient: {
					insets: "{0, 0, 0, 0}",
					outerLine: "00000000 3",
					outerShadow: "0000 0 {0,0}",
					corners: a(6),
					innerShadow: "FF7A7E80 2 {0,-1}",
					gradient: ["FFE0E6EC 0", "FFF3F7FD 1"]
				},
				pressedGradient: {
					insets: "{0, 0, 0, 0}",
					innerShadow: "FF00 6.0 {0.0,-1.0}",
					gradient: ["FF80 0.000", "FF80 1.000"],
					outerLine: "0000 3",
					outerShadow: "0000 0.0 {0.0,0.0}",
					corners: a(6)
				},
				checkedGradient: {
					insets: "{0, 0, 0, 0}",
					outerLine: "00000000 3",
					outerShadow: "0000 0 {0,0}",
					corners: a(6),
					innerShadow: "FF00 0 {0,0}",
					gradient: ["FF75B624 0", "FF4D8D1F 1"]
				},
				pressedCheckedGradient: {
					innerShadow: "FF0F610F 5.0 {0.0,-1.0}",
					insets: "{0, 0, 0, 0}",
					gradient: ["FF179117 0.000", "FF179117 1.000"],
					outerLine: "0000 3",
					outerShadow: "0000 0.0 {0.0,0.0}",
					corners: a(6)
				},
				disabledGradient: {
					insets: "{0, 0, 0, 0}",
					outerLine: "00000000 3",
					outerShadow: "3300 3 {0,0}",
					corners: a(6),
					gradient: ["FFEEEEEE 0", "FFD6D6D6 1"]
				}
			}
		}
	});
	e("topPageNavigationTab", function() {
		return {
			style: {
				gradient: {
					insets: "{4.0,0.0,0.0,0.0}",
					corners: "6.0 6.0 0.0 0.0",
					innerLine: "26B7F5FF 1.5",
					gradient: ["FF2976BB 0.0", "FF0B4B93 0.94", "FF073161 0.95"]
				},
				pressedGradient: {
					insets: "{4.0,0.0,0.0,0.0}",
					corners: "6.0 6.0 0.0 0.0",
					innerLine: "26B7F5FF 1.5",
					gradient: ["FF85C4EA 0.0", "FF4799D3 0.94", "FF3674A1 0.95"]
				},
				focusedGradient: {
					insets: "{0.0,0.0,0.0,0.0}",
					corners: "6.0 6.0 0.0 0.0",
					innerLine: "26B7F5FF 1.5",
					gradient: ["FF2976BB 0.0", "FF1B61A3 0.94", "FF134370 0.95"]
				},
				textFont: f.defaultRegularFontFace,
				textFontSelected: f.defaultBoldFontFace,
				textSize: g(14),
				textColor: "FFFF",
				textGravity: [0.5, 0.5],
				textShadow: "66000000 1.0 {0.0,-2.0}",
				textShadowSelected: "66000000 1.0 {0.0,1.0}"
			}
		}
	});
	e("userPhoto", function() {
		return {
			style: {
				imageBorder: {
					corners: d(4),
					outerLine: "FFFFFFFF 3",
					innerLine: "FFB2B2B2 2"
				}
			}
		}
	});
	e("zeroCase", function() {
		return {
			extras: {
				heightFactor: 200 / 480
			}
		}
	});
	e("header", function() {
		return {
			style: {
				gradient: {
					gradient: ["FF143558 0.0", "FF295D8D 1.0"]
				}
			},
			children: {
				content: {
					style: {
						textSize: g(14),
						textGravity: [0, 0.25],
						textFont: f.defaultBoldFontFace,
						textColor: "FFFFFFFF"
					}
				},
				button: {
					style: {
						textColor: "FFFFFFFF",
						textSize: g(12),
						textFont: f.defaultBoldFontFace,
						gradient: {
							corners: a(8),
							gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
							innerLine: "4484C3E9 2.0"
						},
						pressedGradient: {
							corners: a(8),
							gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
							innerLine: "2B003366 2.0"
						}
					}
				}
			},
			extras: {
				headerHeightRatio: 1 / 8
			}
		}
	});
	b.sheet("social.us.commonelements", {
		standardButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				innerLine: "4484C3E9 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
				innerLine: "2B003366 2.0"
			},
			textFont: b.defaultBoldFontFace,
			textSize: h(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		largeStandardButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				outerLine: "FF233656 2.0",
				innerLine: "4484C3E9 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
				outerLine: "FF233656 2.0",
				innerShadow: "23000000 1.0 {0.0,-2.0}"
			},
			textFont: b.defaultBoldFontFace,
			textSize: h(16),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		largeActionButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"],
				outerLine: "FF233656 2.0",
				innerLine: "4484C3E9 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF5B971B 0.000", "FF397210 1.000"],
				outerLine: "FF233656 2.0",
				innerShadow: "23000000 1.0 {0.0,-2.0}"
			},
			textFont: b.defaultBoldFontFace,
			textSize: h(16),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		disabledButton: {
			gradient: {
				corners: d(8),
				gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
				innerLine: "44FFFFFF 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
				innerLine: "44FFFFFF 2.0"
			},
			textFont: b.defaultBoldFontFace,
			textSize: h(14),
			textColor: "FFD1CDCD",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		textBox: {
			gradient: {
				corners: d(6),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FF000000 2.0",
				insets: "{0.0,0.0,2.0,0.0}"
			},
			gradientError: {
				corners: d(6),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FFFF0000 2.0",
				insets: "{0.0,0.0,2.0,0.0}"
			},
			textFont: b.defaultRegularFontFace,
			textColor: "FF000000",
			textSize: h(14)
		},
		checkBoxGradients: {
			checkBoxChecked: {
				insets: "{0, 0, 0, 0}",
				outerLine: "00000000 3",
				outerShadow: "0000 0 {0,0}",
				corners: "6 6 6 6",
				innerShadow: "FF00 0 {0,0}",
				gradient: ["FF75B624 0", "FF4D8D1F 1"]
			},
			checkBoxUnChecked: {
				insets: "{0, 0, 0, 0}",
				outerLine: "00000000 3",
				outerShadow: "0000 0 {0,0}",
				corners: "6 6 6 6",
				innerShadow: "FF7A7E80 2 {0,-1}",
				gradient: ["FFE0E6EC 0", "FFF3F7FD 1"]
			},
			checkBoxPressed: {
				insets: "{0, 0, 0, 0}",
				innerShadow: "FF00 6.0 {0.0,-1.0}",
				gradient: ["FF80 0.000", "FF80 1.000"],
				outerLine: "0000 3",
				outerShadow: "0000 0.0 {0.0,0.0}",
				corners: "6 6 6 6"
			},
			checkBoxCheckedPressed: {
				innerShadow: "FF0F610F 5.0 {0.0,-1.0}",
				insets: "{0, 0, 0, 0}",
				gradient: ["FF179117 0.000", "FF179117 1.000"],
				outerLine: "0000 3",
				outerShadow: "0000 0.0 {0.0,0.0}",
				corners: "6 6 6 6"
			},
			checkBoxInActive: {
				insets: "{0, 0, 0, 0}",
				outerLine: "00000000 3",
				outerShadow: "3300 3 {0,0}",
				corners: "6 6 6 6",
				gradient: ["FFEEEEEE 0", "FFD6D6D6 1"]
			}
		},
		topPageNavigationTab: {
			gradient: {
				insets: "{4.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 0.0 0.0",
				innerLine: "26B7F5FF 1.5",
				gradient: ["FF2976BB 0.0", "FF0B4B93 0.94", "FF073161 0.95"]
			},
			pressedGradient: {
				insets: "{4.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 0.0 0.0",
				innerLine: "26B7F5FF 1.5",
				gradient: ["FF85C4EA 0.0", "FF4799D3 0.94", "FF3674A1 0.95"]
			},
			gradientSelected: {
				insets: "{0.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 0.0 0.0",
				innerLine: "26B7F5FF 1.5",
				gradient: ["FF2976BB 0.0", "FF1B61A3 0.94", "FF134370 0.95"]
			},
			textFont: b.defaultRegularFontFace,
			textFontSelected: b.defaultBoldFontFace,
			textSize: h(14),
			textColor: "FFFF",
			textGravity: [0.5, 0.5],
			textShadow: "66000000 1.0 {0.0,-2.0}",
			textShadowSelected: "66000000 1.0 {0.0,1.0}"
		},
		zeroCaseHeightFactor: 200 / 480,
		userPhoto: {
			imageBorder: {
				corners: d(4),
				outerLine: "FFFFFFFF 3",
				innerLine: "FFB2B2B2 2"
			}
		}
	});
	b.sheet("social.us.host", {
		parent: "social.us.commonelements",
		backgroundView: {
			gradient: {
				gradient: ["FF05162c 0.0", "FF132337 1.0"]
			},
			imageGravity: [0, 0]
		},
		backButton: {
			textFont: b.defaultBoldFontFace,
			textSize: h(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		}
	});
	b.sheet("social.us.servicehost", {
		parent: "social.us.host",
		backgroundView: {
			gradient: {
				gradient: ["FF061b3d 0.0"]
			},
			imageFit: 6
		},
		titleBarView: {
			backgroundColor: "80000000"
		},
		titleBarLine: {
			gradient: {
				outerLine: "2EA3D9FF 1.0"
			}
		},
		homeButton: {
			gradient: {
				outerShadow: "FF20719F 0.0 {0.0,-4.0}",
				insets: "{0.0,0.0,4.0,0.0}",
				corners: "6.0 6.0 6.0 6.0",
				innerShadow: "FFFFFEFE 2.0 {0.0,-1.0}",
				gradient: ["FF42BEF0 0.000", "FF35A2DC 1.000"],
				outerLine: "FF7DD1F4 1.0"
			},
			textColor: "FFFFFFFF"
		},
		mobageButton: {},
		activeGameButton: {
			gradient: {
				corners: d(6),
				gradient: ["FF1969B6 0.000", "FF00347E 1.000"],
				innerLine: "4484C3E9 1.0"
			},
			gradientPressed: {
				corners: d(6),
				gradient: ["FF002B69 0.000", "FF0A468D 1.000"],
				innerLine: "4484C3E9 1.0"
			},
			textColor: "FFFFFFFF",
			textColorPressed: "FFBFBFBF",
			textShadow: "33000000 1.0 {0.0,1.0}",
			textShadowPressed: "33FFFFFF 1.0 {0.0,1.0}",
			textFont: b.defaultBoldFontFace,
			textSize: h(10),
			textGravity: [1, 0.5]
		}
	});
	b.sheet("social.us.credentialshost", {
		parent: "social.us.host",
		titleBarView: {
			gradient: {
				gradient: ["FF0F3455 0.0", "FF061A35 1.0"],
				outerLine: "CC446B8E 2.0"
			}
		},
		titleBarLine: {
			gradient: {
				outerLine: "CC446B8E 2.0"
			}
		},
		footerView: {
			gradient: {
				gradient: ["CC000D21 0.0", "CC000D21 1.0"]
			}
		},
		footerLine: {
			gradient: {
				outerLine: "CC7D8996 2.0"
			}
		},
		mobageLogo: {
			imageFit: 1,
			imageGravity: [0.5, 0]
		},
		subtitle: {
			textFont: b.defaultRegularFontFace,
			textSize: h(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "66000000 4.0 {0.0,-4.0}"
		},
		footerLabel: {
			textFont: b.defaultRegularFontFace,
			textSize: h(14),
			textColor: "FFFFFFFF",
			textGravity: [0, 0.5],
			textShadow: "66000000 1.0 {0.0,-2.0}"
		},
		welcomeText0: {
			textFont: b.defaultBoldFontFace,
			textSize: h(12),
			textColor: "FF27A0F7",
			textGravity: [0.5, 1]
		},
		welcomeText1: {
			textFont: b.defaultBoldFontFace,
			textSize: h(12),
			textColor: "9927A0F7",
			textGravity: [0.5, 1]
		},
		welcomeText2: {
			textFont: b.defaultBoldFontFace,
			textSize: h(12),
			textColor: "6627A0F7",
			textGravity: [0.5, 1]
		}
	});
	b.sheet("social.us.disaggregated", {
		parent: "social.us.commonelements",
		backgroundView: {
			gradient: {
				corners: a(10),
				gradient: ["E5011E4C 0.0", "E5011E4C 1.0"],
				innerLine: "FF000000 3.0",
				insets: "{0,0,10,0}"
			}
		},
		inputLabel: {
			textFont: b.defaultRegularFontFace,
			textSize: g(16),
			textColor: "FFFFFFFF",
			textGravity: [0, 1]
		},
		forgotPasswordButton: {
			gradient: {
				corners: a(0),
				gradient: ["00000000 0.000", "00000000 1.000"],
				outerLine: "00000000 0.0",
				innerLine: "00000000 0.0"
			},
			pressedGradient: {
				corners: a(5),
				gradient: ["40000000 0.000", "80000000 1.000"],
				outerLine: "00000000 0.0",
				innerShadow: "00000000 1.0 {0.0,-2.0}",
				insets: "{5,0,5,0}"
			},
			textFont: b.defaultRegularFontFace,
			textColor: "FF4F89D5",
			textSize: g(15),
			textGravity: [0, 0.5],
			textShadow: "00000000 1.0 {0.0,-2.0}"
		},
		title: {
			textFont: b.defaultBoldFontFace,
			textSize: g(18),
			textColor: "FFFFFFFF",
			textGravity: [0, 1],
			textShadow: "CC000000 1.0 {0.0,-2.0}"
		},
		descText: {
			textFont: b.defaultRegularFontFace,
			textSize: g(14),
			textColor: "FFFFFFFF",
			textGravity: [0, 0.5]
		},
		invisibleButton: {
			pressedGradient: {
				corners: a(6),
				gradient: ["66000000 0.000"],
				insets: "{0.0,0.0,2.0,0.0}"
			}
		}
	});
	b.sheet("social.us.standardtitle", {
		content: {
			textColor: "FFFFFFFF",
			textSize: h(15)
		},
		accessory: {}
	});
	b.sheet("social.us.ccview", {
		_headerHeightRatio: 1 / 8,
		_insetRatio: 0.1,
		_borderThicknessRatio: 5 / 480,
		_bgHeightGrowthRatio: 1 / 480,
		bgAttributes: {
			gradient: {
				corners: d(4),
				gradient: ["FFE9EFF3 0.0", "FFE9EFF3 1.0"]
			}
		},
		borderAttributes: {
			gradient: {
				corners: d(2),
				outerLine: "FF0E1D3B 1.0"
			}
		}
	});
	b.sheet("social.us.usericonview", {
		gradient: {
			outerLine: "FFFFFEFE 2.5",
			innerLine: "FF00 1.5",
			corners: d(6)
		},
		imageBorder: {
			outerLine: "FFFFFEFE 2.5",
			innerLine: "FF00 1.5",
			corners: d(6)
		}
	});
	b.sheet("social.us.userbutton", {
		userButtonLabel: {
			textColor: "FF333333",
			textSize: h(11),
			textFont: b.defaultBoldFontFace
		},
		maxFriendNameChars: 7,
		userButtonIconY: 0,
		userButtonIconWidth: 62,
		userButtonLabelY: 66,
		userButtonLabelHeight: 22
	});
	b.sheet("social.us.interstitialsplash", {
		attributes: {
			gradient: {
				gradient: ["FF091847 0.0", "FF091847 1.0"]
			}
		}
	});
	b.sheet("social.us.progressveil", {
		gradient: {
			gradient: ["FF0B4B93 0.0", "FF0B4B93 1.0"]
		}
	});
	b.sheet("social.us.menudrawer", {
		menuDrawer: {
			gradient: {
				insets: "{0.0,-5.0,-5.0,-5.0}",
				gradient: ["EE011732 0.0", "EE002A5A 1.0"],
				innerLine: "FF334A62 3.0"
			}
		},
		menuDrawerButton: {
			textColor: "FFFFFFFF",
			textSize: h(14)
		},
		menuDrawerButtonPressed: {
			textColor: "FFB2B2B2",
			gradient: {
				gradient: ["FF011733 0.0", "FF002A5A 1.0"],
				innerLine: "FF334A62 3.0"
			},
			centerGradient: {
				gradient: ["FF011733 0.0", "FF002A5A 1.0"],
				innerLine: "FF334A62 1.0"
			}
		},
		centerButtonGradient: {
			insets: "{0.0,0.0,-5.0,0.0}",
			innerLine: "FF334A62 1.0"
		},
		imageHeightRatio: 50 / 102,
		topMarginRatio: 12 / 102,
		bottomMarginRatio: 10 / 102
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCViewList"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCViewList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCViewList"] = d;
	require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets");
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var e = j.Components;
	var h = j.Component;
	var a = j.ComponentInheritForKey;
	var b = j.ACCESSOR_PASSTHROUGH;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListView").AccordionListView;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView").CCView;
	var g = d.CCViewList = f.subclass({
		classname: "CCViewList",
		initialize: function($super, k) {
			this._compositePrepare();
			this._compositeInits.content = function(l) {
				this[l] = (new c()).retain()
			};
			$super(k);
			return this
		},
		getSections: function() {
			return this.content.getSections()
		},
		setSections: function(k) {
			return this.content.setSections(k)
		},
		layoutSubviews: function($super) {
			$super()
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListView"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListView"] = a;
	var c = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var d = a.AccordionListView = b.ListView.subclass({
		classname: "AccordionListView",
		initialize: function($super, e) {
			$super(e);
			return this
		},
		destroy: function() {},
		setFrame: function($super, e) {
			if (this._isValidFrame.apply(this, Array.prototype.slice.call(arguments, 1))) {
				$super.apply(this, Array.prototype.slice.call(arguments, 1))
			}
		},
		sizeChanged: function() {
			this.calculateSectionPositions();
			this.layoutSubviews()
		},
		getSections: function($super) {
			var e = $super() || [];
			return e.slice()
		},
		setSections: function($super, j) {
			var g, e;
			var f = this.getSections();
			var h = [];
			for (g in f) {
				if (f.hasOwnProperty(g) && j.indexOf(f[g]) == -1) {
					h.push(f[g])
				}
			}
			$super(j);
			for (g in h) {
				if (h.hasOwnProperty(g)) {
					h[g].flush()
				}
			}
			this._removeQueuedViews()
		},
		layoutSubviews: function() {},
		_adjustSectionHeaderHeights: function(g) {
			var f = new c.ViewGeometry.Rect(this.getFrame());
			for (var e = 0; e < g.length; e++) {
				g[e]._visibleRange = [0, 0];
				if (g[e].getTitleView()) {
					g[e].getTitleView().setFrame([0, 0, f.w, 0.14 * f.h]);
					g[e].getTitleView()._headerHeight = 0.14 * f.h
				}
			}
		},
		_isValidFrame: function(f) {
			var e = new c.ViewGeometry.Rect(f);
			if (e.isEmpty() || e.h < 10) {
				this.logd("Tried to set an android-unsafe frame! Blocking.");
				e.h = 10;
				e.w = (e.w && e.w >= 10) ? e.w : 10;
				e.x = isNaN(e.x) ? 0 : e.x;
				e.y = isNaN(e.y) ? 0 : e.y;
				this.setFrame(e);
				return false
			}
			return true
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/AcknowledgementsWebScreen"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/AcknowledgementsWebScreen"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/AcknowledgementsWebScreen"] = c;
	var f = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var d = e.ViewGeometry.Scale;
	var g = require("NGCore/Client/Social/_Internal/US/Assets/Localization").Localization;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var a = c.AcknowledgementsWebScreen = b.subclass({
		classname: "AcknowledgementsWebScreen",
		initialize: function($super, h) {
			if ($super && typeof $super == "function") {
				$super()
			}
			this._contentUrl = "http://" + f.Capabilities.getSocialServer() + "/acknowledgements";
			this._totalWidth = f.Capabilities.getScreenHeight();
			this._totalHeight = f.Capabilities.getScreenWidth()
		},
		destroy: function() {
			if (this._retainedViews) {
				for (var h = 0; h < this._retainedViews.length; h++) {
					var j = this._retainedViews[h];
					if (j) {
						j.release()
					}
				}
			}
			this._retainedViews = new Array()
		},
		retainView: function(h) {
			if (h) {
				h.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(h)
			}
			return h
		},
		loadView: function($super) {
			$super();
			var h = new e.ViewGeometry.Rect([0, 0, this._totalWidth, this._totalHeight]);
			h.sliceVertical(13.75, e.Scale.Percent);
			h.y += 2;
			h.h -= 2;
			this.webView = this.retainView(new e.WebView());
			this.webView.setFrame(h);
			this.webView.setGradient({
				gradient: ["FFFF 0.0"]
			});
			this.webView.loadUrl(this._contentUrl, {
				"Accept-Language": g.getAcceptLanguage()
			});
			this.view().addChild(this.webView)
		},
		didPush: function($super, h) {
			$super(h);
			this.navController._host.hideLoadingLabel()
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccountSettingsView"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccountSettingsView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccountSettingsView"] = e;
	var g = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/UI").UI;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView").CCView;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		AccountSettings: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/AccountSettings").AccountSettings
		},
		SettingsOption: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/AccountSettings").SettingsOption
		},
		BlockedUser: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/AccountSettings").BlockedUser
		}
	});
	e.AccountSettingsView = h.subclass({
		classname: "AccountSettingsView",
		_viewHeader: null,
		_labelHeader: null,
		_optionsArea: null,
		_optPushFriends: null,
		_optNewsUpdates: null,
		_emailArea: null,
		_labelEmailAddress: null,
		_editEmailAddress: null,
		_buttonSaveChanges: null,
		_blockedUsersHeader: null,
		_labelBlockedUsers: null,
		_viewBlockedUsers: null,
		_footerArea: null,
		_buttonSupport: null,
		_acknowledgementsButton: null,
		_systemInfoButton: null,
		_toast: null,
		_blockedUserUIList: new Array(),
		initSubviews: function($super) {
			$super();
			this._style = a.AccountSettings;
			this._totalWidth = g.Capabilities.getScreenHeight();
			this._totalHeight = g.Capabilities.getScreenWidth();
			var l = a.Session.getCurrentSession();
			this._curUser = l.user();
			this._initializeContent()
		},
		_initializeContent: function() {
			this._scrollArea = this.getContentView();
			this._viewHeader = (new c.View()).retain();
			this._labelHeader = (new c.Label()).retain();
			this._optionsArea = (new c.View()).retain();
			this._optPushFriends = (new b()).retain();
			this._optNewsUpdates = (new b()).retain();
			this._emailArea = (new c.View()).retain();
			this._labelEmailAddress = (new c.Label()).retain();
			this._editEmailAddress = (new c.EditText()).retain();
			this._buttonSaveChanges = (new a.UnspammableButton()).retain();
			this._blockedUsersHeader = (new c.View()).retain();
			this._labelBlockedUsers = (new c.Label()).retain();
			this._viewBlockedUsers = (new c.View()).retain();
			this._footerArea = (new c.View()).retain();
			this._buttonSupport = (new a.UnspammableButton()).retain();
			this._acknowledgementsButton = (new a.UnspammableButton()).retain();
			this._systemInfoButton = (new a.UnspammableButton()).retain();
			this._toast = (new c.Toast()).retain();
			this._labelHeader.setText(k("Account Settings"));
			this._optPushFriends.setText(k("Only receive push notifications from Mobage Friends"));
			this._optNewsUpdates.setText(k("Send me game news and updates"));
			this._labelEmailAddress.setText(k("Email Address"));
			this._editEmailAddress.setText(this._curUser.emailAddress);
			this._buttonSaveChanges.setText(k("Save"));
			this._labelBlockedUsers.setText(k("Blocked Users"));
			this._buttonSupport.setText(k("Support"));
			this._acknowledgementsButton.setText(k("View Acknowledgements"));
			this._systemInfoButton.setText(k("Mobage Version"));
			this._buttonSaveChanges.onclick = (function() {
				if (this.controller) {
					this.controller.buttonSaveChangesOnClick()
				}
			}).bind(this);
			this._buttonSupport.onclick = (function() {
				if (this.controller) {
					this.controller.buttonSupportOnClick()
				}
			}).bind(this);
			this._acknowledgementsButton.onclick = (function() {
				if (this.controller) {
					this.controller.acknowledgementsButtonOnClick()
				}
			}).bind(this);
			this._systemInfoButton.onclick = (function() {
				if (this.controller) {
					this.controller.systemInfoButtonOnClick()
				}
			}).bind(this);
			this._editEmailAddress.setInputType(c.Commands.InputType.Email);
			this._editEmailAddress.setEnterKeyType(c.Commands.EnterKeyType.Done);
			this._applyKeyboardWorkaround(this._editEmailAddress);
			this._optPushFriends.setChecked(this._curUser.onlyShowFriendNotifications);
			this._optPushFriends.setIndex(0);
			this._optNewsUpdates.setChecked(this._curUser.optsIn);
			this._optNewsUpdates.setIndex(1);
			this._style.applyTo(this)
		},
		addSubviews: function($super) {
			$super();
			this._viewHeader.addChild(this._labelHeader);
			this._optionsArea.addChild(this._optPushFriends);
			this._optionsArea.addChild(this._optNewsUpdates);
			this._emailArea.addChild(this._labelEmailAddress);
			this._emailArea.addChild(this._editEmailAddress);
			this._emailArea.addChild(this._buttonSaveChanges);
			this._blockedUsersHeader.addChild(this._labelBlockedUsers);
			this._footerArea.addChild(this._buttonSupport);
			this._footerArea.addChild(this._acknowledgementsButton);
			this._footerArea.addChild(this._systemInfoButton);
			this._scrollArea.addChild(this._viewHeader);
			this._scrollArea.addChild(this._optionsArea);
			this._scrollArea.addChild(this._emailArea);
			this._scrollArea.addChild(this._footerArea)
		},
		_applyKeyboardWorkaround: function(l) {
			if (this.controller) {
				this.controller.applyKeyboardWorkaround(l)
			}
		},
		destroy: function() {
			if (this._viewHeader) {
				this._viewHeader.release()
			}
			if (this._labelHeader) {
				this._labelHeader.release()
			}
			if (this._optionsArea) {
				this._optionsArea.release()
			}
			if (this._optPushFriends) {
				this._optPushFriends.release()
			}
			if (this._optNewsUpdates) {
				this._optNewsUpdates.release()
			}
			if (this._emailArea) {
				this._emailArea.release()
			}
			if (this._labelEmailAddress) {
				this._labelEmailAddress.release()
			}
			if (this._editEmailAddress) {
				this._editEmailAddress.release()
			}
			if (this._buttonSaveChanges) {
				this._buttonSaveChanges.release()
			}
			if (this._blockedUsersHeader) {
				this._blockedUsersHeader.release()
			}
			if (this._labelBlockedUsers) {
				this._labelBlockedUsers.release()
			}
			if (this._viewBlockedUsers) {
				this._viewBlockedUsers.release()
			}
			if (this._footerArea) {
				this._footerArea.release()
			}
			if (this._buttonSupport) {
				this._buttonSupport.release()
			}
			if (this._acknowledgementsButton) {
				this._acknowledgementsButton.release()
			}
			if (this._systemInfoButton) {
				this._systemInfoButton.release()
			}
			if (this._toast) {
				this._toast.release()
			}
			this._cleanBlockedUserUIList()
		},
		_cleanBlockedUserUIList: function() {
			if (this._blockedUserUIList) {
				for (var l = 0; l < this._blockedUserUIList.length; l++) {
					var m = this._blockedUserUIList[l];
					if (m && !m.__destroyed__) {
						m.release()
					}
				}
			}
			this._blockedUserUIList = new Array()
		},
		layoutSubviews: function($super) {
			$super();
			var o = this._style.extras.viewRatio;
			this._contentWidth = this.getContentWidth();
			this._viewHeaderHeight = o.contentHeaderHFactor * this._totalHeight;
			this._viewHeader.setFrame([0, 0, this._contentWidth, this._viewHeaderHeight]);
			this._labelHeader.setFrame([o.labelHeaderXFactor * this._contentWidth, o.labelHeaderYFactor * this._viewHeaderHeight, o.labelHeaderWFactor * this._contentWidth, o.labelHeaderHFactor * this._viewHeaderHeight]);
			var m = 2;
			this._optionsAreaHeight = m * o.optionCellHFactor * this._totalHeight;
			this._optionsArea.setFrame([0, this._viewHeaderHeight, this._contentWidth, this._optionsAreaHeight]);
			this._emailAreaHeight = o.emailAddressAreaHFactor * this._totalHeight;
			this._emailArea.setFrame([0, this._viewHeaderHeight + this._optionsAreaHeight, this._contentWidth, this._emailAreaHeight]);
			this._labelEmailAddress.setFrame([o.emailAddressLabelXFactor * this._contentWidth, o.emailAddressLabelYFactor * this._emailAreaHeight, o.emailAddressLabelWFactor * this._contentWidth, o.emailAddressLabelHFactor * this._emailAreaHeight]);
			this._editEmailAddress.setFrame([o.emailAddressEditBoxXFactor * this._contentWidth, o.emailAddressEditBoxYFactor * this._emailAreaHeight, o.emailAddressEditBoxWFactor * this._contentWidth, o.emailAddressEditBoxHFactor * this._emailAreaHeight]);
			this._buttonSaveChanges.setFrame([o.saveChangesButtonXFactor * this._contentWidth, o.saveChangesButtonYFactor * this._emailAreaHeight, o.saveChangesButtonWFactor * this._contentWidth, o.saveChangesButtonHFactor * this._emailAreaHeight]);
			this._blockedUsersHeaderHeight = o.blockedUsersHeaderAreaHFactor * this._totalHeight;
			this._blockedUsersHeader.setFrame([0, this._viewHeaderHeight + this._optionsAreaHeight + this._emailAreaHeight, this._contentWidth, this._blockedUsersHeaderHeight]);
			this._labelBlockedUsers.setFrame([o.labelBlockedUsersHeaderXFactor * this._contentWidth, o.labelBlockedUsersHeaderYFactor * this._blockedUsersHeaderHeight, o.labelBlockedUsersHeaderWFactor * this._contentWidth, o.labelBlockedUsersHeaderHFactor * this._blockedUsersHeaderHeight]);
			this._blockedUserCellHeight = o.blockedUserCellHFactor * this._totalHeight;
			var n = o.footerAreaHFactor * this._totalHeight;
			this._buttonSupport.setFrame([o.buttonSupportXFactor * this._contentWidth, o.buttonSupportYFactor * n, o.buttonSupportWFactor * this._contentWidth, o.buttonSupportHFactor * n]);
			var l = o.buttonSystemInfoWFactor * this._contentWidth;
			var p = o.buttonAcknowledgementsWFactor * this._contentWidth;
			var q = o.buttonSystemInfoXFactor * this._contentWidth;
			this._acknowledgementsButton.setFrame([this._contentWidth - o.buttonAcknowledgementsXFactor - p - q, o.buttonAcknowledgementsYFactor * n, p, o.buttonAcknowledgementsHFactor * n]);
			this._systemInfoButton.setFrame([q, o.buttonSystemInfoYFactor * n, l, o.buttonSystemInfoHFactor * n])
		},
		_createBlockedUser: function(n, l, o) {
			var m = (new f()).retain();
			m.setAvatar(l.getDefinedIcon());
			m.setGamerTag(l.gamertag);
			m.setGamerName(l.getFullName());
			m.setIndex(o);
			this._blockedUserUIList.push(m);
			m.setOnClick((function() {
				if (this.controller) {
					this.controller.blockeduserOnClick(l, m)
				}
			}).bind(this));
			this._viewBlockedUsers.addChild(m)
		},
		_updateBlockedUserAreaSize: function(p) {
			var n = this._style.extras.viewRatio;
			var l = 0;
			if (p > 0) {
				l = n.blockedUsersHeaderAreaHFactor * this._totalHeight + (p * n.blockedUserCellHFactor * this._totalHeight);
				this._viewBlockedUsers.setFrame([0, this._viewHeaderHeight + this._optionsAreaHeight + this._emailAreaHeight + this._blockedUsersHeaderHeight, this._contentWidth, l]);
				if (!this._blockedUsersHeader.getParent()) {
					this._scrollArea.addChild(this._blockedUsersHeader)
				}
				if (!this._viewBlockedUsers.getParent()) {
					this._scrollArea.addChild(this._viewBlockedUsers)
				}
			} else {
				if (this._blockedUsersHeader.getParent()) {
					this._blockedUsersHeader.removeFromParent()
				}
				if (this._viewBlockedUsers.getParent()) {
					this._viewBlockedUsers.removeFromParent()
				}
			}
			var o = this._viewHeaderHeight + this._optionsAreaHeight + this._emailAreaHeight + l;
			var m = n.footerAreaHFactor * this._totalHeight;
			this._footerArea.setFrame([0, o, this._contentWidth, m])
		},
		_updateContentSize: function() {
			var n = this._style.extras.viewRatio;
			var l = n.scrollViewContentHFactor * this._totalHeight;
			if (this._footerArea) {
				var m = this._footerArea.getFrame();
				l = m[1] + m[3]
			}
			this._scrollArea.setContentSize(this.getContentWidth(), l)
		}
	});
	var b = c.View.subclass({
		classname: "SettingsOption",
		_contentArea: null,
		_labelText: null,
		_checkSelect: null,
		_optionText: "Text for option not set!",
		_optionChecked: false,
		_totalWidth: 0,
		_totalHeight: 0,
		_contentWidth: 0,
		_index: 0,
		initialize: function() {
			this._style = a.SettingsOption;
			this._initializeContent();
			this._layoutSubviews();
			this._addSubviews();
			this._style.applyTo(this)
		},
		_initializeContent: function() {
			this._contentArea = (new c.View()).retain();
			this._labelText = (new c.Label()).retain();
			this._checkSelect = (new c.CheckBox()).retain();
			this._checkSelect.onclick = this.bind(function(l) {
				if (l.eventType === "click") {
					this._optionChecked = !this._optionChecked
				}
			})
		},
		_addSubviews: function() {
			this._contentArea.addChild(this._labelText);
			this._contentArea.addChild(this._checkSelect);
			this.addChild(this._contentArea)
		},
		_layoutSubviews: function() {
			var l = this._style.extras.viewRatio;
			this._totalWidth = g.Capabilities.getScreenHeight();
			this._totalHeight = g.Capabilities.getScreenWidth();
			this._contentWidth = this._getContentWidth();
			this._contentHeight = l.optionCellHFactor * this._totalHeight;
			this._contentArea.setFrame([0, 0, this._contentWidth, this._contentHeight]);
			this._labelText.setFrame([l.optionLabelXFactor * this._contentWidth, l.optionLabelYFactor * this._contentHeight, l.optionLabelWFactor * this._contentWidth, l.optionLabelHFactor * this._contentHeight]);
			this._checkSelect.setFrame([l.optionCheckBoxXFactor * this._contentWidth, l.optionCheckBoxYFactor * this._contentHeight, l.optionCheckBoxWFactor * this._contentWidth, l.optionCheckBoxHFactor * this._contentHeight])
		},
		destroy: function() {
			if (this._contentArea) {
				this._contentArea.release()
			}
			if (this._labelText) {
				this._labelText.release()
			}
			if (this._checkSelect) {
				this._checkSelect.release()
			}
		},
		setText: function(l) {
			this._optionText = l;
			if (this._labelText) {
				this._labelText.setText(l)
			}
		},
		setTextSize: function(l) {
			if (this._labelText) {
				this._labelText.setTextSize(l)
			}
		},
		setChecked: function(l) {
			this._optionChecked = l;
			if (this._checkSelect) {
				this._checkSelect.setChecked(l === true)
			}
		},
		isChecked: function() {
			return this._optionChecked
		},
		setIndex: function(l) {
			this._index = l;
			this.setFrame([0, this._index * this._contentHeight, this._contentWidth, this._contentHeight])
		},
		_getContentWidth: function() {
			return (1 - a.VerticalTabViewSizing.buttonContainerRatio - a.VerticalTabViewSizing.insetRatio) * this._totalWidth
		}
	});
	var f = c.View.subclass({
		classname: "BlockedUser",
		_contentArea: null,
		_totalWidth: 0,
		_totalHeight: 0,
		_contentWidth: 0,
		_index: 0,
		_avatarValue: null,
		_gamerTagValue: "",
		_gamerNameValue: "",
		_avatar: null,
		_gamerTag: null,
		_gamerName: null,
		_unblockButton: null,
		initialize: function() {
			this._style = a.BlockedUser;
			this._initializeContent();
			this._layoutSubviews();
			this._addSubviews();
			this._style.applyTo(this)
		},
		_initializeContent: function() {
			this._contentArea = (new c.View()).retain();
			this._avatar = (new c.Image()).retain();
			this._gamerTag = (new c.Label()).retain();
			this._gamerName = (new c.Label()).retain();
			this._unblockButton = (new a.UnspammableButton()).retain();
			this._unblockButton.setText(k("Unblock"))
		},
		_addSubviews: function() {
			this._contentArea.addChild(this._avatar);
			this._contentArea.addChild(this._gamerTag);
			this._contentArea.addChild(this._gamerName);
			this._contentArea.addChild(this._unblockButton);
			this.addChild(this._contentArea)
		},
		_layoutSubviews: function() {
			var l = this._style.extras.viewRatio;
			this._totalWidth = g.Capabilities.getScreenHeight();
			this._totalHeight = g.Capabilities.getScreenWidth();
			this._contentWidth = this._getContentWidth();
			this._contentHeight = l.blockedUserCellHFactor * this._totalHeight;
			this._contentArea.setFrame([0, 0, this._contentWidth, this._contentHeight]);
			this._avatar.setFrame([l.blockedUserAvatarXFactor * this._contentWidth, l.blockedUserAvatarYFactor * this._contentHeight, l.blockedUserAvatarWFactor * this._contentWidth, l.blockedUserAvatarHFactor * this._contentHeight]);
			this._gamerTag.setFrame([l.blockedUserGamerTagXFactor * this._contentWidth, l.blockedUserGamerTagYFactor * this._contentHeight, l.blockedUserGamerTagWFactor * this._contentWidth, l.blockedUserGamerTagHFactor * this._contentHeight]);
			this._gamerTag.setTextSize(l.blockedUserGamerTagHFactor * this._contentHeight * 0.5);
			this._gamerName.setFrame([l.blockedUserGamerNameXFactor * this._contentWidth, l.blockedUserGamerNameYFactor * this._contentHeight, l.blockedUserGamerNameWFactor * this._contentWidth, l.blockedUserGamerNameHFactor * this._contentHeight]);
			this._gamerName.setTextSize(l.blockedUserGamerNameHFactor * this._contentHeight * 0.5);
			this._unblockButton.setFrame([l.unblockButtonXFactor * this._contentWidth, l.unblockButtonYFactor * this._contentHeight, l.unblockButtonWFactor * this._contentWidth, l.unblockButtonHFactor * this._contentHeight])
		},
		destroy: function() {
			if (this._contentArea) {
				this._contentArea.release()
			}
			if (this._avatar) {
				this._avatar.release()
			}
			if (this._gamerTag) {
				this._gamerTag.release()
			}
			if (this._gamerName) {
				this._gamerName.release()
			}
			if (this._unblockButton) {
				this._unblockButton.release()
			}
		},
		setIndex: function(m) {
			this._index = m;
			this.setFrame([0, this._index * this._contentHeight, this._contentWidth, this._contentHeight]);
			var l = this._style.extras.viewRatio;
			if (m % 2 === 0) {
				this._contentArea.setBackgroundColor("FFF9FCFD")
			} else {
				this._contentArea.setBackgroundColor("FFE6EDF5")
			}
		},
		getIndex: function() {
			return this._index
		},
		setGamerTag: function(l) {
			this._gamerTagValue = l;
			if (this._gamerTag) {
				this._gamerTag.setText(this._gamerTagValue)
			}
		},
		setGamerName: function(l) {
			this._gamerNameValue = l;
			if (this._gamerName) {
				this._gamerName.setText(this._gamerNameValue)
			}
		},
		setAvatar: function(l) {
			this._avatarValue = l;
			if (this._avatar) {
				this._avatar.setImage(this._avatarValue)
			}
		},
		setOnClick: function(l) {
			this._unblockButton.onclick = l
		},
		_getContentWidth: function() {
			return (1 - a.VerticalTabViewSizing.buttonContainerRatio - a.VerticalTabViewSizing.insetRatio) * this._totalWidth
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/AccountSettings"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/AccountSettings"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/AccountSettings"] = c;
	var f = {};
	f.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var b = d.ScaledCorners;
	var e = d.ScaledTextSize;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements;
	d.lazyLoad(c, "AccountSettings", function() {
		return {
			children: {
				_viewHeader: {
					style: {
						gradient: {
							gradient: ["FF143558 0.000", "FF295D8D 1.000"]
						}
					}
				},
				_optionsArea: {
					style: {
						backgroundColor: "FFE6EDF5"
					}
				},
				_labelHeader: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FFFFFFFF",
						textShadow: "33000000 1.0 {0.0,-2.0}",
						textGravity: [0, 0.5]
					}
				},
				_emailArea: {
					style: {
						gradient: {
							gradient: ["FFDBE2EA 0.000", "FFE9EFF3 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_labelEmailAddress: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF000000",
						textSize: e(12),
						textGravity: [0, 0.5]
					}
				},
				_editEmailAddress: a.textBox,
				_buttonSaveChanges: a.standardButton,
				_blockedUsersHeader: {
					style: {
						gradient: {
							gradient: ["FFA0B0C0 0.000", "FFBFCCD8 0.060", "FFDCE5ED 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_labelBlockedUsers: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF000000",
						textSize: e(12),
						textGravity: [0, 0.5]
					}
				},
				_acknowledgementsButton: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FF457BBF",
						textGravity: [1, 0.5],
						pressedGradient: {
							gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"]
						}
					}
				},
				_systemInfoButton: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FF457BBF",
						textGravity: [0, 0.5],
						pressedGradient: {
							gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"]
						}
					}
				},
				_footerArea: {
					style: {
						gradient: {
							gradient: ["FFDBE2EA 0.000", "FFE9EFF3 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_buttonSupport: a.standardButton
			},
			extras: {
				viewRatio: {
					scrollViewContentHFactor: ((675 + 10) / 480),
					contentHeaderHFactor: (56 / 480),
					contentHeaderWFactor: (578 / 800),
					labelHeaderXFactor: (14 / 578),
					labelHeaderYFactor: (17 / 56),
					labelHeaderWFactor: (284 / 578),
					labelHeaderHFactor: (25 / 56),
					contentAreaHFactor: (420 / 480),
					contentAreaWFactor: (578 / 800),
					optionCellHFactor: (64 / 480),
					emailAddressAreaHFactor: (166 / 480),
					emailAddressLabelXFactor: (17 / 578),
					emailAddressLabelYFactor: (14 / 166),
					emailAddressLabelWFactor: (200 / 578),
					emailAddressLabelHFactor: (23 / 166),
					emailAddressEditBoxXFactor: (12 / 578),
					emailAddressEditBoxYFactor: (44 / 166),
					emailAddressEditBoxWFactor: (554 / 578),
					emailAddressEditBoxHFactor: (60 / 166),
					saveChangesButtonXFactor: (199 / 578),
					saveChangesButtonYFactor: (111 / 166),
					saveChangesButtonWFactor: (180 / 578),
					saveChangesButtonHFactor: (46 / 166),
					blockedUsersHeaderAreaHFactor: (42 / 480),
					labelBlockedUsersHeaderXFactor: (13 / 578),
					labelBlockedUsersHeaderYFactor: (9 / 42),
					labelBlockedUsersHeaderWFactor: (200 / 578),
					labelBlockedUsersHeaderHFactor: (23 / 42),
					blockedUserCellHFactor: (98 / 480),
					footerAreaHFactor: (130 / 480),
					buttonSupportXFactor: (12 / 578),
					buttonSupportYFactor: (26 / 130),
					buttonSupportWFactor: (552 / 578),
					buttonSupportHFactor: (46 / 130),
					buttonAcknowledgementsXFactor: (12 / 578),
					buttonAcknowledgementsYFactor: (81 / 130),
					buttonAcknowledgementsWFactor: (55 / 100),
					buttonAcknowledgementsHFactor: (40 / 130),
					buttonSystemInfoXFactor: (12 / 578),
					buttonSystemInfoYFactor: (81 / 130),
					buttonSystemInfoWFactor: (40 / 100),
					buttonSystemInfoHFactor: (40 / 130)
				}
			}
		}
	});
	d.lazyLoad(c, "SettingsOption", function() {
		return {
			children: {
				_labelText: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF000000",
						textSize: e(12),
						textGravity: [0, 0.5]
					}
				},
				_checkSelect: a.checkBox
			},
			extras: {
				viewRatio: {
					optionCellHFactor: (64 / 480),
					optionLabelXFactor: (12 / 578),
					optionLabelYFactor: (4 / 56),
					optionLabelWFactor: (480 / 578),
					optionLabelHFactor: (40 / 56),
					optionCheckBoxXFactor: (508 / 578),
					optionCheckBoxYFactor: (4 / 56),
					optionCheckBoxWFactor: (56 / 578),
					optionCheckBoxHFactor: (40 / 56)
				}
			}
		}
	});
	d.lazyLoad(c, "BlockedUser", function() {
		return {
			children: {
				_avatar: {
					style: {
						gradient: {
							corners: "4.0 4.0 4.0 4.0",
							gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
							outerLine: "FFFFFFFF 3",
							innerLine: "FFB2B2B2 2"
						},
						imageInsets: [5, 5, 5, 5]
					}
				},
				_gamerName: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF000000",
						textGravity: [0, 0.5]
					}
				},
				_gamerTag: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF004AA9",
						textGravity: [0, 0.5]
					}
				},
				_unblockButton: a.standardButton,
				_blockedUserCellOdd: {
					style: {
						backgroundColor: "FFE6EDF5"
					}
				},
				_blockedUserCellEven: {
					style: {
						backgroundColor: "FFF9FCFD"
					}
				}
			},
			extras: {
				viewRatio: {
					blockedUserCellHFactor: (98 / 480),
					blockedUsersHeaderAreaHFactor: (42 / 480),
					blockedUserAvatarXFactor: (7 / 578),
					blockedUserAvatarYFactor: (7 / 98),
					blockedUserAvatarWFactor: (84 / 578),
					blockedUserAvatarHFactor: (84 / 98),
					blockedUserGamerTagXFactor: (101 / 578),
					blockedUserGamerTagYFactor: (13 / 98),
					blockedUserGamerTagWFactor: (350 / 578),
					blockedUserGamerTagHFactor: (24 / 98),
					blockedUserGamerNameXFactor: (97 / 578),
					blockedUserGamerNameYFactor: (43 / 98),
					blockedUserGamerNameWFactor: (350 / 578),
					blockedUserGamerNameHFactor: (24 / 98),
					unblockButtonXFactor: (438 / 578),
					unblockButtonYFactor: (26 / 98),
					unblockButtonWFactor: (130 / 578),
					unblockButtonHFactor: (46 / 98)
				}
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/AccountSettings"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/AccountSettings"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/AccountSettings"] = c;
	var f = {};
	f.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var b = d.ScaledCorners;
	var e = d.ScaledTextSize;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Main").CommonElements;
	d.lazyLoad(c, "AccountSettings", function() {
		return {
			children: {
				_viewHeader: {
					style: {
						gradient: {
							gradient: ["FF143558 0.000", "FF295D8D 1.000"]
						}
					}
				},
				_optionsArea: {
					style: {
						backgroundColor: "FFE6EDF5"
					}
				},
				_labelHeader: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FFFFFFFF",
						textShadow: "33000000 1.0 {0.0,-2.0}",
						textGravity: [0, 0.5]
					}
				},
				_emailArea: {
					style: {
						gradient: {
							gradient: ["FFDBE2EA 0.000", "FFE9EFF3 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_labelEmailAddress: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF000000",
						textSize: e(12),
						textGravity: [0, 0.5]
					}
				},
				_editEmailAddress: a.textBox,
				_buttonSaveChanges: a.standardButton,
				_blockedUsersHeader: {
					style: {
						gradient: {
							gradient: ["FFA0B0C0 0.000", "FFBFCCD8 0.060", "FFDCE5ED 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_labelBlockedUsers: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF000000",
						textSize: e(12),
						textGravity: [0, 0.5]
					}
				},
				_acknowledgementsButton: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FF457BBF",
						textGravity: [1, 0.5],
						pressedGradient: {
							gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"]
						}
					}
				},
				_systemInfoButton: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FF457BBF",
						textGravity: [0, 0.5],
						pressedGradient: {
							gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"]
						}
					}
				},
				_footerArea: {
					style: {
						gradient: {
							gradient: ["FFDBE2EA 0.000", "FFE9EFF3 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_buttonSupport: a.standardButton
			},
			extras: {
				viewRatio: {
					scrollViewContentHFactor: ((675 + 10) / 480),
					contentHeaderHFactor: (56 / 480),
					contentHeaderWFactor: (578 / 800),
					labelHeaderXFactor: (14 / 578),
					labelHeaderYFactor: (17 / 56),
					labelHeaderWFactor: (284 / 578),
					labelHeaderHFactor: (25 / 56),
					contentAreaHFactor: (420 / 480),
					contentAreaWFactor: (578 / 800),
					optionCellHFactor: (64 / 480),
					emailAddressAreaHFactor: (166 / 480),
					emailAddressLabelXFactor: (17 / 578),
					emailAddressLabelYFactor: (14 / 166),
					emailAddressLabelWFactor: (200 / 578),
					emailAddressLabelHFactor: (23 / 166),
					emailAddressEditBoxXFactor: (12 / 578),
					emailAddressEditBoxYFactor: (44 / 166),
					emailAddressEditBoxWFactor: (554 / 578),
					emailAddressEditBoxHFactor: (60 / 166),
					saveChangesButtonXFactor: (199 / 578),
					saveChangesButtonYFactor: (111 / 166),
					saveChangesButtonWFactor: (180 / 578),
					saveChangesButtonHFactor: (46 / 166),
					blockedUsersHeaderAreaHFactor: (42 / 480),
					labelBlockedUsersHeaderXFactor: (13 / 578),
					labelBlockedUsersHeaderYFactor: (9 / 42),
					labelBlockedUsersHeaderWFactor: (200 / 578),
					labelBlockedUsersHeaderHFactor: (23 / 42),
					blockedUserCellHFactor: (98 / 480),
					footerAreaHFactor: (130 / 480),
					buttonSupportXFactor: (12 / 578),
					buttonSupportYFactor: (26 / 130),
					buttonSupportWFactor: (552 / 578),
					buttonSupportHFactor: (46 / 130),
					buttonAcknowledgementsXFactor: (12 / 578),
					buttonAcknowledgementsYFactor: (81 / 130),
					buttonAcknowledgementsWFactor: (55 / 100),
					buttonAcknowledgementsHFactor: (40 / 130),
					buttonSystemInfoXFactor: (12 / 578),
					buttonSystemInfoYFactor: (81 / 130),
					buttonSystemInfoWFactor: (40 / 100),
					buttonSystemInfoHFactor: (40 / 130)
				}
			}
		}
	});
	d.lazyLoad(c, "SettingsOption", function() {
		return {
			children: {
				_labelText: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF000000",
						textSize: e(12),
						textGravity: [0, 0.5]
					}
				},
				_checkSelect: a.checkBox
			},
			extras: {
				viewRatio: {
					optionCellHFactor: (64 / 480),
					optionLabelXFactor: (12 / 578),
					optionLabelYFactor: (4 / 56),
					optionLabelWFactor: (480 / 578),
					optionLabelHFactor: (40 / 56),
					optionCheckBoxXFactor: (508 / 578),
					optionCheckBoxYFactor: (4 / 56),
					optionCheckBoxWFactor: (56 / 578),
					optionCheckBoxHFactor: (40 / 56)
				}
			}
		}
	});
	d.lazyLoad(c, "BlockedUser", function() {
		return {
			children: {
				_avatar: {
					style: {
						gradient: {
							corners: "4.0 4.0 4.0 4.0",
							gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
							outerLine: "FFFFFFFF 3",
							innerLine: "FFB2B2B2 2"
						},
						imageInsets: [5, 5, 5, 5]
					}
				},
				_gamerName: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF000000",
						textGravity: [0, 0.5]
					}
				},
				_gamerTag: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FF004AA9",
						textGravity: [0, 0.5]
					}
				},
				_unblockButton: a.standardButton,
				_blockedUserCellOdd: {
					style: {
						backgroundColor: "FFE6EDF5"
					}
				},
				_blockedUserCellEven: {
					style: {
						backgroundColor: "FFF9FCFD"
					}
				}
			},
			extras: {
				viewRatio: {
					blockedUserCellHFactor: (98 / 480),
					blockedUsersHeaderAreaHFactor: (42 / 480),
					blockedUserAvatarXFactor: (7 / 578),
					blockedUserAvatarYFactor: (7 / 98),
					blockedUserAvatarWFactor: (84 / 578),
					blockedUserAvatarHFactor: (84 / 98),
					blockedUserGamerTagXFactor: (101 / 578),
					blockedUserGamerTagYFactor: (13 / 98),
					blockedUserGamerTagWFactor: (350 / 578),
					blockedUserGamerTagHFactor: (24 / 98),
					blockedUserGamerNameXFactor: (97 / 578),
					blockedUserGamerNameYFactor: (43 / 98),
					blockedUserGamerNameWFactor: (350 / 578),
					blockedUserGamerNameHFactor: (24 / 98),
					unblockButtonXFactor: (438 / 578),
					unblockButtonYFactor: (26 / 98),
					unblockButtonWFactor: (130 / 578),
					unblockButtonHFactor: (46 / 98)
				}
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection"] = a;
	var d = require("NGCore/Client/UI").UI;
	var e = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var b = a.MBListViewSection = c.ListViewSection.subclass({
		classname: "MBListViewSection",
		initialize: function($super, f) {
			$super(f);
			this.setRowHeightRatio(1 / 5)
		},
		setItems: function($super, g) {
			if (this._listView) {
				var f;
				for (var h = 0; h < this._listView._ownedViews.length; h++) {
					f = this._listView._ownedViews[h];
					if (f.setFrameOrigin) {
						f.setFrameOrigin([0, 0 - f.getFrameSize()[1]])
					}
				}
			}
			$super(g)
		},
		flush: function($super) {
			if (!this._visibleRange) {
				this.loge("What the hell? Our visible range is undefined.");
				return
			}
			$super()
		},
		updateVisibleRange: function($super, f, g) {
			if (!this._items) {
				this.loge("Update visible range will crash if called without items");
				this._items = []
			}
			$super.apply(this, Array.prototype.slice.call(arguments, 1))
		},
		getSectionHeader: function() {
			return this.getTitleView()
		},
		setSectionHeader: function(f) {
			f.retain();
			if (this.getTitleView()) {
				this.getTitleView().release()
			}
			this.setTitleView(f)
		},
		setListView: function($super, f) {
			$super(f);
			if (f && this.getTitleView()) {
				f.addChild(this.getTitleView())
			} else {
				if (this.getTitleView()) {
					this.getTitleView().removeFromParent()
				}
			}
		},
		setRowHeightRatio: function(g, h) {
			this._rowHeightRatio = g;
			if (g > 10) {
				throw new Error("You probably didn't mean to allocate ten times the base height for a single row")
			}
			if (h === undefined) {
				h = e.Capabilities.getScreenWidth()
			}
			var f = this._rowHeightRatio * h;
			this.setRowHeight(f)
		},
		calculateRowHeightForListView: function(f) {
			var g = f.getFrame()[3] * this._rowHeightRatio;
			this.setRowHeight(g)
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ContactsSectionTitleView"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ContactsSectionTitleView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ContactsSectionTitleView"] = d;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var c = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		ContactsSectionTitleStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FindFriends").ContactsSectionTitle
		}
	});
	var b = d.ContactsSectionTitleView = a.subclass({
		classname: "ContactsSectionTitleView",
		initialize: function($super, e) {
			$super(e);
			this.setFrameSize([300, 30]);
			c.ContactsSectionTitleStyle.applyTo(this);
			return this
		},
		_formattedTitle: function() {
			return "" + this._baseText + ((this._accessoryText !== null) ? (" (" + this._accessoryText + ")") : "")
		},
		_baseText: null,
		setTitle: function(e) {
			this._baseText = e;
			this.setText(this._formattedTitle())
		},
		_accessoryText: null,
		setAccessoryText: function(e) {
			this._accessoryText = e;
			this.setText(this._formattedTitle())
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/SystemInfoCell"] = function() {
	var j = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/SystemInfoCell"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/SystemInfoCell"] = j;
	var n = require("NGCore/Client/Core/Capabilities").Capabilities;
	var f = require("NGCore/Client/UI").UI;
	var d = f.ViewGeometry.Rect;
	var c = f.ViewGeometry.Scale;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		UIStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		ContactsController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController").ContactsController
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		}
	});
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView");
	var a = k.Composite;
	var l = k.CompositeButton;
	var q = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var h = q.Components;
	var p = q.Component;
	var e = q.ComponentInheritForKey;
	var g = q.ACCESSOR_PASSTHROUGH;
	var m = q.ComponentInheritForKey;
	var o = j.SystemInfoCell = a({
		key: "key",
		component: h.Label,
		disableViewAccessorRemapping: true
	}, {
		key: "content",
		component: h.EditTextArea,
		altKey: "value",
		disableViewAccessorRemapping: true
	}, h.AddOrders.Generator("key", "content"), h.Layouts.TwoHorizontalGenerator("key", "content"), {
		classname: "SystemInfoCell",
		initialize: function($super, r) {
			$super(r);
			b.ListViewCellStyles.Generics.applyTo(this);
			b.CommonElements.textBox.applyTo(this.content)
		},
		markOdd: function() {
			this.addState(b.ContactsController.OddState)
		},
		markEven: function() {}
	});
	return j
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FindFriends"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FindFriends"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FindFriends"] = c;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var b = e.ScaledCorners;
	var f = e.ScaledTextSize;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements;
	e.lazyLoad(c, "SuggestedFriends", function() {
		return {
			children: {
				_titleHeader: a.header
			},
			extras: {
				headerHeightRatio: 1 / 8,
				refreshButtonWidthRatio: 2.5
			}
		}
	});
	e.lazyLoad(c, "UserSearchHeader", function() {
		return {
			style: {
				gradient: {
					gradient: ["FF143558 0.0", "FF295D8D 1.0"]
				}
			},
			children: {
				button: {
					style: {
						image: d.image("findfriends_usersearch_button.png"),
						textColor: "FFFFFFFF",
						gradient: {
							gradient: ["FF7a9de1 0.0", "FF7a9de1 1.0"],
							corners: b(8),
							innerLine: "4484C3E9 2.0"
						},
						pressedGradient: {
							corners: b(8),
							gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
							innerLine: "2B003366 2.0"
						}
					}
				},
				content: a.textBox
			},
			extras: {
				headerHeightRatio: 0.155
			}
		}
	});
	e.lazyLoad(c, "ContactsSectionTitle", function() {
		return {
			style: {
				textColor: "FFFFFFFF",
				textShadow: "FF00 2.0 {0,-1}",
				textGravity: [0, 0.5],
				textInsets: [10, 10, 10, 10],
				textSize: f(11),
				gradient: {
					gradient: ["FF143558 0.0", "FF295D8D 1.0"],
					innerShadow: "FF00 1.0 {0,0}"
				}
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController"] = function() {
	var h = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController"] = h;
	var g = require("NGCore/Client/UI").UI;
	var c = g.ViewGeometry.Rect;
	var l = require("NGCore/Client/Core/MessageListener").MessageListener;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		},
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		MBListViewSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection
		},
		ContactsSectionTitleView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ContactsSectionTitleView").ContactsSectionTitleView
		},
		AddressBookScan: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/AddressBookScan").AddressBookScan
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		IdleActor: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/IdleActor").IdleActor
		},
		SessionUtils: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/SessionUtils").SessionUtils
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		PendingListSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection
		},
		DirectInviteSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DirectInviteSection").DirectInviteSection
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		}
	});
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/UserCellView").UserCellView_TappableRowVariant;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/UserCellView").UserCellView_OneMessageNoIcon;
	var o = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = p.subclass({
		classname: "AddOrInviteCell",
		insetRatio: null,
		buttonSizeRatio: null,
		subtitleHeightRatio: 0.5,
		initialize: function($super, r) {
			$super(r);
			this.accessoryButton.setText("AddOrInvite");
			var q = this;
			this.accessoryButton.setOnClick(function() {
				NgLogD("Default On Click");
				var u = new g.Toast();
				u.setText(q.accessoryButton.getText());
				u.show()
			});
			var s = a.ListViewCellStyles.FoundFriendCell;
			s.applyTo(this);
			this.insetRatio = s.extras.buttonInsetRatio;
			this.buttonSizeRatio = s.extras.buttonSizeRatio;
			this.subtitleHeightRatio = s.extras.subtitleHeightRatio
		},
		markOdd: function() {
			this.addState(b.OddState)
		},
		markEven: function() {},
		layoutSubviews: function($super) {
			var u = new c(this.getFrame());
			if (!u.isEmpty()) {
				var s = u.copy();
				var t = this.insetRatio * u.h;
				var r = [t, t, t, t];
				var q = [t / 2, t / 2, t / 2, t / 2];
				this.setIconInset(q);
				this.setAccessoryButtonInset(r);
				this.icon.setFrameSize([s.h, s.h]);
				this.accessoryButton.setFrameSize([u.w * this.buttonSizeRatio, u.h]);
				this.content.subtitle.setFrameSize([u.w, u.h * this.subtitleHeightRatio])
			}
			$super()
		}
	});
	var f = m.subclass({
		classname: "AddAllCell",
		insetRatio: null,
		buttonSizeRatio: null,
		initialize: function($super, r) {
			$super(r);
			this.accessoryButton.setText(o("Add All"));
			this.content.setText(o("Add all contacts below"));
			var q = this;
			this.accessoryButton.setOnClick(function() {
				NgLogD("Default On Click");
				var u = new g.Toast();
				u.setText(q.accessoryButton.getText());
				u.show()
			});
			var s = a.ListViewCellStyles.AddAllCell;
			s.applyTo(this);
			this.insetRatio = s.extras.buttonInsetRatio;
			this.buttonSizeRatio = s.extras.buttonSizeRatio;
			this.subtitleHeightRatio = s.extras.subtitleHeightRatio
		},
		layoutSubviews: function($super) {
			var s = new c(this.getFrame());
			if (!s.isEmpty()) {
				var r = this.insetRatio * s.h;
				var q = [r, r, r, r];
				this.setAccessoryButtonInset(q);
				this.accessoryButton.setFrameSize([s.w * this.buttonSizeRatio, s.h]);
				this.setMessageInset(q)
			}
			$super()
		}
	});
	var j = function(q) {
		var r = new a.ContactsSectionTitleView();
		r.setFrameSize([100, 40]);
		r.setTitle(q);
		r.setAccessoryText(0);
		return r
	};
	var b = h.ContactsController = k.subclass({
		classname: "ContactsController",
		analyticsName: "Contacts",
		$FoundUserListItem: null,
		$AddAllUsersListItem: null,
		$InviteUserListItem: null,
		$OddState: 15859712,
		scanner: null,
		allPlusUsers: null,
		allOtherContacts: null,
		plusMatchSection: null,
		invitableSection: null,
		pendingSection: null,
		scanState: null,
		$ScanState: {
			NotStarted: 0,
			Beginning: 1,
			InFlight: 2,
			Complete: 3
		},
		_idleActor: null,
		_idleAction: null,
		initialize: function() {
			this.scanState = 0;
			this.scanner = new a.AddressBookScan();
			this.pendingSection = (new a.PendingListSection());
			this.pendingSection.setPendingText(o("Pulling in contacts..."));
			this.invitableSection = (new a.MBListViewSection()).retain();
			this.invitableSection.setSectionHeader(j(o("Invite Contacts to Mobage")));
			this.plusMatchSection = (new a.MBListViewSection()).retain();
			this.plusMatchSection.setSectionHeader(j(o("Contacts Already on Mobage")));
			this._idleActor = (new a.IdleActor()).retain();
			this._dirtyFriendsListenerSetup();
			this._updateFriendsListCache()
		},
		loadView: function($super) {
			$super();
			this.view()._headerHeightRatio = 0;
			this.directInviteSection = (new a.DirectInviteSection()).retain()
		},
		destroy: function() {
			if (this.directInviteSection) {
				this.directInviteSection.release()
			}
			if (this.scanner) {
				this.scanner.abortScanning()
			}
			this._idleActor.release();
			this.invitableSection.release();
			this.plusMatchSection.release();
			this.pendingSection.release();
			if (this._errorSection) {
				this._errorSection.release()
			}
		},
		didActivateTab: function($super) {
			$super();
			this.parentController.navController._host.hideLoadingLabel();
			setTimeout(this.bind(function() {
				this.startSearch()
			}), 50)
		},
		_dirtyFriendsListenerSetup: function() {
			var q = a.Session.getCurrentSession().user();
			var r = new l();
			q.addListener(r, this.zombieSafeCallback(function(s) {
				if (!s || !s.buddies) {
					return
				}
				this._updateFriendsListCache()
			}, this.bind(function(s) {
				q.removeListener(r);
				r.destroy()
			})))
		},
		_updateFriendsListCache: function() {
			if (this._friendsListCacheUpdateInProgress) {
				return
			}
			this._friendsListCacheUpdateInProgress = true;
			var r = [];
			this._friendsListCacheReady = false;
			var q = a.Session.getCurrentSession().user();
			q.getFollowersList().forAll(this.zombieSafeCallback(function(t, s) {
				r.push(s);
				t(true)
			}), this.zombieSafeCallback(function(v) {
				this.loge("_updateFriendsListCache finished");
				this._friendsListCacheUpdateInProgress = false;
				if (v) {
					this.scanState = b.ScanState.NotStarted;
					this.pendingSection.showError(v, this.bind(function() {
						this._updateFriendsListCache();
						this.startSearch()
					}));
					return
				}
				this._outgoingRelationships = r;
				this._friendsListCacheReady = true;
				if (this.plusMatchSection && this.plusMatchSection.getItems() && !this.plusMatchSection.getItems().length) {
					if (this.scanState == b.ScanState.Complete) {
						this._resultsReady()
					}
				} else {
					var u;
					var s = (this.plusMatchSection && this.plusMatchSection.getItems()) ? this.plusMatchSection.getItems() : [];
					for (var t = 0; t < s.length; t++) {
						if ((u = s[t]) && u.cell) {
							u._onSetView(u.cell)
						}
					}
				}
			}))
		},
		startSearch: function() {
			var q = this;
			switch (this.scanState) {
				case b.ScanState.Complete:
					if (this.allPlusUsers.length === 0 && this.allOtherContacts.length === 0) {
						this._showNoResultsCase()
					}
					break;
				case b.ScanState.NotStarted:
					this.scanState = b.ScanState.InFlight;
					this.allPlusUsers = [];
					this.allOtherContacts = [];
					this.scanner.searchPlusForPeople(this.zombieSafeCallback(function(s, u, t) {
						if ((typeof s) === "undefined") {
							this.allPlusUsers = this.allPlusUsers.concat(u);
							this.allOtherContacts = this.allOtherContacts.concat(t);
							NgLogD("ContactsController - Got back " + u.length + " plus users and " + t.length + " other contacts.");
							if (!this._idleAction) {
								this._idleAction = this.bind(function() {
									if (this._friendsListCacheReady) {
										this._resultsReady()
									}
								})
							}
							this._idleActor.interval *= (1.3);
							this._idleActor.waitForIdleBeforeAction(this._idleAction)
						}
					}), this.zombieSafeCallback(this._scanFinished));
				case b.ScanState.InFlight:
					var r = this.view().getSections();
					if (!r || !r.length || r[0] != this.pendingSection) {
						this.view().setSections([this.pendingSection, this.directInviteSection])
					}
					break;
				default:
					break
			}
		},
		_scanFinished: function(q) {
			this.logd("ContactsController: searchPlusForPeople completed...");
			this.scanState = b.ScanState.Complete;
			if ((typeof q) != "undefined") {
				this.loge(JSON.stringify(q));
				this.scanState = b.ScanState.NotStarted;
				if (!this._errorSection) {
					this._errorSection = (new a.PendingListSection()).retain()
				}
				this._errorSection.showError(q);
				this.view().setSections([this._errorSection])
			} else {
				if (this.allPlusUsers.length === 0 && this.allOtherContacts.length === 0) {
					this._showNoResultsCase()
				} else {
					if (this._friendsListCacheReady) {
						this._resultsReady()
					}
				}
			}
		},
		_resultsReady: function() {
			var r, w, y, v, u, A = [];
			var q = [];
			var t = 0;
			var x = 0;
			var C = a.Session.getCurrentSession().user();
			var B = this.plusMatchSection.getItems() || [];
			var z = this.invitableSection.getItems() || [];
			y = B.slice();
			if (y.length && y[0] instanceof b.AddAllUsersListItem) {
				x = 1
			}
			for (v = B.length; v < this.allPlusUsers.length; v++) {
				r = this.allPlusUsers[v];
				if (C && C.is(r)) {
					continue
				}
				if (!r.isMutualFriend && this._outgoingRelationships.indexOf(r) != -1) {
					r.invited = true;
					t--
				}
				if (this._outgoingRelationships.indexOf(r) == -1 || !r.isMutualFriend) {
					y.push(new b.FoundUserListItem(r));
					t++
				} else {
					q.push(r)
				}
			}
			if (!this._plusMatchSort) {
				this._plusMatchSort = function(E, D) {
					if (E instanceof b.AddAllUsersListItem) {
						return -1
					}
					if (D instanceof b.AddAllUsersListItem) {
						return 1
					}
					return (E.user.invited == D.user.invited) ? 0 : (E.user.invited ? 1 : -1)
				}
			}
			y.sort(this._plusMatchSort);
			for (v = x; v < y.length; v++) {
				y[v].odd = (v - x) % 2
			}
			if (t > 1 && !x) {
				var s = new b.AddAllUsersListItem();
				s.section = this.plusMatchSection;
				y.unshift(s)
			}
			this.plusMatchSection.setItems(y);
			this.plusMatchSection.getSectionHeader().setAccessoryText(y.length - x);
			if (y.length) {
				A.push(this.plusMatchSection)
			}
			for (v = q.length - 1; v >= 0; --v) {
				w = this.allPlusUsers.indexOf(q[v]);
				if (w != -1) {
					this.allPlusUsers.splice(w, 1)
				}
			}
			y = z.slice();
			for (v = z.length; v < this.allOtherContacts.length; v++) {
				r = this.allOtherContacts[v];
				for (u = 1; u < r.lowercaseEmails.length; u++) {
					y.push(new b.InviteUserListItem(r, u))
				}
				y.push(new b.InviteUserListItem(r, 0))
			}
			if (!this._contactsSort) {
				this._contactsSort = function(E, D) {
					var F;
					if (typeof E.contact.isNumber === "undefined") {
						F = parseInt(E.contact.displayName, 10);
						E.contact.isNumber = isNaN(F)
					}
					if (typeof D.contact.isNumber === "undefined") {
						F = parseInt(D.contact.displayName, 10);
						D.contact.isNumber = isNaN(F)
					}
					if (E.contact.isNumber ? !D.contact.isNumber : D.contact.isNumber) {
						return E.contact.isNumber ? -1 : 1
					}
					return (E.contact.displayName == D.contact.displayName) ? ((E.contact.lowercaseEmails[E.emailIndex] < D.contact.lowercaseEmails[D.emailIndex]) ? -1 : 1) : ((E.contact.displayName < D.contact.displayName) ? -1 : 1)
				}
			}
			y.sort(this._contactsSort);
			for (v = 0; v < y.length; v++) {
				y[v].odd = (v) % 2
			}
			this.invitableSection.setItems(y);
			this.invitableSection.getSectionHeader().setAccessoryText(y.length);
			if (y.length) {
				A.push(this.invitableSection)
			}
			A.push(this.directInviteSection);
			if (this.scanState !== b.ScanState.Complete) {
				A.unshift(this.pendingSection)
			}
			if (A.length - 1) {
				this.view().setSections(A)
			} else {
				this._showNoResultsCase()
			}
		},
		_showNoResultsCase: function() {
			this.pendingSection.showError(o("We didn't find any contacts."));
			NgLogD("No Results Case")
		}
	});
	b.FoundUserListItem = n.ListViewItem.subclass({
		classname: "FoundUserListItem",
		_reuseId: "contacts.founduserlistitem",
		section: null,
		mode: null,
		initialize: function($super, q) {
			if (!(q instanceof a.User)) {
				throw new Error("User argument expected.")
			}
			this.user = q;
			this._cellProps = a.ListViewCellStyles.Generics.extras;
			this._requestSentStyle = a.ListViewCellStyles.InviteRequestSent;
			$super()
		},
		_onCreateView: function() {
			return new d()
		},
		_onReleaseView: function(q) {
			if (this.cell == q) {
				this.cell = null
			}
			q.icon.setImage("")
		},
		_onSetView: function(q) {
			this.cell = q;
			q.setState(g.State.Normal);
			q.layoutSubviews();
			q.content.content.setTextCutOffOneLine(this.user.gamertag);
			q.content.middleLabel.setTextCutOffOneLine(this.user.getFullName());
			q.content.subtitle.setTextCutOffOneLine(this.user.motto);
			var r = this.user.getDefinedIcon();
			if (!r) {
				NgLogD("No avatar or photo for user.")
			}
			q.icon.setImage(r);
			if (this.odd) {
				q.markOdd()
			} else {
				q.markEven()
			}
			var t = q.accessoryButton;
			if (t && t._addOldStyle) {
				t.setImage(null);
				t.setTextInsets([0, 0, 0, 0]);
				t._addOldStyle.applyTo(t);
				t._addOldStyle = null
			}
			if (this.mode === "profile") {
				if (a.Session.getCurrentSession().user().isInviting(this.user)) {
					this.cell.accessoryButton.setText(o("Accepting..."));
					this.cell.getAccessoryButtonView().setEnabled(false)
				} else {
					if (this.user.invited) {
						this.cell.accessoryButton.setText(o("Accepted"));
						this.cell.getAccessoryButtonView().setEnabled(false)
					} else {
						this.cell.accessoryButton.setText(o("Accept"));
						this.cell.getAccessoryButtonView().setEnabled(true)
					}
				}
			} else {
				if (this.user.isMutualFriend) {
					this.cell.accessoryButton.setText(o("Already Friends!"));
					this.cell.getAccessoryButtonView().setEnabled(false)
				} else {
					if (a.Session.getCurrentSession().user().isInviting(this.user)) {
						this.cell.accessoryButton.setText(o("Sending request..."));
						this.cell.getAccessoryButtonView().setEnabled(false)
					} else {
						if (this.user.invited) {
							this.cell.accessoryButton.setText(o("Request sent"));
							this.cell.getAccessoryButtonView().setEnabled(false);
							if (t) {
								var x = new g.ViewGeometry.Rect(t.getFrame());
								if (!x.isEmpty()) {
									x.x -= x.w * this._requestSentStyle.extras.extensionRatio;
									x.w *= (1 + this._requestSentStyle.extras.extensionRatio);
									t.setFrame(x);
									var v = this._requestSentStyle.extras.markRatio * x.w;
									var w = this._requestSentStyle.extras.marginRatio * x.w;
									t.setImage(a.Assets.image("request_sent_check.png"));
									t.setImageGravity(g.ViewGeometry.Gravity.Left);
									t.setImageInsets([0, x.w - v, 0, 0]);
									t.setTextInsets([0, 0, 0, v + w]);
									t._addOldStyle = t.getStyle();
									this._requestSentStyle.applyTo(t)
								}
							}
						} else {
							this.cell.accessoryButton.setText(o("Add"));
							this.cell.getAccessoryButtonView().setEnabled(true)
						}
					}
				}
			}
			q.accessoryButton.setOnClick(this.bind(this.accessoryClicked));
			q.setOnClick(this.bind(this.rowTapped));
			var u = new c(q.getFrame());
			var s = u.h * this._cellProps.imageInsetRatio;
			q.setIconInset([s, s, s, s]);
			q.setAccessoryButtonInset([s, s, s, s])
		},
		rowTapped: function() {
			a.ServiceHost.showLoadingHelper(function() {
				var q = e.UserProfilePage.initWithJSON({
					user: this.user
				});
				a.ServiceHost.navController.pushViewController(q)
			}.bind(this))
		},
		accessoryClicked: function() {
			if (this.user.invited || a.Session.getCurrentSession().user().isInviting(this.user)) {
				return
			}
			a.Session.getCurrentSession().user().addBuddy(this.user, this.bind(function(r, s) {
				NgLogD("Add buddy: " + r + " - " + JSON.stringify(s));
				if (r) {
					var q = new g.Toast({
						text: r
					});
					q.setOnDisappear(function() {
						q.destroy()
					});
					q.show()
				} else {
					this.user.invited = true
				}
				if (this.cell) {
					this._onSetView(this.cell)
				}
			}));
			if (this.cell) {
				this._onSetView(this.cell)
			}
		}
	});
	b.AddAllUsersListItem = n.ListViewItem.subclass({
		classname: "AddAllUsersListItem",
		_reuseId: "contacts.addallusers",
		section: null,
		mode: null,
		initialize: function($super) {
			$super()
		},
		_onCreateView: function() {
			return new f()
		},
		_onReleaseView: function(q) {
			if (this.cell == q) {
				this.cell = null
			}
		},
		_onSetView: function(q) {
			this.cell = q;
			q.setState(g.State.Normal);
			q.layoutSubviews();
			q.accessoryButton.setOnClick(this.bind(this.accessoryClicked));
			var s = new c(q.getFrame());
			var r = s.h * q.getStyle().extras.imageInsetRatio;
			q.setAccessoryButtonInset([r, r, r, r])
		},
		accessoryClicked: function() {
			var q = this.section.getItems();
			for (var r = 0; r < q.length; r++) {
				if (q[r] == this) {
					continue
				}
				q[r].accessoryClicked()
			}
		}
	});
	b.InviteUserListItem = n.ListViewItem.subclass({
		classname: "InviteUserListItem",
		_reuseId: "contacts.invitablelistitem",
		_cellProps: null,
		_mode: null,
		initialize: function($super, q, r) {
			this.contact = q;
			this.emailIndex = r;
			this._cellProps = a.ListViewCellStyles.Generics.extras;
			this.contact.invited = a.SessionUtils.User.hasSentFriendInviteToEmail(this.contact.lowercaseEmails[this.emailIndex]);
			$super()
		},
		_onCreateView: function() {
			var q = new d();
			q.accessoryButton.setText(o("Invite"));
			return q
		},
		_onReleaseView: function(q) {
			if (this.cell == q) {
				this.cell = null
			}
			q.icon.setImage("")
		},
		_onSetView: function(q) {
			this.cell = q;
			q.setState(g.State.Normal);
			q.icon.setFrameSize([0, 0]);
			q.layoutSubviews();
			q.content.content.setText(this.contact.displayName);
			var t = "";
			if (this.contact.lowercaseEmails && this.contact.lowercaseEmails.length && this.contact.lowercaseEmails.length > this.emailIndex) {
				t = this.contact.lowercaseEmails[this.emailIndex]
			}
			if (typeof this._invalidEmail === "undefined") {
				this._invalidEmail = !a.User.emailAddressLooksValid(t);
				if (t.length === 0) {
					this._invalidEmail = -1
				}
			}
			q.content.subtitle.setText(t);
			if (this.odd) {
				q.markOdd()
			} else {
				q.markEven()
			}
			if (this.contact.inviting) {
				this.cell.accessoryButton.setText(o("Inviting..."));
				this.cell.getAccessoryButtonView().setEnabled(false)
			} else {
				if (this.contact.invited) {
					this.cell.accessoryButton.setText(o("Invited"));
					this.cell.getAccessoryButtonView().setEnabled(false)
				} else {
					this.cell.accessoryButton.setText(o("Invite"));
					this.cell.getAccessoryButtonView().setEnabled(true)
				}
			}
			q.accessoryButton.setOnClick(this.bind(this.accessoryClicked));
			var s = new c(q.getFrame());
			var r = s.h * this._cellProps.imageInsetRatio;
			q.setAccessoryButtonInset([r, r, r, r]);
			if (this._showingForm) {
				q.showFormForItem(this)
			}
		},
		accessoryClicked: function() {
			var q = this;
			if (this.contact.invited || this.contact.inviting) {
				return
			}
			if (this.contact.lowercaseEmails.length && !this._invalidEmail) {
				this.contact.inviting = true;
				a.SessionUtils.User.sendFriendInviteToEmailIfPossible(this.contact.lowercaseEmails[this.emailIndex], function(s, t) {
					q.contact.inviting = false;
					if (s) {
						var r = new g.Toast({
							text: t.error_msg
						});
						r.ondisappear = function() {
							r.destroy()
						};
						r.show()
					} else {
						q.contact.invited = true
					}
					if (q.cell) {
						q._onSetView(q.cell)
					}
				})
			} else {
				this.loge("Person with no e-mail address clicked, showing form");
				this.cell.showFormForItem(q)
			}
		}
	});
	return h
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells"] = function() {
	var h = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells"] = h;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var n = b.ScaledCorners;
	var c = b.ScaledTextSize;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var f = d.ScaledCorners;
	var m = d.ScaledTextSize;
	var g = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		}
	});
	var k = h.ListViewCells = {};
	var l = function(o, p) {
		d.lazyLoad(h.ListViewCells, o, p)
	};
	var e = {
		style: {
			gradient: {
				gradient: ["FFFFFFFF 0.0", "FFFFFFFF 1.0"]
			},
			pressedGradient: {
				gradient: ["66000000 0.0", "66000000 0.0"]
			},
			oddGradient: {
				gradient: ["FFdfe8f2 0.0", "FFdfe8f2 1.0"]
			},
			pressedOddGradient: {
				gradient: ["66000000 0.0", "66000000 0.0"],
				outerLine: "2F233656 1.0"
			}
		},
		extras: {
			imageInsetRatio: 0.1,
			buttonInsetRatio: 0.1,
			insetRatio: 0.1,
			buttonSizeRatio: 0.22,
			subtitleHeightRatio: 0.4
		}
	};
	l("Generics", function() {
		return {
			style: e.style,
			children: {
				icon: {
					style: {
						gradient: {
							corners: f(8)
						}
					}
				}
			},
			extras: e.extras
		}
	});
	l("InviteRequestSent", function() {
		return {
			style: {
				textGravity: [0, 0.5],
				disabledTextColor: "FF8E9CAA",
				textShadow: "FFFFFFFF 1.0 {0.0,-2.0}",
				textFont: d.defaultBoldFontFace
			},
			extras: {
				extensionRatio: 0.1,
				markRatio: 0.21,
				marginRatio: 0.06
			}
		}
	});
	l("AddButton", function() {
		var o = {
			style: {
				gradient: {
					corners: f(8),
					gradient: ["FF5fad0d 0.0", "FF336c0f 1.0"]
				},
				pressedGradient: {
					corners: f(8),
					gradient: ["FF336c0f 0.0", "FF5fad0d 1.0"],
					outerLine: "2F233656 2.0"
				},
				textFont: d.defaultRegularFontFace,
				textSize: m(14),
				textColor: "FFFFFFFF",
				disabledGradient: {},
				disabledTextColor: "FF000000"
			}
		};
		o.style.oddGradient = o.style.gradient;
		o.style.pressedOddGradient = o.style.pressedGradient;
		return o
	});
	l("FriendCellMessage", function() {
		return {
			children: {
				title: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: m(12),
						textColor: "FF004AA9",
						textGravity: [0, 0.9]
					}
				},
				middleLabel: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: m(10),
						textColor: "FF000000",
						textGravity: [0, 0.5]
					}
				},
				subtitle: {
					style: {
						textFont: d.defaultRegularFontFace,
						textSize: m(10),
						textColor: "FF000000",
						textGravity: [0, 0.1]
					}
				}
			}
		}
	});
	l("FoundFriendCell", function() {
		var o = {
			style: {
				pressedGradient: {
					gradient: ["66000000 0.0", "66000000 0.0"],
					innerShadow: "CC00 1.0 {0,0}"
				}
			},
			children: {
				icon: {
					style: {
						image: g.image("no-user-icon.png")
					}
				},
				message: k.FriendCellMessage,
				accessoryButton: k.AddButton
			},
			extras: e.extras
		};
		for (var p in e.style) {
			if (!o.style[p]) {
				o.style[p] = e.style[p]
			}
		}
		return o
	});
	l("DropDownCell", function() {
		var p = {
			style: {
				pressedGradient: {
					gradient: ["66000000 0.0", "66000000 0.0"],
					innerShadow: "CC00 1.0 {0,0}"
				}
			},
			extras: e.extras
		};
		for (var o in e.style) {
			if (!p.style[o]) {
				p.style[o] = e.style[o]
			}
		}
		return p
	});
	var j = function() {
		var p = {
			style: {
				textFont: d.defaultRegularFontFace,
				textSize: m(14),
				textColor: "FFFFFFFF",
				image: g.image("ListModal_OpenModal_Up.png"),
				pressedImage: g.image("ListModal_OpenModal_Down.png"),
				disabledGradient: {},
				disabledTextColor: "FF000000"
			}
		};
		p.style.oddGradient = p.style.gradient;
		p.style.pressedOddGradient = p.style.pressedGradient;
		var q = {
			style: {
				gradient: {
					gradient: ["FFFFFFFF 0.0", "FFFFFFFF 1.0"],
					outerLine: "FFE4EBF0 1.0"
				},
				pressedGradient: {
					gradient: ["66000000 0.0", "66000000 0.0"],
					innerShadow: "CC00 1.0 {0,0}"
				}
			},
			children: {
				icon: {
					children: {
						content: {
							style: {
								image: g.image("no-user-icon.png")
							}
						}
					}
				},
				message: {
					children: {
						title: {
							style: {
								textFont: d.defaultBoldFontFace,
								textSize: m(13),
								textColor: "FF00319A",
								textGravity: [0, 0.5]
							}
						},
						middleLabel: {
							style: {
								textFont: d.defaultBoldFontFace,
								textSize: m(10),
								textColor: "FF000000",
								textGravity: [0, 0.5]
							}
						},
						subtitle: {
							style: {
								textFont: d.defaultRegularFontFace,
								textSize: m(13),
								textColor: "FF000000",
								textGravity: [0, 0]
							}
						}
					}
				},
				accessoryButton: {
					children: {
						content: p,
						label: {
							style: {
								text: "",
								textFont: d.defaultBoldFontFace,
								textSize: m(13),
								textColor: "FF00319A",
								textGravity: [1, 0.5]
							}
						}
					}
				}
			},
			extras: {
				rightInsetRatio: 1 / 4
			}
		};
		var o;
		for (o in e.style) {
			if (!q.style[o]) {
				q.style[o] = e.style[o]
			}
		}
		for (o in e.extras) {
			if (!q.extras[o]) {
				q.extras[o] = e.extras[o]
			}
		}
		return q
	};
	l("ConversationCell", function() {
		var o = j();
		return o
	});
	l("DialogCell", function() {
		var o = j();
		o.children.icon = o.children.icon.children.content;
		o.children.accessoryButton = o.children.accessoryButton.children.content;
		return o
	});
	l("MorePostCell", function() {
		return {
			style: {
				gradient: {
					gradient: ["FFFFFFFF 0.0"]
				},
				pressedGradient: {
					gradient: ["4400319A 0.0"]
				}
			},
			children: {
				message: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: m(13),
						textColor: "FF00319A",
						textGravity: [0.5, 0.5]
					}
				},
				leftArrow: {
					style: {
						image: g.image("show_more_arrow.png"),
						imageGravity: [0.5, 0.5]
					}
				},
				rightArrow: {
					style: {
						image: g.image("show_more_arrow.png"),
						imageGravity: [0.5, 0.5]
					}
				}
			},
			extras: {
				imageInsetRatio: 0.1,
				buttonInsetRatio: 0.1,
				insetRatio: 0.1,
				buttonSizeRatio: 0.22
			}
		}
	});
	l("FriendCell", function() {
		var o = {
			style: {
				pressedGradient: {
					gradient: ["66000000 0.0", "66000000 0.0"],
					innerShadow: "CC00 1.0 {0,0}"
				}
			},
			children: {
				message: k.FriendCellMessage,
				rightAccessory: {
					style: {
						image: g.image("no-game-icon.png"),
						textFont: d.defaultRegularFontFace,
						textSize: m(10),
						textColor: "FF333333"
					}
				},
				icon: {
					style: {
						image: g.image("no-user-icon.png")
					}
				}
			},
			extras: e.extras
		};
		for (var p in e.style) {
			if (!o.style[p]) {
				o.style[p] = e.style[p]
			}
		}
		return o
	});
	l("AddAllCell", function() {
		var o = {
			style: {
				gradient: {
					gradient: ["FF9dadbe 0.0", "FFdfe8f2 1.0"],
					innerShadow: "CC00 1.0 {0,0}"
				},
				pressedGradient: {
					gradient: ["66000000 0.0", "66000000 0.0"],
					innerShadow: "CC00 1.0 {0,0}"
				}
			},
			children: {
				message: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: m(10),
						textColor: "FF000000",
						textGravity: [0, 0.5]
					}
				},
				accessoryButton: k.AddButton
			},
			extras: e.extras
		};
		o.style.oddGradient = o.style.gradient;
		o.style.pressedOddGradient = o.style.pressedGradient;
		return o
	});
	l("PendingCell", function() {
		return {
			style: {
				gradient: {
					gradient: ["FFC0 0.0", "FFFF 1.0"],
					innerShadow: "CC00 1.0 {0,0}"
				}
			},
			children: {
				content: {
					style: {
						textGravity: [0.1, 0.5],
						textFont: d.defaultRegularFontFace,
						textSize: m(12)
					}
				}
			}
		}
	});
	l("ErrorCell", function() {
		return {
			style: {
				gradient: {
					innerShadow: "CC00 1.0 {0,0}"
				},
				textFont: d.defaultRegularFontFace,
				textSize: m(12),
				textColor: "FF656565",
				textGravity: [0, 0.5]
			},
			extras: {
				textInsetRatio: 0.1
			}
		}
	});
	l("DirectInviteCell", function() {
		return {
			style: {
				textFont: d.defaultRegularFontFace,
				textSize: m(11),
				gradient: {
					gradient: ["FF506580 0.0", "FF3e4f65 1.0"],
					outerLine: "FF303d52 1.5",
					insets: "{5,5,5,5}",
					corners: f(8)
				}
			},
			children: {
				title: {
					style: {
						textGravity: [0, 0.5],
						textFont: d.defaultRegularFontFace,
						textSize: m(12),
						textColor: "FFFFFFFF"
					}
				},
				content: a.CommonElements.textBox,
				button: {
					style: {
						gradient: {
							gradient: ["FF7a9de1 0.0", "057a9de1 1.0"],
							corners: f(8),
							outerLine: "FF395163 1.0"
						},
						pressedGradient: {
							gradient: ["057a9de1 0.0", "FF7a9de1 1.0"],
							corners: f(8),
							outerLine: "FF395163 1.0"
						},
						textColor: "FFFFFFFF",
						textFont: d.defaultRegularFontFace,
						textSize: m(16)
					}
				}
			},
			extras: {
				ratios: {
					title: 0.3,
					button: 0.25,
					inset: 0.05
				}
			}
		}
	});
	l("InviteEmailForm", function() {
		return {
			children: {
				field: a.CommonElements.textBox,
				sendButton: a.CommonElements.standardButton
			}
		}
	});
	l("InviteCellForm", function() {
		return {
			children: {
				sendButton: {
					textSize: c(14),
					textColor: "FFFFFFFF"
				}
			},
			extras: {
				insetRatio: 0.05,
				buttonWidthRatio: 0.2
			}
		}
	});
	l("EmptyMessageCell", function() {
		return {
			style: {
				titleGravity: [0.5, 0.5],
				titleFont: d.defaultRegularFontFace,
				titleSize: m(17),
				titleColor: "FF647286"
			}
		}
	});
	l("ZeroCaseMessageCell", function() {
		return {
			children: {
				title: {
					style: {
						textGravity: [0.5, 0.5],
						textFont: d.defaultBoldFontFace,
						textSize: m(13),
						textColor: "FF5F718A",
						textShadow: "80FFFFFF 1.0 {0.0,-2.0}"
					}
				},
				content: {
					style: {
						textGravity: [0.5, 0.5],
						textFont: d.defaultBoldFontFace,
						textSize: m(13),
						textColor: "FF5F718A",
						textShadow: "80FFFFFF 1.0 {0.0,-2.0}"
					}
				},
				actionButton: a.CommonElements.largeActionButton
			},
			extras: {
				titleXFactor: 0,
				titleYFactor: 0,
				titleWidthFactor: 1,
				titleHeightFactor: 1 / 3,
				contentXFactor: 0.025,
				contentYFactor: 1 / 3,
				contentWidthFactor: 0.95,
				contentHeightFactor: 1 / 3,
				actionButtonXFactor: 0.3,
				actionButtonYFactor: (2 / 3 + 0.05),
				actionButtonWidthFactor: 0.4,
				actionButtonHeightFactor: (1 / 3 - 0.1)
			}
		}
	});
	l("InformationalCell", function() {
		return {
			style: {
				gradient: {
					gradient: ["FFC0 0.0", "FFFF 1.0"],
					innerShadow: "CC00 1.0 {0,0}"
				},
				titleFont: d.defaultRegularFontFace,
				titleSize: m(12),
				textFont: d.defaultRegularFontFace,
				textSize: m(12)
			}
		}
	});
	return h
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/AddressBookScan"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/AddressBookScan"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/AddressBookScan"] = b;
	var a = require("NGCore/Client/UI/SystemBinding");
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/ContactsScanBase");
	var d = c.ContactsScanBase.subclass({
		classname: "AddressBookScan",
		initialize: function($super) {
			$super()
		},
		getMore: function(e) {
			a.SystemBinding.getContacts(e)
		}
	});
	b.AddressBookScan = d;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/IdleActor"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/IdleActor"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/IdleActor"] = b;
	var e = require("NGCore/Client/Core").Core;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting").ReferenceCounting;
	var d = e.MessageListener.singleton({
		classname: "IdleScheduler",
		_isScheduled: null,
		_activeIdlers: null,
		_uidGen: null,
		initialize: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			this._uidGen = 0;
			this._isScheduled = false;
			this._activeIdlers = {}
		},
		_scheduleTick: function() {
			var g = (new Date()).getTime();
			for (var f in this._activeIdlers) {
				if (this._activeIdlers.hasOwnProperty(f)) {
					this._activeIdlers[f].idleTick(g)
				}
			}
		},
		scheduleIdler: function(f) {
			if (!f.uid) {
				f.uid = "" + (this._uidGen++)
			}
			if (this._activeIdlers.hasOwnProperty(f.uid)) {
				return
			}
			this._activeIdlers[f.uid] = f;
			if (!this._isScheduled) {
				e.UpdateEmitter.addListener(this, this.bind(this._scheduleTick));
				this._isScheduled = true
			}
		},
		unscheduleIdler: function(g) {
			if (this._activeIdlers.hasOwnProperty(g.uid)) {
				delete this._activeIdlers[g.uid]
			}
			if (this._isScheduled) {
				for (var f in this._activeIdlers) {
					if (this._activeIdlers.hasOwnProperty(f)) {
						return
					}
				}
				e.UpdateEmitter.removeListener(this);
				this._isScheduled = false
			}
		}
	});
	var c = b.IdleActor = a.subclass({
		classname: "IdleActor",
		interval: null,
		idleAction: null,
		_idleStartTime: null,
		waitForIdleBeforeAction: function(f) {
			this.idleAction = f;
			this._idleStartTime = (new Date()).getTime();
			d.scheduleIdler(this)
		},
		initialize: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			this.interval = 100
		},
		destroy: function() {
			d.unscheduleIdler(this)
		},
		idleTick: function(f) {
			if (this._idleStartTime + this.interval < f) {
				if (this.idleAction && typeof this.idleAction === "function") {
					this.idleAction()
				}
				d.unscheduleIdler(this)
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/SessionUtils"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/SessionUtils"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/SessionUtils"] = b;
	var g = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User");
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/StringUtils").StringUtils;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Defines").Defines;
	var h = null;
	var a = f.trim;
	var d = b.SessionUtils = {
		getCurrentSessionStorage: function() {
			if (!g.Session.getCurrentSession()) {
				NgLogE("SessionStorage: you can't use this without a session!");
				return null
			}
			if (!g.Session.getCurrentSession().localStorage) {
				g.Session.getCurrentSession().localStorage = new Object()
			}
			return g.Session.getCurrentSession().localStorage
		},
		User: {
			sendFriendInviteToEmailIfPossible: function(j, k) {
				if (!j) {
					j = ""
				}
				var l = h();
				if (a(j).toLowerCase() in l) {
					k("Already Sent Invite")
				} else {
					if (!e.User.emailAddressLooksValid(j)) {
						k("Malformed email", {
							success: false,
							error: c.SERVER_ERRORCODE_MALFORMED_EMAIL,
							error_msg: "Please enter a valid email address."
						})
					} else {
						e.User.sendFriendInviteToEmail(j, function(m, n) {
							if (!m) {
								l[a(j).toLowerCase()] = 1
							}
							k(m, n)
						})
					}
				}
			},
			hasSentFriendInviteToEmail: function(j) {
				if (!j) {
					j = ""
				}
				var k = h();
				if (a(j).toLowerCase() in k) {
					return true
				}
				return false
			}
		}
	};
	h = function() {
		var j = d.getCurrentSessionStorage();
		if (!j.sentInvites) {
			j.sentInvites = new Object()
		}
		return j.sentInvites
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection"] = function() {
	var h = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection"] = h;
	var g = require("NGCore/Client/UI").UI;
	var e = g.ViewGeometry.Rect;
	var d = g.ViewGeometry.Scale;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var c = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		PendingCellView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/PendingCellView").PendingCellView
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		}
	});
	var m = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection;
	var b = h.PendingLItem = g.ListViewItem.subclass({
		_reuseId: "pendinglistsection_pendinglitem",
		_parentSection: null,
		initialize: function($super, n) {
			$super();
			this._parentSection = n;
			this.setMessage(m("Talking to the server..."))
		},
		_message: "",
		setMessage: function(n) {
			this._message = n
		},
		_onCreateView: function() {
			return new c.PendingCellView()
		},
		_parentCVC: null,
		_onSetView: function(n) {
			n.content.setText(this._message);
			n.onclick = this.bind(function() {
				NgLogD("Pending Item Clicked!")
			});
			n.setState(g.State.Normal);
			this.cell = n
		}
	});
	var a = h.ErrorLItem = g.ListViewItem.subclass({
		_reuseId: "pendinglistsection_errorlitem",
		initialize: function($super) {
			$super();
			this.setMessage(m("Error! Gremlins aren't being friendly today."));
			this._sheet = c.ListViewCellStyles.ErrorCell
		},
		_message: "",
		setMessage: function(n) {
			this._message = n
		},
		_onCreateView: function() {
			return new g.Label({
				style: this._sheet
			})
		},
		clickAction: null,
		_onSetView: function(n) {
			n.setText(this._message);
			n.setState(g.State.Normal);
			var p = new e(n.getFrame());
			var o = p.w * this._sheet.extras.textInsetRatio;
			n.setTextInsets([0, o, 0, o]);
			this.cell = n
		}
	});
	var f = h.InformationalLItem = g.ListViewItem.subclass({
		_reuseId: "pendinglistsection_informationallitem",
		initialize: function($super) {
			$super();
			this.setMessage(m("Whoa! Double Rainbow!"))
		},
		_message: "",
		setMessage: function(n) {
			this._message = n
		},
		_onCreateView: function() {
			return new g.CellView({
				style: c.ListViewCellStyles.InformationalCell
			})
		},
		clickAction: null,
		_onSetView: function(n) {
			n.setTitle(this._message);
			var o = this;
			n.setState(g.State.Normal);
			this.cell = n
		}
	});
	var k = h.PendingListSection = l.subclass({
		classname: "PendingListSection",
		spinnerListItem: null,
		errorListItem: null,
		messageListItem: null,
		currentListItem: null,
		initialize: function($super, n) {
			$super(n);
			if (!this._items) {
				this._items = []
			}
			this.setRowHeightRatio(1 / 6);
			return this
		},
		destroy: function() {},
		controller: null,
		showError: function(n, o) {
			if (!this.errorListItem) {
				this.errorListItem = (new a())
			}
			this.errorListItem.setMessage(n);
			this.setItems([this.errorListItem]);
			this.currentListItem = this.errorListItem
		},
		setPendingText: function(n) {
			if (!this.spinnerListItem) {
				this.spinnerListItem = (new b(this))
			}
			this.spinnerListItem.setMessage(n);
			this.setItems([this.spinnerListItem]);
			this.currentListItem = this.spinnerListItem
		},
		setMessageText: function(n) {
			if (!this.messageListItem) {
				this.messageListItem = (new f())
			}
			this.messageListItem.setMessage(n);
			this.setItems([this.messageListItem]);
			this.currentListItem = this.messageListItem
		},
		calculateRowHeightForListView: function(n) {
			if (!n) {
				return
			}
			var p = new e(n.getFrame());
			if (p.isEmpty()) {
				return
			}
			var o = p.h / 5;
			this.setRowHeight(o)
		}
	});
	return h
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DirectInviteSection"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DirectInviteSection"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/DirectInviteSection"] = e;
	var c = require("NGCore/Client/UI").UI;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		SessionUtils: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/SessionUtils").SessionUtils
		},
		MBListViewSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		}
	});
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Defines").Defines;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var f = m.Components;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var j = a({
		key: "title",
		component: f.Label
	}, {
		key: "content",
		component: f.EditText,
		altKey: "addressField"
	}, {
		key: "button",
		component: f.UnspammableButton
	}, f.AddOrders.Generator("title", "content", "button"), {
		classname: "DirectInviteCell",
		_ratios: null,
		insetRatio: 0,
		initialize: function($super, n) {
			$super(n);
			this.button.setSpamLockName("DirectInviteSpamLock");
			return this
		},
		layoutSubviews: function() {
			if (!this._ratios) {
				var p = b.ListViewCellStyles.DirectInviteCell;
				p.applyTo(this);
				this._ratios = p.extras.ratios;
				this.button.setText(k("Send"));
				this.content.setPlaceholder(k("Enter a valid email address"))
			}
			var q = new(c.ViewGeometry.Rect)(this.getFrame());
			if (q.isEmpty()) {
				return
			}
			q.x = q.y = 0;
			var o = q.h * this.insetRatio;
			q.inset.apply(q, [5, 5, 5, 5]);
			var r = q.sliceHorizontal(this._ratios.button * q.w * -1);
			r.inset.apply(r, [o / 2, o, o, o / 2]);
			var n = this.button.getFrameSize();
			this.button.setFrame(r);
			this.content.setFrame(q);
			if (!n || n[0] != r.w) {
				this.button.getTextMeasurementForState(c.State.Normal)
			}
			this.content.setInputType(this.content.InputTypes.Email);
			this.content.setEnterKeyType(c.Commands.EnterKeyType.Done)
		}
	});
	var l = h.ListViewItem.subclass({
		_reuseId: "contacts.directinviteitem",
		section: null,
		initialize: function($super) {
			$super()
		},
		_onCreateView: function() {
			var n = new j();
			n.content.setInputType(n.getAddressFieldView().InputTypes.Email);
			return n
		},
		_onReleaseView: function(n) {
			if (this.cell == n) {
				this.cell = null
			}
		},
		_onSetView: function(n) {
			this.cell = n;
			n.setState(c.State.Normal);
			n.insetRatio = b.ListViewCellStyles.Generics.extras.insetRatio;
			var p = new(c.ViewGeometry.Rect)(n.getFrame());
			var o = p.h * b.ListViewCellStyles.Generics.imageInsetRatio;
			n.button.setOnClick(this.bind(this.accessoryClicked))
		},
		accessoryClicked: function() {
			var p = this;
			var o = this.cell.content.getText().replace(/^\s+|\s+$/g, "");
			this.logd("Attempting to invite:" + o);
			var n;
			if (b.SessionUtils.User.hasSentFriendInviteToEmail(o)) {
				n = new c.Toast({
					text: k("You've already sent an invite to that address!")
				});
				n.ondisappear = function() {
					n.destroy()
				};
				n.show()
			} else {
				this.cell.content.setText("");
				b.SessionUtils.User.sendFriendInviteToEmailIfPossible(o, function(q, r) {
					if (q && r && r.error == d.SERVER_ERRORCODE_MALFORMED_EMAIL) {
						n = new c.Toast({
							text: r.error_msg
						});
						n.ondisappear = function() {
							n.destroy()
						};
						n.show();
						p.cell.content.setText(o)
					} else {
						if (q) {
							n = new c.Toast({
								text: k("Please check your network settings.")
							});
							n.ondisappear = function() {
								n.destroy()
							};
							n.show();
							p.cell.content.setText(o)
						} else {
							n = new c.Toast({
								text: k("Email invite sent!")
							});
							n.ondisappear = function() {
								n.destroy()
							};
							n.show()
						}
					}
				})
			}
		}
	});
	var g = e.DirectInviteSection = b.MBListViewSection.subclass({
		classname: "DirectInviteSection",
		item: null,
		initialize: function($super, n) {
			$super(n);
			if (!this._items) {
				this._items = []
			}
			var o = new(require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ContactsSectionTitleView").ContactsSectionTitleView)();
			o.setFrameSize([480, 40]);
			o.setTitle(k("You can also invite others to Mobage"));
			this.setSectionHeader(o);
			this.item = new l();
			this.setItems([this.item]);
			return this
		},
		setText: function(n) {
			this.item.cell.setAddressFieldText(n)
		},
		destroy: function() {}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/UserCellView"] = function() {
	var F = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/UserCellView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/UserCellView"] = F;
	var n = require("NGCore/Client/UI").UI;
	var g = n.ViewGeometry.Rect;
	var d = n.ViewGeometry.Scale;
	var y = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		UserIconView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserIconView").UserIconView
		},
		VerticalLabelImageButtonComponent: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/VerticalLabelImage").VerticalLabelImageButtonComponent
		},
		HorizontalLabel_ImageButtonComponent: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/HorizontalLabelImage").HorizontalLabel_ImageButtonComponent
		},
		SessionUtils: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/SessionUtils").SessionUtils
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Defines").Defines;
	var x = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView");
	var B = x.Composite;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeButton").CompositeButton;
	var r = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var E = r.Components;
	var t = r.Component;
	var w = r.ComponentInheritForKey;
	var j = r.ACCESSOR_PASSTHROUGH;
	var s = B({
		CompositeClass: x.CompositeLayoutGroup
	}, {
		key: "content",
		component: E.Label,
		altKey: "title"
	}, {
		key: "subtitle",
		component: E.Label
	}, E.AddOrders.TwoVerticalContentSubtitle, E.Layouts.TwoVerticalContentSubtitle, {
		classname: "UserCellView_MessageView"
	});
	var A = t(w(E.Label, "title"), w(E.Label, "subtitle"), {
		initializeViewWithKey: function(G) {
			this[G] = (new s()).retain()
		}
	});
	var e = B({
		CompositeClass: x.CompositeLayoutGroup
	}, {
		key: "content",
		component: E.Label,
		altKey: "title"
	}, {
		key: "middleLabel",
		component: E.Label
	}, {
		key: "subtitle",
		component: E.Label
	}, E.AddOrders.Generator("content", "middleLabel", "subtitle"), {
		classname: "UserCellView_ThreeItemMessageView",
		layoutSubviews: function() {
			var H = new g(this.getFrame());
			if (H.isEmpty()) {
				NgLogD(this.classname + ": abort layoutSubviews, no-frame.");
				return
			}
			H.x = H.y = 0;
			var I = 0.3;
			var G = 0.3;
			var J = H.h * I;
			var K = H.h * G;
			this.subtitle.setFrame(H.sliceVertical(0 - J));
			this.middleLabel.setFrame(H.sliceVertical(0 - K));
			this.content.setFrame(H)
		}
	});
	var m = t(w(E.Label, "title"), w(E.Label, "middleLabel"), w(E.Label, "subtitle"), {
		initializeViewWithKey: function(G) {
			this[G] = (new e()).retain()
		}
	});
	var c = B({
		key: "content",
		component: E.EditText,
		altKey: "field"
	}, {
		key: "sendButton",
		component: E.UnspammableButton
	}, E.AddOrders.Generator("content", "sendButton"), E.Layouts.TwoHorizontalGenerator("content", "sendButton"), {
		classname: "InviteEmailForm",
		initialize: function($super, G) {
			$super(G);
			y.ListViewCellStyles.InviteEmailForm.applyTo(this)
		},
		reuseForCell: function(G) {
			if (this.cell) {
				this.cell.hideForm();
				this.content.setText("");
				this.content.setInputType(this.field.InputTypes.Email);
				this.sendButton.setText(a("Send"))
			}
			this.cell = G
		}
	});
	var u = null;
	var z = function() {
		if (u) {
			if (u.cell) {
				u.cell.hideForm()
			}
			u.destroy();
			u = null
		}
		if (!u) {
			u = new c()
		}
		return u
	};
	var q = t(E.View, w(E.EditText, "field"), w(E.UnspammableButton, "sendButton"), {
		initializeViewWithKey: function(G) {
			this._inviteEmailFormKey = G
		},
		showFormForItem: function(L) {
			this.item = L;
			var K = this.form = this[this._inviteEmailFormKey] = z();
			K.reuseForCell(this);
			for (var G in this._compositeDestroys) {
				if (this.hasOwnProperty(G) && this._inviteEmailFormKey != G && this[G] && typeof(this[G].removeFromParent) == "function") {
					this[G].removeFromParent()
				}
			}
			if (this.item._showingForm) {
				return
			}
			this.item._showingForm = true;
			var I = y.ListViewCellStyles.InviteCellForm;
			I.applyTo(this);
			this.addChild(K);
			K.content.setPlaceholder(a("Enter %1s's email...", this.content.content.getText()));
			K.sendButton.setText("Send");
			var J = new g(this.getFrame());
			J.x = J.y = 0;
			if (!J.isEmpty()) {
				var H = J.h * this._style.extras.insetRatio;
				K.setFieldInset([H, H / 2, H, H]);
				K.setSendButtonInset([H, H, H, H / 2]);
				K.sendButton.setFrameSize([J.w * this._style.extras.buttonWidthRatio, J.h - H * 2]);
				K.setFrame(J);
				K.sendButton.setOnClick(this.bind(this.accessoryClicked))
			}
		},
		hideForm: function() {
			if (this.item) {
				this.item._showingForm = false
			}
			this[this._inviteEmailFormKey].removeFromParent();
			this[this._inviteEmailFormKey].cell = null;
			this[this._inviteEmailFormKey] = null;
			for (var G in this._compositeDestroys) {
				if (this.hasOwnProperty(G) && this._inviteEmailFormKey != G && this[G] && typeof(this[G].removeFromParent) == "function") {
					this.addChild(this[G])
				}
			}
		},
		accessoryClicked: function() {
			this[this._inviteEmailFormKey].content.setState(n.State.Normal);
			var H = this[this._inviteEmailFormKey].content.getText();
			this.loge("Attempting to invite:" + H);
			var G;
			if (y.SessionUtils.User.hasSentFriendInviteToEmail(H)) {
				G = new n.Toast({
					text: a("You've already sent an invite to that address.")
				});
				G.ondisappear = function() {
					G.destroy()
				};
				G.show()
			} else {
				y.SessionUtils.User.sendFriendInviteToEmailIfPossible(H, this.bind(function(I, J) {
					if (I && J && J.error == f.SERVER_ERRORCODE_MALFORMED_EMAIL) {
						G = new n.Toast({
							text: J.error_msg
						});
						G.ondisappear = function() {
							G.destroy()
						};
						G.show();
						this.form.getFieldView().setState(65536)
					} else {
						if (I) {
							G = new n.Toast({
								text: a("Please type a valid e-mail address")
							});
							G.ondisappear = function() {
								G.destroy()
							};
							G.show();
							this.form.getFieldView().setState(65536);
							this.form.content.setText(H)
						} else {
							G = new n.Toast({
								text: a("Email invite sent!")
							});
							G.ondisappear = function() {
								G.destroy()
							};
							G.show();
							this.form.content.setText("");
							this.accessoryButton.setText(a("Invited"));
							this.getAccessoryButtonView().setEnabled(false);
							this.item.contact.lowercaseEmails.push(H);
							this.item.contact.invited = true;
							this.item.emailIndex = 0;
							if (this.item.cell) {
								if (this.item.cell == this) {
									this.hideForm()
								}
								this.item._onSetView(this.item.cell)
							}
						}
					}
				}))
			}
		}
	});
	var D = E.Layouts.ThreeHorizontalGenerator("icon", "content", "accessoryButton").layoutSubviews;
	var C = F.UserCellView = B({
		key: "icon",
		component: y.UserIconView.Component
	}, {
		key: "content",
		component: A,
		altKey: "message"
	}, {
		key: "accessoryButton",
		component: E.UnspammableButton
	}, {
		key: "emailForm",
		component: q
	}, E.AddOrders.Generator("content", "icon", "accessoryButton"), {
		classname: "UserCellView",
		layoutSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			D.call(this);
			var H = new g(this.icon.getFrame());
			if (H.isEmpty()) {
				return
			}
			var G = (H.w - H.h) / 2;
			H.w = H.h;
			H.x += G;
			this.icon.setFrame(H)
		}
	}, p);
	var l = F.UserCellView_TappableRowVariant = B({
		CompositeClass: x.CompositeView
	}, {
		key: "icon",
		component: y.UserIconView.Component
	}, {
		key: "content",
		component: m,
		altKey: "message"
	}, {
		key: "accessoryButton",
		component: E.UnspammableButton
	}, {
		key: "emailForm",
		component: q
	}, E.AddOrders.Generator("content", "icon", "accessoryButton"), {
		classname: "UserCellView_TappableRowVariant",
		layoutSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			D.call(this);
			var H = new g(this.icon.getFrame());
			if (H.isEmpty()) {
				return
			}
			var G = (H.w - H.h) / 2;
			H.w = H.h;
			H.x += G;
			this.icon.setFrame(H)
		}
	}, p);
	var h = F.UserCellView_OneMessageNoIcon = B({
		CompositeClass: x.CompositeView
	}, {
		key: "content",
		component: E.Label,
		altKey: "message"
	}, {
		key: "accessoryButton",
		component: E.UnspammableButton
	}, E.AddOrders.Generator("content", "accessoryButton"), E.Layouts.TwoHorizontalGenerator("content", "accessoryButton"), {
		classname: "UserCellView_OneMessageNoIcon"
	}, p);
	var k = E.Layouts.ThreeHorizontalGenerator("icon", "content", "rightAccessory").layoutSubviews;
	var v = F.UserCellView_ThreeItemMessage_TappableRowVariant = B({
		CompositeClass: x.CompositeView
	}, {
		key: "icon",
		component: y.UserIconView.Component
	}, {
		key: "content",
		component: m,
		altKey: "message"
	}, {
		key: "rightAccessory",
		component: y.VerticalLabelImageButtonComponent
	}, E.AddOrders.Generator("content", "icon", "rightAccessory"), {
		classname: "UserCellView_ThreeItemMessage_TappableRowVariant",
		layoutSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			k.call(this);
			var H = new g(this.icon.getFrame());
			if (H.isEmpty()) {
				return
			}
			var G = (H.w - H.h) / 2;
			H.w = H.h;
			H.x += G;
			this.icon.setFrame(H)
		}
	}, p);
	var b = E.Layouts.ThreeHorizontalGenerator("icon", "content", "accessoryButton").layoutSubviews;
	var o = F.UserCellView_ThreeItemMessage_TappableColumnVariant = B({
		CompositeClass: x.CompositeView
	}, {
		key: "icon",
		component: y.UserIconView.Component
	}, {
		key: "content",
		component: A,
		altKey: "message"
	}, {
		key: "accessoryButton",
		component: y.HorizontalLabel_ImageButtonComponent
	}, E.AddOrders.Generator("content", "icon", "accessoryButton"), {
		classname: "UserCellView_ThreeItemMessage_TappableColumnVariant",
		layoutSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			b.call(this);
			var H = new g(this.icon.getFrame());
			if (H.isEmpty()) {
				return
			}
			var G = (H.w - H.h) / 2;
			H.w = H.h;
			H.x += G;
			this.icon.setFrame(H);
			this.logd("Squared the UserIcon's frame: ", H)
		}
	}, p);
	return F
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/ContactsScanBase"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/ContactsScanBase"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/ContactsScanBase"] = d;
	var c = require("NGCore/Client/Core/Class");
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User");
	var j = require("NGCore/Client/Core/SHA1").SHA1;
	var e = require("NGCore/Client/UI/SystemBinding");

	function g(m, l) {
		var n = new b.PlusRequest();
		n.setApiMethod("users/search?email_hash=" + m.join(","));
		n.setHttpMethod("GET");
		n.send(function(p, s, r, o) {
			if ((typeof p) == "undefined") {
				var v = s ? s.success : false;
				if (v) {
					var q = [];
					for (var u in s.list) {
						if (s.list.hasOwnProperty(u)) {
							var w = s.list[u];
							var t = f.User.getUserWithData(w);
							q.push(t)
						}
					}
					l(p, q, m);
					return
				}
			}
			l(p, [], m)
		})
	}
	var k = false;

	function a(r, u, t, C, l, m) {
		if (k) {
			NgLogD("Hack: AddressBookScan abort...");
			if (u && u.closeResultSet) {
				try {
					u.closeResultSet()
				} catch (y) {
					e.SystemBinding._closeContactsResultSetfunction(u)
				}
			}
			return
		}
		if ((typeof r) != "undefined") {
			NgLogD("Error getting contacts on phone: " + r);
			m(r);
			return
		}
		var q = [];
		var s = {};
		var v = t;
		var o = [];
		while (v < (t + C)) {
			var w = u.items[v];
			w.foundInPlus = false;
			var p = w.lowercaseEmails;
			if ((!p) || (p.length === 0)) {
				o.push(w)
			}
			for (var B in p) {
				if (p.hasOwnProperty(B)) {
					var n = j.hex_sha1(p[B]);
					q.push(n);
					s[n] = w
				}
			}
			v++
		}
		var x = 100;
		var A = Math.min(x, q.length);
		var z = function(D, N, F) {
			var J = [];
			var O = o.slice(0);
			for (var H in N) {
				if (N.hasOwnProperty(H)) {
					var Q = N[H];
					J.push(Q);
					var M = s[Q.emailHash];
					if (M) {
						M.foundInPlus = true;
						if (Q && !(Q.firstName || Q.lastName)) {
							Q.firstName = M.displayName
						}
					}
					Q.contact = M
				}
			}
			var E, L, I, K;
			for (var R in F) {
				if (F.hasOwnProperty(R)) {
					I = F[R];
					if (s.hasOwnProperty(I)) {
						K = s[I];
						if (!K.foundInPlus) {
							E = true;
							for (L in O) {
								if (O.hasOwnProperty(L) && O[L] == K) {
									E = false;
									break
								}
							}
							if (E) {
								O.push(K)
							}
						}
					}
				}
			}
			l(D, J, O);
			A = Math.min(x, q.length);
			if (A > 0) {
				g(q.splice(0, A), z)
			} else {
				var P = function(T, U, S, V) {
					a(T, U, S, V, l, m)
				};
				var G = u.getMore(P);
				if (!G) {
					m(D)
				}
			}
		};
		g(q.splice(0, A), z)
	}
	var h = c.Class.subclass({
		classname: "ContactsScanBase",
		initialize: function(l) {
			k = false
		},
		abortScanning: function() {
			k = true
		},
		searchPlusForPeople: function(n, m) {
			var l = function(p, r, o, q) {
				a(p, r, o, q, n, m)
			};
			this.getMore(l)
		},
		getMore: function(l) {
			NgLogW("NOT IMPLEMENTED - ContactsSearchBase.getMore")
		}
	});
	d.ContactsScanBase = h;
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/StringUtils"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/StringUtils"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/StringUtils"] = a;
	var b = a.StringUtils = {
		trim: function(c) {
			return c.replace(/^\s+|\s+$/g, "")
		},
		ltrim: function(c) {
			return c.replace(/^\s+/, "")
		},
		rtrim: function(c) {
			return c.replace(/\s+$/, "")
		}
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/Defines"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/Defines"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/Defines"] = a;
	var b = a.Defines = {
		SERVER_ERRORCODE_MALFORMED_EMAIL: 103
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/PendingCellView"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/PendingCellView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/PendingCellView"] = f;
	var e = require("NGCore/Client/UI").UI;
	var d = e.ViewGeometry.Rect;
	var c = e.ViewGeometry.Scale;
	var l = require("NGCore/Client/Core/Capabilities").Capabilities;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents").Components;
	var h = 20;
	var k = g.Layouts.TwoHorizontalGenerator("spinner", "content").layoutSubviews;
	var j = f.PendingCellView = a({
		key: "spinner",
		component: g.Spinner
	}, {
		key: "content",
		component: g.Label,
		altKey: "message"
	}, g.AddOrders.Generator("content", "spinner"), {
		classname: "PendingCellView",
		initialize: function($super) {
			$super({});
			b.ListViewCellStyles.PendingCell.applyTo(this);
			this.spinner.setDarkStyle(true)
		},
		layoutSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			var q = new d(this.getFrame());
			if (q.isEmpty()) {
				return
			}
			var n = 1 / 6 * q.w;
			this.spinner.setFrameSize([n, n]);
			this.setSpinnerInset([n / 20, n / 10, n / 20, n / 10]);
			k.call(this);
			var p = new d(this.spinner.getFrame());
			if (p.isEmpty()) {
				return
			}
			var m = (p.w - p.h) / 2;
			var o = p.h;
			p.h = h * (l.getScreenHeight() / 480);
			p.w = p.h;
			p.x += m;
			p.y += (o - p.h) * 0.5;
			this.spinner.setFrame(p)
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserIconView"] = function() {
	var j = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserIconView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserIconView"] = j;
	var f = require("NGCore/Client/UI").UI;
	var c = f.ViewGeometry.Rect;
	var b = f.ViewGeometry.Scale;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var h = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var g = p.Components;
	var o = p.Component;
	var e = p.ComponentInheritForKey;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeButton").CompositeButton;
	var d = j.UserIconView = n.Image.subclass({
		classname: "UserIconView",
		$Component: o(g.View, e(g.Image, "icon"), {
			initializeViewWithKey: function(q) {
				this[q] = (new d()).retain()
			}
		}),
		initialize: function($super, q) {
			$super(q);
			this.setImage(h.image("no-user-icon.png"));
			this.setAttributes(k.registeredStyle("social.us.usericonview").props());
			return this
		}
	});
	var m = j.TappableUserIconView = a({
		key: "content",
		component: d.Component,
		disableViewAccessorRemapping: true
	}, g.AddOrders.One, g.Layouts.One, {
		classname: "TappableUserIconView"
	}, l);
	return j
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/VerticalLabelImage"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/VerticalLabelImage"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/VerticalLabelImage"] = b;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var a = f.Components;
	var c = f.Component;
	var e = require("NGCore/Client/UI").UI;
	var d = {
		textHeight: 1 / 4
	};
	var g = b.VerticalLabelImageButton = e.Button.subclass({
		className: "VerticalLabelImageButton",
		sizeChanged: function(j, h) {
			this.setTextGravity(e.ViewGeometry.Gravity.TopRight);
			this.setImageInsets(h * d.textHeight, 0, 0, 0);
			this.setImageGravity(e.ViewGeometry.Gravity.BottomRight)
		}
	});
	b.VerticalLabelImageButtonComponent = c({
		initializeViewWithKey: function(h) {
			this[h] = (new g()).retain()
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HorizontalLabelImage"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HorizontalLabelImage"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/HorizontalLabelImage"] = g;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var h = b.Components;
	var k = b.Component;
	var d = b.ComponentInheritForKey;
	var f = b.ACCESSOR_PASSTHROUGH;
	var e = require("NGCore/Client/UI").UI;
	var j = {
		imageRatio: 1 / 2
	};
	var c = g.HorizontalLabelImage = a({
		key: "label",
		component: h.Label,
		disableViewAccessorRemapping: true
	}, {
		key: "content",
		component: h.UnspammableButton,
		altKey: "icon",
		disableViewAccessorRemapping: true
	}, h.AddOrders.Generator("label", "content"), {
		classname: "HorizontalLabel_ImageButton",
		layoutSubviews: function() {
			var o = new e.ViewGeometry.Rect(this.getFrame());
			if (o.isEmpty()) {
				return
			}
			o.x = o.y = 0;
			var n = new e.ViewGeometry.Rect(this.getFrame());
			var m = n.w * j.imageRatio;
			n.x = o.w - m;
			n.w = m;
			n.y = 0;
			n.inset.apply(n, this._insets.content);
			var l = new e.ViewGeometry.Rect(this.getFrame());
			l.x = 0;
			l.y = 0;
			l.w = o.w - m;
			l.inset.apply(l, this._insets.label);
			this.content.setFrame(n);
			this.label.setFrame(l)
		}
	});
	g.HorizontalLabel_ImageButtonComponent = k(h.View, d(h.Label, "label"), d(h.UnspammableButton, "icon"), {
		initializeViewWithKey: function(l) {
			this[l] = (new c()).retain()
		},
		getIconInset: f,
		setIconInset: f,
		getLabelInset: f,
		setLabelInset: f
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PasswordView"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PasswordView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/PasswordView"] = d;
	var h = require("NGCore/Client/Core").Core;
	var g = require("NGCore/Client/UI").UI;
	var f = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView").CCView;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		PasswordStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Password").Password
		},
		LargeActionButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Password").LargeActionButton
		}
	});
	d.PasswordView = e.subclass({
		classname: "PasswordView",
		_viewHeader: null,
		_labelHeader: null,
		_contentChangePass: null,
		_labelCurrPassword: null,
		_editCurrPassword: null,
		_labelNewPassword: null,
		_editNewPassword: null,
		_labelReEnterPassword: null,
		_editReEnterPassword: null,
		_buttonSavePassword: null,
		_buttonForgotPassword: null,
		_contentForgotPass: null,
		_labelTitle: null,
		_labelText: null,
		_labelEmailAddress: null,
		_editEmailAddress: null,
		_buttonSendEmail: null,
		_footerArea: null,
		_buttonSupport: null,
		_progressDialog: null,
		_toast: null,
		initSubviews: function($super) {
			$super();
			this._style = b.PasswordStyle;
			this._largeActionButtonStyle = b.LargeActionButton;
			this._totalWidth = h.Capabilities.getScreenHeight();
			this._totalHeight = h.Capabilities.getScreenWidth();
			this._initializeContent()
		},
		_initializeContent: function() {
			this._scrollArea = this.getContentView();
			this._viewHeader = (new g.View()).retain();
			this._labelHeader = (new g.Label()).retain();
			this._contentChangePass = (new g.View()).retain();
			this._labelCurrPassword = (new g.Label()).retain();
			this._editCurrPassword = (new g.EditText()).retain();
			this._labelNewPassword = (new g.Label()).retain();
			this._editNewPassword = (new g.EditText()).retain();
			this._labelReEnterPassword = (new g.Label()).retain();
			this._editReEnterPassword = (new g.EditText()).retain();
			this._buttonSavePassword = (new b.UnspammableButton()).retain();
			this._buttonForgotPassword = (new b.UnspammableButton()).retain();
			this._contentForgotPass = (new g.View()).retain();
			this._labelTitle = (new g.Label()).retain();
			this._labelText = (new g.Label()).retain();
			this._labelEmailAddress = (new g.Label()).retain();
			this._editEmailAddress = (new g.EditText()).retain();
			this._buttonSendEmail = (new b.UnspammableButton()).retain();
			this._footerArea = (new g.View()).retain();
			this._buttonSupport = (new b.UnspammableButton()).retain();
			this._progressDialog = (new g.ProgressDialog()).retain();
			this._toast = (new g.Toast()).retain();
			this._labelHeader.setText(c("Change Password"));
			this._labelCurrPassword.setText(c("Current Password"));
			this._labelNewPassword.setText(c("New Password"));
			this._labelReEnterPassword.setText(c("Re-enter Password"));
			this._buttonSavePassword.setText(c("Save"));
			this._buttonForgotPassword.setText(c("Forgot Password?"));
			this._labelTitle.setText(c("Forgot your password?"));
			this._labelText.setText(c("Please enter the email address you used to sign up for Mobage and a password reset will be sent to you."));
			this._labelEmailAddress.setText(c("Email Address"));
			this._buttonSendEmail.setText(c("Send"));
			this._buttonSupport.setText(c("Support"));
			this._progressDialog.setText(c("Sending request"));
			this._editCurrPassword.setInputType(g.Commands.InputType.Password);
			this._applyKeyboardWorkaround(this._editCurrPassword);
			this._editNewPassword.setInputType(g.Commands.InputType.Password);
			this._applyKeyboardWorkaround(this._editNewPassword);
			this._editReEnterPassword.setInputType(g.Commands.InputType.Password);
			this._applyKeyboardWorkaround(this._editReEnterPassword);
			this._buttonForgotPassword.setTextColor("FF000000", g.State.Pressed);
			this._editEmailAddress.setInputType(g.Commands.InputType.None);
			this._editEmailAddress.setEnterKeyType(g.Commands.EnterKeyType.Done);
			this._applyKeyboardWorkaround(this._editEmailAddress);
			this._buttonSavePassword.onclick = (function() {
				if (this.controller) {
					this.controller.buttonSavePasswordOnClick()
				}
			}).bind(this);
			this._buttonForgotPassword.onclick = (function() {
				if (this.controller) {
					this.controller.buttonForgotPasswordOnClick()
				}
			}).bind(this);
			this._buttonSendEmail.onclick = (function() {
				if (this.controller) {
					this.controller.buttonSendEmailOnClick()
				}
			}).bind(this);
			this._buttonSupport.onclick = (function() {
				if (this.controller) {
					this.controller.buttonSupportOnClick()
				}
			}).bind(this);
			this._style.applyTo(this)
		},
		addSubviews: function($super) {
			$super();
			this._viewHeader.addChild(this._labelHeader);
			this._contentChangePass.addChild(this._labelCurrPassword);
			this._contentChangePass.addChild(this._editCurrPassword);
			this._contentChangePass.addChild(this._labelNewPassword);
			this._contentChangePass.addChild(this._editNewPassword);
			this._contentChangePass.addChild(this._labelReEnterPassword);
			this._contentChangePass.addChild(this._editReEnterPassword);
			this._contentChangePass.addChild(this._buttonSavePassword);
			this._contentChangePass.addChild(this._buttonForgotPassword);
			this._contentForgotPass.addChild(this._labelTitle);
			this._contentForgotPass.addChild(this._labelText);
			this._contentForgotPass.addChild(this._labelEmailAddress);
			this._contentForgotPass.addChild(this._editEmailAddress);
			this._contentForgotPass.addChild(this._buttonSendEmail);
			this._footerArea.addChild(this._buttonSupport);
			this._scrollArea.addChild(this._viewHeader);
			this._scrollArea.addChild(this._contentChangePass);
			this._scrollArea.addChild(this._footerArea)
		},
		_applyKeyboardWorkaround: function(j) {
			if (this.controller) {
				this.controller.applyKeyboardWorkaround(j)
			}
		},
		destroy: function() {
			if (this._viewHeader) {
				this._viewHeader.release()
			}
			if (this._labelHeader) {
				this._labelHeader.release()
			}
			if (this._contentChangePass) {
				this._contentChangePass.release()
			}
			if (this._labelCurrPassword) {
				this._labelCurrPassword.release()
			}
			if (this._editCurrPassword) {
				this._editCurrPassword.release()
			}
			if (this._labelNewPassword) {
				this._labelNewPassword.release()
			}
			if (this._editNewPassword) {
				this._editNewPassword.release()
			}
			if (this._labelReEnterPassword) {
				this._labelReEnterPassword.release()
			}
			if (this._editReEnterPassword) {
				this._editReEnterPassword.release()
			}
			if (this._buttonSavePassword) {
				this._buttonSavePassword.release()
			}
			if (this._buttonForgotPassword) {
				this._buttonForgotPassword.release()
			}
			if (this._contentForgotPass) {
				this._contentForgotPass.release()
			}
			if (this._labelTitle) {
				this._labelTitle.release()
			}
			if (this._labelText) {
				this._labelText.release()
			}
			if (this._labelEmailAddress) {
				this._labelEmailAddress.release()
			}
			if (this._editEmailAddress) {
				this._editEmailAddress.release()
			}
			if (this._buttonSendEmail) {
				this._buttonSendEmail.release()
			}
			if (this._footerArea) {
				this._footerArea.release()
			}
			if (this._buttonSupport) {
				this._buttonSupport.release()
			}
			if (this._progressDialog) {
				this._progressDialog.release()
			}
			if (this._toast) {
				this._toast.release()
			}
		},
		layoutSubviews: function($super) {
			$super();
			var n = this._style.extras.viewRatio;
			var j = this.getContentWidth();
			var o = n.contentHeaderH * this._totalHeight;
			var l = n.contentAreaH * this._totalHeight;
			var m = n.footerAreaH * this._totalHeight;
			this._viewHeader.setFrame([0, 0, j, o]);
			this._labelHeader.setFrame(this._getSize(n.labelHeader, j, o));
			this._contentChangePass.setFrame([0, o, j, l]);
			this._labelCurrPassword.setFrame(this._getSize(n.labelCurrPassword, j, l));
			this._editCurrPassword.setFrame(this._getSize(n.editCurrPassword, j, l));
			this._labelNewPassword.setFrame(this._getSize(n.labelNewPassword, j, l));
			this._editNewPassword.setFrame(this._getSize(n.editNewPassword, j, l));
			this._labelReEnterPassword.setFrame(this._getSize(n.labelReEnterPassword, j, l));
			this._editReEnterPassword.setFrame(this._getSize(n.editReEnterPassword, j, l));
			this._buttonSavePassword.setFrame([n.buttonSavePassword[0] * j, n.buttonSavePassword[1] * l, n.buttonSavePassword[2] * j, n.buttonSavePassword[3] * this._totalHeight]);
			this._buttonForgotPassword.setFrame([n.buttonForgotPassword[0] * j, n.buttonForgotPassword[1] * l, n.buttonForgotPassword[2] * j, n.buttonForgotPassword[3] * this._totalHeight]);
			this._contentForgotPass.setFrame([0, o, j, l]);
			this._labelTitle.setFrame(this._getSize(n.labelTitle, j, l));
			this._labelText.setFrame(this._getSize(n.labelText, j, l));
			this._labelEmailAddress.setFrame(this._getSize(n.labelEmailAddress, j, l));
			this._editEmailAddress.setFrame(this._getSize(n.editEmailAddress, j, l));
			this._buttonSendEmail.setFrame(this._getSize(n.buttonSendEmail, j, l));
			this._footerArea.setFrame([0, n.changePassFooterAreaY * this._totalHeight, j, m]);
			this._buttonSupport.setFrame(this._getSize(n.buttonSupport, j, m));
			var k = this._footerArea.getFrame();
			this._scrollArea.setContentSize(Math.floor(j), k[1] + k[3])
		},
		_getSize: function(l, j, k) {
			return [l[0] * j, l[1] * k, l[2] * j, l[3] * k]
		},
		showForgotPass: function() {
			this._scrollArea.removeChild(this._contentChangePass);
			this._scrollArea.removeChild(this._footerArea);
			this._scrollArea.addChild(this._contentForgotPass);
			this._scrollArea.addChild(this._footerArea)
		},
		showChangePass: function() {
			this._scrollArea.removeChild(this._contentForgotPass);
			this._scrollArea.removeChild(this._footerArea);
			this._scrollArea.addChild(this._contentChangePass);
			this._scrollArea.addChild(this._footerArea)
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Password"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Password"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Password"] = c;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var b = e.ScaledCorners;
	var f = e.ScaledTextSize;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Main").CommonElements;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	e.lazyLoad(c, "Password", function() {
		return {
			children: {
				_viewHeader: {
					style: {
						gradient: {
							gradient: ["FF143558 0.000", "FF295D8D 1.000"]
						}
					}
				},
				_labelHeader: {
					style: {
						textFont: e.defaultBoldFontFace,
						textSize: f(14),
						textColor: "FFFFFFFF",
						textGravity: [0, 0.5]
					}
				},
				_contentChangePass: {
					style: {
						backgroundColor: "FFE6EDF5"
					}
				},
				_labelCurrPassword: {
					style: {
						textFont: e.defaultBoldFontFace,
						textSize: f(12),
						textColor: "FF000000",
						textGravity: [0, 0]
					}
				},
				_editCurrPassword: a.textBox,
				_labelNewPassword: {
					style: {
						textFont: e.defaultBoldFontFace,
						textSize: f(12),
						textColor: "FF000000",
						textGravity: [0, 0]
					}
				},
				_editNewPassword: a.textBox,
				_labelReEnterPassword: {
					style: {
						textSize: f(12),
						textFont: e.defaultBoldFontFace,
						textColor: "FF000000",
						textGravity: [0, 0]
					}
				},
				_editReEnterPassword: a.textBox,
				_buttonSavePassword: a.standardButton,
				_buttonForgotPassword: {
					style: {
						textSize: f(12),
						textGravity: [1, 0.5],
						textFont: e.defaultBoldFontFace,
						textColor: "FF004AA9"
					}
				},
				_contentForgotPass: {
					style: {
						backgroundColor: "FFE6EDF5"
					}
				},
				_labelTitle: {
					style: {
						textSize: f(12),
						textFont: e.defaultBoldFontFace,
						textColor: "FF000000",
						textGravity: [0, 0]
					}
				},
				_labelText: {
					style: {
						textSize: f(12),
						textFont: e.defaultRegularFontFace,
						textColor: "FF000000",
						textGravity: [0, 0]
					}
				},
				_labelEmailAddress: {
					style: {
						textSize: f(12),
						textFont: e.defaultBoldFontFace,
						textColor: "FF000000",
						textGravity: [0, 0]
					}
				},
				_editEmailAddress: a.textBox,
				_buttonSendEmail: a.standardButton,
				_footerArea: {
					style: {
						gradient: {
							gradient: ["FFDBE2EA 0.000", "FFE9EFF3 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_buttonSupport: a.standardButton
			},
			extras: {
				viewRatio: {
					scrollViewContentH: (625 / 480),
					contentHeaderH: (56 / 480),
					contentHeaderW: (578 / 800),
					contentAreaH: (390 / 480),
					contentAreaW: (578 / 800),
					changePassFooterAreaY: (371 / 480),
					forgotPassFooterAreaY: (317 / 480),
					footerAreaH: (80 / 480),
					labelHeader: [(14 / 578), (14 / 56), (360 / 578), (25 / 56)],
					labelCurrPassword: [(17 / 578), (15 / 480), (360 / 578), (35 / 480)],
					editCurrPassword: [(12 / 578), (40 / 480), (282 / 578), (70 / 480)],
					labelNewPassword: [(17 / 578), (110 / 480), (360 / 578), (35 / 480)],
					editNewPassword: [(12 / 578), (145 / 480), (282 / 578), (70 / 480)],
					labelReEnterPassword: [(17 / 578), (215 / 480), (360 / 578), (35 / 480)],
					editReEnterPassword: [(12 / 578), (250 / 480), (282 / 578), (70 / 480)],
					buttonSavePassword: [(11 / 578), (325 / 480), (250 / 578), (46 / 480)],
					buttonForgotPassword: [(320 / 578), (15 / 480), (240 / 578), (30 / 480)],
					labelTitle: [(14 / 578), (15 / 480), (229 / 578), (43 / 480)],
					labelText: [(12 / 578), (45 / 480), (515 / 578), (80 / 480)],
					labelEmailAddress: [(17 / 578), (125 / 480), (129 / 578), (43 / 480)],
					editEmailAddress: [(12 / 578), (164 / 480), (554 / 578), (70 / 480)],
					buttonSendEmail: [(12 / 578), (251 / 480), (150 / 578), (46 / 480)],
					buttonSupport: [(12 / 578), (26 / 100), (552 / 578), (46 / 100)]
				}
			}
		}
	});
	e.lazyLoad(c, "LargeActionButton", function() {
		return {
			style: {
				gradient: {
					corners: b(8),
					gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"],
					outerLine: "FF233656 2.0",
					innerLine: "4484C3E9 2.0"
				},
				pressedGradient: {
					corners: b(8),
					gradient: ["FF5B971B 0.000", "FF397210 1.000"],
					outerLine: "FF233656 2.0",
					innerShadow: "23000000 1.0 {0.0,-2.0}"
				},
				textFont: e.defaultBoldFontFace,
				textSize: f(16),
				textColor: "FFFFFFFF",
				textGravity: [0.5, 0.5],
				textShadow: "33000000 1.0 {0.0,-2.0}"
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameDownloadStyle"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameDownloadStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameDownloadStyle"] = a;
	var c = {};
	c.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var b = c.Style.ScaledTextSize;
	c.Style.sheet("social.us.gamedownload", {
		progressBar: {
			gradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF242424 0.0", "FF1F1F1F 1.0"]
			},
			progressGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF75B624 0.0", "FF4D8D1F 1.0"]
			}
		},
		downloadButton: {
			normalGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"]
			},
			highlightedGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF5B971B 0.000", "FF397210 1.000"]
			},
			textColor: "FFFFFFFF",
			textSize: b(14),
			textFont: c.Style.defaultBoldFontFace,
			textShadow: "33000000 1.0 {0.0,-2.0}",
			textGravity: [0.5, 0.5],
			imageGravity: [0.5, 0.5]
		},
		playButton: {
			normalGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"]
			},
			highlightedGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"]
			},
			textColor: "FFFFFFFF",
			textSize: b(14),
			textFont: c.Style.defaultBoldFontFace,
			textShadow: "33000000 1.0 {0.0,-2.0}",
			textGravity: [0.5, 0.5]
		},
		backToMarketButton: {
			normalGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF90B100 0.000", "FF6C9100 1.000"]
			},
			highlightedGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF5B971B 0.000", "FF397210 1.000"]
			},
			textColor: "FFFFFFFF",
			textSize: b(11),
			textFont: c.Style.defaultBoldFontFace,
			textShadow: "33000000 1.0 {0.0,-2.0}",
			textGravity: [0.5, 0.5]
		},
		stateLabel: {
			textColor: "FF000000",
			textSize: b(11),
			textFont: c.Style.defaultBoldFontFace
		},
		progressLabel: {
			textColor: "FF000000",
			textSize: b(11)
		},
		progressBarXRatio: 0,
		progressBarYRatio: 0.66,
		progressBarWidthRatio: 1,
		progressBarHeightRatio: 0.33,
		downloadPlayXRatio: 0,
		downloadPlayYRatio: 0,
		downloadPlayWidthRatio: 1,
		downloadPlayHeightRatio: 46 / 58,
		downloadIconSize: 0.33,
		downloadCharacterWidth: 0.09,
		downloadIconSpacing: 0.03,
		stateLabelXRatio: 0,
		stateLabelYRatio: 0,
		stateLabelWidthRatio: 1,
		stateLabelHeightRatio: 0.33,
		progressLabelXRatio: 0,
		progressLabelYRatio: 0.33,
		progressLabelWidthRatio: 1,
		progressLabelHeightRatio: 0.33
	});
	c.Style.sheet("social.us.globalgamedownloadicon", {
		progressBar: {
			gradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF242424 0.0", "FF1F1F1F 1.0"]
			},
			progressGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF75B624 0.0", "FF4D8D1F 1.0"]
			}
		},
		clickableBackgroundPressedGradient: {
			corners: "8.0 8.0 8.0 8.0",
			gradient: ["3FFF 0.0", "0FFF 1.0"],
			innerLine: "6FFF 2.0"
		},
		label: {
			textColor: "FFFFFFFF",
			textSize: b(11),
			textFont: c.Style.defaultBoldFontFace,
			textGravity: [0.5, 0]
		},
		insetFromBottomRatio: 0.15,
		labelHeightRatio: 0.55,
		progressBarHeightRatio: 0.25
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ModalDialogStyle"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ModalDialogStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ModalDialogStyle"] = c;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = b.ScaledCorners;
	var g = b.ScaledTextSize;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = e.ScaledCorners;
	var f = e.ScaledTextSize;
	e.lazyLoad(c, "ModalDialog", function() {
		return {
			style: {}
		}
	});
	e.lazyLoad(c, "TouchCaptureLayer", function() {
		return {
			style: {
				gradient: {
					gradient: ["88000000 0.0"]
				}
			}
		}
	});
	e.lazyLoad(c, "BDayRepairModal", function() {
		return {
			style: {
				gradient: {
					corners: a(8),
					gradient: ["EE0C152D 0.000", "EE0C152D 1.000"]
				}
			},
			children: {
				title: {
					style: {
						textColor: "FFFFFFFF",
						textFont: e.defaultBoldFontFace,
						textSize: f(14),
						textGravity: [0.5, 0.5]
					}
				},
				inputLabel: {
					style: {
						textColor: "FFFFFFFF",
						textFont: e.defaultRegularFontFace,
						textSize: f(10),
						textGravity: [1, 0.5]
					}
				}
			}
		}
	});
	c.BDayRepairSizing = {
		titleHeightRatio: 1 / 3,
		inputWidthRatio: 1 / 6,
		inputHeightRatio: 1 / 3
	};
	b.sheet("social.us.modaldialog", {
		topBarBackgroundPane: {
			gradient: {
				corners: d(8),
				gradient: ["EE0C152D 0.000", "EE0C152D 1.000"]
			}
		},
		standardButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				innerLine: "4484C3E9 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
				innerLine: "2B003366 2.0"
			},
			textFont: b.defaultBoldFontFace,
			textSize: g(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		textBox: {
			gradient: {
				corners: d(8),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FF000000 2.0"
			},
			gradientError: {
				corners: d(8),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FFFF0000 2.0"
			},
			textFont: b.defaultRegularFontFace,
			textColor: "FF000000",
			textGravity: [0.5, 0.5]
		},
		buttonHFactor: (1 / 6),
		labelHFactor: (1 / 6),
		labelTextHFactor: (3 / 5)
	});
	b.sheet("social.us.registrationmodal", {
		regModalBackgroundPane: {
			gradient: {
				corners: d(8),
				gradient: ["FFDCDCDC 1.000", "FF000000 1.000"]
			}
		},
		labelReg: {
			textFont: b.defaultBoldFontFace,
			textSize: g(16),
			textColor: "B3000000"
		},
		termsText: {
			textFont: b.defaultRegularFontFace,
			textSize: g(12),
			textColor: "B3000000",
			textGravity: [0.5, 0]
		},
		termsLink: {
			textFont: b.defaultBoldFontFace,
			textSize: g(12),
			textColor: "FF004AA9",
			textGravity: [0.5, 0]
		},
		inputLabel: {
			textFont: b.defaultRegularFontFace,
			textSize: g(14),
			textInsets: [0, 8, 0, 8],
			textGravity: [0, 1],
			textColor: "B3000000"
		},
		inputLabelError: {
			textColor: "FFFF0000",
			textSize: g(14)
		},
		updatesLabel: {
			textFont: b.defaultRegularFontFace,
			textSize: g(14),
			textGravity: [0, 0.5],
			textColor: "B3000000",
			inputLabelColorError: "FFFF0000"
		},
		inputLabelMinor: {
			textFont: b.defaultRegularFontFace,
			textSize: g(12),
			textColor: "FFBBBBBB",
			textGravity: [1, 1]
		},
		regButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				innerLine: "B3000000 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
				innerLine: "B3000000 2.0"
			},
			textFont: b.defaultBoldFontFace,
			textSize: g(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		textBoxReg: {
			gradient: {
				corners: d(6),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FF000000 2.0",
				insets: "{0.0,0.0,2.0,0.0}"
			},
			gradientError: {
				corners: d(6),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FFFF0000 2.0",
				insets: "{0.0,0.0,2.0,0.0}"
			},
			textFont: b.defaultRegularFontFace,
			textColor: "FF000000",
			textSize: g(14)
		}
	});
	b.sheet("social.us.loginmodaldialog", {
		topBarBackgroundPane: {
			gradient: {
				corners: d(8),
				gradient: ["FF1C5FA3 0.000", "FF0E2A5A 1.000"]
			}
		},
		textHeader: {
			textFont: b.defaultBoldFontFace,
			textColor: "FFFFFFFF",
			textShadow: "45000000 1.0 {0.0,-2.0}"
		},
		textBody: {
			textColor: "FFFFFFFF",
			textShadow: "45000000 1.0 {0.0,-2.0}"
		},
		standardButton: {
			gradient: {
				corners: d(8),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				innerLine: "4484C3E9 2.0"
			},
			pressedGradient: {
				corners: d(8),
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
				innerLine: "2B003366 2.0"
			},
			textFont: b.defaultBoldFontFace,
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "45000000 1.0 {0.0,-2.0}"
		}
	});
	b.sheet("social.us.marketmodaldialog", {
		topBarBackgroundPane: {
			gradient: {
				corners: d(8),
				gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"]
			}
		},
		textHeader: {
			textFont: b.defaultBoldFontFace,
			textColor: "FF000000"
		},
		textBody: {
			textColor: "FF202020"
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsNavigableView"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsNavigableView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CredentialsNavigableView"] = b;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents").Components;
	var c = b.CredentialsNavigableView = d({
		key: "title",
		component: a.View
	}, {
		key: "content",
		component: a.View
	}, a.Layouts.TwoVerticalGenerator("title", "content"), a.AddOrders.Generator("content", "title"), {
		classname: "CredentialsNavigableView"
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationModal"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationModal"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationModal"] = e;
	var f = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Device").Device;
	var d = require("NGCore/Client/UI").UI;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		CredentialsHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/CredentialsHost").CredentialsHost
		},
		RegistrationWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/RegistrationWebScreen").RegistrationWebScreen
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		Analytics: function() {
			return require("NGCore/Client/Core/Analytics").Analytics
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		},
		ModalDialogStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ModalDialogStyle")
		}
	});
	var g = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = d.View.subclass({
		classname: "RegistrationModal_SizeReporterView",
		sizeChanged: function(l, k) {
			if (this.controller && this.controller.layoutViews) {
				this.controller.layoutViews()
			}
		}
	});
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var j = e.RegistrationModal = c.subclass({
		classname: "RegistrationModal",
		_optInUpdates: true,
		_registrationRecord: null,
		_regRef: null,
		_onCompleteCallback: null,
		initialize: function($super, k, n, o) {
			$super();
			this._onCompleteCallback = k;
			this._registrationRecord = n;
			this._regRef = o;
			var p = 4;
			var q = 1906;
			this._registrationRecord.birthMonth = p;
			this._registrationRecord.birthYear = q;
			this._registrationRecord.birthdate = new Date(q, p - 1, 1, 0, 0, 0, 0);
			a.ModalDialogStyle;
			this._modalStyle = a.OldStyle.registeredStyle("social.us.registrationmodal").props();
			this._transparentBase = new a.UnspammableButton().retain();
			this.view().addChild(this._transparentBase).retain();
			this._topBarBgPane = new d.View().retain();
			this._topBarBgPane.setAttributes(this._modalStyle.regModalBackgroundPane);
			this.view().addChild(this._topBarBgPane);
			this.labelTitle = new d.Label().retain();
			this.termsAndConditionsLabel1 = new d.Label().retain();
			this.termsAndConditionsLabel2 = new d.Label().retain();
			this.termsAndConditionsLabel3 = new d.Label().retain();
			this.emailTitle = new d.Label().retain();
			this.updatesLabel = new d.Label().retain();
			this.termsLinkButton = new a.UnspammableButton().retain();
			this.conditionsLinkButton = new a.UnspammableButton().retain();
			this._goButton = new a.UnspammableButton().retain();
			this._closeButton = new a.UnspammableButton().retain();
			this._closeButton.setImage(a.Assets.image("closebutton_up.png"));
			this._closeButton.setImage(a.Assets.image("closebutton_down.png"), d.State.Pressed);
			this.emailEditText = new d.EditText().retain();
			this.updatesCheckBox = new d.CheckBox().retain();
			this._goButton.setText(g("OK"));
			this.labelTitle.setText(g("One last thing!"));
			this.termsAndConditionsLabel1.setText(g('By tapping "OK", you agree to our'));
			this.termsLinkButton.setText(g("Terms of Service"));
			this.termsAndConditionsLabel2.setText(g("and"));
			this.termsAndConditionsLabel3.setText(g("and that you are at least 14 years old."));
			this.conditionsLinkButton.setText(g("Privacy Policy"));
			this.emailEditText.setPlaceholder(g("Enter email here"));
			var s = f.Capabilities._getAccts();
			for (var r in s) {
				if (s[r]["com.google"]) {
					if (a.User.emailAddressLooksValid(s[r]["com.google"])) {
						this.emailEditText.setText(s[r]["com.google"]);
						break
					}
				}
			}
			this.emailTitle.setText(g("Confirm your email"));
			this.updatesLabel.setText(g("Get Mobage news & updates"));
			this.labelTitle.setAttributes(this._modalStyle.labelReg);
			this.termsAndConditionsLabel1.setAttributes(this._modalStyle.termsText);
			this.termsAndConditionsLabel1.setTextGravity([0.5, 1]);
			this.termsAndConditionsLabel2.setAttributes(this._modalStyle.termsText);
			this.termsAndConditionsLabel3.setAttributes(this._modalStyle.termsText);
			this.termsLinkButton.setAttributes(this._modalStyle.termsLink);
			this.conditionsLinkButton.setAttributes(this._modalStyle.termsLink);
			this.emailTitle.setAttributes(this._modalStyle.inputLabel);
			this.emailTitle.setTextColor(this._modalStyle.inputLabelError.textColor, c.UIStateError);
			this.emailTitle.setTextSize(this._modalStyle.inputLabelError.textSize);
			this._goButton.setAttributes(this._modalStyle.regButton);
			this.emailEditText.setAttributes(this._modalStyle.textBoxReg);
			this.emailEditText.setGradient(this._modalStyle.textBoxReg["gradientError"], c.UIStateError);
			this.emailEditText.setInputType(d.Commands.InputType.None);
			this.emailEditText.setEnterKeyType(d.Commands.EnterKeyType.Done);
			this.updatesLabel.setAttributes(this._modalStyle.updatesLabel);
			this.termsLinkButton.setTextGravity([1, 0]);
			this.conditionsLinkButton.setTextGravity([0, 0]);
			a.CommonElements.checkBox.applyTo(this.updatesCheckBox);
			this._topBarBgPane.addChild(this.labelTitle);
			this._topBarBgPane.addChild(this.termsAndConditionsLabel1);
			this._topBarBgPane.addChild(this.termsAndConditionsLabel2);
			this._topBarBgPane.addChild(this.termsAndConditionsLabel3);
			this._topBarBgPane.addChild(this.termsLinkButton);
			this._topBarBgPane.addChild(this.conditionsLinkButton);
			this._topBarBgPane.addChild(this.emailTitle);
			this._topBarBgPane.addChild(this.emailEditText);
			this._topBarBgPane.addChild(this.updatesLabel);
			this._topBarBgPane.addChild(this.updatesCheckBox);
			this._topBarBgPane.addChild(this._goButton);
			this.updatesCheckBox.onclick = this.bind(function(t) {
				if (t.eventType == "click") {
					this._optInUpdates = !this._optInUpdates
				}
			});
			this._goButton.onclick = function(t) {
				this._doRegStep()
			}.bind(this);
			var m = function(t) {
				this.destroy()
			}.bind(this);
			var l = function(t) {
				this.remove()
			}.bind(this);
			this.termsLinkButton.onclick = this.bind(function() {
				this.emailEditText.setEnabled(false);
				a.CredentialsHost.navController.pushViewController(new a.RegistrationWebScreen("http://app.mobage.com/terms"))
			});
			this.conditionsLinkButton.onclick = this.bind(function() {
				this.emailEditText.setEnabled(false);
				a.CredentialsHost.navController.pushViewController(new a.RegistrationWebScreen("http://app.mobage.com/privacy"))
			});
			this.layoutViews();
			return this
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new h())
			}
			$super()
		},
		layoutViews: function() {
			var y = d.Window.getWidth();
			var z = d.Window.getHeight();
			var A = y / 480;
			var m = z / 800;
			var x;
			var w;
			this._transparentBase.setGradient({
				gradient: ["66000000 0.0", "66000000 0.0"]
			});
			this._transparentBase.setFrame(0, 0, y, z);
			var p = 0;
			var n = z / 14;
			var o = y;
			var B = z / 2.2;
			var u = B * 0.25;
			var v = y * 0.025;
			var r = B / 14;
			var s = [p, n, o, B + u];
			this._topBarBgPane.setFrame(s);
			var k = B / 6;
			var q = o / 2;
			var C = B / 6;
			var l = B / 6;
			this._goButton.setFrame([o / 2 - (q / 2), B * 0.77, q, C]);
			this.labelTitle.setFrame([0, 0, o, k]);
			this.emailTitle.setFrame(v, B * 0.14, o - (2 * v), k);
			this.emailEditText.setFrame(v, B * 0.33, o - (2 * v), k);
			this.updatesCheckBox.setFrame(v, B * 0.5, o / 7, k);
			this.updatesCheckBox.setChecked(this._optInUpdates);
			var t = 2 * v + o / 7;
			this.updatesLabel.setFrame(t, B * 0.5, o - v - t, k);
			this.termsAndConditionsLabel1.setFrame(0, B * 1.04 - r, o, r * 2);
			this.termsAndConditionsLabel3.setFrame(0, B * 1.17, o, r);
			d.measureText(" " + this.termsLinkButton.getText(), -1, -1, this.termsLinkButton.getTextFont(), this.termsLinkButton.getTextSize(), function(D) {
				d.measureText(" " + this.termsAndConditionsLabel2.getText() + " ", -1, -1, this.termsAndConditionsLabel2.getTextFont(), this.termsAndConditionsLabel2.getTextSize(), function(E) {
					d.measureText(this.conditionsLinkButton.getText() + " ", -1, -1, this.conditionsLinkButton.getTextFont(), this.conditionsLinkButton.getTextSize(), function(I) {
						var F = D.totalWidth + E.totalWidth + I.totalWidth;
						var J = o / 2 - F / 2;
						var H = J + D.totalWidth;
						var G = H + E.totalWidth;
						var K = B * 1.11;
						this.termsLinkButton.setFrame(J, K, D.totalWidth, r);
						this.termsAndConditionsLabel2.setFrame(H, K, E.totalWidth, r);
						this.conditionsLinkButton.setFrame(G, K, I.totalWidth, r)
					}.bind(this))
				}.bind(this))
			}.bind(this))
		},
		_doRegStep: function() {
			var l = this;
			a.Analytics.reportFunnelStage("Registration02", 3, "CreatingIdentity");
			this.emailEditText.setState(d.State.Normal);
			this._registrationRecord.email = this.emailEditText.getText().replace(/^\s+|\s+$/g, "");
			var k = false;
			var m;
			this._registrationRecord.testLocalEmail(function(n) {
				if (n) {
					k = true;
					l.emailEditText.setState(c.UIStateError);
					l.emailTitle.setState(c.UIStateError);
					l.emailTitle.setText(g("Please enter a valid email"));
					m = new d.Toast();
					m.setText(n);
					m.show()
				}
			});
			if (k) {
				return
			}
			if (!this.progressDialog) {
				this.progressDialog = new d.ProgressDialog();
				this.progressDialog.setText(g("Verifying..."))
			}
			this.progressDialog.show();
			this._registrationRecord.testRemoteEmail(function(n) {
				if (n) {
					NgLogD("testRemoteEmail Error:" + JSON.stringify(n));
					l.emailEditText.setState(c.UIStateError);
					l.emailTitle.setState(c.UIStateError);
					l.emailTitle.setText(n);
					k = true;
					if (l.progressDialog) {
						l.progressDialog.hide();
						l.progressDialog.destroy();
						l.progressDialog = undefined
					}
				} else {
					NgLogD("EMAIL VERIFIED");
					l._registrationRecord.optIn = this._optInUpdates;
					NgLogD("Registration: Record ready to submit, record's data: " + JSON.stringify(this._registrationRecord));
					l._registrationRecord.createUser(function(s, p) {
						if (s && s.length) {
							f.Analytics.reportGameEvent("RegErr", {
								errors: s
							});
							NgLogD("Registration: Errors while submitting for user creation: " + JSON.stringify(s));
							l.progressDialog.hide();
							l.progressDialog.destroy();
							l.progressDialog = undefined;
							for (var r = 0; r < s.length; r++) {
								var q = new d.Toast();
								q.setText(s[r]);
								q.show()
							}
						} else {
							NgLogD("Registration: Created user successfully!");
							a.Analytics.reportFunnelStage("Registration02", 4, "IdentityCreated");
							l.emailEditText.setEnabled(false);
							var o = new d.Toast();
							o.setText("Welcome to Mobage!");
							o.show();
							l._regRef.detachKL();
							l._waitingForGameLaunch = true;
							a.ServiceHost.closeMenuDrawer(false, false);
							if (l._onCompleteCallback) {
								NgLogD("Registration: Calling _onCompleteCallback");
								l._onCompleteCallback(p.user())
							}
							if (l.progressDialog) {
								l.progressDialog.hide();
								l.progressDialog.destroy();
								l.progressDialog = undefined
							}
						}
					})
				}
			})
		},
		activate: function() {
			this.layoutViews();
			this.emailEditText.setEnabled(true)
		},
		remove: function() {
			this.emailTitle.setText(g("Confirm your email"));
			this.emailEditText.setText("");
			this.emailEditText.setPlaceholder(g("Enter email here"));
			var l = f.Capabilities._getAccts();
			for (var k in l) {
				if (l[k]["com.google"]) {
					if (a.User.emailAddressLooksValid(l[k]["com.google"])) {
						this.emailEditText.setText(l[k]["com.google"]);
						break
					}
				}
			}
			this.emailTitle.setState(d.State.Normal);
			this.emailEditText.setState(d.State.Normal);
			this.view().removeFromParent()
		},
		destroy: function() {
			this._transparentBase.release();
			this._topBarBgPane.release();
			this.labelTitle.release();
			this._closeButton.release()
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Registration"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Registration"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Registration"] = b;
	var d = {};
	d.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var a = d.Style.ScaledCorners;
	var c = d.Style.ScaledTextSize;
	d.Style.sheet("social.us.reg.stepone", {
		textFieldAttributes: {
			textSize: c(11)
		},
		namesBackground: {
			gradient: {
				corners: a(8),
				gradient: ["FFDCDCDC 1.000", "FF000000 1.000"]
			}
		},
		nameTitle: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(16),
			textColor: "B3000000"
		},
		nameSubtitle: {
			textSize: c(14),
			textColor: "B3000000"
		},
		termsText: {
			textFont: d.Style.defaultRegularFontFace,
			textSize: c(12),
			textColor: "B3000000",
			textGravity: [0.5, 0]
		},
		termsLink: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(12),
			textColor: "FF004AA9",
			textGravity: [0.5, 0]
		},
		inputLabel: {
			textFont: d.Style.defaultRegularFontFace,
			textSize: c(16),
			textGravity: [0, 1],
			textColor: "B3000000",
			inputLabelColorError: "FFFF0000"
		},
		inputLabelMinor: {
			textFont: d.Style.defaultRegularFontFace,
			textSize: c(12),
			textColor: "FFBBBBBB",
			textGravity: [1, 1]
		},
		nameButton: {
			gradient: {
				corners: a(8),
				gradient: ["FF5AB0E2 0.000", "FF2B76BC 1.000"],
				innerLine: "B3000000 2.0"
			},
			pressedGradient: {
				corners: a(8),
				gradient: ["FF3682C3 0.000", "FF1C61A8 1.000"],
				innerLine: "B3000000 2.0"
			},
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(14),
			textColor: "FFFFFFFF",
			textGravity: [0.5, 0.5],
			textShadow: "33000000 1.0 {0.0,-2.0}"
		},
		textBoxReg: {
			gradient: {
				corners: a(6),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FF000000 2.0",
				insets: "{0.0,0.0,2.0,0.0}"
			},
			gradientError: {
				corners: a(6),
				gradient: ["FFC9C9C9 0.000", "FFEDEDED 1.000"],
				outerLine: "FFFF0000 2.0",
				insets: "{0.0,0.0,2.0,0.0}"
			},
			textFont: d.Style.defaultRegularFontFace,
			textColor: "FF000000",
			textSize: c(14)
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Balance"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Balance"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Balance"] = b;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Transaction").Transaction;
	var e = require("NGCore/Client/UI").UI;
	b.Balance = {
		get: function(k) {
			NgLogD("GET balance");
			var h = undefined;
			var n = false;
			var l = 0;
			var g = "mobacoin";
			var f = undefined;
			var m = d.getCurrentSession();
			if (!m) {
				if (k) {
					k(h, n, l, g)
				}
				return
			}
			var j = c.newBankRequest();
			if (a._isIOS()) {
				j.setApiMethod("bank/balance?os=ios")
			} else {
				j.setApiMethod("bank/balance?os=Android")
			}
			j.setHttpMethod("GET");
			j.send(function(p, q, r, o) {
				NgLogD("err = " + p);
				NgLogD("data = " + JSON.stringify(q));
				h = p;
				if (q) {
					if (q.hasOwnProperty("success")) {
						n = q.success
					}
					if (q.hasOwnProperty("balance")) {
						l = q.balance
					}
					if (q.hasOwnProperty("currency")) {
						g = q.currency
					}
					if (q.hasOwnProperty("currency_icon")) {
						f = q.currency_icon
					}
				}
				if (p || (!n)) {
					if (k) {
						k(h, n, l, g, f)
					}
				} else {
					if (k) {
						k(h, n, l, g, f)
					}
				}
			})
		},
		addCommas: function(k) {
			k += "";
			var f = k.split(".");
			var j = f[0];
			var g = f.length > 1 ? "." + f[1] : "";
			var h = /(\d+)(\d{3})/;
			while (h.test(j)) {
				j = j.replace(h, "$1,$2")
			}
			return j + g
		}
	};
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Transaction"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Transaction"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Transaction"] = b;
	var e = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/Network").Network;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest").PlusRequest;
	var a = b.Transaction = e.Class.subclass({
		$_balanceCBList: {},
		$authorize: function(g, f) {
			a._putToNextState(g, "authorize", f)
		},
		$close: function(g, f) {
			a._putToNextState(g, "close", f)
		},
		$open: function(g, f) {
			a._putToNextState(g, "open", f)
		},
		$cancel: function(g, f) {
			a._putToNextState(g, "cancel", f)
		},
		$create: function(g, n, f) {
			var m = c.newBankRequest();
			m.setApiMethod("bank/debit");
			m.setHttpMethod("POST");
			m.setHttpHeaders({
				"Content-Type": "application/json; charset=utf-8"
			});
			var h = new Array();
			for (var j = 0; j < g.length; j++) {
				var l = {
					item: {
						sku: g[j].item.id
					},
					quantity: g[j].quantity
				};
				h.push(l)
			}
			var k = {};
			k.items = h;
			k.comment = n;
			if (this._isIOS()) {
				k.os = "ios"
			} else {
				k.os = "Android"
			}
			m.setPostBody(JSON.stringify(k));
			m.sendRetry(function(q, r, s, o) {
				var t = undefined;
				var p = undefined;
				if (r) {
					t = r.transaction_id;
					p = r.state
				}
				if (f && typeof f == "function") {
					f(q, t, p)
				}
			})
		},
		$_updateBalance: function() {
			for (var g in a._balanceCBList) {
				var f = a._balanceCBList[g];
				f.updateBalance()
			}
		},
		$registerBalanceCB: function(g, f) {
			a._balanceCBList[g] = f
		},
		$unRegisterBalanceCB: function(f) {
			delete a._balanceCBList[f]
		},
		$_putToNextState: function(j, h, g) {
			var k = c.newBankRequest();
			if (this._isIOS()) {
				k.setApiMethod("bank/debit/" + j + "?state=" + h + "&os=ios")
			} else {
				k.setApiMethod("bank/debit/" + j + "?state=" + h + "&os=Android")
			}
			if (h.toLowerCase() === "authorize") {
				var f = "sandbox";
				if (c.serverModeIsProduction()) {
					f = "service"
				}
				d._int_Util.sign(j, f, function(l) {
					NgLogD("Mobage/Transaction: sign authorize txn");
					k.setPostBody({
						signature: l
					});
					this._sendDebitRequest(k, h, g)
				}.bind(this))
			} else {
				this._sendDebitRequest(k, h, g)
			}
		},
		$_sendDebitRequest: function(h, g, f) {
			h.setHttpMethod("PUT");
			h.setHttpHeaders({
				"Content-Type": "application/json; charset=utf-8"
			});
			h.sendRetry(function(l, m, n, j) {
				var o = undefined;
				var k = undefined;
				NgLogD("data = " + JSON.stringify(m));
				if (m) {
					o = m.transaction_id;
					k = m.state;
					if (!m.success || (typeof k) === "undefined") {
						l = "failed:status=" + j + "err=" + l
					} else {
						if (k.toLowerCase() === "open" || k.toLowerCase() === "canceled") {
							a._updateBalance()
						}
					}
				}
				if (f && typeof f == "function") {
					f(l, o, k)
				}
			})
		},
		$closeCreditTxn: function(g, f) {
			var h = c.newBankRequest();
			if (this._isIOS()) {
				h.setApiMethod("bank/credit/" + g + "?state=close&os=ios")
			} else {
				h.setApiMethod("bank/credit/" + g + "?state=close&os=Android")
			}
			h.setHttpMethod("PUT");
			h.setHttpHeaders({
				"Content-Type": "application/json; charset=utf-8"
			});
			h.sendRetry(function(l, m, n, j) {
				var o = undefined;
				var k = undefined;
				NgLogD("data = " + JSON.stringify(m));
				if (m) {
					o = m.transaction_id;
					k = m.state;
					if (!m.success || (typeof k) === "undefined") {
						l = "failed:status=" + j + "err=" + l
					} else {
						a._updateBalance()
					}
				}
				if (f && typeof f == "function") {
					f(l)
				}
			})
		},
		$_isIOS: function() {
			if (typeof this._capIsIOS != "undefined") {
				return this._capIsIOS
			}
			var f = e.Capabilities;
			if ((typeof f.getPlatformOS() != "undefined") && (f.getPlatformOS().toLowerCase() == "iphone os")) {
				this._capIsIOS = true
			} else {
				this._capIsIOS = false
			}
			return this._capIsIOS
		},
		$credit: function(l, m, h, n, k, g) {
			var j = c.newBankRequest();
			var o = this;
			j.setApiMethod("bank/credit");
			j.setHttpMethod("POST");
			j.setHttpHeaders({
				"Content-Type": "application/json; charset=utf-8"
			});
			var f = {
				comment: l,
				item: {
					sku: m,
					quantity: h
				},
				receipt: n
			};
			if (o._isIOS()) {
				f.os = "ios"
			} else {
				f.os = "Android"
			}
			j.setPostBody(JSON.stringify(f));
			j.sendRetry(function(q, r, s, p) {
				var t = undefined;
				if ((!q) && r) {
					t = r.transaction_id;
					if ((!r.success) && (r.error)) {
						q = r.error
					}
				}
				if (g && typeof g == "function") {
					g(q, t)
				}
			})
		},
		$getItems: function(j, f) {
			var g = this;
			var h = c.newBankRequest();
			if (!g._isIOS() && j) {
				h.setApiMethod("bank/items?product_id=0&os=Android")
			} else {
				if (g._isIOS()) {
					h.setApiMethod("bank/items?os=ios")
				} else {
					h.setApiMethod("bank/items?os=Android")
				}
			}
			h.setHttpMethod("GET");
			h.setHttpHeaders({
				"Content-Type": "application/json; charset=utf-8"
			});
			h.sendRetry(function(p, q, r, k) {
				NgLogD("data = " + JSON.stringify(q));
				var l = new Array();
				if (q && (q.items)) {
					for (var m = 0; m < q.items.length; m++) {
						var n = q.items[m];
						var o = {
							id: n.sku,
							price: n.value,
							description: n.description,
							imageUrl: n.image_url,
							name: n.display_name,
							currency: n.currency,
							origin_price: n.origin_price
						};
						if (j) {
							if (o.origin_price !== "0") {
								l.push(o)
							}
						} else {
							if (o.origin_price === "0") {
								l.push(o)
							}
						}
					}
				}
				if (f && ((typeof f) == "function")) {
					f(p, l)
				}
			})
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DataType"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DataType"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/DataType"] = a;
	a.DataType = {
		Bank: require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank").Bank,
		Basic: require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic").Basic
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/PreparedAction"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/PreparedAction"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Utilities/PreparedAction"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.PreparedAction = b.Class.subclass({
		initialize: function() {},
		prepare: function() {
			if (!this._isPreparing) {
				this._isPreparing = true;
				if (typeof this.onPrepare == "function") {
					this.onPrepare()
				} else {
					this.prepared()
				}
			}
		},
		prepared: function() {
			this._isPreparing = false;
			if (!this._isPrepared) {
				this._isPrepared = true;
				if (this._shouldExecute) {
					this.execute()
				}
			}
		},
		execute: function() {
			if (!this._isExecuting) {
				if (this._isPrepared) {
					this._shouldExecute = false;
					this._isExecuting = true;
					if (typeof this.onExecute == "function") {
						this.onExecute()
					} else {
						this.executed()
					}
				} else {
					this._shouldExecute = true
				}
			}
		},
		executed: function() {
			this._hasExecuted = true;
			this._isExecuting = false;
			if (typeof this.onDidExecute == "function") {
				this.onDidExecute()
			}
		},
		isPreparing: function() {
			return this._isPreparing || false
		},
		isPrepared: function() {
			return this._isPrepared || false
		},
		shouldExecute: function() {
			return this._shouldExecute || false
		},
		isExecuting: function() {
			return this._isExecuting || false
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/BankStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/BankStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/BankStyle"] = b;
	var d = {};
	d.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var a = d.Style.ScaledCorners;
	var c = d.Style.ScaledTextSize;
	d.Style.sheet("social.us.banking", {
		topAreaView: {
			gradient: {
				insets: "{-10.0,0.0,0.0,0.0}",
				outerLine: "FF607F9B 2.0"
			},
			backgroundColor: "0000"
		},
		balanceAreaView: {
			gradient: {
				insets: "{0.0,1.0,0.0,0.0}",
				corners: "0.0 6.0 0.0 0.0",
				gradient: ["FF162230 0.000", "FF132439 1.000"],
				outerLine: "FF607F9B 2.0"
			}
		},
		myBalanceLabel: {
			textColor: "FFFFFFFF",
			textSize: c(11)
		},
		balanceNumLabel: {
			textColor: "FFF8F07F",
			textSize: c(15)
		},
		balanceNameLabel: {
			textColor: "FFF8F07F",
			textSize: c(11)
		},
		customerSupportButton: {
			gradient: {
				corners: a(4),
				gradient: ["FF0B4B93 0.0", "FF093A72 1.0"],
				outerLine: "FF081426 2.0"
			},
			textColor: "FFD6EBFF",
			textSize: c(12)
		},
		customerSupportButtonPressed: {
			corners: a(4),
			gradient: ["FF062C57 0.000", "FF093C76 1.000"],
			outerLine: "FF081426 2.0"
		},
		coinBackgroundView: {
			gradient: {
				insets: "{0.0,0.0,0.0,0.0}",
				corners: "0.0 0.0 0.0 0.0",
				gradient: ["FF183350 0.000", "FF5387AC 1.000"]
			}
		},
		coinPackView: {
			gradient: {
				innerShadow: "FFFFFFFF 0.0 {0.0,-4.0}",
				insets: "{1.0,1.0,1.0,1.0}",
				corners: "4.0 4.0 4.0 4.0",
				gradient: ["FFD8DFE6 0.000", "FFF1F4F7 1.000"],
				outerLine: "FF0B223A 1.0"
			}
		},
		coinPackHeaderLabel: {
			textColor: "FF000000",
			textSize: c(12)
		},
		coinPackHeaderMidLabel: {
			textColor: "FF1C4064",
			textSize: c(14)
		},
		coinPackAmountLabel: {
			textColor: "FF6A5100",
			textSize: c(28),
			textFont: d.Style.defaultBoldFontFace
		},
		coinPackPriceButton: {
			normalGradient: {
				innerShadow: "FFE7C633 0.0 {0.0,-2.0}",
				insets: "{1.0,1.0,1.0,1.0}",
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FFE3C130 0.000", "FFBE8606 1.000"],
				outerLine: "FF6A5100 2.0"
			},
			highlightedGradient: {
				innerShadow: "FFE7C633 0.0 {0.0,-2.0}",
				insets: "{1.0,1.0,1.0,1.0}",
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FFBE8606 0.000", "FFE3C130 1.000"],
				outerLine: "FF6A5100 2.0"
			},
			textColor: "FFFFFFFF",
			textSize: c(18),
			textShadow: "FFA0780E 1.5 {0,-1}"
		},
		bottomAreaLabel: {
			textColor: "FF98D8F2",
			textShadow: "24000000 2 {0,-1}"
		},
		bottomAreaLabelAttributes: [{
			textColor: "FF98D8F2",
			textSize: c(12),
			textShadow: "24000000 2 {0,-1}"
		}, {
			textColor: "FF98D8F2",
			textSize: c(12),
			textShadow: "24000000 2 {0,-1}"
		}, {
			textColor: "FF98D8F2",
			textSize: c(12),
			textShadow: "24000000 2 {0,-1}"
		}, {
			textColor: "FFFFFFFF",
			textSize: c(12),
			textShadow: "24000000 2 {0,-1}"
		}, {
			textColor: "FF98D8F2",
			textSize: c(12),
			textShadow: "24000000 2 {0,-1}"
		}, {
			textColor: "FF98D8F2",
			textSize: c(12),
			textShadow: "24000000 2 {0,-1}"
		}, {
			textColor: "FFFFFFFF",
			textSize: c(12),
			textShadow: "24000000 2 {0,-1}"
		}, {
			textColor: "FF98D8F2",
			textSize: c(12),
			textShadow: "24000000 2 {0,-1}"
		}],
		topAreaXRatio: 0.01,
		topAreaYRatio: 80 / 480,
		topAreaWidthRatio: 1.02,
		topAreaHeightRatio: 7 / 48,
		coinPacksViewMarginRatio: 0.08,
		coinPacksViewHeightRatio: 0.53,
		coinPackOffsetYRatio: 0.35,
		arrowWidthRatio: 0.4,
		arrowHeightRatio: 0.5,
		arrowSideMarginRatio: 0.4,
		coinPackMarginBigRatio: 0.8,
		coinPackMarginSmallRatio: 0.005,
		bottomAreaHeightRatio: 0.13,
		balanceAreaXRatio: 0,
		balanceAreaYRatio: 0.1,
		balanceAreaWidthRatio: 0.45,
		balanceAreaHeightRatio: 0.9,
		balanceCoinXRatio: 0.02,
		balanceCoinYRatio: 0.04,
		balanceCoinWidthRatio: 0.88,
		balanceCoinHeightRatio: 0.85,
		myBalanceXRatio: 0.12,
		myBalanceWidthRatio: 0.4,
		myBalanceHeightRatio: 0.45,
		balanceNumXRatio: 0.12,
		balanceNumYRatio: 0.25,
		balanceNumWidthRatio: 0.4,
		balanceNumHeightRatio: 0.7,
		balanceNameXRatio: 0.32,
		balanceNameYRatio: 0.29,
		balanceNameWidthRatio: 0.4,
		balanceNameHeightRatio: 0.7,
		supportButtonXRatio: 0.78,
		supportButtonYRatio: 0.4,
		supportButtonWidthRatio: 0.21,
		supportButtonHeightRatio: 0.5,
		coinPackHeader1YRatio: 0.03,
		coinPackHeader1HeightRatio: 0.15,
		coinPackHeader2YRatio: 0.125,
		coinPackHeader2HeightRatio: 0.15,
		coinPackHeader3YRatio: 0.22,
		coinPackHeader3HeightRatio: 0.15,
		coinPackCoinYRatio: 0.45,
		coinPackCoinWidthRatio: 0.23,
		coinPackCoinHeightRatio: 0.23,
		coinPackCoinMarginRatio: 0.03,
		coinPackAmountYRatio: 0.45,
		coinPackAmountWidthRatio: 1,
		coinPackAmountHeightRatio: 0.23,
		coinPackAmountDigitWidthRatio: 0.115,
		coinPackPriceButtonYRatio: 0.75,
		coinPackPriceButtonWidthRatio: 0.88,
		coinPackPriceButtonHeightRatio: 0.21
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank"] = a;
	a.Bank = {
		Item: require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Item").Item,
		BillingItem: require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/BillingItem").BillingItem,
		Transaction: require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Transaction").Transaction,
		InAppItem: require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/InAppItem").InAppItem
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic"] = a;
	a.Basic = {
		Integer: require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic/Integer").Integer
	};
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Item"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Item"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Item"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.Item = b.Class.subclass({
		classname: "DataTypeBankItem",
		initialize: function(c) {
			this._def = {
				id: "string",
				price: "integer",
				description: "string",
				imageUrl: "url",
				name: "name"
			};
			this._data = c
		},
		isValid: function() {
			var c = this._data;
			if (!this._data) {
				this._err = "Item must be an object ";
				return false
			}
			var d = c.id;
			if (!d) {
				this._err = 'the "id" field is invalid id. id is required filed ';
				NgLogD("Item is invalid");
				return false
			}
			if (typeof(d) !== "string") {
				this._err = 'The "id" field is invalid. id should be string';
				NgLogD("Item is invalid");
				return false
			}
			return true
		},
		getItemId: function() {
			NgLogD("item:" + this._data.id);
			return this._data.id
		},
		getErr: function() {
			return this._err
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/BillingItem"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/BillingItem"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/BillingItem"] = a;
	var c = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Item").Item;
	a.BillingItem = c.Class.subclass({
		initialize: function(d) {
			this._data = d
		},
		isValid: function() {
			var e = this._data;
			if (!this._data) {
				this._err = " BillingItem must be an object) ";
				return false
			}
			var d = new b(e.item);
			if (!(d && d.isValid())) {
				this._err = 'The Field "item" is invalid ( ' + d.getErr() + ")";
				return false
			}
			var f = this._data.quantity;
			if (f !== null && f < 0) {
				this._err = 'The field "quantity" is invalid. quantity should be an integer';
				return false
			}
			return true
		},
		getItemId: function() {
			if (!this.isValid()) {
				return null
			}
			var d = new b(this._data.item);
			var e = d.getItemId();
			return e
		},
		getQuantity: function() {
			return this._data.quantity
		},
		getErr: function() {
			return this._err
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Transaction"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Transaction"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/Transaction"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.Transaction = b.MessageListener.subclass({
		classname: "DataTypeBankTransaction",
		initialize: function(c) {
			this._def = {
				id: "string",
				price: "integer",
				descript: "string",
				imageUrl: "url",
				name: "name"
			};
			this._data = c;
			this._definedState = {
				authorized: true,
				open: true,
				closed: true
			}
		},
		isValid: function() {
			if (!this._data) {
				return false
			}
			var d = this._data.id;
			if (!(d && typeof(d) === "string")) {
				return false
			}
			var c = this._state;
			if (!(c && typeof(c) === "string" && this._definedState[c])) {
				return false
			}
			return true
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/InAppItem"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/InAppItem"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Bank/InAppItem"] = b;
	var c = require("NGCore/Client/Core").Core;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic/Integer").Integer;
	b.InAppItem = c.Class.subclass({
		classname: "DataTypeBankInAppItem",
		initialize: function(d) {
			this._def = {
				productId: "string",
				quantity: "integer"
			};
			this._data = d
		},
		isValid: function() {
			var e = this._data;
			if (!this._data) {
				this._err = "Item must be an object ";
				return false
			}
			var d = e.productId;
			if (!d) {
				this._err = 'the "productId" field is invalid . productId is required field ';
				return false
			}
			if (typeof(d) !== "string") {
				this._err = 'The "productId" field is invalid. productId should be string';
				return false
			}
			var f = new a(this._data.quantity);
			if (!f || !f.isValid()) {
				this._err = "The Filed Quantity is invalid ( " + f.getErr() + " ) ";
				return false
			}
			return true
		},
		getItemId: function() {
			NgLogD("item:" + this._data.id);
			return this._data.id
		},
		getErr: function() {
			return this._err
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic/Integer"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic/Integer"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/DataAPIs/Basic/Integer"] = a;
	var b = require("NGCore/Client/Core").Core;
	a.Integer = b.Class.subclass({
		classname: "DataTypeBasicInteger",
		initialize: function(c) {
			this._data = c
		},
		isValid: function() {
			var d = this._data;
			var c = this._data;
			if (c === null || c === undefined) {
				this._err = "Value is not defined";
				return false
			}
			if (typeof(c) !== "number" || parseInt(c, 10) !== c || c < 0) {
				this._err = "Value is not an integer";
				return false
			}
			return true
		},
		getErr: function() {
			return this._err
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CornerButton"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CornerButton"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/CornerButton"] = a;
	var e = require("NGCore/Client/UI").UI;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var c = a.CornerButton = d.Button.subclass({
		classname: "CornerButton",
		initialize: function($super) {
			$super({
				image: b.image("home-screen-caret.png")
			})
		},
		setButton: function(f, g) {
			this.setText(f);
			this.setOnClick(g)
		},
		sizeChanged: function() {
			var f = this._frame[3] / 3;
			this.setImageInsets([f, f / 4, f, 5 * this._frame[2] / 6]);
			this.setTextInsets([0, this._frame[2] / 6, 0, 0])
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Home"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Home"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Home"] = b;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = d.ScaledCorners;
	var e = d.ScaledTextSize;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	d.lazyLoad(b, "Home", function() {
		return {
			children: {
				_noGameText: {
					style: {
						textGravity: [0.5, 0.9],
						textSize: e(13),
						textColor: "FFFFFFFF",
						textShadow: "C000 1 {0,-2}",
						textFont: d.defaultRegularFontFace
					}
				},
				_leftPaneBackground: {
					style: {
						gradient: {
							gradient: ["99FFFFFF 0.0", "9966C2FF 1.0"],
							corners: "4"
						}
					}
				},
				_userNamePicView: {
					children: {
						userIconSmall: {
							style: {
								imageBorder: {
									corners: "4",
									outerLine: "FF000000 2.0"
								}
							}
						},
						userNameButton: {
							style: {
								textColor: "FFFFFFFF",
								textGravity: [0.2, 0.5],
								textSize: e(17),
								textFont: d.defaultBoldFontFace,
								gradient: {
									gradient: ["FF0D1E36 0.0", "FF072748 1.0"],
									corners: "4"
								},
								pressedGradient: {
									gradient: ["FF0B519F 0.0"],
									corners: "4"
								}
							}
						},
						userBadgeText: {
							style: {
								textColor: "FFFFFFFF",
								textSize: e(12),
								textGravity: [0.5, 0.5],
								textFont: d.defaultBoldFontFace
							}
						}
					}
				},
				_lastGameIcon: {
					children: {
						iconCaption: {
							style: {
								textColor: "FFFFFFFF",
								textGravity: [0.5, 0.5],
								textSize: e(12),
								textFont: d.defaultRegularFontFace
							}
						},
						iconImage: {
							style: {
								gradient: {
									gradient: ["FF0D1E36 0.0", "FF072748 1.0"],
									corners: "4"
								},
								pressedGradient: {
									gradient: ["FF0B519F 0.0"],
									corners: "4"
								}
							}
						}
					},
					extras: {
						captionHeightPct: 1 / 4,
						iconSizePct: 0.9
					}
				},
				_gamesButtonView: b.PageButton,
				_friendsButtonView: b.PageButton,
				_bankButtonView: b.PageButton,
				_gameCarousel: b.ScrollView,
				_alsoPlayingUsersList: b.ScrollView
			},
			extras: {
				contentInsetPctWidth: 12 / 800,
				headerHeight: 1 / 6,
				userNameHeightRatio: 1 / 3.5,
				leftPaneWidth: 1 / 3.4,
				leftRightPaneMargin: 1 / 64,
				rightPaneSectionMargin: 1 / 128
			}
		}
	});
	d.lazyLoad(b, "PageButton", function() {
		return {
			style: {
				textColor: "FFFFFFFF",
				gradient: {
					corners: a(4),
					gradient: ["FF0B4B93 0.0", "FF093A72 1.0"],
					outerLine: "FF081426 2.0"
				},
				pressedGradient: {
					corners: a(4),
					gradient: ["FF062C57 0.0", "FF093C76 1.0"],
					outerLine: "FF081426 2.0"
				},
				disabledGradient: {
					corners: a(4),
					gradient: ["FFA0A0A0 0.000", "FF7C7C7C 1.000"],
					outerLine: "FF081426 2.0"
				},
				pressedTextColor: "FFFFFFFF",
				disabledTextColor: "FFD1CDCD"
			},
			children: {
				buttonTextMajor: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FFFFFFFF",
						textSize: e(12),
						textGravity: [0, 0.5]
					}
				},
				buttonTextCount: {
					style: {
						textColor: "FF9fa6b9",
						textSize: e(12),
						textFont: d.defaultRegularFontFace,
						textGravity: [0.9, 0.5]
					}
				},
				buttonTextBadge: {
					style: {
						textColor: "FFFFFFFF",
						textSize: e(12),
						textGravity: [0.5, 0.5],
						textFont: d.defaultBoldFontFace
					}
				}
			},
			extras: {
				buttonIconWidthPct: 1 / 4,
				buttonBadgeWidthPct: 1 / 6
			}
		}
	});
	d.lazyLoad(b, "ScrollView", function() {
		return {
			style: {
				gradient: {
					gradient: ["00000000 0.0", "00000000 1.0"],
					corners: "0",
					outerLine: "00000000 0.0",
					innerLine: "00000000 0.0"
				}
			},
			children: {
				innerBackground: {
					style: {
						gradient: {
							gradient: ["00000000 0.0", "00000000 1.0"],
							corners: "0"
						}
					}
				},
				innerBkgTop: {
					style: {
						gradient: {
							gradient: ["00000000 0.0", "00000000 1.0"],
							corners: "0"
						}
					}
				},
				cornerButton: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FFFFFFFF",
						pressedTextColor: "FFFFFFFF",
						disabledTextColor: "FFD1CDCD",
						gradient: {
							corners: "0",
							gradient: ["AA000000 0.0", "AA000000 1.0"]
						},
						pressedGradient: {
							corners: "0",
							gradient: ["CC000000 0.0", "CC000000 1.0"]
						},
						disabledGradient: {
							corners: "0",
							gradient: ["88000000 0.0", "88000000 1.0"]
						}
					}
				},
				titleText: {
					style: {
						textFont: d.defaultBoldFontFace,
						textColor: "FFFFFFFF",
						textGravity: [0, 0.5],
						textSize: e(14)
					}
				}
			},
			extras: {
				headerHeightRatio: 1 / 7.55555,
				cornerButtonWidthRatio: 1 / 2.815,
				listContentInset: [-0.24, 0, 0, 0]
			}
		}
	});
	d.lazyLoad(b, "FeaturedUser", function() {
		return {
			style: {
				image: c.image("no-user-icon.png"),
				pressedImageBorder: {
					gradient: ["66000000 0.0", "66000000 1.0"]
				}
			}
		}
	});
	d.lazyLoad(b, "GameCarouselImage", function() {
		return {
			style: {
				image: c.image("no-game-promo-image.png"),
				imageFit: 2
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserProfileController"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserProfileController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserProfileController"] = f;
	var j = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var c = e.ViewGeometry.Rect;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		Wall: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall").Wall
		},
		Blacklist: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/Blacklist").Blacklist
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		Settings: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Settings").Settings
		},
		ModalDialog: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ModalDialog").ReportUserModalDialog
		},
		MobageAnalytics: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics
		},
		ConversationViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ConversationViewController").ConversationViewController
		},
		FriendsList: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/FriendsList").FriendsList
		},
		RecentlyPlayedGamesList: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/RecentlyPlayedGamesList").RecentlyPlayedGamesList
		},
		PendingListSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection
		},
		WallPostArea: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection").WallPostArea
		},
		ConversationListItem: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection").ConversationListItem
		},
		MBListViewSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection
		},
		UserInfoView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserInfoView").UserInfoView
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		MorePostListItem: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection").MorePostListItem
		},
		UserProfileStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserProfileStyle")
		},
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		}
	});
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var b = e.ListViewItem.subclass({
		classname: "UserProfileController_AreaItem",
		_reuseId: null,
		_areaView: null,
		initialize: function($super, l, m) {
			$super();
			this._areaView = l;
			this._reuseId = m
		},
		_onCreateView: function() {
			return this._areaView
		}
	});
	var h = f.UserProfileController = g.subclass({
		classname: "UserProfileController",
		analyticsName: "UserProfile",
		_styleSheet: null,
		_commonSheet: null,
		_curUser: null,
		_profileAreaHeight: 0,
		_gamesArea: null,
		_friendsArea: null,
		_buttonAreaHeight: 0,
		_gamesHeightUpdated: false,
		_friendsHeightUpdated: false,
		_wallMsgUpdated: false,
		_userFriendsCount: 0,
		_userGamesCount: 0,
		_hasMorePost: false,
		_maxMsgCount: 0,
		_enableWall: true,
		initialize: function($super, l, m, n) {
			$super();
			this._viewAllCallback = m;
			this._viewGamesTabCallback = n;
			a.UserProfileStyle;
			this._styleSheet = a.OldStyle.registeredStyle("social.us.userprofile").props();
			this._commonSheet = a.OldStyle.registeredStyle("social.us.commonelements").props();
			this._totalWidth = j.Capabilities.getScreenHeight();
			this._totalHeight = j.Capabilities.getScreenWidth();
			this._contentWidth = this._getContentWidth();
			this._curUser = l;
			this._conversationViewController = new a.ConversationViewController();
			this._enableWall = !l.ageRestricted;
			this._maxMsgCount = a.Wall.MAX_MSG_COUNT;
			this._pendingListSection = (new a.PendingListSection()).retain();
			this._pendingListSection.setPendingText(k("Loading %1s's profile...", this._curUser.gamertag))
		},
		getDynamicTabTitle: function() {
			return (this._curUser.gamertag.length > 7) ? k("%1s's Profile", this._curUser.gamertag.substring(0, 7) + "...") : k("%1s's Profile", this._curUser.gamertag)
		},
		_setupContent: function() {
			if (!this._viewsSetup) {
				this._profileAreaHeight = this._totalHeight * this._styleSheet.profileAreaHFactor;
				this.profileSection = (new a.MBListViewSection()).retain();
				this.buttonSection = (new a.MBListViewSection()).retain();
				this.gamesListSection = (new a.MBListViewSection()).retain();
				this.friendsListSection = (new a.MBListViewSection()).retain();
				this.wallPostSection = (new a.MBListViewSection()).retain();
				this.wallMsgSection = (new a.MBListViewSection()).retain();
				this.wallMsgSection.setRowHeightRatio(1 / 4);
				this.morePostSection = this.retainView(new a.MBListViewSection());
				this.morePostSection.setRowHeightRatio(1 / 8);
				this.morePostSection.setItems(new a.MorePostListItem(this.bind(function() {
					this._refreshData(a.Wall.MAX_MSG_COUNT)
				})));
				this._wallPostArea = new a.WallPostArea(this._curUser, (function(s) {
					if ((typeof s) === "undefined") {
						this._refreshData()
					}
				}.bind(this)));
				var o = a.Session.getCurrentSession().user();
				a.Blacklist.isBlockedUser(this._curUser.recordID, o.recordID, function(s, t) {
					NgLogD("Mobage/UserProfileController isBlockedUser = " + t);
					if (t) {
						this._enableWall = false;
						this._setSectionsOnView()
					} else {
						this._refreshData()
					}
				}.bind(this));
				this._createGamesArea();
				this._createFriendsArea();
				this._profileArea = this._createUserProfileArea();
				this._buttonArea = this._createButtonArea();
				var l = new b(this._profileArea, "userprofile_profile_area");
				var n = new e.ViewGeometry.Rect(this._profileArea.getFrame());
				this.profileSection.setRowHeight(n.h);
				this.profileSection.setItems([l]);
				var r = new b(this._wallPostArea, "userprofile_wall_post_area");
				n = new e.ViewGeometry.Rect(this._wallPostArea.getFrame());
				this.wallPostSection.setRowHeight(n.h);
				this.wallPostSection.setItems([r]);
				var q = new b(this._gamesArea, "userprofile_gamesarea");
				this.gamesListSection.setRowHeight(50);
				n = new e.ViewGeometry.Rect(this._gamesArea.getFrame());
				this.gamesListSection.setItems([q]);
				var p = new b(this._friendsArea, "userprofile_friendsarea");
				this.friendsListSection.setRowHeight(50);
				this.friendsListSection.setItems([p]);
				var m = new b(this._buttonArea, "userprofile_buttonarea");
				n = new e.ViewGeometry.Rect(this._buttonArea.getFrame());
				this.buttonSection.setItems([m]);
				if (this._friendsArea) {
					this._friendsArea.getFriendsList()
				}
				this._viewsSetup = true
			}
			this._setSectionsOnView()
		},
		loadView: function($super) {
			if (typeof $super == "function") {
				$super()
			}
			this.view()._headerHeightRatio = 0
		},
		destroy: function() {
			if (this.profileSection) {
				this.profileSection.release()
			}
			if (this.gamesListSection) {
				this.gamesListSection.release()
			}
			if (this.friendsListSection) {
				this.friendsListSection.release()
			}
			if (this.wallPostSection) {
				this.wallPostSection.release()
			}
			if (this.buttonSection) {
				this.buttonSection.release()
			}
			if (this.wallMsgSection) {
				this.wallMsgSection.release()
			}
			if (this._pendingListSection) {
				this._pendingListSection.release()
			}
			if (this._wallPending) {
				this._wallPending.release()
			}
			if (this._gamesPending) {
				this._gamesPending.release()
			}
			if (this._friendsPending) {
				this._friendsPending.release()
			}
			if (this._errorSection) {
				this._errorSection.release()
			}
			if (this._gamesArea) {
				this._gamesArea.destroy()
			}
			if (this._friendsArea) {
				this._friendsArea.destroy()
			}
			if (this._conversationViewController) {
				this._conversationViewController.destroy()
			}
		},
		willActivateTab: function($super, l) {
			if (typeof $super == "function") {
				$super(l)
			}
		},
		didActivateTab: function($super) {
			if (typeof $super == "function") {
				$super()
			}
			this.parentController.navController._host.hideLoadingLabel();
			this.view().setSections([this._pendingListSection]);
			setTimeout(this.bind(function() {
				this._setupContent(null);
				this._getRecentlyPlayedGame();
				this._checkRelationship()
			}), 50)
		},
		willDeactivateTab: function($super, l) {
			if (this._showingConversationWall) {
				this._conversationViewController.backToProfile();
				this._showingConversationWall = false
			}
			$super(l)
		},
		_isLoginUser: function() {
			return (this._curUser.gamertag === a.Session.getCurrentSession().user().gamertag)
		},
		_checkRelationship: function() {
			if (this._isLoginUser()) {
				return
			}
			if (!this._curUser.localRelation) {
				this._curUser.localRelation = "stranger"
			}
			var m = false;
			var o = false;
			var l = a.Session.getCurrentSession().user();
			var n = false;
			l.getMutualFriendsList().forAll(this.zombieSafeCallback(function(q, p) {
				if (this._curUser === p) {
					this._curUser.localRelation = "friend";
					q(false);
					return
				}
				q(true)
			}), this.zombieSafeCallback(function(p) {
				if (this._curUser.isMutualFriend) {
					this._updateAddButton();
					return
				}
				l.getInvitesList().forAll(this.zombieSafeCallback(function(r, s, q) {
					if (s === this._curUser) {
						if (s.isMutualFriend) {
							this._curUser.localRelation = "friend"
						} else {
							this._curUser.localRelation = "follower"
						}
						r(false);
						return
					}
					r(true)
				}), this.zombieSafeCallback(function(q) {
					m = true;
					if (o) {
						this._updateAddButton()
					}
				}));
				l.getFollowersList().forAll(this.zombieSafeCallback(function(r, s, q) {
					if (s.recordID === this._curUser.recordID) {
						if (s.isMutualFriend) {
							this._curUser.localRelation = "friend"
						} else {
							this._curUser.localRelation = "requested"
						}
						r(false);
						return
					}
					r(true)
				}), this.zombieSafeCallback(function(q) {
					o = true;
					if (m) {
						this._updateAddButton()
					}
				}))
			}))
		},
		_createUserProfileArea: function() {
			var m = this.retainView(new a.UserInfoView(this._curUser, this._isLoginUser()));
			m.setFrame([0, 0, this._contentWidth, this._profileAreaHeight]);
			if (!this._isLoginUser()) {
				this._buttonAddUser = this.retainView(new a.UnspammableButton());
				this._buttonAddUser.setAttributes(this._styleSheet.buttonAddUser);
				this._buttonAddUser.setText(k("Add As Friend"));
				this._buttonAddUser.setGradient(this._styleSheet.buttonAddUser.disabled.gradient, e.State.Disabled);
				this._buttonAddUser.setTextColor(this._styleSheet.buttonAddUser.disabled.textColor, e.State.Disabled);
				this._buttonAddUser.setFrame([m.myProfileAreaX(this._styleSheet.buttonAddUserX), this._styleSheet.buttonAddUserYFactor * this._profileAreaHeight, this._styleSheet.buttonAddUserWFactor * this._contentWidth, this._styleSheet.buttonAddUserHFactor * this._profileAreaHeight]);
				var l = function() {
					if (this._curUser.localRelation === "friend") {
						NgLogD("UserProfile 'Add' button tapped on someone already your friend");
						return
					}
					var n = this;
					a.Session.getCurrentSession().user().addBuddy(n._curUser, function(o, p) {
						NgLogD("Add Buddy Callback");
						if (o) {
							n._showErrorToast(o)
						} else {
							n._curUser.invited = true;
							n._checkRelationship()
						}
					});
					this._updateAddButton()
				}.bind(this);
				this._buttonAddUser.onclick = l;
				m.addChild(this._buttonAddUser);
				this._buttonAddUser.setEnabled(false);
				this._buttonAddUser.setVisible(false);
				if (this._friendsArea) {
					this._friendsArea.setZeroCaseButtonCallback(l)
				}
			}
			return m
		},
		_showErrorToast: function(m) {
			var l = (new e.Toast({
				text: m
			})).retain();
			l.ondisappear = function() {
				l.release();
				l = null
			};
			l.show()
		},
		_updateAddButton: function() {
			if (this._isLoginUser()) {
				return
			}
			var l = null;
			if (this._friendsArea) {
				l = this._friendsArea.getAddFriendButton()
			}
			if (!this._curUser.localRelation) {
				this._curUser.localRelation = "stranger"
			}
			if (a.Session.getCurrentSession().user().isInviting(this._curUser)) {
				if (this._curUser.localRelation === "follower") {
					this._buttonAddUser.setText(k("Accepting..."));
					this._buttonAddUser.setEnabled(false);
					this._buttonAddUser.setVisible(true);
					if (l) {
						l.setText(k("Accepting..."));
						l.setEnabled(false)
					}
				} else {
					this._buttonAddUser.setText(k("Sending Request..."));
					this._buttonAddUser.setEnabled(false);
					this._buttonAddUser.setVisible(true);
					if (l) {
						l.setText(k("Sending Request..."));
						l.setEnabled(false)
					}
				}
				if (this._buttonUnfriendUser) {
					this._buttonUnfriendUser.setVisible(false);
					this._buttonUnfriendUser.removeFromParent()
				}
			} else {
				if (this._curUser.localRelation === "requested") {
					this._buttonAddUser.setText(k("Request Sent"));
					this._buttonAddUser.setEnabled(false);
					this._buttonAddUser.setVisible(true);
					if (l) {
						l.setText(k("Request Sent"));
						l.setEnabled(false)
					}
					if (this._buttonUnfriendUser) {
						this._buttonUnfriendUser.setVisible(false);
						this._buttonUnfriendUser.removeFromParent()
					}
				} else {
					if (this._curUser.isMutualFriend || this._curUser.localRelation === "friend") {
						this._buttonAddUser.setText(k("Friend!"));
						this._buttonAddUser.setEnabled(false);
						this._buttonAddUser.setVisible(false);
						if (this._buttonUnfriendUser) {
							this._buttonUnfriendUser.setVisible(true);
							this._buttonArea.addChild(this._buttonUnfriendUser)
						}
					} else {
						if (this._curUser.localRelation === "follower") {
							this._buttonAddUser.setText(k("Accept Request"));
							this._buttonAddUser.setEnabled(true);
							this._buttonAddUser.setVisible(true);
							if (l) {
								l.setText(k("Accept friend"));
								l.setEnabled(false);
								l.setVisible(false)
							}
							if (this._buttonUnfriendUser) {
								this._buttonUnfriendUser.setVisible(false);
								this._buttonUnfriendUser.removeFromParent()
							}
						} else {
							if (this._curUser.localRelation === "stranger" && !a.Session.getCurrentSession().user().isInviting(this._curUser)) {
								this._buttonAddUser.setText(k("Add As Friend"));
								this._buttonAddUser.setEnabled(true);
								this._buttonAddUser.setVisible(true);
								if (l) {
									l.setText(k("Add as Friend"));
									l.setEnabled(true);
									l.setVisible(true)
								}
								if (this._buttonUnfriendUser) {
									this._buttonUnfriendUser.setVisible(false);
									this._buttonArea.addChild(this._buttonUnfriendUser)
								}
							} else {
								var m = "Don't know how we got here..." + this._curUser.gamertag + " " + this._curUser.localRelation;
								NgLogE(m)
							}
						}
					}
				}
			}
		},
		_createGamesArea: function() {
			this._gamesArea = new a.RecentlyPlayedGamesList(this._curUser, false, this._updateGamesAreaHeight.bind(this), this._viewGamesTabCallback);
			this._gamesArea.setFrame([0, 0, this._contentWidth, this._gamesArea.getInitialHeight()]);
			return this._gamesArea
		},
		_createFriendsArea: function() {
			this._friendsArea = new a.FriendsList(this._curUser, this.zombieSafeCallback(this._updateFriendsAreaHeight), this.zombieSafeCallback(this._viewAllCallback), function(l) {
				a.ServiceHost.showLoadingHelper(function() {
					var m = d.UserProfilePage.initWithJSON({
						user: l
					});
					NgLogD("mobage/UserProfile: to view user " + l.gamertag);
					a.ServiceHost.navController.pushViewController(m)
				})
			});
			this._friendsArea.setFrame([0, 0, this._contentWidth, this._friendsArea.getInitialHeight()]);
			return this._friendsArea
		},
		_createButtonArea: function() {
			this._buttonAreaHeight = this._totalHeight * this._styleSheet.buttonAreaHFactor;
			var m = this.retainView(new e.View());
			m.setFrame([0, 0, this._contentWidth, this._buttonAreaHeight]);
			m.setAttributes(this._styleSheet.buttonArea);
			this._buttonUnfriendUser = this.retainView(new a.UnspammableButton());
			this._buttonUnfriendUser.setAttributes(this._commonSheet.standardButton);
			this._buttonUnfriendUser.setText(k("Unfriend User"));
			this._buttonUnfriendUser.setFrame([this._styleSheet.buttonUnfriendUserXFactor * this._contentWidth, this._styleSheet.buttonUnfriendUserYFactor * this._buttonAreaHeight, this._styleSheet.buttonUnfriendUserWFactor * this._contentWidth, this._styleSheet.buttonUnfriendUserHFactor * this._buttonAreaHeight]);
			this._buttonUnfriendUser.onclick = function() {
				var p = this;
				var q = (new e.AlertDialog()).retain();
				q.setTitle(k("Unfriend %1s?", p._curUser.gamertag));
				q.setText(k("Are you sure you want to unfriend this user?"));
				q.setChoices([k("Yes"), k("No")]);
				q.onchoice = function(r) {
					if (r.choice === 0) {
						a.Session.getCurrentSession().user().deleteBuddy(p._curUser, function(t, u) {
							p._curUser.unfriending = false;
							if (t) {
								p._showErrorToast(t)
							} else {
								p._curUser.invited = false;
								p._curUser.localRelation = "stranger";
								p._curUser.isMutualFriend = false;
								p._checkRelationship();
								var s = (new e.AlertDialog()).retain();
								s.setTitle(k("The user %1s was Unfriended", p._curUser.gamertag));
								s.setChoices([k("OK")]);
								s.show();
								s.onchoice = function() {
									s.release();
									s = null
								}
							}
							p._updateAddButton()
						})
					}
				};
				q.show()
			}.bind(this);
			m.addChild(this._buttonUnfriendUser);
			var l = this.retainView(new a.UnspammableButton());
			l.setAttributes(this._commonSheet.standardButton);
			l.setText(k("Report User"));
			l.setFrame([this._styleSheet.buttonReportUserXFactor * this._contentWidth, this._styleSheet.buttonReportUserYFactor * this._buttonAreaHeight, this._styleSheet.buttonReportUserWFactor * this._contentWidth, this._styleSheet.buttonReportUserHFactor * this._buttonAreaHeight]);
			var o = this;
			l.onclick = function() {
				this._modalDialogObj = new a.ModalDialog(o._curUser)
			};
			m.addChild(l);
			var n = this.retainView(new a.UnspammableButton());
			n.setAttributes(this._commonSheet.standardButton);
			n.setText(k("Block User"));
			n.setFrame([this._styleSheet.buttonBlockUserXFactor * this._contentWidth, this._styleSheet.buttonBlockUserYFactor * this._buttonAreaHeight, this._styleSheet.buttonBlockUserWFactor * this._contentWidth, this._styleSheet.buttonBlockUserHFactor * this._buttonAreaHeight]);
			n.onclick = function() {
				var p = (new e.AlertDialog()).retain();
				p.setTitle(k("Block %1s?", o._curUser.gamertag));
				p.setText(k("Are you sure you want to block this user?"));
				p.setChoices([k("Yes"), k("No")]);
				p.onchoice = function(q) {
					if (q.choice === 0) {
						o._curUser.setBlocked(true, function(s, u) {
							if (s) {
								NgLogD("Error: UserProfileController.js:buttonBlockUser: " + u.error + ", " + s);
								var t = (new e.AlertDialog()).retain();
								t.setTitle(k("Error"));
								t.setText(s);
								t.setChoices([k("OK")]);
								t.show();
								t.onchoice = function() {
									t.release();
									t = null
								}
							} else {
								var r = (new e.AlertDialog()).retain();
								r.setTitle(k("The user %1s has been blocked, and can be unblocked from imports.Settings", o._curUser.gamertag));
								r.setChoices([k("OK")]);
								r.show();
								r.onchoice = function() {
									r.release();
									r = null
								}
							}
						})
					}
					p.release();
					p = null
				};
				p.show()
			};
			m.addChild(n);
			return m
		},
		_getRecentlyPlayedGame: function() {
			var l = this;
			this._curUser.getOwnedGamesList().forItem(0, function(o, m, n) {
				NgLogD("_getRecentlyPlayedGame: " + m);
				l._updateRecentlyPlayed(m);
				o(false)
			}, function(m) {})
		},
		_updateRecentlyPlayed: function(l) {
			if (this._profileArea && l) {
				NgLogD("game.iconURL: " + l.iconURL);
				NgLogD("game.name: " + l.name);
				this._profileArea._updateRecentlyPlayed(l)
			}
		},
		_renderDialogView: function() {
			throw new Error("_renderDialogView shouldn't be called anymore...")
		},
		_setSectionsOnView: function(l) {
			if (l) {
				this.lastError = l
			}
			if (this.lastError) {
				if (!this._errorSection) {
					this._errorSection = (new a.PendingListSection()).retain()
				}
				this._errorSection.showError(this.lastError);
				this.view().setSections([this._errorSection]);
				return
			}
			var m = new Array();
			m.push(this.profileSection);
			if (this._enableWall) {
				if (!this._wallMsgUpdated) {
					if (!this._wallPending) {
						this._wallPending = (new a.PendingListSection()).retain();
						this._wallPending.setPendingText(k("Loading user wall..."))
					}
					m.push(this._wallPending)
				} else {
					m.push(this.wallPostSection);
					if (this._wallMsgCount > 0) {
						m.push(this.wallMsgSection);
						if (this._hasMorePost) {
							m.push(this.morePostSection)
						}
					}
				}
			}
			if (!this._gamesHeightUpdated) {
				if (!this._gamesPending) {
					this._gamesPending = (new a.PendingListSection()).retain();
					this._gamesPending.setPendingText(k("Loading games list..."))
				}
				m.push(this._gamesPending)
			} else {
				if (this._userGamesCount > 0) {
					m.push(this.gamesListSection)
				}
			}
			if (!this._friendsHeightUpdated) {
				if (!this._friendsPending) {
					this._friendsPending = (new a.PendingListSection()).retain();
					this._friendsPending.setPendingText(k("Loading friends..."))
				}
				m.push(this._friendsPending)
			} else {
				m.push(this.friendsListSection)
			}
			m.push(this.buttonSection);
			this.view().setSections(m)
		},
		_updateGamesAreaHeight: function(l, m, n) {
			this.gamesListSection.setRowHeight(m);
			this._userGamesCount = l;
			this._gamesHeightUpdated = true;
			this._setSectionsOnView(n)
		},
		_updateFriendsAreaHeight: function(l, m, n) {
			this.friendsListSection.setRowHeight(m);
			this._userFriendsCount = l;
			this._friendsHeightUpdated = true;
			this._setSectionsOnView(n)
		},
		_getContentWidth: function() {
			return (1 - a.VerticalTabViewSizing.buttonContainerRatio - a.VerticalTabViewSizing.insetRatio) * this._totalWidth
		},
		_morePost: function() {
			this._refreshData(a.Wall.MAX_MSG_COUNT)
		},
		_refreshData: function(o) {
			if (!this._enableWall || !this._wallPostArea) {
				return
			}
			NgLogD("refresh wall");
			var p, m, l, n;
			l = [];
			if (o) {
				this._maxMsgCount += o
			}
			a.Wall.list(this._curUser.recordID, this._maxMsgCount, this.zombieSafeCallback(function(s, q) {
				var t = this._profileAreaHeight || 0;
				t += this._wallPostArea ? this._wallPostArea._postAreaHeight : 0;
				for (var r = 0; r < q.length; r++) {
					if (r === this._maxMsgCount - 1) {
						this._hasMorePost = true
					} else {
						this._hasMorePost = false;
						p = q[r];
						l.push(new a.ConversationListItem(this._curUser, p, r, t, this, this.bind(this._refreshData), this._pushConversationWallFunction(), this.bind(this._jumpToUserProfile)))
					}
				}
				for (r = 0; r < l.length; r++) {
					l[r].odd = (r) % 2
				}
				this._wallMsgCount = l.length;
				this.wallMsgSection.setItems(l);
				this._wallMsgUpdated = true;
				this._wallPostArea._replaceTextArea();
				this._setSectionsOnView(s)
			}))
		},
		_pushConversationWallFunction: function() {
			return this.zombieSafeCallback(function(m, l) {
				if (this._showingConversationWall) {
					return
				}
				this._showingConversationWall = true;
				var n = new c(this.view().getFrame());
				this._conversationViewController.parentController = this.parentController;
				this._conversationViewController.profileController = this;
				this._conversationViewController.view().setFrame(n);
				this._conversationViewController.setConversationInfo(m, l);
				this.swapViews(this.view(), this._conversationViewController.view(), false);
				a.MobageAnalytics.logNavEvent(this, this._conversationViewController)
			})
		},
		_jumpToUserProfile: function(l) {
			var m = null;
			if (l.gamertag === a.Session.getCurrentSession().user().gamertag) {
				m = d.MyPage.initWithJSON({
					user: l
				})
			}
			if (l.gamertag === this._curUser.gamertag) {
				return
			}
			a.ServiceHost.showLoadingHelper(function() {
				m = d.UserProfilePage.initWithJSON({
					user: l
				});
				a.ServiceHost.navController.pushViewController(m)
			})
		}
	});
	h.AreaItem = b;
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/FriendsController"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/FriendsController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/FriendsController"] = g;
	var d = require("NGCore/Client/UI").UI;
	var k = require("NGCore/Client/Core/Capabilities").Capabilities;
	var h = require("NGCore/Client/Core/MessageListener").MessageListener;
	var b = d.ViewGeometry.Rect;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		ContactsController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController").ContactsController
		},
		ContentViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController
		},
		MobageAccordionCVC: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/MobageAccordionCVC").MobageAccordionCVC
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		PendingListSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection
		},
		ZeroCaseSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ZeroCaseSection").ZeroCaseSection
		},
		AddFriendManager: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/AddFriendManager").AddFriendManager
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		}
	});
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/UserCellView").UserCellView_ThreeItemMessage_TappableRowVariant;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var m = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var f = e.subclass({
		classname: "FriendCell",
		insetRatio: null,
		buttonSizeRatio: null,
		subtitleHeightRatio: 0.5,
		initialize: function($super, q) {
			$super(q);
			var o = this;
			this.content.content.setOnClick(function() {
				NgLogD("Default On Click");
				var r = new d.Toast();
				r.setText(o.content.getText());
				r.show()
			});
			var p = a.ListViewCellStyles.FriendCell;
			p.applyTo(this);
			this.insetRatio = p.extras.buttonInsetRatio;
			this.lastPlayedInsetRatio = p.extras.insetRatio;
			this.buttonSizeRatio = p.extras.buttonSizeRatio;
			this.subtitleHeightRatio = p.extras.subtitleHeightRatio;
			this.game = null
		},
		setGame: function(o) {
			this.game = o;
			this.rightAccessory.setText(m("Last Played"));
			if (this.game) {
				this.rightAccessory.setOnClick((function() {
					a.ServiceHost.showLoadingHelper(function() {
						c.GameProfile.startGameOrGoToProfile(this.game, "JSGamePlayFriendsGames")
					}.bind(this))
				}).bind(this))
			}
		},
		markOdd: function() {
			this.addState(a.ContactsController.OddState)
		},
		markEven: function() {
			this.clearState(a.ContactsController.OddState)
		},
		layoutSubviews: function($super) {
			var u = new b(this.getFrame());
			if (!u.isEmpty()) {
				var r = u.copy();
				var t = this.insetRatio * u.h;
				var p = [t, t, t, t];
				var o = [t / 2, t / 2, t / 2, t / 2];
				this.setIconInset(o);
				this.icon.setFrameSize([r.h, r.h]);
				var q = this.lastPlayedInsetRatio * u.h;
				var s = [q / 2, q / 1, q / 1, q / 1];
				this.setRightAccessoryInset(s);
				this.rightAccessory.setFrameSize([u.w * this.buttonSizeRatio, u.h]);
				this.content.subtitle.setFrameSize([u.w, u.h * this.subtitleHeightRatio])
			}
			$super()
		}
	});
	var n = g.FriendsController = a.MobageAccordionCVC.subclass({
		classname: "FriendsController",
		analyticsName: "MyFriends",
		_listView: null,
		_user: null,
		mutualFriends: null,
		_totalInvites: 0,
		_scanState: null,
		_didPreviouslyShowResults: null,
		initialize: function($super, o) {
			$super();
			this._addFriendManager = (new a.AddFriendManager(this)).retain();
			this.scanState = 0;
			this._user = o;
			this.self = this;
			var p = new h();
			this._user.addListener(p, this.zombieSafeCallback(function(q) {
				if (!q || !q.buddies) {
					return
				}
				if (this.scanState == a.ContactsController.ScanState.Done) {
					this._didPreviouslyShowResults = true
				}
				this.scanState = a.ContactsController.ScanState.NotStarted
			}, this.bind(function(q) {
				o.removeListener(p);
				p.destroy()
			})));
			this.mutualFriendItems = new Array()
		},
		destroy: function() {
			if (this.pendingSection) {
				this.pendingSection.release()
			}
			if (this.mutualFriendsSection) {
				this.mutualFriendsSection.release()
			}
			if (this.zeroCaseSection) {
				this.zeroCaseSection.release()
			}
			if (this._addFriendManager) {
				this._addFriendManager.release();
				this._addFriendManager = null
			}
		},
		getDynamicTabTitle: function() {
			var o;
			(this._user.gamertag.length > 7) ? o = this._user.gamertag.substring(0, 7) + "...": o = this._user.gamertag;
			return (this._isLoginUser()) ? m("My Friends") : m("%1s's Friends", o)
		},
		getCurUser: function() {
			return this._user
		},
		getZeroCaseObject: function() {
			return this.zeroCaseSection
		},
		loadView: function($super) {
			$super();
			this.view()._headerHeightRatio = 0
		},
		didActivateTab: function($super) {
			$super();
			this.parentController.navController._host.hideLoadingLabel();
			setTimeout(this.bind(function() {
				if (!this.pendingSection) {
					this.pendingSection = (new a.PendingListSection()).retain()
				}
				this.pendingSection.setPendingText(m("Updating Friends list..."));
				if (!this.mutualFriendsSection) {
					this.mutualFriendsSection = this.createSectionWithTitle().retain()
				}
				this.startScan()
			}), 50)
		},
		startScan: function() {
			var o = this;
			switch (this.scanState) {
				case a.ContactsController.ScanState.Done:
					break;
				case a.ContactsController.ScanState.NotStarted:
					this.scanState = a.ContactsController.ScanState.InFlight;
					this.mutualFriendItems = [];
					this.mutualFriends = [];
					this._user.getMutualFriendsList().forAll(this.zombieSafeCallback(function(u, q, r) {
						this.mutualFriends.push(q);
						var t = new l(q);
						this.mutualFriendItems.push(t);
						t.mode = "profile";
						this.logd("Friend found...[", q.gamertag, " ", q.lastPlayedGame, "]");
						var s = q.lastPlayedGame;
						t.lastUserGameIcon = s ? s.iconURL : null;
						t.lastUserGame = s;
						u(this.mutualFriendItems.length <= 500)
					}), this.zombieSafeCallback(function(s) {
						this.logd("Total Friends found...[" + this.mutualFriendItems.length + "]");
						if (s) {
							this.loge("Problem loading mutual friends: ", s);
							var r = (new d.AlertDialog()).retain();
							r.setTitle(m("No Network Connection"));
							r.setText(m("Please check your network connection settings."));
							r.setChoices([m("OK")]);
							r.onchoice = function(u) {
								r.release();
								r = null
							};
							r.show();
							this._scanFinished();
							this._showNoInternetCase();
							return
						}
						this.sortedFriends = new Array();
						var q = function(w, v) {
							var u = w.user.gamertag.toLowerCase();
							var z = v.user.gamertag.toLowerCase();
							return ((u < z) ? -1 : ((u > z) ? 1 : 0))
						};
						this.sortedFriends = this.mutualFriendItems.sort(q);
						for (var t = 0; t < this.sortedFriends.length; t++) {
							this.sortedFriends[t].odd = (t - 1) % 2
						}
						this.mutualFriendItems = this.sortedFriends;
						this._scanFinished()
					}), this.zombieSafeCallback(function(r, q) {
						this.logd("Cached FriendsList final callback. dataWasRefreshed? ", !!q);
						if (!r && q) {
							this._user.emit({
								buddies: 1
							})
						}
					}));
				case a.ContactsController.ScanState.InFlight:
					var p = this.view().getSections();
					if (!p || !p.length || p[0] != this.pendingSection) {
						if (this._didPreviouslyShowResults) {
							this.pendingSection.setPendingText(m("Updating Friends list..."));
							this.view().setSections([this.pendingSection, this.mutualFriendsSection])
						} else {
							this.view().setSections([this.pendingSection])
						}
					}
					break;
				default:
					break
			}
		},
		_addGamesToView: function() {
			var o = this._listView.getSections()[0];
			o.setItems(this._gameData)
		},
		_scanFinished: function() {
			this.scanState = a.ContactsController.ScanState.Done;
			this.loge("Done!");
			this.mutualFriendsSection.setItems(this.mutualFriendItems);
			setTimeout(this.bind(function() {
				if (this.mutualFriendItems.length) {
					this.view().setSections([this.mutualFriendsSection])
				} else {
					this._showNoResultsCase()
				}
			}), 1)
		},
		_showNoResultsCase: function() {
			NgLogD("No Results Case");
			if (!this.zeroCaseSection) {
				this.zeroCaseSection = (new a.ZeroCaseSection(1, this.view().content.getFrame()[3])).retain();
				if (this._isLoginUser()) {
					this.zeroCaseSection.setZeroCaseTexts([m("You don't have any Friends yet."), m("Have you tried scanning your contacts? People you know may already be on Mobage!"), m("Scan Contacts")]);
					this.zeroCaseSection.setZeroCaseButtonCallback(function() {
						var o = c.FindFriends.initWithJSON({
							tab: "contacts"
						});
						a.ServiceHost.navController.pushViewController(o)
					})
				} else {
					this.zeroCaseSection.setZeroCaseTexts([m("%1s doesn't have any Friends yet.", this._user.gamertag), m("Help them out and add them as a Friend!"), m("Add as Friend")]);
					if (this._addFriendManager) {
						this.zeroCaseSection.setZeroCaseButtonCallback(this._addFriendManager.getAddFriendButtonCallback())
					}
				}
			}
			this.view().setSections([this.zeroCaseSection]);
			if (!this._isLoginUser() && this._addFriendManager) {
				this._addFriendManager._checkRelationship()
			}
		},
		_showNoInternetCase: function() {
			NgLogD("No Internet Case");
			if (!this.zeroCaseSection) {
				this.zeroCaseSection = (new a.ZeroCaseSection(1, this.view().content.getFrame()[3])).retain();
				this.zeroCaseSection.setZeroCaseTexts([m("No Network Connection"), m("Please check your network connection settings."), m("")]);
				this.zeroCaseSection.setZeroCaseButtonEnabled(false)
			}
			this.view().setSections([this.zeroCaseSection])
		},
		_isLoginUser: function() {
			return (this._user.is(a.Session.getCurrentSession().user()))
		}
	});
	var l = j.ListViewItem.subclass({
		classname: "FriendListItem",
		_reuseId: "mypage.friendlistitem",
		section: null,
		mode: null,
		initialize: function($super, o) {
			if (!(o instanceof a.User)) {
				throw new Error("User argument expected.")
			}
			this.user = o;
			$super()
		},
		_onCreateView: function() {
			return new f()
		},
		_onReleaseView: function(o) {
			if (this.cell == o) {
				this.cell = null
			}
			o.icon.setImage("");
			o.rightAccessory.setImage("")
		},
		_onSetView: function(p) {
			this.cell = p;
			p.setState(d.State.Normal);
			p.setGame(this.lastUserGame);
			p.layoutSubviews();
			p.content.content.setTextCutOffOneLine(this.user.gamertag);
			p.content.middleLabel.setTextCutOffOneLine(this.user.getFullName());
			if (!this.user.ageRestricted) {
				p.content.subtitle.setTextCutOffOneLine(this.user.motto)
			} else {
				p.content.subtitle.setText("")
			}
			if (this.lastUserGameIcon) {
				var o = this.lastUserGameIcon;
				if (k.getPlatformOS().toLowerCase() === "iphone os" && this.lastUserGameIcon == "/images/app-default.png") {
					o = a.Assets.image("no-game-icon.png")
				}
				p.rightAccessory.setImage(o);
				p.rightAccessory.setText(m("Last played"))
			} else {
				p.rightAccessory.setText("")
			}
			var q = this.user.getDefinedIcon();
			if (!q) {
				NgLogD("No avatar or photo for user.")
			}
			p.icon.setImage(q);
			if (this.odd) {
				p.markOdd()
			} else {
				p.markEven()
			}
			p.setOnClick(this.bind(this.rowTapped));
			var s = new b(p.getFrame());
			var r = s.h * p.getStyle().extras.imageInsetRatio;
			p.setIconInset([r, r, r, r]);
			p.setRightAccessoryInset([r, r, r, r])
		},
		rowTapped: function() {
			a.ServiceHost.showLoadingHelper(function() {
				var o = c.UserProfilePage.initWithJSON({
					user: this.user
				});
				a.ServiceHost.navController.pushViewController(o)
			}.bind(this))
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GamesController"] = function() {
	var u = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GamesController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GamesController"] = u;
	var a = require("NGCore/Client/Core").Core;
	var m = require("NGCore/Client/UI").UI;
	var t = require("NGCore/Client/Storage").Storage;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var r = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var g = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game;
	var q = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ZeroCaseSection").ZeroCaseSection;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/IdleActor").IdleActor;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost");
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/CatalogCell").CatalogCell;
	var c = m.ListViewItem.subclass({
		classname: "CatalogListItem",
		initialize: function($super, v, w) {
			$super();
			this.game = v;
			this.odd = w
		},
		_onCreateView: function() {
			return new f()
		},
		_onSetView: function(v) {
			v.setOddRow(this.odd);
			v.setGame(this.game)
		},
		_onReleaseView: function(v) {
			v.setGame(null)
		}
	});
	var s = m.ListViewItem.subclass({
		classname: "GamesController_AreaItem",
		_reuseId: null,
		_areaView: null,
		initialize: function($super, v, w) {
			$super();
			this._areaView = v;
			this._reuseId = w
		},
		_onCreateView: function() {
			return this._areaView
		}
	});
	var b = u.GamesController = e.subclass({
		classname: "GamesController",
		analyticsName: "MyGames",
		_user: null,
		_listView: null,
		_sheet: null,
		_retrievingData: false,
		_hasMyGames: false,
		_allResultsReady: false,
		_isCurrentUser: false,
		_getFriendGames: false,
		_idleActor: null,
		_pendingListSection: null,
		_myGamesListSection: null,
		_myGamesListItems: null,
		_friendGamesHeaderSection: null,
		_friendGamesListSection: null,
		_friendGamesListItems: null,
		_maxFriendsGamesForDisplay: 5,
		initialize: function($super, w) {
			$super();
			this._myGamesListItems = [];
			this._friendGamesListItems = [];
			this._sheet = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CatalogStyle").CatalogList;
			this._user = w;
			var v = q.Session.getCurrentSession().user();
			if (v) {
				this._isCurrentUser = this._getFriendGames = this._user.recordID == v.recordID
			} else {
				this._isCurrentUser = this._getFriendGames = false
			}
			this._idleActor = (new k()).retain();
			this._listView = this.view().getContentView();
			this._pendingListSection = (new h()).retain();
			this._pendingListSection.setPendingText(d("Loading games..."))
		},
		destroy: function() {
			if (this._idleActor) {
				this._idleActor.release()
			}
			if (this._myGamesListSection) {
				this._myGamesListSection.release()
			}
			if (this._pendingListSection) {
				this._pendingListSection.release()
			}
			if (this._friendGamesHeaderSection) {
				this._friendGamesHeaderSection.release()
			}
			if (this._friendGamesListSection) {
				this._friendGamesListSection.release()
			}
			if (this.zeroCaseSection) {
				this.zeroCaseSection.release()
			}
		},
		getDynamicTabTitle: function() {
			var v;
			(this._user.gamertag.length > 7) ? v = this._user.gamertag.substring(0, 7) + "...": v = this._user.gamertag;
			return (this._isCurrentUser) ? d("My Games") : d("%1s's Games", v)
		},
		loadView: function($super) {
			$super();
			this.view()._headerHeightRatio = 0
		},
		_refreshListViewSections: function() {
			if (!this._retrievingData) {
				if (this._friendGamesListItems.length === 0 && this._myGamesListItems.length === 0) {
					this._showNoResultsCase()
				} else {
					if (this._getFriendGames && this._friendGamesListItems.length > 0) {
						this._listView.setSections([this._myGamesListSection, this._friendGamesHeaderSection, this._friendGamesListSection])
					} else {
						this._listView.setSections([this._myGamesListSection])
					}
				}
			} else {
				this._listView.setSections([this._myGamesListSection, this._pendingListSection])
			}
		},
		didActivateTab: function($super, v) {
			$super(v);
			this.parentController.navController._host.hideLoadingLabel();
			this._listView.setSections([this._pendingListSection]);
			this._setupContent()
		},
		_setupContent: function() {
			if (!this._myGamesListSection) {
				var x = this._sheet.extras.catalogCellHFactor2;
				this._myGamesListSection = (new o()).retain();
				this._myGamesListSection.setRowHeightRatio(x);
				this._friendGamesListSection = (new o()).retain();
				this._friendGamesListSection.setRowHeightRatio(x);
				var v = this.ySize(this._sheet.extras.friendsGamesHeaderHeight);
				this._friendsButtonArea = this.retainView(new m.View());
				this._friendsButtonArea.setFrame([0, 0, this.view().content.getFrame()[2], v]);
				var y = new s(this._friendsButtonArea, "friends_button_area");
				this._friendGamesHeaderSection = (new o()).retain();
				this._friendGamesHeaderSection.setRowHeight(v);
				this._friendGamesHeaderSection.setItems([y]);
				var w = new m.ViewGeometry.Rect(this._friendsButtonArea.getFrame());
				this._labelFriends = this.retainView(new m.Label());
				this._labelFriends.setText(d("Games that my Friends Play"));
				this._labelFriends.setFrame([this.friendsButtonAreaX(this._sheet.extras.labelFriendsXInsetFactor), this.friendsButtonAreaY(this._sheet.extras.labelFriendsYInsetFactor), this.xSize(this._sheet.extras.labelFriendsWidthFactor), this.ySize(this._sheet.extras.labelFriendsHeightFactor)]);
				this._labelFriends.setTextGravity(m.ViewGeometry.Gravity.Left);
				this._friendsButtonArea.addChild(this._labelFriends);
				this._buttonAllGames = this.retainView(new l());
				this._buttonAllGames.setText(d("All Games"));
				this._buttonAllGames.setFrame([this.friendsButtonAreaX(this._sheet.extras.buttonAllGamesXInsetFactor), this.friendsButtonAreaY(this._sheet.extras.buttonAllGamesYInsetFactor), this.xSize(this._sheet.extras.buttonAllGamesWidthFactor), this.ySize(this._sheet.extras.buttonAllGamesHeightFactor)]);
				this._buttonAllGames.setOnClick(function() {
					p.ServiceHost.showLoadingHelper(function() {
						var z = n.Catalog.initWithJSON({
							tab: "all games"
						});
						p.ServiceHost.navController.pushViewController(z)
					})
				});
				this._friendsButtonArea.addChild(this._buttonAllGames);
				this._sheet.applyTo(this)
			}
			this._refreshListViewSections();
			if (this._user && !this._retrievingData && !this._allResultsReady) {
				this._retrievingData = true;
				this._hasMyGames = false;
				this._allResultsReady = false;
				this._myGamesListItems = [];
				this._friendGamesListItems = [];
				this._myGamesListSection.setItems(this._myGamesListItems);
				this._friendGamesListSection.setItems(this._friendGamesListItems);
				if (!this._idleAction) {
					this._idleAction = this.zombieSafeCallback(function() {
						this._resultsReady()
					})
				}
				this._user.getOwnedGamesList().forAll(this.zombieSafeCallback(function(B, z, A) {
					this._addGameToList(z);
					B(true)
				}), this.zombieSafeCallback(function(A) {
					this._retrievingData = false;
					this._hasMyGames = true;
					if (!A) {
						this._idleActor.waitForIdleBeforeAction(this._idleAction)
					} else {
						var z = (new m.AlertDialog()).retain();
						z.setTitle(d("Error"));
						z.setText(d("Error accessing system.  Please try again later. Error: %1s", A));
						z.setChoices([d("OK")]);
						z.onchoice = function(B) {
							z.release();
							z = null
						};
						z.show()
					}
					if (this._getFriendGames) {
						this._refreshListViewSections();
						this._getFriendGamesList()
					} else {
						this._onDataComplete()
					}
				}), this.zombieSafeCallback(function(A, z) {
					NgLogD("GamesController: Cached lookup fully complete, needs UI refresh? " + !!z);
					if (!A && z) {
						var B = [];
						this._user.getOwnedGamesList().forAll(this.zombieSafeCallback(function(D, C) {
							B.push(C);
							D(true)
						}), this.zombieSafeCallback(function(C) {
							if (!C) {
								NgLogD("GamesController: Refreshing UI post cache update!");
								var D;
								this._myGamesListItems = [];
								for (D = 0; D < B.length; D++) {
									this._addGameToList(B[D])
								}
								this._myGamesListSection.setItems(this._myGamesListItems)
							}
						}), true)
					}
				}))
			}
		},
		_resultsReady: function() {
			this._refreshListViewSections()
		},
		_onDataComplete: function() {
			this._allResultsReady = true;
			this._refreshListViewSections()
		},
		_addGameToList: function(v) {
			if (!(v instanceof g)) {
				throw new Error("Game argument expected.")
			}
			var w = new c(v, this._myGamesListItems.length % 2 === 1);
			this._myGamesListItems.push(w);
			this._idleActor.waitForIdleBeforeAction(this._idleAction)
		},
		_addGameToFriendGamesList: function(v) {
			if (!(v instanceof g)) {
				throw new Error("Game argument expected.")
			}
			var x;
			for (x = 0; x < this._myGamesListItems.length; x++) {
				if (this._myGamesListItems[x].game.recordID == v.recordID) {
					return
				}
			}
			for (x = 0; x < this._friendGamesListItems.length; x++) {
				if (this._friendGamesListItems[x].game.recordID == v.recordID) {
					return
				}
			}
			var w = new c(v, this._friendGamesListItems.length % 2 === 1);
			this._friendGamesListItems.push(w);
			this._idleActor.waitForIdleBeforeAction(this._idleAction)
		},
		_getFriendGamesList: function() {
			if (!this._user.is(q.Session.getCurrentSession().user())) {
				return
			}
			var v = this;
			this._friendIndexKey = "_friendIndexKey";
			this._curIdx = 0;
			t.KeyValueCache.local.getItem(this._friendIndexKey, function(x, w) {
				if (!x) {
					v._curIdx = w;
					if (!v._curIdx && v._curIdx !== 0) {
						v._curIdx = 0
					}
				}
				v._getNextFriend()
			})
		},
		_getNextFriend: function() {
			var v = this;
			v._userIdx = 0;
			v._user.getMutualFriendsList().forRange(v._curIdx, 99, this.zombieSafeCallback(function(y, w, x) {
				v._userIdx = x;
				v._getGamesOfFriend(w, function() {
					y(v._friendGamesListItems.length < v._maxFriendsGamesForDisplay)
				})
			}), this.zombieSafeCallback(function(w) {
				if (v._friendGamesListItems.length >= v._maxFriendsGamesForDisplay) {
					t.KeyValueCache.local.setItem(v._friendIndexKey, ++v._userIdx);
					this._onDataComplete()
				} else {
					if (v._curIdx !== 0) {
						v._curIdx = 0;
						v._getNextFriend()
					} else {
						this._onDataComplete()
					}
				}
			}))
		},
		_getGamesOfFriend: function(w, v) {
			w.getOwnedGamesList().forAll(this.zombieSafeCallback(function(y, z, x) {
				if (this._friendGamesListItems.length < this._maxFriendsGamesForDisplay) {
					this._addGameToFriendGamesList(z);
					y(true)
				} else {
					y(false)
				}
			}), this.zombieSafeCallback(function(x) {
				v()
			}))
		},
		_scrollToSection: function() {
			var w = this.view().getContentView().getSections();
			var v = -1;
			switch (this._sectionToSet) {
				case "my games":
					v = w.indexOf(this._myGamesListSection);
					break;
				case "friends games":
					v = w.indexOf(this._friendGamesHeaderSection);
					break;
				default:
					return
			}
			if (v >= 0 && v < w.length) {
				this.view().getContentView().setScrollPosition([0, w[v].getYPosition()])
			}
		},
		xSize: function(v) {
			return (v / 800) * a.Capabilities.getScreenHeight()
		},
		ySize: function(v) {
			return (v / 480) * a.Capabilities.getScreenWidth()
		},
		friendsButtonAreaX: function(v) {
			return this.xSize(v - this._sheet.extras.friendsButtonAreaXRatio)
		},
		friendsButtonAreaY: function(v) {
			return this.ySize(v - this._sheet.extras.friendsButtonAreaYRatio)
		},
		_showNoResultsCase: function() {
			NgLogD("No Results Case");
			if (!this.zeroCaseSection) {
				this.zeroCaseSection = (new j(1, this.view().content.getFrame()[3])).retain();
				var v = this._user;
				var w;
				if (this._isCurrentUser) {
					this.zeroCaseSection.setZeroCaseTexts([d("You don't have any games yet."), "", d("Get Games")]);
					this.zeroCaseSection.setZeroCaseButtonCallback(function() {
						w = n.Catalog.initWithJSON({});
						p.ServiceHost.navController.pushViewController(w)
					})
				} else {
					this.zeroCaseSection.setZeroCaseTexts([d("%1s isn't playing any games yet.", this._user.gamertag), d("Tell %1s what games they should be playing!", this._user.gamertag), d("Leave a Comment")]);
					this.zeroCaseSection.setZeroCaseButtonCallback(this.bind(function() {
						this.parentController.selectTabAtIndex(0)
					}))
				}
			}
			this.view().setSections([this.zeroCaseSection])
		}
	});
	return u
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall"] = b;
	var h = require("NGCore/Client/Core").Core;
	var g = require("NGCore/Client/UI").UI;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User");
	var c = function(l) {
		var k = l;
		l = [];
		for (var j = 0; j < k.length; j++) {
			if (k[j]) {
				l.push(k[j])
			}
		}
	};
	var e = b.Wall = h.Class.subclass({
		$MAX_MSG_COUNT: 4,
		$create: function(k, j) {},
		$delete: function(k, j) {},
		$showProgress: function(k) {
			var j = (new g.ProgressDialog()).retain();
			j.setText(k);
			j.show();
			return j
		},
		$stopProgress: function(j) {
			if (j) {
				j.hide();
				j.release();
				j = undefined
			}
		},
		$posts: function(l, n, k, j) {
			j = j || d.PlusRequest.noOp;
			var m = new d.PlusRequest();
			m.setPostBody({
				count: k
			});
			this.apiMethod = "users/" + l + "/conversations/" + n;
			m.setApiMethod(this.apiMethod);
			m.setHttpMethod("GET");
			m.send(function(r, t, o, s) {
				NgLogD("wall conversations error :" + JSON.stringify(r));
				NgLogD("wall conversations respond: " + JSON.stringify(t));
				var p = new Array();
				var q = r;
				if ((!r) && t && (!t.success)) {
					q = t.error_msg
				}
				if (!q) {
					var y = t.posts;
					for (var u = 0; u < y.length; u++) {
						var v = 0;
						var w = false;
						var x = y[u];
						if (x.author) {
							v++;
							f.User.getUserWithID(x.author, function(A, z) {
								v--;
								if (!A) {
									x.user = z;
									p.push(x)
								} else {
									console.log("Wall encountered error trying to fill in posts. Skipping.")
								}
								if (w && !v) {
									j(null, p)
								}
							})
						}
					}
					w = true;
					if (!v) {
						j(null, p)
					}
				} else {
					j(q, p)
				}
			})
		},
		$postsAppend: function(l, n, k, j) {
			j = j || d.PlusRequest.noOp;
			var m = new d.PlusRequest();
			m.setPostBody({
				after: k,
				count: 5
			});
			this.apiMethod = "users/" + l + "/conversations/" + n;
			m.setApiMethod(this.apiMethod);
			m.setHttpMethod("GET");
			m.send(function(r, u, o, s) {
				NgLogD("wall conversations error :" + JSON.stringify(r));
				NgLogD("wall conversations respond: " + JSON.stringify(u));
				var p = new Array();
				var q = r;
				if ((!r) && u && (!u.success)) {
					q = u.error_msg
				}
				if (!q) {
					var v = 0;
					var w = false;
					var y = u.posts;
					for (var t = 0; t < y.length; t++) {
						var x = y[t];
						if (x.author) {
							v++;
							f.User.getUserWithID(x.author, function(A, z) {
								v--;
								if (!A) {
									x.user = z;
									p.push(x)
								} else {
									console.log("Wall encountered error trying to fill in posts. Skipping.")
								}
								if (w && !v) {
									j(null, p)
								}
							})
						}
					}
					w = true;
					if (!v) {
						j(null, p)
					}
				} else {
					j(r, p)
				}
			})
		},
		$list: function(k, m, j) {
			j = j || d.PlusRequest.noOp;
			var l = new d.PlusRequest();
			if (m) {
				this.apiMethod = "users/" + k + "/conversations?count=" + m
			} else {
				this.apiMethod = "users/" + k + "/conversations"
			}
			l.setApiMethod(this.apiMethod);
			l.setHttpMethod("GET");
			l.send(function(r, u, o, s) {
				NgLogD("wall conversations error :" + JSON.stringify(r));
				NgLogD("wall conversations respond: " + JSON.stringify(u));
				var p = new Array();
				var q = r;
				if ((!r) && u && (!u.success)) {
					q = u.error_msg
				}
				if (!q) {
					var v = u.conversations;
					var w = 0;
					var y = false;
					var x = function(A) {
						var C = v[A];
						var B = C.posts[0];
						f.User.getUserWithID(B.author, function(E, D) {
							w--;
							if (!E) {
								B.user = D;
								p[A] = B
							} else {
								console.log("Wall encountered error trying to fill in posts. Skipping.")
							}
							if (y && !w) {
								c(p);
								j(null, p)
							}
						})
					};
					for (var t = 0; t < v.length; t++) {
						var n = v[t];
						var z = n.posts[0];
						z.conversationID = n.id;
						if (z.author) {
							w++;
							x(t)
						}
						z.total = n.total
					}
					y = true;
					if (!w) {
						c(p);
						j(null, p)
					}
				} else {
					c(p);
					j(r, p)
				}
			})
		},
		$postMsg: function(l, q, j, p, k) {
			j = j || d.PlusRequest.noOp;
			var o = e.showProgress(a("Posting ..."));
			if (p === true) {
				this.apiMethod = "users/" + l + "/private_conversations"
			} else {
				if (l && k) {
					this.apiMethod = "users/" + l + "/games/" + k + "/conversations"
				} else {
					if (l) {
						this.apiMethod = "users/" + l + "/conversations"
					} else {
						this.apiMethod = "games/" + k + "/conversations"
					}
				}
			}
			var n = new d.PlusRequest();
			n.setApiMethod(this.apiMethod);
			n.setHttpMethod("POST");
			var m = {};
			m.message = q;
			n.setPostBody(m);
			NgLogD("posting message:" + JSON.stringify(m));
			n.send(function(s, u, v, r) {
				e.stopProgress(o);
				var t = s;
				if ((!s) && u && (!u.success)) {
					t = u.error_msg
				}
				NgLogD("post conversation err: " + t);
				NgLogD("post conversation data: " + JSON.stringify(u));
				j(t)
			})
		},
		$reply: function(k, o, q, j, p) {
			j = j || d.PlusRequest.noOp;
			var n = e.showProgress(a("Posting ..."));
			if (p === true) {
				this.apiMethod = "users/" + k + "/private_conversations/" + o
			} else {
				this.apiMethod = "users/" + k + "/conversations/" + o
			}
			var m = new d.PlusRequest();
			m.setApiMethod(this.apiMethod);
			m.setHttpMethod("PUT");
			var l = {};
			l.message = q;
			m.setPostBody(l);
			NgLogD("xxx message:" + JSON.stringify(l));
			m.send(function(s, t, u, r) {
				e.stopProgress(n);
				NgLogD("xxx put conversation err: " + JSON.stringify(s));
				NgLogD("xxx put conversation data: " + JSON.stringify(t));
				j(s)
			})
		},
		$deleteConversation: function(k, n, o, j) {
			j = j || d.PlusRequest.noOp;
			var m = e.showProgress(a("Deleting ..."));
			NgLogD("delete conversationID : " + n);
			if (o === true) {
				this.apiMethod = "users/" + k + "/private_conversations/" + n
			} else {
				this.apiMethod = "users/" + k + "/conversations/" + n
			}
			var l = new d.PlusRequest();
			l.setApiMethod(this.apiMethod);
			l.setHttpMethod("DELETE");
			l.send(function(q, r, s, p) {
				e.stopProgress(m);
				NgLogD("delete conversation err: " + q);
				j(q)
			})
		},
		$deletePost: function(l, o, k, j) {
			j = j || d.PlusRequest.noOp;
			var n = e.showProgress(a("Deleting ..."));
			this.apiMethod = "users/" + l + "/conversations/" + o + "/posts/" + k;
			var m = new d.PlusRequest();
			m.setApiMethod(this.apiMethod);
			m.setHttpMethod("DELETE");
			m.send(function(q, r, s, p) {
				e.stopProgress(n);
				NgLogD("delete conversation err: " + q);
				j(q)
			})
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ModalDialog"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ModalDialog"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ModalDialog"] = g;
	var h = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/Device").Device;
	var f = require("NGCore/Client/UI").UI;
	var c = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		ModalDialogStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ModalDialogStyle")
		}
	});
	var l = h.MessageListener.subclass({
		classname: "ModalDialog_KeyListener"
	});
	var b = f.CellView.subclass({
		classname: "SizeReportingCellView",
		onSizeChanged: function() {
			if (this.controller && this.controller.onViewSizeChanged) {
				this.controller.onViewSizeChanged.apply(this.controller, Array.prototype.slice.call(arguments))
			}
		}
	});
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var j = g.ModalDialog = d.subclass({
		classname: "ModalDialog",
		initialize: function() {
			this.kListener = new l()
		},
		destroy: function() {
			NgLogD("Destroying ModalDialog " + this.classname);
			e.KeyEmitter.removeListener(this.kListener);
			this.kListener = undefined
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new b());
				this.view().setOnClick(this.zombieSafeCallback(this.hide))
			}
			$super()
		},
		show: function() {
			if (this._showing) {
				return
			}
			this._showing = true;
			c.UnspammableButton.addDeviceKeyListener(this.kListener, this.onKeyPressed.bind(this), 99999)
		},
		hide: function() {
			if (!this._showing) {
				return
			}
			this._showing = false;
			if (this.kListener) {
				e.KeyEmitter.removeListener(this.kListener)
			}
		},
		onKeyPressed: function(m) {
			if (m.code === e.KeyEmitter.Keycode.back || m.code === e.KeyEmitter.Keycode.menu) {
				this.hide();
				return true
			}
			return false
		}
	});
	var a = g.ReportUserModalDialog = j.subclass({
		classname: "ReportUserModalDialog",
		initialize: function($super, n, p) {
			$super();
			this._curUser = n;
			var m = this;
			c.ModalDialogStyles;
			this._modalStyle = c.OldStyle.registeredStyle("social.us.modaldialog").props();
			this._transparentBase = new c.UnspammableButton().retain();
			this._transparentBase.onclick = function(q) {
				m.destroy()
			};
			f.Window.document.addChild(this._transparentBase);
			this._topBarBgPane = new f.View().retain();
			this._topBarBgPane.setAttributes(this._modalStyle.topBarBackgroundPane);
			f.Window.document.addChild(this._topBarBgPane);
			this._reportLabel = new f.Label().retain();
			this._topBarBgPane.addChild(this._reportLabel);
			this._textBox = new f.EditText().retain();
			this._textBox.setPlaceholder(k("Please enter a reason to report this user."));
			this._topBarBgPane.addChild(this._textBox);
			this._reportButton = new c.UnspammableButton().retain();
			this._reportButton.setText(k("Report"));
			this._reportButton.setAttributes(this._modalStyle.standardButton);
			this._reportButton.onclick = function() {
				if (m._textBox.getText().length > 0) {
					m._curUser.report(m._textBox.getText(), function(s, t) {
						if (t === true) {
							var r = new f.AlertDialog();
							r.setTitle(k("User reported--we're looking into it. Thanks!"));
							r.setChoices([k("OK")]);
							r.show();
							r.onchoice = function(u) {
								m.destroy()
							}
						} else {
							NgLogD("Error in ModalDialog.js:buttonReportUser: " + s)
						}
					}, p)
				} else {
					var q = new f.AlertDialog();
					q.setTitle(k("Please enter a reason to report this user."));
					q.setChoices([k("OK")]);
					q.show()
				}
			};
			this._topBarBgPane.addChild(this._reportButton);
			this._cancelButton = new c.UnspammableButton().retain();
			this._cancelButton.setText(k("Cancel"));
			this._cancelButton.setAttributes(this._modalStyle.standardButton);
			this._cancelButton.onclick = function(q) {
				m.destroy()
			};
			this._topBarBgPane.addChild(this._cancelButton);
			this.layoutViews(e.OrientationEmitter.getInterfaceOrientation());
			var o = h.MessageListener.subclass({
				_onOrientationEvent: function(q) {
					if (q.type === e.OrientationEmitter.OrientationType.Interface) {
						m.layoutViews(q.orientation)
					}
				},
				destroy: function() {
					e.OrientationEmitter.removeListener(this)
				}
			});
			this.orientationListenerInstance = new o();
			e.OrientationEmitter.addListener(this.orientationListenerInstance, this.orientationListenerInstance._onOrientationEvent);
			this.show();
			return this
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new f.View())
			}
			$super()
		},
		layoutViews: function(v) {
			if (this._currentOrientation === v) {
				return
			}
			if (v === e.OrientationEmitter.Orientation.FaceUp || v === e.OrientationEmitter.Orientation.FaceDown) {
				if (this._currentOrientation === null) {
					v = e.OrientationEmitter.Orientation.Portrait
				} else {
					return
				}
			}
			this._currentOrientation = v;
			var m = h.Capabilities.getScreenWidth();
			var o = h.Capabilities.getScreenHeight();
			var n = m;
			var u = o;
			var s;
			if (v === e.OrientationEmitter.Orientation.LandscapeLeft || v === e.OrientationEmitter.Orientation.LandscapeRight) {
				s = true;
				n = o;
				u = m
			} else {
				s = false
			}
			this._transparentBase.setGradient({
				gradient: ["66000000 0.0", "66000000 0.0"]
			});
			this._transparentBase.setFrame(0, 0, n, u);
			var p;
			if (s) {
				p = [n / 8, u / 4, n * 6 / 8, u * 2 / 4]
			} else {
				p = [n / 8, u * 1 / 3, n * 6 / 8, u * 1 / 3]
			}
			this._topBarBgPane.setFrame(p);
			var w = 10;
			var r = p[3] * this._modalStyle.labelHFactor;
			var q = p[3] * this._modalStyle.buttonHFactor;
			var t = (p[3] - w - q) - (w + r) - w;
			this._reportLabel.setTextSize(r * this._modalStyle.labelTextHFactor);
			this._reportLabel.setTextColor("FFFFFFFF");
			this._reportLabel.setText(k("Report %1s", this._curUser.gamertag));
			this._reportLabel.setFrame([w, w, p[2] - 2 * w, r]);
			this._textBox.setFrame([w, w * 3 / 2 + r, p[2] - 2 * w, t]);
			this._textBox.setTextGravity(f.ViewGeometry.Gravity.Left);
			this._textBox.setAttributes(this._modalStyle.textBox);
			this._reportButton.setFrame([w, p[3] - w - q, p[2] / 2 - w * 3 / 2, q]);
			this._cancelButton.setFrame([p[2] / 2 + w / 2, p[3] - w - q, p[2] / 2 - w * 3 / 2, q])
		},
		onKeyPressed: function(m) {
			if (m.code === e.KeyEmitter.Keycode.back || m.code === e.KeyEmitter.Keycode.menu) {
				if (this._transparentBase) {
					this.destroy();
					return true
				}
			}
			return false
		},
		destroy: function() {
			this._transparentBase.release();
			this._topBarBgPane.release();
			this._reportLabel.release();
			this._textBox.release();
			this._reportButton.release();
			this._cancelButton.release();
			this.orientationListenerInstance.destroy()
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ConversationViewController"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ConversationViewController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ConversationViewController"] = d;
	var g = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/UI").UI;
	var b = require("NGCore/Client/Device").Device;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Wall: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall").Wall
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		Destinations: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations
		},
		MobageAnalytics: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics
		},
		ConversationWallView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ConversationWallView").ConversationWallView
		},
		PendingListSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection
		},
		DialogListItem: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection").DialogListItem
		},
		MBListViewSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection
		},
		MorePostListItem: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection").MorePostListItem
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		}
	});
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = require("NGCore/Client/Core/MessageListener").MessageListener;
	var j = h.subclass({
		classname: "ConView_KeyListener"
	});
	var e = d.ConversationViewController = f.subclass({
		classname: "ConversationViewController",
		analyticsName: "WallConversation",
		mainSection: null,
		profileController: null,
		morePostSection: null,
		_hasMorePost: false,
		conversationsToShow: 25,
		initialize: function($super) {
			$super();
			this._headerStyle = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements.header;
			this.mainSection = (new a.MBListViewSection()).retain();
			this.mainSection.setRowHeightRatio(1 / 4)
		},
		removeListener: function() {
			if (this.kListener) {
				b.KeyEmitter.removeListener(this.kListener);
				this.kListener = undefined
			}
		},
		destroy: function() {
			this.mainSection.release();
			this.removeListener()
		},
		onKeyPressed: function(l) {
			if (l.code === b.KeyEmitter.Keycode.back) {
				this.backToProfile(true);
				return true
			}
			return false
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new a.ConversationWallView())
			}
			$super();
			var l = this.view().getHeaderView();
			l.setFrameSize([100, 100]);
			this._headerStyle.applyTo(l);
			l.button.setText(k("View Wall"));
			l.button.setFrameSize([100 * (g.Capabilities.getScreenHeight() / 480), 100]);
			l.button.setOnClick(this.bind(function() {
				this.backToProfile(true)
			}));
			l.content.setText("ENGINEERING Conversation with someone.")
		},
		setConversationInfo: function(p, o) {
			this._conversation = p;
			this._user = o;
			this.updateHeaderHeight();
			this.updateFooterSizing();
			this.updateConversationTitle();
			this.view().layoutSubviews();
			this.kListener = new j();
			a.UnspammableButton.addDeviceKeyListener(this.kListener, this.onKeyPressed.bind(this), 99999);
			this.loadConversation();
			var q = function(t) {
				if ((typeof t) !== "undefined") {
					var s = (new c.AlertDialog()).retain();
					s.setTitle(k("Error"));
					s.setText(k("Error accessing system.  Please try again later. Error: %1s", t));
					s.setChoices([k("OK")]);
					s.onchoice = function(u) {
						s.release();
						s = null
					};
					s.show()
				} else {
					r.content.setText("");
					this.loadConversation(true)
				}
			}.bind(this);
			var r = this.view().getFooterView();
			var l = function(t) {
				var s = /^\s*$/.test(t);
				return s
			};
			var n = 90;
			r.submitButton.setOnClick(function() {
				var s = r.content.getText();
				if (!l(s)) {
					s = s.substring(0, n);
					a.Wall.reply(o.recordID, p.conversationID, s, q, false)
				}
			}.bind(this));
			var m = null;
			r.content.setOnChange(function() {
				var s = r.content.getText();
				if (s.length > n && m === null) {
					m = (new c.AlertDialog()).retain();
					m.setTitle(k("Message too long"));
					m.setText(k("Only %1d characters are allowed. Extra characters will be truncated.", n));
					m.setChoices([k("OK")]);
					m.onchoice = function(t) {
						m.release();
						m = null
					};
					m.show()
				}
			}.bind(this))
		},
		loadConversation: function(p) {
			if (!this._pendingListSection) {
				this._pendingListSection = new a.PendingListSection();
				this._pendingListSection.setPendingText(k("Getting the gossip..."))
			}
			this.view().setSections([this._pendingListSection]);
			var n = this._conversation;
			var q, m, l, o;
			l = [];
			var r = this.view().getHeaderHeight();
			a.Wall.posts(this._user.recordID, n.conversationID, this.conversationsToShow, function(w, s) {
				var x = 0;
				this.convoIndex = 0;
				if (w) {
					if (!this._errorSection) {
						this._errorSection = (new a.PendingListSection()).retain()
					}
					this._errorSection.showError(w);
					this.view().setSections([this._errorSection]);
					console.log("Wall.posts Got Error", JSON.stringify(w))
				} else {
					for (var u = 0; u < s.length; u++) {
						q = s[u];
						var t = null;
						if (this._user.gamertag === q.author_gamertag) {
							t = function() {
								this.backToProfile(true)
							}.bind(this)
						} else {
							t = this._jumpToUserProfile.bind(this)
						}
						if (u > 0) {
							l.push(new a.DialogListItem(q, u > 0, this._user, u, r, this.view().getContentView(), t, n.conversationID, this.loadConversation.bind(this)))
						} else {
							l.push(new a.DialogListItem(q, u > 0, this._user, u, r, this.view().getContentView(), t, n.conversationID, function() {
								this.backToProfile(true)
							}.bind(this)))
						}
					}
					for (u = 0; u < l.length; u++) {
						l[u].odd = (u) % 2
					}
					this.convoIndex = this.convoIndex + this.conversationsToShow;
					this.morePostSection = new a.MBListViewSection();
					this.morePostSection.setRowHeightRatio(1 / 8);
					this.morePostSection.setItems(new a.MorePostListItem(this.bind(function() {
						l = [];
						this.convoIndex = this.convoIndex + this.conversationsToShow;
						a.Wall.posts(this._user.recordID, n.conversationID, this.convoIndex, function(B, y) {
							if ((typeof B) !== "undefined") {
								if (!this._errorSection) {
									this._errorSection = (new a.PendingListSection()).retain()
								}
								this._errorSection.showError(B);
								this.view().setSections([this._errorSection])
							} else {
								for (var z = 0; z < y.length; z++) {
									q = y[z];
									l.push(new a.DialogListItem(q, z > 0, this._user, z, r, this.view().getContentView(), t, n.conversationID, this.loadConversation.bind(this)))
								}
							}
							this.mainSection.setItems(l);
							if (this.convoIndex == ((y.length))) {
								this.view().setSections([this.mainSection, this.morePostSection])
							} else {
								this.view().setSections([this.mainSection])
							}
							if (p) {
								var A = Math.max(0, (l.length + 1) * this.mainSection.getRowHeight() - this.view().getFrame()[3]);
								this.view().setScrollPosition(0, A)
							}
						}.bind(this))
					})));
					this.mainSection.setItems(l);
					if (this.convoIndex == ((s.length))) {
						this.view().setSections([this.mainSection, this.morePostSection])
					} else {
						this.view().setSections([this.mainSection])
					}
					if (p) {
						var v = Math.max(0, (l.length + 1) * this.mainSection.getRowHeight() - this.view().getFrame()[3]);
						this.view().setScrollPosition(0, v)
					}
				}
			}.bind(this))
		},
		updateHeaderHeight: function() {
			var l = new c.ViewGeometry.Rect(this.view().getFrame());
			var m = new c.ViewGeometry.Rect(this.view().getFrame());
			l.h = this._headerStyle.extras.headerHeightRatio * m.h;
			if (l.isEmpty()) {
				l.x = l.y = 0;
				l.w = 400;
				l.y = 50
			}
			this.view().header.setFrame(l)
		},
		updateFooterSizing: function() {
			var l = this.view().getFooterView().getFrameSize();
			this.view().getFooterView().submitButton.setFrameSize([l[0] / 6, l[1]])
		},
		updateConversationTitle: function() {
			this.view().getHeaderView().content.setText(k("Conversation with %1s", this._conversation.author_gamertag))
		},
		backToProfile: function(l) {
			if (!a.ServiceHost.isMenuDrawerClosedOrClosing()) {
				a.ServiceHost.closeMenuDrawer();
				return
			}
			this.removeListener();
			this.swapViews(this.view(), this.profileController.view(), true);
			a.MobageAnalytics.logNavEvent(this, this.profileController);
			this.profileController._showingConversationWall = false;
			if (l) {
				this.profileController._refreshData()
			}
		},
		_jumpToUserProfile: function(l) {
			this.removeListener();
			var m = null;
			if (l.gamertag === a.Session.getCurrentSession().user().gamertag && this.profileController.classname === "CurrentUserProfileController") {
				this.backToProfile(true)
			} else {
				if (l.gamertag === a.Session.getCurrentSession().user().gamertag) {
					m = a.Destinations.MyPage.initWithJSON({
						user: l
					});
					a.ServiceHost.navController.pushViewController(m)
				} else {
					m = a.Destinations.UserProfilePage.initWithJSON({
						user: l
					});
					a.ServiceHost.navController.pushViewController(m)
				}
			}
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/FriendsList"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/FriendsList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/FriendsList"] = g;
	var h = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var b = e.ViewGeometry.Rect;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		ZeroCaseMessageCell: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/ZeroCaseMessageCell").ZeroCaseMessageCell
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		FindFriends: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/FindFriends").FindFriends
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		UserProfileStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserProfileStyle")
		},
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		}
	});
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;

	function f(k) {
		return k * (h.Capabilities.getScreenHeight() / 800)
	}
	var c = g.FriendsList = e.View.subclass({
		classname: "FriendsList",
		_curUser: null,
		_friendsArea: null,
		_friendsHeader: null,
		_friendsHeaderLabel: null,
		_callbackOnCompletion: null,
		_friendIcons: null,
		_zeroCaseTexts: ["", "", ""],
		_zeroCaseButtonCallback: null,
		_zeroCaseButtonEnabled: true,
		_contentWidth: 0,
		_friendsAreaHeight: 0,
		_userFriendsCount: 0,
		initialize: function($super, l, k, n, o) {
			$super();
			this._friendIcons = [];
			a.UserProfileStyle;
			this._styleSheet = a.OldStyle.registeredStyle("social.us.userprofile").props();
			this._commonSheet = a.OldStyle.registeredStyle("social.us.commonelements").props();
			this._curUser = l;
			this._userClickedCallback = o;
			this._viewAllCallback = n;
			this._totalWidth = h.Capabilities.getScreenHeight();
			this._totalHeight = h.Capabilities.getScreenWidth();
			this._contentWidth = this._getContentWidth();
			this._rowHeight = this._totalHeight * this._styleSheet.friendsAreaHFactor;
			this._friendsHeaderHeight = this._totalHeight * this._styleSheet.friendsHeaderHFactor;
			this._friendsAreaHeight = this._rowHeight;
			this._totalAreaHeight = this._friendsHeaderHeight + this._friendsAreaHeight;
			this._zeroCaseHeight = this._totalHeight * this._commonSheet.zeroCaseHeightFactor;
			var m;
			if (h.Capabilities.getPlatformOS().toLowerCase() == "iphone os") {
				m = this._styleSheet.friendIconSizeFactorIOS * this._friendsAreaHeight
			} else {
				m = this._styleSheet.friendIconSizeFactor * this._friendsAreaHeight
			}
			this._maxPerRow = Math.round(this._contentWidth / m);
			this.factor = this._contentWidth / this._maxPerRow;
			this.vertFactor = this._contentWidth / 5;
			this._maxRows = 2;
			if (k) {
				this._callbackOnCompletion = k
			}
			this._createFriendsArea();
			this._createFriendsHeader();
			this.addChild(this._friendsHeader);
			this.addChild(this._friendsArea)
		},
		destroy: function() {
			if (this._zeroCaseMessageCell) {
				this._zeroCaseMessageCell.release();
				this._zeroCaseMessageCell = null
			}
			if (this._buttonViewAllFriends) {
				this._buttonViewAllFriends.destroy()
			}
			if (this._friendsHeader) {
				this._friendsHeader.destroy()
			}
			if (this._friendsHeaderLabel) {
				this._friendsHeaderLabel.destroy()
			}
			if (this._friendsArea) {
				this._friendsArea.destroy()
			}
			for (var k = 0; k < this._friendIcons.length; k++) {
				this._friendIcons[k].destroy()
			}
		},
		getInitialHeight: function() {
			return this._friendsHeaderHeight + this._friendsAreaHeight + f(this._styleSheet.friendsTopMargin)
		},
		_createFriendsArea: function() {
			this._friendsArea = new e.View();
			this._friendsArea.setFrame([0, this._friendsHeaderHeight, this._contentWidth, this._friendsAreaHeight]);
			this._friendsArea.setAttributes(this._styleSheet.friendsArea)
		},
		_createFriendsHeader: function() {
			this._friendsHeader = new e.View();
			this._friendsHeader.setFrame([0, 0, this._contentWidth, this._friendsHeaderHeight]);
			this._friendsHeader.setAttributes(this._styleSheet.friendsHeader);
			this._friendsHeaderLabel = new e.Label();
			this._friendsHeaderLabel.setAttributes(this._styleSheet.friendsHeaderLabel);
			this._friendsHeaderLabel.setText("" + this._curUser.gamertag + "'s Friends");
			this._friendsHeaderLabel.setFrame([this._styleSheet.friendsHeaderLabelXFactor * this._contentWidth, this._styleSheet.friendsHeaderLabelYFactor * this._friendsHeaderHeight, this._styleSheet.friendsHeaderLabelWFactor * this._contentWidth, this._styleSheet.friendsHeaderLabelHFactor * this._friendsHeaderHeight]);
			this._friendsHeader.addChild(this._friendsHeaderLabel);
			this._buttonViewAllFriends = new a.UnspammableButton();
			this._buttonViewAllFriends.setAttributes(this._commonSheet.standardButton);
			this._buttonViewAllFriends.setText(j("View All"));
			this._buttonViewAllFriends.setFrame([this._styleSheet.buttonViewAllFriendsXFactor * this._contentWidth, this._styleSheet.buttonViewAllFriendsYFactor * this._friendsHeaderHeight, this._styleSheet.buttonViewAllFriendsWFactor * this._contentWidth, this._styleSheet.buttonViewAllFriendsHFactor * this._friendsHeaderHeight]);
			this._buttonViewAllFriends.onclick = this._viewAllCallback;
			this._friendsHeader.addChild(this._buttonViewAllFriends)
		},
		_addFriendToList: function(m) {
			var l = this._userFriendsCount;
			this._userFriendsCount++;
			if (l < (this._maxRows * this._maxPerRow)) {
				var k = Math.floor(l / this._maxPerRow);
				var n = new d(m, this._userClickedCallback);
				this._friendIcons.push(n);
				n.setFrame([(l - k * this._maxPerRow) * this.factor, k * this.vertFactor, this.factor, this.vertFactor + f(this._styleSheet.friendsTopMargin)]);
				n.setAttributes(this._styleSheet.friendIcon);
				this._friendsArea.addChild(n);
				if ((l % this._maxPerRow) === 0) {
					this._updateFriendsAreaHeight()
				}
			}
		},
		_updateFriendsCounter: function() {
			if (this._friendsHeaderLabel) {
				if (this._curUser.gamertag === a.Session.getCurrentSession().user().gamertag) {
					this._friendsHeaderLabel.setText(j("My Friends (%1d)", this._userFriendsCount))
				} else {
					this._friendsHeaderLabel.setText(j("%1s's Friends (%2d)", this._curUser.gamertag, this._userFriendsCount))
				}
			}
		},
		getFriendsList: function() {
			var k = this;
			this._hideNoResultsCase();
			this._curUser.getMutualFriendsList().forAll(function(m, n, l) {
				k._addFriendToList(n);
				m(true)
			}, function(l) {
				if (k._userFriendsCount === 0) {
					k._showNoResultsCase()
				}
				k._updateFriendsCounter();
				if (k._callbackOnCompletion) {
					k._callbackOnCompletion(k._userFriendsCount, k._totalAreaHeight, l)
				}
			})
		},
		setZeroCaseTexts: function(k) {
			this._zeroCaseTexts = k;
			if (this._zeroCaseMessageCell) {
				this._zeroCaseMessageCell.setZeroCaseTexts(this._zeroCaseTexts)
			}
		},
		setZeroCaseButtonCallback: function(k) {
			this._zeroCaseButtonCallback = k;
			if (this._zeroCaseMessageCell) {
				this._zeroCaseMessageCell.setZeroCaseButtonCallback(this._zeroCaseButtonCallback)
			}
		},
		setZeroCaseButtonEnabled: function(k) {
			this._zeroCaseButtonEnabled = k;
			if (this._zeroCaseMessageCell) {
				this._zeroCaseMessageCell.setZeroCaseButtonEnabled(this._zeroCaseButtonEnabled)
			}
		},
		getAddFriendButton: function() {
			if (this._zeroCaseMessageCell) {
				return this._zeroCaseMessageCell.getButton()
			}
			return null
		},
		_showNoResultsCase: function() {
			if (!this._zeroCaseMessageCell && this._friendsArea) {
				this._zeroCaseMessageCell = (new a.ZeroCaseMessageCell()).retain();
				var k = new b(this._friendsArea.getFrame());
				if (!k.isEmpty()) {
					this._zeroCaseMessageCell.setFrame([0, 0, k.w, this._zeroCaseHeight])
				} else {
					NgLogD("FriendsList: _showNoResultsCase: BAD FRAME")
				}
				if (this._curUser.gamertag === a.Session.getCurrentSession().user().gamertag) {
					this._zeroCaseMessageCell.setZeroCaseTexts([j("You don't have any friends yet."), j("Have you tried scanning your contacts? People you know may already be on Mobage!"), j("Scan Contacts")]);
					this._zeroCaseMessageCell.setZeroCaseButtonCallback(function() {
						var l = a.FindFriends.initWithJSON({
							tab: "contacts"
						});
						a.ServiceHost.navController.pushViewController(l)
					})
				} else {
					this._zeroCaseMessageCell.setZeroCaseTexts([j("%1s doesn't have any Friends yet.", this._curUser.gamertag), j("Help them out and add them as a Friend!"), j("Add as Friend")]);
					this._zeroCaseMessageCell.setZeroCaseButtonCallback(this._zeroCaseButtonCallback)
				}
			}
			if (this._zeroCaseMessageCell && this._friendsArea) {
				if (!this._zeroCaseMessageCell.getParent()) {
					this._friendsArea.addChild(this._zeroCaseMessageCell);
					this._updateFriendsAreaHeight()
				}
			}
		},
		_hideNoResultsCase: function() {
			if (this._zeroCaseMessageCell && this._zeroCaseMessageCell.getParent()) {
				this._zeroCaseMessageCell.removeFromParent();
				this._updateFriendsAreaHeight()
			}
		},
		_isShowingNoResultsCase: function() {
			if (this._zeroCaseMessageCell && this._zeroCaseMessageCell.getParent()) {
				return true
			}
			return false
		},
		_updateFriendsAreaHeight: function() {
			var k = Math.min(this._userFriendsCount, this._maxRows * this._maxPerRow);
			var n = Math.ceil(k / this._maxPerRow);
			var m = 0;
			if (this._isShowingNoResultsCase()) {
				m = this._zeroCaseHeight
			} else {
				m = n * this._rowHeight
			}
			var l = new e.ViewGeometry.Rect(this._friendsArea.getFrame());
			if (!l.isEmpty()) {
				l.h = m;
				this._friendsArea.setFrame(l)
			}
			l = new e.ViewGeometry.Rect(this.getFrame());
			if (!l.isEmpty()) {
				l.h = m + this._friendsHeaderHeight;
				this.setFrame(l);
				this._totalAreaHeight = l.h
			}
		},
		_getContentWidth: function() {
			return (1 - a.VerticalTabViewSizing.buttonContainerRatio - a.VerticalTabViewSizing.insetRatio) * this._totalWidth
		}
	});
	var d = e.View.subclass({
		classname: "FriendIcon",
		_gamerTag: null,
		_avatar: null,
		_styleSheet: null,
		initialize: function($super, k, m) {
			$super();
			a.UserProfileStyle;
			this._styleSheet = a.OldStyle.registeredStyle("social.us.userprofile").props();
			this._friendsAreaHeight = h.Capabilities.getScreenWidth() * this._styleSheet.friendsAreaHFactor;
			this._contentWidth = this._getContentWidth();
			this._gamerTag = new e.Label();
			this._gamerTag.setAttributes(this._styleSheet.friendIconGamerTag);
			this.addChild(this._gamerTag);
			this._avatar = new a.UnspammableButton();
			this._avatar.setImageFit(e.ViewGeometry.FitModes.Stretch);
			this._avatar.setAttributes(this._styleSheet.friendIconAvatarImage);
			this._avatar.setImageBorder(this._styleSheet.friendIconAvatarGradient);
			this._avatar.setImageBorder(this._styleSheet.friendIconAvatarGradientPress, e.State.Pressed);
			this.setGamerTag(k.gamertag);
			this.setAvatar(k.getDefinedIcon());
			var l = this;
			if ((typeof m) == "function") {
				this._avatar.onclick = function() {
					m(k)
				}
			} else {
				this._avatar.onclick = function() {
					NgLogD("mobage/FriendsList: clicked user (" + k.gamertag + ") button")
				}
			}
			this.addChild(this._avatar)
		},
		destroy: function() {
			if (this._gamerTag) {
				this._gamerTag.destroy()
			}
			if (this._avatar) {
				this._avatar.destroy()
			}
		},
		sizeChanged: function() {
			this.layoutSubviews()
		},
		layoutSubviews: function() {
			var k = new e.ViewGeometry.Rect(this.getFrame());
			if (!k.isEmpty()) {
				if (this._gamerTag) {
					var l = this._styleSheet.friendIconGamerTagWFactor * this._contentWidth;
					this._gamerTag.setFrame([(k.w - l) / 2, this._styleSheet.friendIconGamerTagYFactor * this._friendsAreaHeight + f(this._styleSheet.friendsTopMargin), l, this._styleSheet.friendIconGamerTagHFactor * this._friendsAreaHeight])
				}
				if (this._avatar) {
					var m = this._styleSheet.friendIconAvatarWFactor * this._friendsAreaHeight;
					this._avatar.setFrame([(k.w - m) / 2, this._styleSheet.friendIconAvatarYFactor * this._friendsAreaHeight, m, this._styleSheet.friendIconAvatarHFactor * this._friendsAreaHeight])
				}
			}
		},
		setGamerTagFrame: function(k) {
			if (this._gamerTag) {
				this._gamerTag.setFrame(k)
			}
		},
		setGamerTag: function(k) {
			if (this._gamerTag) {
				if (k.length > 7) {
					this._gamerTag.setText(k.substring(0, 6) + "...")
				} else {
					this._gamerTag.setText(k)
				}
			}
		},
		setAvatarFrame: function(k) {
			if (this._avatar) {
				this._avatar.setFrame(k)
			}
		},
		setAvatar: function(k) {
			if (this._avatar) {
				this._avatar.setImage(k)
			}
		},
		_getContentWidth: function() {
			var k = h.Capabilities.getScreenHeight();
			return (1 - a.VerticalTabViewSizing.buttonContainerRatio - a.VerticalTabViewSizing.insetRatio) * k
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/RecentlyPlayedGamesList"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/RecentlyPlayedGamesList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/RecentlyPlayedGamesList"] = f;
	var g = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/UI").UI;
	var e = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Catalog: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Catalog").Catalog
		},
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		UserProfileStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserProfileStyle")
		},
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		}
	});
	var m = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;

	function d(o) {
		return o * (g.Capabilities.getScreenHeight() / 800)
	}

	function l(o) {
		return o * (g.Capabilities.getScreenWidth() / 480)
	}
	var k = 4;
	var j = f.RecentlyPlayedGamesList = c.View.subclass({
		classname: "RecentlyPlayedGamesList",
		_userGamesCount: 0,
		_iconCount: 0,
		_curUser: null,
		_callbackOnCompletion: null,
		_gamesArea: null,
		_gamesHeader: null,
		_addViewAllButton: false,
		initialize: function($super, p, r, o, q) {
			$super();
			this._gameIcons = [];
			a.UserProfileStyle;
			this._styleSheet = a.OldStyle.registeredStyle("social.us.userprofile").props();
			this._commonSheet = a.OldStyle.registeredStyle("social.us.commonelements").props();
			this._curUser = p;
			this._isCurrentUser = r;
			if (o) {
				this._callbackOnCompletion = o
			}
			this._viewAllCallback = q;
			this._createGamesArea();
			this._createGamesHeader();
			this.addChild(this._gamesHeader);
			this.addChild(this._gamesArea);
			this._totalWidth = g.Capabilities.getScreenHeight();
			this._totalHeight = g.Capabilities.getScreenWidth();
			this._gamesHeaderHeight = this._totalHeight * this._styleSheet.gamesHeaderHFactor
		},
		destroy: function() {
			if (this._gamesArea) {
				this._gamesArea.release()
			}
			if (this._gamesHeader) {
				this._gamesHeader.release()
			}
			if (this._gamesHeaderLabel) {
				this._gamesHeaderLabel.release()
			}
			if (this._buttonViewAllGames) {
				this._buttonViewAllGames.release()
			}
			if (this._gameIcons !== null) {
				for (var o = 0; o < this._gameIcons.length; o++) {
					this._gameIcons[o].release()
				}
			}
		},
		sizeChanged: function() {
			this.layoutSubviews()
		},
		layoutSubviews: function() {
			if (!this.getFrame()) {
				return
			}
			if (isNaN(this.getFrame()[3])) {
				throw new Error("height")
			}
			var q = this.getFrame()[2];
			this._totalAreaHeight = this._gamesHeaderHeight;
			var r = [0, 0, q, this._gamesHeaderHeight];
			var o = [this._styleSheet.gamesHeaderLabelXFactor * q, this._styleSheet.gamesHeaderLabelYFactor * this._gamesHeaderHeight, this._styleSheet.gamesHeaderLabelWFactor * q, this._styleSheet.gamesHeaderLabelHFactor * this._gamesHeaderHeight];
			var s = [this._styleSheet.buttonViewAllGamesXFactor * q, this._styleSheet.buttonViewAllGamesYFactor * this._gamesHeaderHeight, this._styleSheet.buttonViewAllGamesWFactor * q, this._styleSheet.buttonViewAllGamesHFactor * this._gamesHeaderHeight];
			if (!this._gamesArea.getFrame()) {
				this._gamesArea.setFrame([0, this._gamesHeaderHeight, q, d(this._styleSheet.gameIconMargin)])
			}
			this._updateGamesAreaFrame();
			this._gamesHeader.setFrame(r);
			this._gamesHeaderLabel.setFrame(o);
			this._buttonViewAllGames.setFrame(s);
			for (var p = 0; p < this._gameIcons.length; p++) {
				this._gameIcons[p].layoutAtGridPosition()
			}
			if (!this._initialLayoutDataFetch) {
				this._initialLayoutDataFetch = true;
				this._getRecentlyPlayedGamesList()
			}
		},
		getInitialHeight: function() {
			return this._gamesHeaderHeight + d(this._styleSheet.gameIconMargin)
		},
		getCurrentHeight: function() {
			var o = new c.ViewGeometry.Rect(this.getFrame());
			return o.h
		},
		_createGamesArea: function() {
			this._gamesArea = (new c.View()).retain();
			this._gamesArea.setAttributes(this._styleSheet.gamesArea)
		},
		_createGamesHeader: function() {
			this._gamesHeader = (new c.View()).retain();
			this._gamesHeader.setAttributes(this._styleSheet.gamesHeader);
			this._gamesHeaderLabel = (new c.Label()).retain();
			this._gamesHeaderLabel.setAttributes(this._styleSheet.gamesHeaderLabel);
			this._gamesHeaderLabel.setText(m("%1s's Games", this._curUser.gamertag));
			this._gamesHeader.addChild(this._gamesHeaderLabel);
			this._buttonViewAllGames = (new a.UnspammableButton()).retain();
			this._buttonViewAllGames.setAttributes(this._commonSheet.standardButton);
			this._buttonViewAllGames.setText(m("View All"));
			this._buttonViewAllGames.onclick = this._viewAllCallback;
			this._gamesHeader.addChild(this._buttonViewAllGames)
		},
		_getRecentlyPlayedGamesList: function() {
			var o = 0;
			this._curUser.getOwnedGamesList().forRange(0, 4, this.bind(function(q, r, p) {
				if (this._destroyed) {
					return
				}
				o++;
				NgLogD("mobage/RecentlyPlayedGamesList game #" + o + " is " + r.name);
				this._addGameToList(r);
				q(true)
			}), this.bind(function(p) {
				if (this._destroyed) {
					return
				}
				NgLogD("mobage/RecentlyPlayedGamesList got " + o + " games.");
				this._updateGamesCounter();
				if (this._callbackOnCompletion) {
					this._callbackOnCompletion(this._userGamesCount, this._totalAreaHeight, p)
				}
			}))
		},
		_addGameToList: function(p) {
			var o = new h();
			var q = [0, 0, (this.getFrame()[2] - o.getMargin()) / k - o.getMargin(), 40];
			o.setFrame(q);
			o.setGameName(p.name);
			o.setImage(p.iconURL);
			o.setGame(p);
			this._addGameIconToList(o);
			this._userGamesCount++
		},
		_addGameIconToList: function(o) {
			o.setGridPosition(this._userGamesCount % k, Math.floor(this._userGamesCount / k));
			o.setAttributes(this._styleSheet.gameIcon);
			o.retain();
			this._gameIcons.push(o);
			this._gamesArea.addChild(o);
			this._updateGamesAreaFrame();
			this._iconCount++
		},
		_addAddGameButton: function() {
			this._addGameIconToList(new n())
		},
		_updateGamesAreaFrame: function() {
			NgLogD("_updateGamesAreaFrame [ENTER]");
			if (!this._gameIcons.length) {
				return
			}
			var o = this._gameIcons[0];
			var s = this._oldRows || 0;
			var r = Math.ceil(this._gameIcons.length / k);
			this._oldRows = r;
			var q = o.getHeight() + o.getMargin();
			var t = q * r;
			var p = new c.ViewGeometry.Rect(this._gamesArea.getFrame());
			p.h = t;
			this._gamesArea.setFrame(p);
			if (s != r) {
				this._updateOurFrame()
			}
		},
		_updateOurFrame: function() {
			if (!this._gameIcons.length) {
				return
			}
			var q = Math.ceil(this._gameIcons.length / k);
			var o = this._gameIcons[0];
			var s = o.getHeight() + o.getMargin();
			var r = s * q;
			var p = new c.ViewGeometry.Rect(this.getFrame());
			p.h = r + this._gamesHeaderHeight;
			this.setFrame(p);
			this._totalAreaHeight = p.h
		},
		_updateGamesCounter: function() {
			if (this._gamesHeaderLabel) {
				if (this._curUser.gamertag === a.Session.getCurrentSession().user().gamertag) {
					this._gamesHeaderLabel.setText(m("My Recently Played Games"))
				} else {
					this._gamesHeaderLabel.setText(m("%1s's Recently Played Games", this._curUser.gamertag))
				}
			}
		}
	});
	var h = c.View.subclass({
		classname: "GameIcon",
		initialize: function($super) {
			$super();
			this._game = null;
			a.UserProfileStyle;
			this._styleSheet = a.OldStyle.registeredStyle("social.us.userprofile").props();
			this._margin = d(this._styleSheet.gameIconMargin);
			this._labelMargin = d(this._styleSheet.gameLabelTopMargin);
			this._height = d(this._styleSheet.gameIconSize) + d(this._styleSheet.gameIconLabelHeight + d(this._styleSheet.gameLabelTopMargin));
			this._width = 40;
			this._gameName = (new c.Label()).retain();
			this._gameName.setAttributes(this._styleSheet.gameIconGameName);
			this.addChild(this._gameName);
			this._gameIcon = (new a.UnspammableButton()).retain();
			this._gameIcon.setImageFit(c.ViewGeometry.FitModes.Stretch);
			this._gameIcon.setAttributes(this._styleSheet.gameIconImage);
			this._gameIcon.setImageBorder(this._styleSheet.gameIconImageGradientPress, c.State.Pressed);
			var o = this;
			this._gameIcon.onclick = function() {
				a.ServiceHost.showLoadingHelper(function() {
					NgLogD("clicked game (" + o._gameName.getText() + ") button");
					if (!o._game) {
						NgLogW("NOT opening game profile: Game object not set for " + o._gameName.getText());
						return
					}
					b.GameProfile.startGameOrGoToProfile(o._game, "JSGamePlayRecentlyPlayed")
				}.bind(o))
			};
			this.addChild(this._gameIcon)
		},
		sizeChanged: function() {
			this.layoutSubviews()
		},
		layoutSubviews: function() {
			if (!this.getFrame()) {
				return
			}
			this._width = this.getFrame()[2];
			var p = [0, d(this._styleSheet.gameIconSize + this._labelMargin), this._width, d(this._styleSheet.gameIconLabelHeight)];
			var o = [(this._width - d(this._styleSheet.gameIconSize)) / 2, 0, d(this._styleSheet.gameIconSize), d(this._styleSheet.gameIconSize)];
			this._gameName.setFrame(p);
			this._gameIcon.setFrame(o)
		},
		destroy: function() {
			if (this._gameName) {
				this._gameName.release();
				this._gameName = null
			}
			if (this._gameIcon) {
				this._gameIcon.release();
				this._gameIcon = null
			}
		},
		getHeight: function() {
			return this._height
		},
		getMargin: function() {
			return this._margin
		},
		setGridPosition: function(o, p) {
			this.column = o;
			this.row = p;
			this.layoutAtGridPosition()
		},
		layoutAtGridPosition: function() {
			if (isNaN(this.column) || isNaN(this.row)) {
				return
			}
			var o = [this.column * (this._width + this._margin) + this._margin, this.row * (this._height + this._margin) + this._margin, this._width, this._height];
			this.setFrame(o)
		},
		setGameName: function(o) {
			if (this._gameName) {
				this._gameName.setText(o)
			}
		},
		setGame: function(o) {
			this._game = o
		},
		setImage: function(o) {
			if (this._gameIcon) {
				if (!o || o == "/images/app-default.png") {
					o = e.image("no-game-icon.png")
				}
				this._gameIcon.setImage(o)
			}
		}
	});
	var n = h.subclass({
		classname: "AddGameIcon",
		initialize: function($super) {
			$super();
			this._gameName.setText(m("Add Game"));
			this._gameName.setAttributes(this._styleSheet.gameIconAddGameLabel);
			this._gameIcon.setImageFit(c.ViewGeometry.FitModes.None);
			this._gameIcon.setImage(e.image("addgamebttnplusicon_up.png"));
			this._gameIcon.setImage(e.image("addgamebttnplusicon_down.png"), c.State.Pressed);
			this._gameIcon.setAttributes(this._styleSheet.gameIconImageAddGame);
			this._gameIcon.onclick = function() {
				NgLogD("clicked add game button");
				var o = a.Catalog.initWithJSON({
					tab: "all games"
				});
				a.ServiceHost.navController.pushViewController(o)
			}
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection"] = function() {
	var x = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection"] = x;
	var a = require("NGCore/Client/Core").Core;
	var h = require("NGCore/Client/UI").UI;
	var g = h.ViewGeometry.Rect;
	var e = h.ViewGeometry.Scale;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var u = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		ContactsController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController").ContactsController
		},
		WallCmdViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/WallCmdViewController").WallCmdViewController
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		Wall: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall").Wall
		},
		UserCellView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/UserCellView").UserCellView
		},
		UserCellView_ThreeItemMessage_TappableColumnVariant: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/UserCellView").UserCellView_ThreeItemMessage_TappableColumnVariant
		},
		TappableUserIconView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserIconView").TappableUserIconView
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		WallStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/WallStyle")
		},
		UserProfileStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserProfileStyle")
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		},
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		}
	});
	var r = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView");
	var v = r.Composite;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeButton").CompositeButton;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var w = m.Components;
	var n = m.Component;
	var f = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var l = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedDate;
	var k = x.WallPostArea = h.View.subclass({
		classname: "WallPostSection",
		checkedUserDetails: false,
		userIsMobageUser: false,
		maxMsgLength: 90,
		initialize: function($super, z, A) {
			$super();
			u.UserProfileStyle;
			u.WallStyle;
			this._styleSheet = u.OldStyle.registeredStyle("social.us.userprofile").props();
			this._styleSheetWall = u.OldStyle.registeredStyle("social.us.wall").props();
			this._commonSheet = u.OldStyle.registeredStyle("social.us.commonelements").props();
			this._curUser = z;
			this._postCallback = A;
			this._totalHeight = a.Capabilities.getScreenWidth();
			this._totalWidth = a.Capabilities.getScreenHeight();
			this._contentWidth = this._getContentWidth();
			this._postAreaHeight = (this._totalHeight + 100) * this._styleSheetWall.postAreaHFactor;
			this._createPostSection();
			this._curUser.getUserDetails(function(D, B) {
				this.checkedUserDetails = true;
				this.userIsMobageUser = B.isMobageUser;
				NgLogD("Mobage/WallPostSection userIsMobageUser = " + this.userIsMobageUser);
				if (!this.userIsMobageUser && this._curUser.gamertag !== u.Session.getCurrentSession().user().gamertag) {
					var C = [0, 0, this.getFrame()[2], this.getFrame()[3]];
					this._noPostingButton = (new u.UnspammableButton()).retain();
					this._noPostingButton.setFrame(C);
					this._noPostingButton.onclick = function() {
						var E = (new h.AlertDialog()).retain();
						E.setTitle(c("Unavailable for %1s", this._curUser.gamertag));
						E.setText(c("Sorry, the MobaWall is not yet available for iPhone users. Coming soon!"));
						E.setChoices([c("OK")]);
						E.onchoice = function(F) {
							E.release();
							E = null
						};
						E.show();
						return
					}.bind(this);
					this._postEdit.setEnabled(false);
					this.addChild(this._noPostingButton)
				}
			}.bind(this))
		},
		destroy: function() {
			if (this._postButton) {
				this._postButton.release()
			}
			if (this._headerLabel) {
				this._headerLabel.release()
			}
			if (this._postEdit) {
				this._postEdit.release()
			}
			if (this._noPostingButton) {
				this._noPostingButton.release()
			}
		},
		_cleanViews: function() {
			if (this._retainedViews) {
				for (var z = 0; z < this._retainedViews.length; z++) {
					var A = this._retainedViews[z];
					if (A && !A.__destroyed__) {
						A.release()
					}
				}
			}
			this._retainedViews = new Array()
		},
		_createPostSection: function() {
			this.setFrame([0, 0, this._contentWidth, this._postAreaHeight]);
			this.setAttributes(this._styleSheet.friendsHeader);
			var B = this._postAreaHeight;
			this._headerLabel = (new h.Label()).retain();
			this._headerLabel.setAttributes(this._styleSheetWall.wallHeaderLabel);
			if (this._curUser.gamertag === u.Session.getCurrentSession().user().gamertag) {
				this._headerLabel.setText(c("Comments"))
			} else {
				this._headerLabel.setText(c("Post a public comment"))
			}
			this._headerLabel.setFrame([this._styleSheet.postHeaderLabelXFactor * this._contentWidth, this._styleSheetWall.postHeaderLabelYFactor * B, this._styleSheet.postHeaderLabelWFactor * this._contentWidth, this._styleSheetWall.postHeaderLabelHFactor * B]);
			this._headerLabel.setTextGravity(h.ViewGeometry.Gravity.Left);
			this.addChild(this._headerLabel);
			this._postButton = (new u.UnspammableButton()).retain();
			this._postButton.setAttributes(this._commonSheet.standardButton);
			this._postButton.setText(c("Post"));
			this._postButton.setFrame(this._styleSheetWall.buttonPostXFactor * this._contentWidth, B * this._styleSheetWall.postTextYFactor, this._styleSheetWall.buttonPostWFactor * this._contentWidth, this._styleSheetWall.buttonPostHFactor * B);
			this._replaceTextArea();
			var A = function(D) {
				if ((typeof D) !== "undefined") {
					var C = (new h.AlertDialog()).retain();
					C.setTitle(c("Error"));
					C.setText(c("Error accessing system.  Please try again later. Error: %1s", D));
					C.setChoices([c("OK")]);
					C.onchoice = function(E) {
						C.release();
						C = null
					};
					C.show()
				}
				this._postCallback(D)
			}.bind(this);
			var z = function(D) {
				var C = /^\s*$/.test(D);
				return C
			};
			this._postButton.onclick = function() {
				this._postEdit.setEnabled(false);
				this._postEdit.setEnabled(true);
				if (!this.checkedUserDetails) {
					return
				}
				if (!this.userIsMobageUser && this._curUser.gamertag !== u.Session.getCurrentSession().user().gamertag) {
					return
				}
				var C = this._postEdit.getText();
				if (!z(C)) {
					C = C.substring(0, this.maxMsgLength);
					u.Wall.postMsg(this._curUser.recordID, C, this.bind(function(D) {
						if ((typeof D) === "undefined") {
							this._postEdit.setText("")
						}
						A(D)
					}), false)
				}
			}.bind(this);
			this.addChild(this._postButton)
		},
		_replaceTextArea: function() {
			if (this._postEdit) {
				this._postEdit.setEnabled(false);
				this._postEdit.removeFromParent();
				this._postEdit.release();
				this._postEdit = null
			}
			this._postEdit = (new h.EditText()).retain();
			this._postEdit.setTextGravity(h.ViewGeometry.Gravity.TopLeft);
			var A = null;
			this._postEdit.onchange = function() {
				var C = this._postEdit.getText();
				if (C.length > this.maxMsgLength && A === null) {
					A = (new h.AlertDialog()).retain();
					A.setTitle(c("Message too long"));
					A.setText(c("Only %1d characters are allowed. Extra characters will be truncated.", this.maxMsgLength));
					A.setChoices([c("OK")]);
					A.onchoice = function(D) {
						A.release();
						A = null
					};
					A.show()
				}
			}.bind(this);
			this._postEdit.setOnBlur(this.bind(function() {
				this._postEdit.setEnabled(false);
				this._postEdit.setEnabled(true)
			}));
			this._postEdit.setTextGravity(h.ViewGeometry.Gravity.Left);
			var B = this._postAreaHeight;
			var z = "";
			if (this._curUser.gamertag === u.Session.getCurrentSession().user().gamertag) {
				z = c("What's happening?")
			} else {
				z = c("What are you playing?")
			}
			this._postEdit.setPlaceholder(z);
			this._postEdit.setAttributes(u.OldStyle.registeredStyle("social.us.commonelements").props().textBox);
			this._postEdit.setFrame([this._styleSheet.postHeaderLabelXFactor * this._contentWidth, B * this._styleSheetWall.postTextYFactor, this._styleSheet.postTextWFactor * this._contentWidth, this._styleSheetWall.postTextHFactor * B]);
			this._postEdit.setInputType(this._postEdit.InputTypes.None);
			this._postEdit.setEnterKeyType(h.Commands.EnterKeyType.Done);
			this.addChild(this._postEdit)
		},
		_getContentWidth: function() {
			return (1 - u.VerticalTabViewSizing.buttonContainerRatio - u.VerticalTabViewSizing.insetRatio) * this._totalWidth
		}
	});
	var s = u.UserCellView_ThreeItemMessage_TappableColumnVariant.subclass({
		classname: "ConversationCell",
		insetRatio: null,
		buttonSizeRatio: null,
		subtitleHeightRatio: 0.75,
		rightInsetRatio: null,
		initialize: function($super, z) {
			this._compositePrepare();
			this._compositeInits.icon = function(B) {
				this[B] = (new u.TappableUserIconView()).retain()
			};
			$super(z);
			var A = u.ListViewCellStyles.ConversationCell;
			A.applyTo(this);
			this.insetRatio = A.extras.buttonInsetRatio;
			this.rightInsetRatio = A.extras.rightInsetRatio;
			this.buttonSizeRatio = A.extras.buttonSizeRatio;
			this.subtitleHeightRatio = A.extras.subtitleHeightRatio;
			this.setOnClick(this.bind(this.rowTapped));
			this.getIconView().setOnClick(this.bind(this.avatarTapped))
		},
		setAvatarTappedCB: function(z) {
			this._avatarTappedCB = z
		},
		setRowTappedCB: function(z) {
			this._rowTappedCB = z
		},
		rowTapped: function() {
			this._rowTappedCB()
		},
		avatarTapped: function() {
			this._avatarTappedCB()
		},
		setReplyCount: function(z) {
			var A = "";
			if (z > 99) {
				A = "99+"
			} else {
				if (z > 0) {
					A = String(z)
				}
			}
			this.accessoryButton.label.setText(A)
		},
		layoutSubviews: function($super) {
			var E = new g(this.getFrame());
			if (!E.isEmpty()) {
				var D = E.copy();
				var F = this.insetRatio * E.h;
				var C = [F, F, F, F];
				var A = [F / 2, F / 2, F / 2, F / 2];
				this.setIconInset(A);
				var z = this.rightInsetRatio * E.h;
				this.icon.setFrameSize([D.h, D.h]);
				var G = [F / 2, F / 2, F / 2, F / 2];
				this.accessoryButton.setIconInset(G);
				this.accessoryButton.setFrame([0, 0, z * 3.5, z * 1.5]);
				this.content.layoutSubviews();
				this.content.content.setFrameSize([E.w, E.h * 0.25]);
				this.content.subtitle.setFrameSize([E.w, E.h * 0.75]);
				var B = this.content.subtitle.getFrame();
				this.content.subtitle.setFrame([B[0], B[1] * 2 * 0.75, B[2], B[3]])
			}
			$super()
		}
	});
	var t = x.ConversationListItem = d.ListViewItem.subclass({
		classname: "ConversationListItem",
		_reuseId: "wall.conversationlistitem",
		initialize: function($super, D, F, G, A, E, C, B, z) {
			this._idx = G;
			this._scrollview = E.view().getContentView();
			this._ypos = A;
			this._user = D;
			this._controller = E;
			this._conversation = F;
			this._cb = C;
			this._pushConversationWallFunction = B;
			this._jumpToUserProfileCB = z
		},
		_onCreateView: function() {
			var z = new s();
			return z
		},
		_onReleaseView: function(z) {
			z.icon.setImage("");
			if (this.cell == z) {
				this.cell = null
			}
		},
		_onSetView: function(z) {
			this.cell = z;
			var B = this;
			z.setRowTappedCB(this.bind(function() {
				this._pushConversationWallFunction(this._conversation, this._user)
			}));
			if (this._conversation.total > 0) {
				z.setReplyCount(this._conversation.total - 1)
			}
			z.setState(h.State.Normal);
			z.layoutSubviews();
			z.icon.content.setImage(this._conversation.user.getDefinedIcon());
			z.setAvatarTappedCB(this.bind(function() {
				this._jumpToUserProfileCB(this._conversation.user)
			}));
			var C = l(this._conversation.date);
			var A = 65;
			if (this._conversation.message.length > A) {
				z.content.subtitle.setText(this._conversation.message.substring(0, A) + "...")
			} else {
				z.content.subtitle.setText(this._conversation.message)
			}
			z.content.content.setText(this._conversation.author_gamertag + " " + C);
			if (this.odd) {
				z.addState(u.ContactsController.OddState)
			}
			z.accessoryButton.content.setOnClick((function() {
				this.showCommandList(this._user, this._conversation, z.getFrame(), this._cb, this._pushConversationWallFunction, z)
			}).bind(this))
		},
		showCommandList: function(E, H, A, D, B, K) {
			var G = A.slice();
			G[0] += K.accessoryButton.getFrame()[3] / 3;
			var z = (K.accessoryButton.getFrame()[3] / 7.3) * K.accessoryButton.label.getText().length;
			G[0] -= z;
			var C = (K.accessoryButton.getFrame()[3] / 2) + z;
			var J = A[1] + (A[3] / 2);
			if (this._scrollview) {
				var F = this._ypos;
				var I = A[3];
				F += this._idx * I + I / 2 + I / 10;
				F -= this._scrollview.getScrollPosition()[1];
				G[1] = F
			}
			var L = new u.WallCmdViewController(E, H, G, D, B, C, true)
		}
	});
	var q = u.UserCellView.subclass({
		classname: "DialogCell",
		insetRatio: null,
		rightInsetRatio: null,
		buttonSizeRatio: null,
		subtitleHeightRatio: 0.5,
		initialize: function($super, z) {
			$super(z);
			var A = u.ListViewCellStyles.DialogCell;
			A.applyTo(this);
			this.insetRatio = A.extras.buttonInsetRatio;
			this.rightInsetRatio = A.extras.rightInsetRatio;
			this.buttonSizeRatio = A.extras.buttonSizeRatio;
			this.subtitleHeightRatio = A.extras.subtitleHeightRatio;
			this.icon.setOnClick(this.bind(this.avatarTapped))
		},
		setAvatarTappedCB: function(z) {
			this._avatarTappedCB = z
		},
		avatarTapped: function() {
			this._avatarTappedCB()
		},
		layoutSubviews: function($super, J) {
			var G = new g(this.getFrame());
			if (!G.isEmpty()) {
				var E = G.copy();
				var H = this.insetRatio * G.h;
				var D = [H, H, H, H];
				var A = [H / 2, H / 2, H / 2, H / 2];
				var z = this.rightInsetRatio * G.h;
				this.setIconInset(A);
				this.setAccessoryButtonInset(D);
				this.accessoryButton.setFrame([0, 0, z * 1.3, z * 1.3]);
				this.content.content.setFrameSize([G.w, G.h * 0.25]);
				this.content.subtitle.setFrameSize([G.w, G.h * 0.75]);
				this.icon.setFrameSize([E.h, E.h])
			}
			$super();
			this.content.layoutSubviews();
			var B = this.content.subtitle.getFrame();
			if (J) {
				var F = this.icon.getFrame();
				var I = F[2] / 2;
				this.icon.setFrame([F[0] + I, F[1], F[2], F[3]]);
				var C = this.content.content.getFrame();
				this.content.content.setFrame([C[0] + I, C[1], C[2], C[3]]);
				this.content.subtitle.setFrame([B[0] + I, B[1] * 2 * 0.75, B[2] - I, B[3]])
			} else {
				this.content.subtitle.setFrame([B[0], B[1] * 2 * 0.75, B[2], B[3]])
			}
		}
	});
	var o = x.DialogListItem = d.ListViewItem.subclass({
		classname: "DialogListItem",
		_reuseId: "wall.dialoglistitem",
		_isIndent: false,
		initialize: function($super, G, E, C, F, B, D, A, H, z) {
			this._isIndent = E;
			this._post = G;
			this._idx = F;
			this._ypos = B;
			this._user = C;
			this._scrollview = D;
			this._jumpToUserProfileCB = A;
			this._conversationID = H;
			this._refreshCB = z
		},
		_onCreateView: function() {
			var z = new q();
			return z
		},
		_onReleaseView: function(z) {
			z.icon.setImage("");
			if (this.cell == z) {
				this.cell = null
			}
		},
		_onSetView: function(z) {
			this.cell = z;
			z.setState(h.State.Normal);
			z.layoutSubviews(this._isIndent);
			z.icon.setImage(this._post.user.getDefinedIcon());
			var B = l(this._post.date);
			var A = 65;
			if (this._post.message.length > A) {
				z.content.subtitle.setText(this._post.message.substring(0, A) + "…")
			} else {
				z.content.subtitle.setText(this._post.message)
			}
			z.content.content.setText(c("%1s %2s", this._post.user.gamertag, B));
			if (this.odd) {
				z.addState(u.ContactsController.OddState)
			}
			z.accessoryButton.setOnClick((function() {
				this.showCommandList(this._user, this._post, z.getFrame(), this._refreshCB, z)
			}).bind(this));
			z.setAvatarTappedCB(function() {
				if (this._jumpToUserProfileCB) {
					this._jumpToUserProfileCB(this._post.user)
				}
			}.bind(this))
		},
		showCommandList: function(C, F, z, B, I) {
			console.log("Showing commands");
			var E = z.slice();
			E[0] += I.accessoryButton.getFrame()[3] / 3;
			var A = (I.accessoryButton.getFrame()[3] / 2);
			var H = z[1] + (z[3] / 2);
			console.log("initially I'm considering a frame of " + E);
			if (this._scrollview) {
				var D = this._ypos;
				var G = z[3];
				D += this._idx * G + G / 2 + G / 10;
				console.log("it's worthy of note that my idx is " + this._idx);
				console.log("and the scrollPosition is " + this._scrollview.getScrollPosition()[1]);
				D -= this._scrollview.getScrollPosition()[1];
				E[1] = D;
				console.log("but after some thought I'm thinking my y position should be " + D)
			}
			var J = new u.WallCmdViewController(C, F, E, B, undefined, A, false);
			J.setConversationID(this._conversationID)
		}
	});
	var b = w.Layouts.ThreeHorizontalGenerator("leftArrow", "content", "rightArrow").layoutSubviews;
	var p = v({
		key: "leftArrow",
		component: w.Image,
		disableViewAccessorRemapping: true
	}, {
		key: "content",
		component: w.Label,
		altKey: "message",
		disableViewAccessorRemapping: true
	}, {
		key: "rightArrow",
		component: w.Image,
		disableViewAccessorRemapping: true
	}, w.AddOrders.Generator("content", "leftArrow", "rightArrow"), {
		classname: "MorePostCell",
		initialize: function($super, A) {
			$super(A);
			var z = u.ListViewCellStyles.MorePostCell;
			z.applyTo(this);
			this.insetRatio = z.extras.buttonInsetRatio;
			this.rightInsetRatio = z.extras.rightInsetRatio;
			this.buttonSizeRatio = z.extras.buttonSizeRatio;
			this.subtitleHeightRatio = z.extras.subtitleHeightRatio;
			return this
		},
		layoutSubviews: function($super) {
			$super();
			var C = new g(this.getFrame());
			if (!C.isEmpty()) {
				var B = C.h / 4;
				var A = B * 2;
				var z = (C.h / 2) - (B / 2);
				this.leftArrow.setFrameSize([B + 2 * A, B]);
				this.rightArrow.setFrameSize([B + 2 * A, B]);
				this.setLeftArrowInset([z, A, z, A]);
				this.setRightArrowInset([z, A, z, A])
			}
			b.call(this)
		}
	}, j);
	var y = x.MorePostListItem = d.ListViewItem.subclass({
		classname: "MorePostListItem",
		_reuseId: "wall.morepostlistitem",
		initialize: function($super, z) {
			this._morePostCB = z
		},
		destroy: function() {
			if (this._leftArrow) {
				this._leftArrow.release();
				this._leftArrow = null
			}
			if (this._rightArrow) {
				this._rightArrow.release();
				this._rightArrow = null
			}
		},
		_onCreateView: function() {
			var z = new p();
			return z
		},
		_onReleaseView: function(z) {
			if (this.cell == z) {
				this.cell = null
			}
		},
		_onSetView: function(z) {
			this.cell = z;
			z.setState(h.State.Normal);
			z.setGradient({
				gradient: ["66000000 0.0", "66000000 0.0"]
			}, h.State.Pressed);
			z.layoutSubviews();
			z.content.setText(c("See More Posts..."));
			z.setOnClick((function() {
				this._morePostCB()
			}).bind(this))
		}
	});
	return x
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserInfoView"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserInfoView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserInfoView"] = g;
	var h = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var c = e.ViewGeometry.Rect;
	var b = e.ViewGeometry.Scale;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/StringUtils").StringUtils;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		BalanceButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/BalanceButton").BalanceButton
		},
		PickableAvatar: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PickableAvatar").PickableAvatar
		},
		UserInfoStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserInfoStyle")
		}
	});
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = g.UserInfoView = e.View.subclass({
		classname: "UserInfoView",
		initialize: function($super, o, u) {
			$super();
			a.UserInfoStyle;
			this._sheet = a.OldStyle.registeredStyle("social.us.userinfo").props();
			this._totalWidth = h.Capabilities.getScreenHeight();
			this._totalHeight = h.Capabilities.getScreenWidth();
			this._user = o;
			this._isCurrentUser = u;
			this.setAttributes(this._sheet.myProfileArea);
			var v = this.xSize(this._sheet.avatarImageSizeFactor);
			var p = this.myProfileAreaX(this._sheet.avatarImageXInset);
			var n = this.myProfileAreaY(this._sheet.avatarImageYInset);
			if (this._isCurrentUser) {
				var l = this.retainView(new a.PickableAvatar(this._user));
				l.setFrame([p, n, v, v]);
				l.layoutSubviews();
				l.setStyle(new a.OldStyle());
				this.addChild(l)
			} else {
				var s = a.OldStyle.registeredStyle("social.us.commonelements").props();
				var m = this.retainView(new e.Image());
				m.setFrame([p, n, v, v]);
				m.setImage(a.Assets.image("no-user-icon.png"));
				m.setAttributes(s.userPhoto);
				if (this._user) {
					m.setImage(this._user.getDefinedIcon() || a.Assets.image("no-user-icon.png"))
				}
				this.addChild(m)
			}
			this._labelGamerTag = this.retainView(new e.Label());
			this._labelGamerTag.setFrame([this.myProfileAreaX(this._sheet.labelGamerTagXInsetFactor), this.myProfileAreaY(this._sheet.labelGamerTagYInsetFactor), this.xSize(this._sheet.labelGamerTagWidthFactor), this.ySize(this._sheet.labelGamerTagHeightFactor)]);
			this._labelGamerTag.setText(this._user.gamertag);
			this._labelGamerTag.setAttributes(this._sheet.labelGamerTag);
			this._labelGamerTag.setTextGravity(e.ViewGeometry.Gravity.TopLeft);
			this.addChild(this._labelGamerTag);
			this._labelName = this.retainView(new e.Label());
			this._labelName.setFrame([this.myProfileAreaX(this._sheet.labelNameXInsetFactor), this.myProfileAreaY(this._sheet.labelNameYInsetFactor), this.xSize(this._sheet.labelNameWidthFactor), this.ySize(this._sheet.labelNameHeightFactor)]);
			this.updateName(this._user.getFullName());
			this._labelName.setAttributes(this._sheet.labelName);
			this._labelName.setTextGravity(e.ViewGeometry.Gravity.Left);
			this.addChild(this._labelName);
			this._labelMottoArea = this.retainView(new e.Image());
			this._labelMottoArea.setFrame([this.myProfileAreaX(this._sheet.labelMottoXInsetFactor), this.myProfileAreaY(this._sheet.labelMottoYInsetFactor), this.xSize(this._sheet.labelMottoWidthFactor), this.ySize(this._sheet.labelMottoHeightFactor)]);
			this._labelMottoArea.setImage(a.Assets.image("status_entry_area_gray.png"));
			this._labelMottoArea.setImageFit(e.ViewGeometry.FitModes.Stretch);
			var q = this._user.motto;
			if (f.trim(q).length === 0) {
				q = j("I haven't written anything yet")
			}
			this._labelMotto = this.retainView(new e.Label());
			this._labelMotto.setFrame([this.myProfileAreaX(this._sheet.labelMottoXInsetFactor + 20), this.myProfileAreaY(this._sheet.labelMottoYInsetFactor + 5), this.xSize(this._sheet.labelMottoWidthFactor - 20), this.ySize(this._sheet.labelMottoHeightFactor - 5)]);
			this.updateMotto(q);
			this._labelMotto.setTextGravity(e.ViewGeometry.Gravity.BottomLeft);
			this._labelMotto.setAttributes(this._sheet.labelMotto);
			if (!this._user.ageRestricted) {
				this.addChild(this._labelMottoArea);
				this.addChild(this._labelMotto)
			}
			if (this._isCurrentUser) {
				this._balanceButton = this.retainView(new a.BalanceButton());
				this._balanceButton.setBalanceButtonFrame([this.myProfileAreaX(this._sheet.balanceButtonXInsetFactor), this.myProfileAreaY(this._sheet.balanceButtonYInsetFactor), this.xSize(this._sheet.balanceButtonWidthFactor), this.ySize(this._sheet.balanceButtonHeightFactor)]);
				this._balanceButton.setAttributes(this._sheet.balanceButton);
				this._balanceButton.setPressedGradient(this._sheet.balanceButtonPressed);
				var r = this._balanceButton.getBalanceImage();
				r.setFrame([this.xSize(this._sheet.balanceImageXInsetFactor), this.ySize(this._sheet.balanceImageYInsetFactor), this.xSize(this._sheet.balanceImageWidthFactor), this.ySize(this._sheet.balanceImageHeightFactor)]);
				r.setImage(a.Assets.image("coin_balance.png"));
				var t = this._balanceButton.getCurrencyLabel();
				t.setFrame([this.xSize(this._sheet.currencyLabelXInsetFactor), this.ySize(this._sheet.currencyLabelYInsetFactor), this.xSize(this._sheet.currencyLabelWidthFactor), this.ySize(this._sheet.currencyLabelHeightFactor)]);
				t.setTextGravity(e.ViewGeometry.Gravity.TopLeft);
				t.setAttributes(this._sheet.currencyLabel);
				var k = this._balanceButton.getBalanceLabel();
				k.setFrame([this.xSize(this._sheet.balanceLabelXInsetFactor), this.ySize(this._sheet.balanceLabelYInsetFactor), this.xSize(this._sheet.balanceLabelWidthFactor), this.ySize(this._sheet.balanceLabelHeightFactor)]);
				k.setTextGravity(e.ViewGeometry.Gravity.TopLeft);
				k.setAttributes(this._sheet.balanceLabel);
				this.addChild(this._balanceButton)
			}
		},
		destroy: function() {
			if (this._retainedViews) {
				for (var k = 0; k < this._retainedViews.length; k++) {
					var l = this._retainedViews[k];
					if (l) {
						l.release()
					}
				}
			}
			this._retainedViews = new Array()
		},
		retainView: function(k) {
			if (k) {
				k.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(k)
			}
			return k
		},
		xSize: function(k) {
			return (k / 800) * this._totalWidth
		},
		ySize: function(k) {
			return (k / 480) * this._totalHeight
		},
		myProfileAreaX: function(k) {
			return this.xSize(k - this._sheet.myProfileAreaXRatio)
		},
		myProfileAreaY: function(k) {
			return this.ySize(k - this._sheet.myProfileAreaYRatio)
		},
		_updateRecentlyPlayed: function(k) {
			if (this._labelRecentlyPlayed && k) {
				this._labelRecentlyPlayed.setText(j("Recently played %1s", k.name))
			}
		},
		updateName: function(k) {
			this._labelName.setText(k)
		},
		updateMotto: function(n) {
			var l = this._user.motto.split("\n");
			n = "";
			for (var k = 0; k < l.length; k++) {
				n += l[k] + " "
			}
			this._labelMotto.setText(n)
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserProfileStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserProfileStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserProfileStyle"] = b;
	var d = {};
	d.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var a = d.Style.ScaledCorners;
	var c = d.Style.ScaledTextSize;
	d.Style.sheet("social.us.userprofile", {
		buttonAddUser: {
			normalGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"]
			},
			highlightedGradient: {
				corners: "8.0 8.0 8.0 8.0",
				gradient: ["FF5B971B 0.000", "FF397210 1.000"]
			},
			textColor: "FFFFFFFF",
			textSize: c(14),
			textFont: d.Style.defaultBoldFontFace,
			textShadow: "33000000 1.0 {0.0,-2.0}",
			disabled: {
				gradient: {},
				textColor: "FF000000"
			}
		},
		friendsHeader: {
			gradient: {
				gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
				innerLine: "FFC9D1DA 1.0"
			}
		},
		friendsArea: {
			gradient: {
				gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
				innerLine: "FFC9D1DA 1.0"
			},
			backgroundColor: "FFFFFFFF"
		},
		friendIcon: {},
		friendIconGamerTag: {
			textGravity: [0.5, 0],
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(14),
			textColor: "FF00319a"
		},
		friendIconAvatarGradient: {
			corners: a(4),
			outerLine: "FFFFFFFF 3",
			innerLine: "FFC9D1DA 2"
		},
		friendIconAvatarGradientPress: {
			corners: a(4),
			outerLine: "FFFFFFFF 3",
			innerLine: "66000000 10"
		},
		gamesHeader: {
			gradient: {
				gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
				innerLine: "FFC9D1DA 1.0"
			}
		},
		gamesArea: {
			gradient: {
				gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
				innerLine: "FFC9D1DA 1.0"
			},
			backgroundColor: "FFFFFFFF"
		},
		gameIcon: {},
		gameIconGameName: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(13),
			textColor: "FF004AA9",
			textGravity: [0.5, 0]
		},
		gameIconAddGameLabel: {
			textColor: "FF7E889A"
		},
		gameIconMargin: 18,
		gameIconSize: 120,
		gameIconLabelHeight: 55,
		gameLabelTopMargin: 5,
		gameIconImage: {},
		gameIconImageGradientPress: {
			corners: a(20),
			outerLine: "FFFFFFFF 3",
			innerLine: "66000000 10"
		},
		gameIconImageAddGame: {
			normalGradient: {
				corners: "10.0 10.0 10.0 10.0",
				innerShadow: "FF8093A6 1.0 {0.0,-2.0}",
				gradient: ["FFB3C3CF 0.000", "FFB3C3CF 1.000"]
			},
			highlightedGradient: {
				corners: "10.0 10.0 10.0 10.0",
				innerShadow: "FF718EA2 1.0 {0.0,-1.0}",
				gradient: ["FFA4B7C8 0.000", "FFA4B7C8 1.000"]
			}
		},
		buttonArea: {
			gradient: {
				gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
				innerLine: "FFC9D1DA 1.0"
			}
		},
		profileAreaHFactor: (245 / 480),
		friendsHeaderHFactor: (64 / 480),
		friendsAreaHFactor: (122 / 480),
		gamesHeaderHFactor: (64 / 480),
		gamesAreaHFactor: (132 / 480),
		gamesAreaWFactor: (578 / 800),
		buttonAreaHFactor: (100 / 480),
		postAreaHFactor: (200 / 480),
		friendsHeaderLabel: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(13),
			textColor: "FF000000",
			textGravity: [0, 0.5]
		},
		friendsTopMargin: 2,
		gamesHeaderLabel: {
			textFont: d.Style.defaultBoldFontFace,
			textSize: c(13),
			textColor: "FF000000",
			textGravity: [0, 0.5]
		},
		buttonAddUserX: 466,
		buttonAddUserYFactor: (3 / 4),
		buttonAddUserWFactor: (312 / 582),
		buttonAddUserHFactor: (1 / 5),
		gamesHeaderLabelXFactor: (13 / 582),
		gamesHeaderLabelYFactor: (13 / 56),
		gamesHeaderLabelWFactor: (373 / 582),
		gamesHeaderLabelHFactor: (28 / 56),
		friendsHeaderLabelXFactor: (13 / 582),
		friendsHeaderLabelYFactor: (13 / 56),
		friendsHeaderLabelWFactor: (373 / 582),
		friendsHeaderLabelHFactor: (28 / 56),
		postHeaderLabelXFactor: (7 / 582),
		postHeaderLabelYFactor: (13 / 56),
		postHeaderLabelWFactor: (373 / 582),
		postHeaderLabelHFactor: (28 / 56),
		postHeaderLabelFontFactor: (13 / 23),
		postTextWFactor: (435 / 582),
		postTextHFactor: (46 / 64),
		editPost: {
			textColor: "FF000000",
			textSize: c(12),
			gradient: {
				outerLine: "FF000000 2.0",
				gradient: ["FFC9C9C9 0.0", "FFD9D9D9 0.1", "FFEDEDED 1.0"],
				corners: "6.0 6.0 6.0 6.0"
			}
		},
		buttonViewAllFriendsXFactor: (425 / 582),
		buttonViewAllFriendsYFactor: (8 / 64),
		buttonViewAllFriendsWFactor: (141 / 582),
		buttonViewAllFriendsHFactor: (46 / 64),
		buttonViewAllGamesXFactor: (425 / 582),
		buttonViewAllGamesYFactor: (8 / 64),
		buttonViewAllGamesWFactor: (141 / 582),
		buttonViewAllGamesHFactor: (46 / 64),
		buttonUnfriendUserXFactor: (12 / 582),
		buttonUnfriendUserYFactor: (18 / 80),
		buttonUnfriendUserWFactor: (180 / 582),
		buttonUnfriendUserHFactor: (46 / 80),
		buttonReportUserXFactor: (199 / 582),
		buttonReportUserYFactor: (18 / 80),
		buttonReportUserWFactor: (180 / 582),
		buttonReportUserHFactor: (46 / 80),
		buttonBlockUserXFactor: (384 / 582),
		buttonBlockUserYFactor: (18 / 80),
		buttonBlockUserWFactor: (180 / 582),
		buttonBlockUserHFactor: (46 / 80),
		friendIconSizeFactor: (115 / 111),
		friendIconSizeFactorIOS: (100 / 111),
		friendIconGamerTagXFactor: (12 / 582),
		friendIconGamerTagYFactor: (82 / 111),
		friendIconGamerTagWFactor: (105 / 582),
		friendIconGamerTagHFactor: (45 / 111),
		friendIconAvatarXFactor: (32 / 582),
		friendIconAvatarYFactor: (3 / 105),
		friendIconAvatarWFactor: (78 / 105),
		friendIconAvatarHFactor: (78 / 105)
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyRequest"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyRequest"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyRequest"] = d;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyOauth1");
	var m = require("NGCore/Client/Core");
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session");
	var k = require("NGCore/Client/Network").Network;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var h = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var e = require("NGCore/Client/Social/_Internal/US/Assets/Localization").Localization;
	var l = function(q, o) {
		var p = function(s) {
			var r = "" + s.substr(0, 1).toUpperCase() + s.substr(1, s.length - 1);
			q.prototype["set" + r] = function(t) {
				this[s] = t
			};
			q.prototype["get" + r] = function() {
				return this[s]
			}
		};
		for (var n = 0; n < o.length; n++) {
			p(o[n])
		}
	};
	var f = function(p, o, n) {
		f._initialize();
		this.apiDomain = b.PlusRequest.apiDomain;
		this.secure = (f.getServerMode() == f.serverModes.production);
		this.apiMethod = p;
		this.httpMethod = o || "GET";
		this.httpHeaders = {};
		this.queryParams = {};
		this.authenticationParameters = {};
		this.authenticationType = n || f.authenticationTypes.OAuth1
	};
	f.classname = "DonkeyRequest";
	f._initialize = function() {
		var n = NgApplication.getInstance();
		if (m.Core.Capabilities.getSocialServer()) {
			f.apiDomain = m.Core.Capabilities.getSocialServer();
			NgLogD("DonkeyRequest: Social server! " + f.apiDomain)
		} else {
			f.setServerMode(f.serverModes.partner)
		}
		NgLogD("DonkeyRequest: social server set to: " + f.apiDomain);
		f._initialize = function() {}
	};
	l(f, ["apiMethod", "entityTag", "secure", "httpHeaders", "httpMethod", "postBody", "apiDomain", "queryParams", "authenticationType", "authenticationParameters"]);
	f.apiVersion = "1";
	f.__defineSetter__("apiDomain", function(n) {
		if (n || !f._apiDomain) {
			f._apiDomain = n
		}
	});
	f.__defineGetter__("apiDomain", function() {
		var n = f._apiDomain;
		if (!n) {
			n = "app-sandbox.mobage.com"
		}
		return n
	});
	f.apiDomain = null;
	f.serverModes = {
		staging: "staging",
		integration: "integration",
		partner: "sandbox",
		sandbox: "sandbox",
		production: "production",
		unknown: "unknown"
	};
	f.authenticationTypes = {
		OAuth1: "OAuth1",
		OAuth2: "OAuth2",
		None: "None"
	};
	f.getServerMode = function() {
		f._initialize();
		var o = f.apiDomain;
		var n = f.serverModes;
		var p = n.unknown;
		if (o == "staging.plusplus.com" || o == "app-staging.mobage.com" || o == "app.staging.mobage.com") {
			p = n.staging
		} else {
			if (o == "partner.plusplus.com" || o == "app-sandbox.mobage.com") {
				p = n.partner
			} else {
				if (o == "integration.plusplus.com" || o == "app-integration.mobage.com" || o == "app.integration.mobage.com") {
					p = n.integration
				} else {
					if (o == "app.plusplus.com" || o == "app.mobage.com") {
						p = n.production
					}
				}
			}
		}
		NgLogD("DonkeyRequest: Getting server mode: " + p);
		return p
	};
	f.setServerMode = function(o) {
		var n = f.serverModes;
		if (o == n.staging) {
			f.apiDomain = "app.staging.mobage.com"
		} else {
			if (o == n.partner) {
				f.apiDomain = "app-sandbox.mobage.com"
			} else {
				if (o == n.integration) {
					f.apiDomain = "app.integration.mobage.com"
				} else {
					if (o == n.production) {
						f.apiDomain = "app.mobage.com"
					}
				}
			}
		}
	};
	f.serverModeIsProduction = function() {
		return (f.getServerMode() === f.serverModes.production)
	};
	f.prototype.send = function(n) {
		var o = this._prepareRequest();
		var p;
		o.onreadystatechange = function() {
			if (o.readyState == 4) {
				p = o.getUnflattenedResponseHeaders();
				var r = o.responseText;
				var q = o.error;
				var t = o.getResponseHeader("Content-Type") || "text";
				if (t.indexOf("application/json") != -1) {
					try {
						r = JSON.parse(r)
					} catch (s) {
						NgLogE("EXCEPTION - Could not parse JSON data: " + s + " - " + r);
						q = s
					}
					if (r && r.error_msg) {
						q = r.error_msg
					}
				}
				o.statusClass = o.status - (o.status % 100);
				if (o.statusClass !== 200 && o.status !== 304) {
					q = h("Please check your network connection settings.")
				}
				n(q, r, p, o.status)
			}
		};
		o.send(this._postData)
	};
	f.appKey = function() {
		return a.Session.getCurrentSession().appKey()
	};
	f.appVersion = function() {
		return a.Session.getCurrentSession().appVersion()
	};
	f.getPlatformVersion = function() {
		return "1.0"
	};
	f.getOAuthInfo = function() {
		return a.Session.getCurrentSession().OAuthConsumerInfo()
	};
	f.prototype.getRequestURL = function() {
		var n = f.appKey();
		var p = [(this.apiDomain || f.apiDomain), f.apiVersion, n, this.apiMethod];
		var o = "" + (this.secure ? "https" : "http") + "://" + p.join("/");
		return o
	};
	f.prototype._encodeArrayOrObject = function(p) {
		var n = [];
		if (p instanceof Array) {
			var q = null;
			for (var o = 0; o < p.length; o++) {
				q = p[o];
				n.push(encodeURIComponent(q[0]) + "=" + encodeURIComponent(q[1]))
			}
		} else {
			for (j in p) {
				n.push(encodeURIComponent(j) + "=" + encodeURIComponent(p[j]))
			}
		}
		return n.join("&")
	};
	f.prototype._appendUrlParameters = function(n) {
		if (!this.queryParams || (this.queryParams.length === 0) || (Object.getOwnPropertyNames(this.queryParams).length === 0)) {
			return n
		}
		if (n.indexOf("?", 0) >= 0) {
			n += "&"
		} else {
			n += "?"
		}
		return n + this._encodeArrayOrObject(this.queryParams)
	};
	f.prototype._createPostBody = function() {
		if (!this.postBody || typeof this.postBody === "string") {
			return this.postBody
		}
		return this._encodeArrayOrObject(this.postBody)
	};
	f.prototype._prepareRequest = function() {
		this.request = new k.XHR();
		var v;
		var n = this.getHttpMethod();
		var x = this.getRequestURL();
		this._fullUrl = this._appendUrlParameters(x);
		NgLogD("DonkeyRequest: " + n + " " + this._fullUrl);
		if (n !== "GET") {
			this._postData = this._createPostBody()
		}
		var u = this.httpHeaders["Content-Type"];
		if (!u && (n === "POST")) {
			u = "application/x-www-form-urlencoded";
			this.httpHeaders["Content-Type"] = u
		}
		if (this.authenticationType === f.authenticationTypes.OAuth1) {
			var q = null;
			var r = f.getOAuthInfo();
			for (q in r) {
				this.authenticationParameters[q] = r[q]
			}
		}
		this.request.open(n, this._fullUrl, true);
		var s = null;
		if (this.authenticationType == f.authenticationTypes.OAuth1) {
			s = c.DonkeyOauth1.authenticate(this)
		} else {
			if (this.authenticationType == f.authenticationTypes.OAuth2) {
				s = "bearer: " + a.Session.getCurrentSession().OAuth2Token()
			}
		}
		if (s) {
			this.request.setRequestHeader("Authorization", s)
		}
		var w = "" + f.appKey() + "/" + f.appVersion() + " PlusPlus/" + f.getPlatformVersion();
		this.request.setRequestHeader("User-Agent", w);
		this.request.setRequestHeader("Accept", "application/json");
		var o = m.Core.Capabilities;
		var t = false;
		if ((typeof o.getPlatformOS() == "undefined") || (o.getPlatformOS().toLowerCase() != "android" && o.getPlatformOS().toLowerCase() != "flash")) {
			t = true
		}
		this.request.setRequestHeader("Accept-Encoding", (t ? "gzip" : ""));
		this.request.setRequestHeader("Accept-Language", e.getAcceptLanguage());
		if (this.httpHeaders) {
			for (v in this.httpHeaders) {
				if (this.httpHeaders.hasOwnProperty(v)) {
					this.request.setRequestHeader(v, this.httpHeaders[v])
				}
			}
		}
		this.request.setRequestHeader("X-Stat-Session", m.Core.Analytics._getPipe().getMeta("sid"));
		if (this.entityTag) {
			this.request.setRequestHeader("If-None-Match", this.entityTag)
		}
		return this.request
	};
	for (var j in f.prototype) {
		if (f.prototype.hasOwnProperty(j)) {
			var g = f.prototype[j];
			g.displayName = "DonkeyRequest." + j + "()"
		}
	}
	f.noOp = function() {};
	d.DonkeyRequest = f;
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/OpenSocial"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/OpenSocial"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/OpenSocial"] = a;
	a.OpenSocial = {
		populateErrors: function(c, e, f, b) {
			var d = b - b % 100;
			if (e && e.success === false) {
				c = {
					errorCode: e.error,
					description: e.error_msg
				}
			} else {
				if (e && e.Error && d != 200) {
					c = {
						errorCode: e.Error.Code,
						description: e.Error.Message
					}
				} else {
					if (c && d != 200) {
						c = {
							errorCode: b,
							description: c
						};
						e = null
					}
				}
			}
			return {
				error: c,
				data: e
			}
		},
		populatePeopleFields: function(c) {
			var e = ["hasApp", "thumbnailUrl"];
			if (c instanceof Array) {
				var b = {
					hasApp: true,
					thumbnailUrl: true,
					id: true,
					nickname: true
				};
				for (var d = 0; d < c.length; d++) {
					if (!(c[d] in b)) {
						e.push(c[d])
					}
				}
			}
			return e
		},
		stripBlacklist: function(d) {
			var b = [];
			if (d && d.entry instanceof Array) {
				for (var c = 0; c < d.entry.length; c++) {
					b.push(d.entry[c]["targetId"])
				}
			} else {
				if (d) {
					b.push(d.targetId)
				}
			}
			return b
		},
		keys: function(d) {
			if (!(d instanceof Object)) {
				throw TypeError("Object.keys called on non-object")
			}
			var b = [];
			for (var c in d) {
				if (d.hasOwnProperty(c)) {
					b.push(c)
				}
			}
			return b
		}
	};
	if (typeof Object.keys == "function") {
		a.OpenSocial.keys = Object.keys
	}
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyOauth1"] = function() {
	var A = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyOauth1"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Common/DonkeyOauth1"] = A;
	var f = require("NGCore/Client/Core/SHA1").SHA1;
	var b;
	if ((typeof b == "undefined") || (b === null)) {
		b = {}
	}
	b.setProperties = function p(B, D) {
		if (B !== null && D !== null) {
			for (var C in D) {
				if (D.hasOwnProperty(C)) {
					B[C] = D[C]
				}
			}
		}
		return B
	};
	b.setProperties(b, {
		percentEncode: function t(C) {
			if ((typeof C == "undefined") || (C === null)) {
				return ""
			}
			if (C instanceof Array) {
				var D = "";
				for (var B = 0; B < C.length; ++C) {
					if (D !== "") {
						D += "&"
					}
					D += b.percentEncode(C[B])
				}
				return D
			}
			C = encodeURIComponent(C);
			C = C.replace(/\!/g, "%21");
			C = C.replace(/\*/g, "%2A");
			C = C.replace(/\'/g, "%27");
			C = C.replace(/\(/g, "%28");
			C = C.replace(/\)/g, "%29");
			return C
		},
		decodePercent: function r(B) {
			if (B !== null) {
				B = B.replace(/\+/g, " ")
			}
			return decodeURIComponent(B)
		},
		formEncode: function o(C) {
			var B = "";
			var E = b.getParameterList(C);
			for (var F = 0; F < E.length; ++F) {
				var D = E[F][1];
				if ((typeof D == "undefined") || D === null) {
					D = ""
				}
				if (B !== "") {
					B += "&"
				}
				B += b.percentEncode(E[F][0]) + "=" + b.percentEncode(D)
			}
			return B
		},
		decodeForm: function k(E) {
			var G = [];
			var I = E.split("&");
			for (var H = 0; H < I.length; ++H) {
				var B = I[H];
				if (B === "") {
					continue
				}
				var D = B.indexOf("=");
				var C;
				var F;
				if (D < 0) {
					C = b.decodePercent(B);
					F = null
				} else {
					C = b.decodePercent(B.substring(0, D));
					F = b.decodePercent(B.substring(D + 1))
				}
				G.push([C, F])
			}
			return G
		},
		getParameterList: function l(B) {
			if ((typeof B == "undefined") || (B === null)) {
				return []
			}
			if (typeof B != "object") {
				return b.decodeForm(B + "")
			}
			if (B instanceof Array) {
				return B
			}
			var C = [];
			for (var D in B) {
				if (B.hasOwnProperty(D)) {
					C.push([D, B[D]])
				}
			}
			return C
		},
		appendParameters: function l(D, B) {
			for (var C = 0; C < B.length; C++) {
				D.push(B[C])
			}
		},
		authenticate: function m(H) {
			var I = H.getRequestURL();
			var E = b.SignatureMethod.parseUri(I);
			var F = this.getParameterList(H.queryParams);
			if (H.getHttpHeaders()["Content-Type"] === "application/x-www-form-urlencoded") {
				this.appendParameters(F, this.getParameterList(H.postBody))
			}
			this.appendParameters(F, this.getParameterList(E.query));
			var K = H.authenticationParameters;
			var G = {};
			G.oauth_consumer_key = K.consumerKey;
			G.oauth_token = K.token;
			G.oauth_version = "1.0";
			G.oauth_timestamp = b.timestamp();
			G.oauth_nonce = b.nonce(6);
			G.oauth_signature_method = K.signature_method || "HMAC-SHA1";
			K.oauth_signature_method = G.oauth_signature_method;
			if (K.realm) {
				G.realm = K.realm
			}
			var C = null;
			for (C in G) {
				F.push([C, G[C]])
			}
			var B = b.SignatureMethod.getBaseString(H.getHttpMethod(), E, F);
			var D = b.SignatureMethod.sign(K, B);
			G.oauth_signature = D;
			var J = this.getAuthorizationHeader(G);
			H.httpHeaders.Authorization = J;
			return J
		},
		getAuthorizationHeader: function j(B) {
			var C = [];
			var D = null;
			for (D in B) {
				C.push(D + '="' + b.percentEncode(B[D]) + '"')
			}
			return "OAuth " + C.join(",")
		},
		correctTimestamp: function h(B) {
			b.timeCorrectionMsec = (B * 1000) - (new Date()).getTime()
		},
		timeCorrectionMsec: 0,
		timestamp: function c() {
			var B = (new Date()).getTime() + b.timeCorrectionMsec;
			return Math.floor(B / 1000)
		},
		nonce: function s(F) {
			var E = b.nonce.CHARS;
			var B = "";
			for (var D = 0; D < F; ++D) {
				var C = Math.floor(Math.random() * E.length);
				B += E.substring(C, C + 1)
			}
			return B
		}
	});
	b.nonce.CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
	b.declareClass = function g(E, B, D) {
		var F = E[B];
		E[B] = D;
		if (D !== null && F !== null) {
			for (var C in F) {
				if (C != "prototype") {
					D[C] = F[C]
				}
			}
		}
		return D
	};
	b.declareClass(b, "SignatureMethod", function u() {});
	b.setProperties(b.SignatureMethod.prototype, {
		sign: function y(C) {
			var B = this.getSignature(C);
			return B
		},
		initialize: function a(D, B) {
			var C;
			if ((typeof B.accessorSecret != "undefined") && B.accessorSecret !== null && D.length > 9 && D.substring(D.length - 9) == "-Accessor") {
				C = B.accessorSecret
			} else {
				C = B.consumerSecret
			}
			this.key = b.percentEncode(C) + "&" + b.percentEncode(B.tokenSecret)
		}
	});
	b.setProperties(b.SignatureMethod, {
		sign: function y(B, D) {
			var C = B.oauth_signature_method;
			if ((typeof C == "undefined") || C === null || C === "") {
				C = "HMAC-SHA1"
			}
			return b.SignatureMethod.newMethod(C, B).sign(D)
		},
		newMethod: function e(E, B) {
			var D = b.SignatureMethod.REGISTERED[E];
			if ((typeof D != "undefined") && (D !== null)) {
				var H = new D();
				H.initialize(E, B);
				return H
			}
			var G = new Error("signature_method_rejected");
			var C = "";
			for (var F in b.SignatureMethod.REGISTERED) {
				if (b.SignatureMethod.REGISTERED.hasOwnProperty(F)) {
					if (C !== "") {
						C += "&"
					}
					C += b.percentEncode(F)
				}
			}
			G.oauth_acceptable_signature_methods = C;
			throw G
		},
		REGISTERED: {},
		registerMethodClass: function w(C, B) {
			for (var D = 0; D < C.length; ++D) {
				b.SignatureMethod.REGISTERED[C[D]] = B
			}
		},
		makeSubclass: function d(B) {
			var C = b.SignatureMethod;
			var D = function() {
				C.call(this)
			};
			D.prototype = new C();
			D.prototype.getSignature = B;
			D.prototype.constructor = D;
			return D
		},
		getBaseString: function x(D, C, B) {
			return b.percentEncode(D.toUpperCase()) + "&" + b.percentEncode(b.SignatureMethod.normalizeUri(C)) + "&" + b.percentEncode(b.SignatureMethod.normalizeParameters(B))
		},
		normalizeUri: function z(D) {
			var B = D.protocol.toLowerCase();
			var F = D.authority.toLowerCase();
			var G = true;
			if (G) {
				var C = F.lastIndexOf(":");
				if (C >= 0) {
					F = F.substring(0, C)
				}
			}
			var E = D.path;
			if (!E) {
				E = "/"
			}
			return B + "://" + F + E
		},
		parseUri: function q(F) {
			var E = {
				key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
				parser: {
					strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@\/]*):?([^:@\/]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
				}
			};
			var B = E.parser.strict.exec(F);
			var D = {};
			var C = 14;
			while (C--) {
				D[E.key[C]] = B[C] || ""
			}
			return D
		},
		normalizeParameters: function n(F) {
			if ((typeof F == "undefined") || F === null) {
				return ""
			}
			var D = 0;
			var G = [];
			for (D = 0; D < F.length; D++) {
				var C = F[D];
				G.push([b.percentEncode(C[0]) + " " + b.percentEncode(C[1]), C])
			}
			G.sort(function(I, H) {
				if (I[0] < H[0]) {
					return -1
				}
				if (I[0] > H[0]) {
					return 1
				}
				return 0
			});
			var B = [];
			for (var E = 0; E < G.length; ++E) {
				B.push(G[E][1])
			}
			return b.formEncode(B)
		}
	});
	b.SignatureMethod.registerMethodClass(["PLAINTEXT", "PLAINTEXT-Accessor"], b.SignatureMethod.makeSubclass(function v(B) {
		return this.key
	}));
	b.SignatureMethod.registerMethodClass(["HMAC-SHA1", "HMAC-SHA1-Accessor"], b.SignatureMethod.makeSubclass(function v(C) {
		var B = f.b64_hmac_sha1(this.key, C, "=");
		NgLogD("Donkey Signature: " + B);
		return B
	}));
	if ((typeof A != "undefined") && A) {
		A.DonkeyOauth1 = b
	}
	return A
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ConversationWallView"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ConversationWallView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ConversationWallView"] = e;
	var c = require("NGCore/Client/UI").UI;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		}
	});
	var h = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCViewList").CCViewList;
	var g = a({
		key: "content",
		component: (k.Components).EditTextArea,
		altKey: "field",
		disableViewAccessorRemapping: true
	}, {
		key: "submitButton",
		component: (k.Components).UnspammableButton,
		disableViewAccessorRemapping: true
	}, (k.Components).AddOrders.Generator("content", "submitButton"), (k.Components).Layouts.TwoHorizontalGenerator("content", "submitButton"), {
		classname: "WallPostView",
		initialize: function($super) {
			$super();
			this.submitButton.setText(h("Post"));
			this.content.setPlaceholder(h("Post a Reply"));
			b.CommonElements.textBox.applyTo(this.content);
			b.CommonElements.standardButton.applyTo(this.submitButton)
		}
	});
	var j = e.ConversationWallView = f.subclass({
		classname: "ConversationWallView",
		initialize: function($super, l) {
			this._compositePrepare();
			this._compositeInits.footer = function(m) {
				this[m] = (new g()).retain()
			};
			$super(l);
			return this
		},
		layoutSubviews: function($super) {
			var l = new(c.ViewGeometry.Rect)(this.getFrame());
			if (l.isEmpty()) {
				return
			}
			this.footer.setFrameSize([l.w, l.w * (1 / 9)]);
			$super()
		},
		setScrollPosition: function(l, m) {
			this.content.setScrollPosition([l, m])
		},
		getHeaderHeight: function() {
			var l = this.header.getFrame();
			return l[3]
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/WallCmdViewController"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/WallCmdViewController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/WallCmdViewController"] = g;
	var e = require("NGCore/Client/UI").UI;
	var j = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Device").Device;
	var f = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		ModalDialog: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ModalDialog").ReportUserModalDialog
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		Wall: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall").Wall
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		WallCmdView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallCmdView").WallCmdView
		},
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		},
		WallMenu: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/WallStyle").WallMenu
		}
	});
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var d = j.MessageListener.subclass({
		classname: "WallCmd_KeyListener"
	});
	var h = g.WallCmdViewController = c.subclass({
		classname: "WallCmdViewController",
		_user: null,
		_conversation: null,
		_containerFrame: null,
		_cb: null,
		_pushConversationWallCB: null,
		_buttonOffset: null,
		_isWallUI: null,
		_cmds: null,
		initialize: function($super, p, r, l, o, q, n, m) {
			$super();
			this._user = p;
			this._conversation = r;
			this._containerFrame = l;
			this._cb = o;
			this._pushConversationWallCB = q;
			this._buttonOffset = n;
			this._isWallUI = m;
			var s = new j.MessageListener();
			a.UnspammableButton.addDeviceKeyListener(s, this.zombieSafeCallback(function(t) {
				NgLogD("WallCmdViewController caught the event");
				if (t.code === b.KeyEmitter.Keycode.menu) {
					this.destroy()
				}
				return false
			}, this.bind(function() {
				b.KeyEmitter.removeListener(s);
				s.destroy()
			})), 99999 * 2);
			this.kListener = new d();
			a.UnspammableButton.addDeviceKeyListener(this.kListener, this.onKeyPressed.bind(this), 99999);
			this.view()._headerHeightRatio = 0;
			return this
		},
		onKeyPressed: function(l) {
			if (l.code === b.KeyEmitter.Keycode.back) {
				this.destroy()
			}
			return false
		},
		loadView: function($super) {
			$super();
			this.setView(new a.WallCmdView(this.getCommandList(), this._containerFrame, this._buttonOffset));
			this.view().layoutSubviews()
		},
		getCommandList: function() {
			var m = new Array();
			var l = false;
			if (this._isWallUI) {
				l = a.Session.getCurrentSession().user().gamertag === this._user.gamertag
			}
			var n = false;
			if (!this._isWallUI) {
				n = a.Session.getCurrentSession().user().gamertag === this._user.gamertag
			}
			if (this._isWallUI) {
				if (a.Session.getCurrentSession().user().gamertag === this._conversation.author_gamertag || l) {
					m.push("delete")
				}
			} else {
				if (a.Session.getCurrentSession().user().gamertag === this._conversation.author_gamertag || n) {
					m.push("delete")
				}
			}
			if (a.Session.getCurrentSession().user().gamertag !== this._conversation.author_gamertag) {
				m.push("report")
			}
			if (this._isWallUI) {
				m.push("comment")
			}
			return m
		},
		destroy: function() {
			if (this.kListener) {
				b.KeyEmitter.removeListener(this.kListener);
				this.kListener = undefined
			}
		},
		setConversationID: function(l) {
			this._conversationID = l;
			NgLogD("xxx conversationID " + l)
		},
		deleteCmdOnClick: function() {
			var m = (new e.AlertDialog()).retain();
			m.setTitle(k("Error"));
			m.setText(k("Not able to delete. Please try again later."));
			m.setChoices([k("OK")]);
			m.onchoice = (function(n) {
				this._cb();
				m.release();
				m = null
			}).bind(this);
			var l = (new e.AlertDialog()).retain();
			l.setTitle(k("Delete This Post"));
			l.setText(k("Are you sure you want to delete this post?"));
			l.setChoices([k("Yes"), k("No")]);
			l.onchoice = (function(n) {
				if (n.choice !== 0) {
					return
				}
				l.release();
				l = null;
				if (this._isWallUI) {
					a.Wall.deleteConversation(this._user.recordID, this._conversation.conversationID, false, (function(o) {
						if (o) {
							m.show()
						} else {
							this._cb()
						}
						this.destroy()
					}).bind(this))
				} else {
					a.Wall.deletePost(this._user.recordID, this._conversationID, this._conversation.id, (function(o) {
						if (o) {
							m.show()
						} else {
							this._cb()
						}
						this.destroy()
					}).bind(this))
				}
			}).bind(this);
			l.show()
		},
		commentCmdOnClick: function() {
			this._pushConversationWallCB(this._conversation, this._user);
			this.destroy()
		},
		viewCmdOnClick: function() {
			this._pushConversationWallCB(this._conversation, this._user);
			this.destroy()
		},
		reportCmdOnClick: function() {
			NgLogD("reportBtn onClick");
			var l = function(m) {
				if (m === a.Session.getCurrentSession().user().gamertag) {
					return
				}
				var n;
				if (this._isWallUI) {
					n = {
						content_type: "wall",
						content_summary: this._conversation.message,
						content_row_id: this._conversation.conversationID,
						content_column_id: this._conversation.id
					}
				} else {
					n = {
						content_type: "wall",
						content_summary: this._conversation.message,
						content_row_id: this._conversationID,
						content_column_id: this._conversation.id
					}
				}
				a.User.getUserWithGamertag(m, function(p, o) {
					if (p) {
						NgLogD("Error: WallCmdViewController.js:report: " + p);
						var q = (new e.AlertDialog()).retain();
						q.setTitle(k("Error"));
						q.setText(p);
						q.setChoices([k("OK")]);
						q.onchoice = function() {
							q.release();
							q = null
						};
						q.show()
					} else {
						this._modalDialogObj = new a.ModalDialog(o, n)
					}
				})
			}.bind(this);
			l(this._conversation.author_gamertag);
			this.destroy()
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/WallStyle"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/WallStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/WallStyle"] = c;
	var f = {};
	f.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var b = d.ScaledCorners;
	var e = d.ScaledTextSize;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements;
	d.lazyLoad(c, "Wall", function() {
		return {
			children: {
				_wallHeaderLabel: {
					style: {
						textFont: f.Style.defaultBoldFontFace,
						textSize: e(13),
						textColor: "FF000000",
						textGravity: [0, 0]
					}
				}
			},
			extras: {
				viewRatio: {
					wallHeaderTopMargin: 2,
					postAreaHFactor: (85 / 480),
					postHeaderLabelYFactor: (0 / 85),
					postHeaderLabelHFactor: (30 / 85),
					postTextYFactor: (30 / 85),
					postTextHFactor: (50 / 85),
					buttonPostXFactor: (455 / 582),
					buttonPostWFactor: (120 / 582),
					buttonPostHFactor: (47 / 85),
					refreshButtonYFactor: 0.0625,
					refreshButtonHFactor: (1 / 3)
				}
			}
		}
	});
	d.lazyLoad(c, "WallMenu", function() {
		return {
			children: {
				_text: {
					style: {
						textGravity: [0.5, 0],
						textFont: f.Style.defaultBoldFontFace,
						textSize: e(11),
						textColor: "FF00319a"
					}
				},
				_icon: {
					style: {
						imageInsets: [0, 0, 0, 0]
					}
				}
			},
			extras: {
				viewRatio: {
					wallMenuAreaHFactor: (115 / 480),
					backGroundAspectRatio: (533 / 88),
					wallBalloonLabelXFactor: (6 / 582),
					wallBalloonLabelYFactor: (75 / 111),
					wallBalloonLabelWFactor: (105 / 582),
					wallBalloonLabelHFactor: (100 / 111),
					wallIconXFactor: (32 / 582),
					wallIconYFactor: (19 / 105),
					wallIconWFactor: (56 / 105),
					wallIconHFactor: (56 / 105)
				}
			}
		}
	});
	f.Style.sheet("social.us.wall", {
		wallHeaderLabel: {
			textFont: f.Style.defaultBoldFontFace,
			textSize: e(13),
			textColor: "FF000000",
			textGravity: [0, 0]
		},
		wallHeaderTopMargin: 2,
		postAreaHFactor: (85 / 480),
		postHeaderLabelYFactor: (0 / 85),
		postHeaderLabelHFactor: (30 / 85),
		postTextYFactor: (30 / 85),
		postTextHFactor: (50 / 85),
		buttonPostXFactor: (455 / 582),
		buttonPostWFactor: (120 / 582),
		buttonPostHFactor: (47 / 85),
		refreshButtonYFactor: 0.0625,
		refreshButtonHFactor: (1 / 3)
	});
	f.Style.sheet("social.us.wall.menu", {
		wallIconLabel: {
			textGravity: [0.5, 0],
			textFont: f.Style.defaultBoldFontFace,
			textSize: e(11),
			textColor: "FF00319a"
		},
		wallIconImage: {
			imageInsets: [0, 0, 0, 0]
		},
		wallMenuAreaHFactor: (115 / 480),
		backGroundAspectRatio: (533 / 88),
		wallBalloonLabelXFactor: (6 / 582),
		wallBalloonLabelYFactor: (75 / 111),
		wallBalloonLabelWFactor: (105 / 582),
		wallBalloonLabelHFactor: (100 / 111),
		wallIconXFactor: (32 / 582),
		wallIconYFactor: (19 / 105),
		wallIconWFactor: (56 / 105),
		wallIconHFactor: (56 / 105)
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallCmdView"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallCmdView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallCmdView"] = c;
	var g = require("NGCore/Client/Core").Core;
	var f = require("NGCore/Client/UI").UI;
	var e = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		},
		WallMenu: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/WallStyle").WallMenu
		}
	});
	c.WallCmdView = f.View.subclass({
		classname: "WallCmdView",
		_comandCoverView: null,
		_backgroundView: null,
		_deleteCmd: null,
		_commentCmd: null,
		_viewCmd: null,
		_reportCmd: null,
		_commandListBackground: null,
		_divider: null,
		_cmds: null,
		_frame: null,
		_buttonOffset: null,
		initialize: function(h, l, k) {
			this._style = a.WallMenu;
			this._cmds = h;
			this._frame = l;
			this._buttonOffset = k;
			var j = this;
			this._comandCoverView = (new f.View()).retain();
			this._backgroundView = (new f.View()).retain();
			this._deleteCmd = (new d(b("Delete"), e.image("ListModal_Icon_Trash.png"), e.image("ListModal_Icon_Trash_downstate.png"), (function() {
				this.controller.deleteCmdOnClick()
			}).bind(this)).retain());
			this._commentCmd = (new d(b("Comment"), e.image("ListModal_Icon_Comment.png"), e.image("ListModal_Icon_Comment_downstate.png"), (function() {
				this.controller.commentCmdOnClick()
			}).bind(this)).retain());
			this._viewCmd = (new d(b("View"), e.image("ListModal_Icon_View.png"), e.image("ListModal_Icon_View.png"), (function() {
				this.controller.viewCmdOnClick()
			}).bind(this)).retain());
			this._reportCmd = (new d(b("Report"), e.image("ListModal_Icon_Report.png"), e.image("ListModal_Icon_Report_downstate.png"), (function() {
				this.controller.reportCmdOnClick()
			}).bind(this)).retain());
			this._commandListBackground = (new f.Image()).retain();
			this._divider = (new f.Image()).retain();
			if (this._cmds.length > 3) {
				this._commandListBackground.setImage(e.image("ListModal_Background.png"))
			} else {
				if (this._cmds.length > 2) {
					this._commandListBackground.setImage(e.image("ListModal_Background_Med.png"))
				} else {
					this._commandListBackground.setImage(e.image("ListModal_Background_Small.png"))
				}
			}
			this._divider.setImage(e.image("ListModal_Divider.png"));
			this._comandCoverView.onclick = (function() {
				this.controller.destroy()
			}).bind(this);
			this._backgroundView.addChild(this._commandListBackground);
			this._comandCoverView.addChild(this._backgroundView);
			f.Window.document.addChild(this._comandCoverView);
			this._style.applyTo(this)
		},
		layoutSubviews: function() {
			var k = f.Window.getWidth();
			var l = f.Window.getHeight();
			if (f.Window.getHeight() > f.Window.getWidth()) {
				k = f.Window.getHeight();
				l = f.Window.getWidth()
			}
			var j = this._style.extras.viewRatio;
			var u = this._frame[2] / j.backGroundAspectRatio;
			var n = (this._frame[1] + (this._frame[3] / 2)) - (u / 2);
			var m = new f.ViewGeometry.Rect(k - (this._frame[2] + this._buttonOffset), n, this._frame[2], u);
			this._backgroundView.setFrame(m);
			this._commandListBackground.setFrame([0, 0, this._frame[2], this._backgroundView.getFrame()[3]]);
			this._commandListBackground.setImageGravity([1, 0.5]);
			var q = new f.ViewGeometry.Rect(0, 0, k, l);
			this._comandCoverView.setFrame(q);
			var h = this._commandListBackground.getFrame();
			var s = h[2] / 4;
			var o = h[3] * 0.75;
			var t = s / 2;
			var p = ((h[3] - o) / 2) + h[1];
			if (this._deleteCmd) {
				this._deleteCmd.layoutSubviews();
				this._deleteCmd.setFrame(h[0] + t * 0.5, p, s, o)
			}
			this._reportCmd.setFrame(h[0] + s, p, s, o);
			this._divider.setFrame(h[0] + s * 1.5, p + o * 0.125, s, o * 0.75);
			this._viewCmd.setFrame(h[0] + s * 2, p, s, o);
			this._commentCmd.setFrame(h[0] + s * 3 - t * 0.5, p, s, o);
			this._reportCmd.layoutSubviews();
			this._viewCmd.layoutSubviews();
			this._commentCmd.layoutSubviews();
			this.createMenuButtons()
		},
		destroy: function() {
			if (this._comandCoverView) {
				this._comandCoverView.release()
			}
			if (this._backgroundView) {
				this._backgroundView.release()
			}
			if (this._deleteCmd) {
				this._deleteCmd.release()
			}
			if (this._commentCmd) {
				this._commentCmd.release()
			}
			if (this._viewCmd) {
				this._viewCmd.release()
			}
			if (this._reportCmd) {
				this._reportCmd.release()
			}
			if (this._commandListBackground) {
				this._commandListBackground.release()
			}
			if (this._divider) {
				this._divider.release()
			}
		},
		createMenuButtons: function() {
			var k = this._cmds;
			for (var j = 0; j < k.length; j++) {
				var n = k.length - j;
				var h = null;
				if (k[j] == "comment") {
					h = this._commentCmd
				} else {
					if (k[j] == "delete") {
						h = this._deleteCmd
					} else {
						if (k[j] == "report") {
							h = this._reportCmd
						}
					}
				}
				if (h) {
					var l = h.getFrame();
					var m = this._frame[2] / 4;
					l[0] = (this._backgroundView.getFrame()[2]) - (m * n);
					l[1] = 0;
					l[3] = this._backgroundView.getFrame()[3];
					h.setFrame(l);
					this._backgroundView.addChild(h)
				}
			}
		}
	});
	var d = f.View.subclass({
		classname: "CmdIcon",
		_icon: null,
		_text: "",
		initialize: function($super, l, h, j, k) {
			$super();
			this._style = a.WallMenu;
			this._icon = (new a.UnspammableButton()).retain();
			this._text = (new f.Label()).retain();
			this._icon.setImageFit(f.ViewGeometry.FitModes.Stretch);
			this._icon.setImage(h);
			this._icon.setImage(j, f.State.Pressed);
			this.addChild(this._icon);
			this._text.setText(l);
			this._text.setTextGravity(f.ViewGeometry.Gravity.TopCenter);
			this.addChild(this._text);
			if ((typeof k) == "function") {
				this._text.onclick = function() {
					k()
				};
				this._icon.onclick = function() {
					k()
				}
			}
			this._style.applyTo(this)
		},
		layoutSubviews: function() {
			var h = this._style.extras.viewRatio;
			this._friendsAreaHeight = g.Capabilities.getScreenWidth() * h.wallMenuAreaHFactor * 3 / 4;
			this._contentWidth = this._getContentWidth();
			this._icon.setFrame([h.wallIconXFactor * this._contentWidth, h.wallIconYFactor * this._friendsAreaHeight, h.wallIconWFactor * this._friendsAreaHeight, h.wallIconHFactor * this._friendsAreaHeight]);
			this._text.setFrame([h.wallBalloonLabelXFactor * this._contentWidth, h.wallBalloonLabelYFactor * this._friendsAreaHeight, h.wallBalloonLabelWFactor * this._contentWidth, h.wallBalloonLabelHFactor * this._friendsAreaHeight])
		},
		destroy: function() {
			if (this._icon) {
				this._icon.release();
				this._icon = null
			}
			if (this._text) {
				this._text.release();
				this._text = null
			}
		},
		_getContentWidth: function() {
			var h = g.Capabilities.getScreenHeight();
			return (1 - a.VerticalTabViewSizing.buttonContainerRatio - a.VerticalTabViewSizing.insetRatio) * h
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/WallStyle"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/WallStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/StyleSheets/WallStyle"] = c;
	var f = {};
	f.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var b = d.ScaledCorners;
	var e = d.ScaledTextSize;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/StyleSheets/Main").CommonElements;
	d.lazyLoad(c, "Wall", function() {
		return {
			children: {
				_wallHeaderLabel: {
					style: {
						textFont: f.Style.defaultBoldFontFace,
						textSize: e(13),
						textColor: "FF000000",
						textGravity: [0, 0]
					}
				}
			},
			extras: {
				viewRatio: {
					wallHeaderTopMargin: 2,
					postAreaHFactor: (85 / 480),
					postHeaderLabelYFactor: (0 / 85),
					postHeaderLabelHFactor: (30 / 85),
					postTextYFactor: (30 / 85),
					postTextHFactor: (50 / 85),
					buttonPostXFactor: (455 / 582),
					buttonPostWFactor: (120 / 582),
					buttonPostHFactor: (47 / 85),
					refreshButtonYFactor: 0.0625,
					refreshButtonHFactor: (1 / 3)
				}
			}
		}
	});
	d.lazyLoad(c, "WallMenu", function() {
		return {
			children: {
				_text: {
					style: {
						textGravity: [0.5, 0],
						textFont: f.Style.defaultBoldFontFace,
						textSize: e(11),
						textColor: "FF00319a"
					}
				},
				_icon: {
					style: {
						imageInsets: [0, 0, 0, 0]
					}
				}
			},
			extras: {
				viewRatio: {
					wallMenuAreaHFactor: (115 / 480),
					backGroundAspectRatio: (533 / 88),
					wallBalloonLabelXFactor: (6 / 582),
					wallBalloonLabelYFactor: (75 / 111),
					wallBalloonLabelWFactor: (105 / 582),
					wallBalloonLabelHFactor: (100 / 111),
					wallIconXFactor: (32 / 582),
					wallIconYFactor: (19 / 105),
					wallIconWFactor: (56 / 105),
					wallIconHFactor: (56 / 105)
				}
			}
		}
	});
	f.Style.sheet("social.us.wall", {
		wallHeaderLabel: {
			textFont: f.Style.defaultBoldFontFace,
			textSize: e(13),
			textColor: "FF000000",
			textGravity: [0, 0]
		},
		wallHeaderTopMargin: 2,
		postAreaHFactor: (85 / 480),
		postHeaderLabelYFactor: (0 / 85),
		postHeaderLabelHFactor: (30 / 85),
		postTextYFactor: (30 / 85),
		postTextHFactor: (50 / 85),
		buttonPostXFactor: (455 / 582),
		buttonPostWFactor: (120 / 582),
		buttonPostHFactor: (47 / 85),
		refreshButtonYFactor: 0.0625,
		refreshButtonHFactor: (1 / 3)
	});
	f.Style.sheet("social.us.wall.menu", {
		wallIconLabel: {
			textGravity: [0.5, 0],
			textFont: f.Style.defaultBoldFontFace,
			textSize: e(11),
			textColor: "FF00319a"
		},
		wallIconImage: {
			imageInsets: [0, 0, 0, 0]
		},
		wallMenuAreaHFactor: (115 / 480),
		backGroundAspectRatio: (533 / 88),
		wallBalloonLabelXFactor: (6 / 582),
		wallBalloonLabelYFactor: (75 / 111),
		wallBalloonLabelWFactor: (105 / 582),
		wallBalloonLabelHFactor: (100 / 111),
		wallIconXFactor: (32 / 582),
		wallIconYFactor: (19 / 105),
		wallIconWFactor: (56 / 105),
		wallIconHFactor: (56 / 105)
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/ZeroCaseMessageCell"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/ZeroCaseMessageCell"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/ZeroCaseMessageCell"] = f;
	var j = require("NGCore/Client/Core").Core;
	var e = require("NGCore/Client/UI").UI;
	var d = e.ViewGeometry.Rect;
	var c = e.ViewGeometry.Scale;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView").Composite;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents").Components;
	var h = f.ZeroCaseMessageCell = a({
		key: "title",
		component: g.Label
	}, {
		key: "content",
		component: g.Label
	}, {
		key: "actionButton",
		component: g.UnspammableButton
	}, g.AddOrders.Generator("title", "content", "actionButton"), {
		classname: "ZeroCaseMessageCell",
		initialize: function($super) {
			this._sheet = b.ListViewCellStyles.ZeroCaseMessageCell.extras;
			$super({});
			this._totalWidth = j.Capabilities.getScreenHeight();
			this._totalHeight = j.Capabilities.getScreenWidth();
			this._zeroCaseHeight = this._totalHeight * b.CommonElements.zeroCase.extras.heightFactor;
			b.ListViewCellStyles.ZeroCaseMessageCell.applyTo(this);
			this.content.setMaxLines(2);
			this.actionButton.setTextGravity([0.5, 0.5])
		},
		layoutSubviews: function($super) {
			if ($super && typeof $super === "function") {
				$super()
			}
			var n = new d(this.getFrame());
			if (n.isEmpty()) {
				return
			}
			var o = (n.h - this._zeroCaseHeight) / 2;
			var k = [n.w * this._sheet.titleXFactor, o + this._zeroCaseHeight * this._sheet.titleYFactor, n.w * this._sheet.titleWidthFactor, this._zeroCaseHeight * this._sheet.titleHeightFactor];
			var l = [n.w * this._sheet.contentXFactor, o + this._zeroCaseHeight * this._sheet.contentYFactor, n.w * this._sheet.contentWidthFactor, this._zeroCaseHeight * this._sheet.contentHeightFactor];
			var m = [n.w * this._sheet.actionButtonXFactor, o + this._zeroCaseHeight * this._sheet.actionButtonYFactor, n.w * this._sheet.actionButtonWidthFactor, this._zeroCaseHeight * this._sheet.actionButtonHeightFactor];
			this.title.setFrame(k);
			this.content.setFrame(l);
			this.actionButton.setFrame(m)
		},
		setZeroCaseTexts: function(k) {
			if (!k || k.length < 3) {
				return
			}
			if (k[0] !== undefined && k[0] !== null) {
				this.title.setText(k[0]);
				this.title.getTextMeasurementForState(e.State.Normal)
			}
			if (k[1] !== undefined && k[1] !== null) {
				this.content.setText(k[1]);
				this.content.getTextMeasurementForState(e.State.Normal)
			}
			if (k[2] !== undefined && k[2] !== null) {
				this.actionButton.setText(k[2])
			}
		},
		setZeroCaseButtonCallback: function(k) {
			if (k && typeof k == "function") {
				this.getActionButtonView().onclick = k
			}
		},
		setZeroCaseButtonEnabled: function(k) {
			this.getActionButtonView().setEnabled(k)
		},
		getButton: function() {
			return this.getActionButtonView()
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/SuggestedFriendsController"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/SuggestedFriendsController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/SuggestedFriendsController"] = f;
	var c = require("NGCore/Client/UI").UI;
	var k = require("NGCore/Client/Core/MessageListener").MessageListener;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var o = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DirectInviteSection").DirectInviteSection;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController").ContactsController;
	var l = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game;
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/IdleActor").IdleActor;
	var m = f.SuggestedFriendsController = h.subclass({
		classname: "SuggestedFriendsController",
		analyticsName: "SuggestedFriends",
		$ListItem: null,
		initialize: function() {
			this._suggestedFriendsStyle = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FindFriends").SuggestedFriends;
			this._idleActor = (new d()).retain();
			this._dirtyFriendsListenerSetup();
			this._updateFriendsListCache()
		},
		_suggestedFriendsStyle: null,
		plusMatchSection: null,
		pendingSection: null,
		directInviteSection: null,
		_idleActor: null,
		_idleAction: null,
		loadView: function($super) {
			$super();
			this._titleHeader = this.view().getHeaderView();
			this._titleHeader.setFrameSize([100, 100]);
			this._suggestedFriendsStyle.applyTo(this);
			this._titleHeader.button.setText(o("Refresh"));
			this._titleHeader.button.setFrameSize([100, 100]);
			this._titleHeader.button.setOnClick(this.bind(this._refreshData))
		},
		destroy: function() {
			if (this.plusMatchSection) {
				this.plusMatchSection.release()
			}
			if (this.pendingSection) {
				this.pendingSection.release();
				this.pendingSection = null
			}
			if (this.directInviteSection) {
				this.directInviteSection.release();
				this.directInviteSection = null
			}
			this._idleActor.release()
		},
		_dirtyFriendsListenerSetup: function() {
			var p = e.getCurrentSession().user();
			var q = new k();
			p.addListener(q, this.zombieSafeCallback(function(r) {
				if (!r || !r.buddies) {
					return
				}
				this._updateFriendsListCache()
			}, this.bind(function(r) {
				p.removeListener(q);
				q.destroy()
			})))
		},
		_updateFriendsListCache: function() {
			if (this._friendsListCacheUpdateInProgress) {
				return
			}
			this._friendsListCacheUpdateInProgress = true;
			var q = [];
			this._friendsListCacheReady = false;
			var p = e.getCurrentSession().user();
			p.getFollowersList().forAll(this.zombieSafeCallback(function(s, r) {
				q.push(r);
				s(true)
			}), this.zombieSafeCallback(function(u) {
				this.loge("_updateFriendsListCache finished");
				this._friendsListCacheUpdateInProgress = false;
				if (u) {
					this.scanState = a.ScanState.NotStarted;
					this.pendingSection.showError(u, this.bind(function() {
						this._updateFriendsListCache();
						this.startSearch()
					}));
					return
				}
				this._outgoingRelationships = q;
				this._friendsListCacheReady = true;
				if (this.plusMatchSection && this.plusMatchSection.getItems() && !this.plusMatchSection.getItems().length) {
					if (this._finishedScanning) {
						this._resultsReady()
					}
				} else {
					if (this.plusMatchSection && this.plusMatchSection.getItems().length === 0) {
						this._showNoResultsCase()
					} else {
						var t;
						var r = (this.plusMatchSection && this.plusMatchSection.getItems()) ? this.plusMatchSection.getItems() : [];
						for (var s = 0; s < r.length; s++) {
							if ((t = r[s]) && t.cell) {
								t._onSetView(t.cell)
							}
						}
					}
				}
			}))
		},
		willActivateTab: function($super) {
			$super();
			NgLogD("SuggestedFriendsController/willActivateTab begin");
			var p = new c.ViewGeometry.Rect(this.view().getFrame());
			var q = new c.ViewGeometry.Rect(this.view().getFrame());
			p.h = this._suggestedFriendsStyle.extras.headerHeightRatio * q.h;
			this.view().header.setFrame(p);
			this.view().header.button.setFrameSize([p.h * this._suggestedFriendsStyle.extras.refreshButtonWidthRatio, p.h]);
			this.view().layoutSubviews();
			if (!this._isTitleSet) {
				if (this.parentController.navController._host.isRunningActiveGame()) {
					b.getCurrentGame(function(s, r) {
						if (!s) {
							this._titleHeader.content.setText(o("People playing %1s", r.name));
							this._isTitleSet = true
						} else {
							NgLogD("Home Screen Last played icon: I think an active game is running but I failed to get it, Err: " + s);
							this._titleHeader.content.setText(o("People on Mobage"));
							this._isTitleSet = true
						}
					}.bind(this))
				} else {
					this._titleHeader.content.setText(o("People on Mobage"));
					this._isTitleSet = true
				}
			}
		},
		didActivateTab: function($super) {
			$super();
			this.parentController.navController._host.hideLoadingLabel();
			NgLogD("Activate suggested friends!");
			setTimeout(this.bind(function() {
				this.plusMatchSection = (new n()).retain();
				this.plusMatchSection.setRowHeightRatio(1 / 6);
				this.pendingSection = (new j()).retain();
				this.pendingSection.setPendingText(o("Getting Friend suggestions..."));
				this.directInviteSection = (new g()).retain();
				this._refreshData()
			}), 50)
		},
		_refreshData: function() {
			NgLogD("Suggested users: Refreshing");
			this.view().setSections([this.pendingSection, this.directInviteSection]);
			var q = this;
			this.allPlusUsers = [];
			this.plusMatchSection.setItems([]);
			this._finishedScanning = false;
			if (!this._idleAction) {
				this._idleAction = this.bind(function() {
					if (this._friendsListCacheReady) {
						this._resultsReady()
					}
				})
			}
			var p = e.getCurrentSession().user();
			p.getFeaturedUsersList().forAll(this.zombieSafeCallback(function(s, r) {
				this.allPlusUsers.push(r);
				this._idleActor.waitForIdleBeforeAction(this._idleAction);
				s(true)
			}), this.zombieSafeCallback(function(r) {
				this._finishedScanning = true;
				if (!r) {
					NgLogD("Finish getFeaturedUsersList");
					this._idleActor.waitForIdleBeforeAction(this._idleAction)
				} else {
					NgLogE("Error SuggestedFriends/getFeaturedUsersList: " + JSON.stringify(r));
					this.pendingSection.showError(r, true)
				}
			}), this.zombieSafeCallback(function(s, r) {
				NgLogD("SuggestedFriends: Cached lookup fully complete, needs UI refresh? " + !!r);
				if (!s && r) {
					this.allPlusUsers = [];
					p.getFeaturedUsersList().forAll(this.zombieSafeCallback(function(u, t) {
						this.allPlusUsers.push(t);
						u(true)
					}), this.zombieSafeCallback(function(t) {
						if (!t) {
							NgLogD("SuggestedFriends: Refreshing UI post cache update!");
							this.plusMatchSection.setItems([]);
							if (this._friendsListCacheReady) {
								this._resultsReady()
							}
						}
					}), true)
				}
			}))
		},
		_resultsReady: function() {
			var q, u, w, t, s, x = [];
			var p = [];
			var r = 0;
			var v = 0;
			var y = this.plusMatchSection.getItems() || [];
			w = y.slice();
			for (t = y.length; t < this.allPlusUsers.length; t++) {
				q = this.allPlusUsers[t];
				if (!q.isMutualFriend && this._outgoingRelationships.indexOf(q) != -1) {
					q.invited = true;
					r--
				}
				w.push(new a.FoundUserListItem(q))
			}
			if (!this._plusMatchSort) {
				this._plusMatchSort = function(A, z) {
					return (A.user.invited == z.user.invited) ? 0 : (A.user.invited ? 1 : -1)
				}
			}
			w.sort(this._plusMatchSort);
			for (t = v; t < w.length; t++) {
				w[t].odd = (t - v) % 2
			}
			this.plusMatchSection.setItems(w);
			if (!this._finishedScanning && this.view().getSections().indexOf(this.plusMatchSection) == -1) {
				this.view().setSections([this.pendingSection, this.plusMatchSection, this.directInviteSection])
			} else {
				if (this._finishedScanning && this.plusMatchSection && this.plusMatchSection.getItems().length === 0) {
					this._showNoResultsCase()
				} else {
					if (this._finishedScanning) {
						this.view().setSections([this.plusMatchSection, this.directInviteSection])
					}
				}
			}
		},
		_showNoResultsCase: function() {
			setTimeout(this.bind(function() {
				this.pendingSection.showError(o("No users found."));
				this.view().setSections([this.pendingSection, this.directInviteSection])
			}), 1);
			NgLogD("No Results Case")
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserSearchController"] = function() {
	var h = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserSearchController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserSearchController"] = h;
	var m = require("NGCore/Client/Core/Capabilities").Capabilities;
	var k = require("NGCore/Client/Core/MessageListener").MessageListener;
	var f = require("NGCore/Client/UI").UI;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		MBListViewSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection
		},
		PendingListSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection
		},
		DirectInviteSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DirectInviteSection").DirectInviteSection
		},
		ContactsController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController").ContactsController
		},
		User: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/User").User
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		ZeroCaseSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ZeroCaseSection").ZeroCaseSection
		},
		SessionUtils: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/SessionUtils").SessionUtils
		},
		ListViewCellStyles: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/ListViewCells").ListViewCells
		}
	});
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/Defines").Defines;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var n = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var e = f.ListViewItem.subclass({
		classname: "EmptyMessageSection_MessageItem",
		_reuseId: "EmptyMessageSection_MessageItem",
		initialize: function($super, o) {
			$super();
			NgLogD("Initing MessageItem: " + o);
			this.setMessage(o)
		},
		_message: "",
		setMessage: function(o) {
			this._message = o
		},
		_onCreateView: function() {
			return new f.CellView({
				style: a.ListViewCellStyles.EmptyMessageCell
			})
		},
		_onSetView: function(o) {
			o.setTitle(this._message);
			o.setState(f.State.Normal)
		}
	});
	var c = a.MBListViewSection.subclass({
		classname: "EmptyMessageSection",
		initialize: function($super, q) {
			$super();
			if (!this._items) {
				this._items = []
			}
			var p = [];
			for (var o = 0; o < q.length; o++) {
				p.push(new e(q[o]))
			}
			this.setItems(p);
			return this
		},
		destroy: function() {},
		calculateRowHeightForListView: function(o) {
			if (!o) {
				return
			}
			var q = new f.ViewGeometry.Rect(o.getFrame());
			if (q.isEmpty()) {
				return
			}
			var p = q.h / 6 - 5;
			this.setRowHeight(p)
		}
	});
	var b = h.UserSearchController = j.subclass({
		classname: "UserSearchController",
		analyticsName: "Search",
		scanState: null,
		initialize: function() {
			this.scanState = 0;
			this._userSearchStyle = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FindFriends").UserSearchHeader;
			this._dirtyFriendsListenerSetup();
			this._updateFriendsListCache();
			this._searchedForSelf = false
		},
		destroy: function() {
			if (this.directInviteSection) {
				this.directInviteSection.release()
			}
			if (this.plusMatchSection) {
				this.plusMatchSection.release()
			}
			if (this.pendingSection) {
				this.pendingSection.release()
			}
			if (this.zeroCaseSection) {
				this.zeroCaseSection.release()
			}
		},
		_userSearchStyle: null,
		titleHeaderView: null,
		footerView: null,
		allPlusUsers: null,
		pendingSection: null,
		plusMatchSection: null,
		directInviteSection: null,
		loadView: function($super) {
			$super();
			NgLogD("UserSearchController: loadView");
			var p = this.view().getHeaderView();
			this.view()._headerHeightRatio = this._userSearchStyle.extras.headerHeightRatio;
			if (m.getPlatformOS().toLowerCase() === "android") {
				this.view().layoutSubviews();
				this.view()._headerHeightRatio *= 1.35
			}
			var q = m.getScreenWidth();
			var o = new l.EditText();
			o.setPlaceholder(n("Search by full name, Mobage name, or email"));
			o.setInputType(o.InputTypes.None);
			o.setEnterKeyType(f.Commands.EnterKeyType.Done);
			this.applyKeyboardWorkaround(o);
			p.setContentView(o);
			p.setFrameSize([100, 100]);
			p.button.setFrameSize([q * this.view()._headerHeightRatio / 1.8, 30]);
			p.button.setOnClick(this.bind(function() {
				o.setEnabled(false);
				o.setEnabled(true);
				this.scanState = a.ContactsController.ScanState.Beginning;
				this.startSearch()
			}));
			this._userSearchStyle.applyTo(p);
			NgLogD("UserSearchController: loadView finished.")
		},
		didActivateTab: function($super) {
			$super();
			this.parentController.navController._host.hideLoadingLabel();
			setTimeout(this.bind(function() {
				if (!this.pendingSection) {
					this.pendingSection = (new a.PendingListSection()).retain()
				}
				if (!this.plusMatchSection) {
					this.plusMatchSection = (new a.MBListViewSection()).retain()
				}
				if (!this.directInviteSection) {
					this.directInviteSection = (new a.DirectInviteSection()).retain()
				}
				if (!this.zeroCaseSection) {
					this.zeroCaseSection = (new a.ZeroCaseSection()).retain()
				}
			}), 50)
		},
		_dirtyFriendsListenerSetup: function() {
			var o = a.Session.getCurrentSession().user();
			var p = new k();
			o.addListener(p, this.zombieSafeCallback(function(q) {
				if (!q || !q.buddies) {
					return
				}
				this._updateFriendsListCache()
			}, this.bind(function(q) {
				o.removeListener(p);
				p.destroy()
			})))
		},
		_updateFriendsListCache: function() {
			if (this._friendsListCacheUpdateInProgress) {
				return
			}
			this._friendsListCacheUpdateInProgress = true;
			var p = [];
			this._friendsListCacheReady = false;
			var o = a.Session.getCurrentSession().user();
			o.getFollowersList().forAll(this.zombieSafeCallback(function(r, q) {
				p.push(q);
				r(true)
			}), this.zombieSafeCallback(function(t) {
				this.loge("_updateFriendsListCache finished");
				this._friendsListCacheUpdateInProgress = false;
				if (t) {
					this.scanState = a.ContactsController.ScanState.NotStarted;
					if (!this.pendingSection) {
						return
					}
					this.pendingSection.showError(t, this.bind(function() {
						this._updateFriendsListCache();
						this.startSearch()
					}));
					return
				}
				this._outgoingRelationships = p;
				this._friendsListCacheReady = true;
				if (this.plusMatchSection && this.plusMatchSection.getItems() && !this.plusMatchSection.getItems().length) {
					if (this._fuzzySearchScanFinished) {
						this._resultsReady()
					}
				} else {
					var s;
					var q = (this.plusMatchSection && this.plusMatchSection.getItems()) ? this.plusMatchSection.getItems() : [];
					for (var r = 0; r < q.length; r++) {
						if ((s = q[r]) && s.cell) {
							s._onSetView(s.cell)
						}
					}
				}
			}))
		},
		startSearch: function() {
			var p;
			var r;
			switch (this.scanState) {
				case a.ContactsController.ScanState.Done:
					break;
				case a.ContactsController.ScanState.NotStarted:
					this.logd("ContactsController.ScanState.NotStarted");
					break;
				case a.ContactsController.ScanState.Beginning:
					this.scanState = a.ContactsController.ScanState.InFlight;
					this.allPlusUsers = [];
					this._fuzzySearchScanFinished = false;
					this.view().getContentView().setScrollPosition(0, 0);
					p = this.view().header.content.getText().replace(/^\s+|\s+$/g, "");
					p = (p) ? p.toLowerCase() : "";
					var t = a.Session.getCurrentSession().user();
					var s = t.emailAddress;
					var o = "" + t.firstName + " " + t.lastName;
					if (p && p !== "" && (p.toLowerCase() == t.gamertag.toLowerCase() || p.toLowerCase() == (s ? s : "").toLowerCase() || p.toLowerCase() == o.toLowerCase())) {
						this._searchedForSelf = true
					} else {
						this._searchedForSelf = false
					}
					p = p.replace(/^\s+|\s+$/g, "");
					a.User.findUsersWithFuzzySearch(p, this.zombieSafeCallback(this._scanFinishedFuzzySearch));
					NgLogD("Searching for :" + p);
					r = p;
					if (p.length >= 20) {
						r = p.slice(0, 17)
					}
					this.pendingSection.setPendingText(n("Searching for '%1s'...", r));
					if (this._pendingTimeoutId) {
						clearTimeout(this._pendingTimeoutId);
						this._pendingTimeoutId = null
					}
					this._pendingTimeoutId = setTimeout(this.zombieSafeCallback(function() {
						this._pendingTimeoutId = null;
						this.pendingSection.showError(n("Sorry. We weren't able to complete your request.\nPlease check your network connection and try again."))
					}), 30 * 1000);
				case a.ContactsController.ScanState.InFlight:
					this.logd("ContactsController.ScanState.InFlight");
					var q = this.view().getSections();
					if (!q || !q.length || q[0] != this.pendingSection) {
						this.view().setSections([this.pendingSection, this.directInviteSection])
					}
					break;
				default:
					break
			}
			NgLogD("ContactsController/startSearch end")
		},
		_scanFinishedFuzzySearch: function(o, p) {
			this.scanState = a.ContactsController.ScanState.Done;
			if (o) {
				NgLogE("Error: " + JSON.stringify(o));
				this.scanState = a.ContactsController.ScanState.NotStarted;
				this.pendingSection.showError(o)
			} else {
				if (p && p instanceof Array) {
					this.allPlusUsers = this.allPlusUsers.concat(p.slice())
				}
				this._fuzzySearchScanFinished = true
			}
			if (this._friendsListCacheReady) {
				this._resultsReady()
			}
		},
		_resultsReady: function() {
			this.scanState = a.ContactsController.ScanState.Done;
			if (this._pendingTimeoutId) {
				clearTimeout(this._pendingTimeoutId);
				this._pendingTimeoutId = null
			}
			if (this.allPlusUsers.length === 0) {
				this._showNoResultsCase()
			} else {
				NgLogD("UserSearch/_resultsReady " + this.allPlusUsers.length + " " + this._outgoingRelationships.length);
				var s, p, o, q, r = [];
				o = [];
				for (p in this.allPlusUsers) {
					if (this.allPlusUsers.hasOwnProperty(p)) {
						s = this.allPlusUsers[p];
						if (!(s instanceof a.User)) {
							NgLogE("Error: Expected imports.User reference, got " + typeof s)
						} else {
							NgLogD("Rec is a imports.User reference mutual? " + s.isMutualFriend + " curBuddy?" + this._outgoingRelationships.indexOf(s))
						}
						if (!s.isMutualFriend && this._outgoingRelationships.indexOf(s) != -1) {
							s.invited = true
						}
					}
				}
				if ((p = this.allPlusUsers.indexOf(a.Session.getCurrentSession().user())) != -1) {
					this.allPlusUsers.splice(p, 1)
				}
				if (this.allPlusUsers.length === 0) {
					if (this._searchedForSelf) {
						this._showVanitySearchCase()
					} else {
						this._showNoResultsCase()
					}
					return
				}
				this.allPlusUsers.sort(function(u, t) {
					return (u.invited == t.invited) ? 0 : (u.invited ? 1 : -1)
				});
				for (p in this.allPlusUsers) {
					if (this.allPlusUsers.hasOwnProperty(p)) {
						s = this.allPlusUsers[p];
						o.push(new a.ContactsController.FoundUserListItem(s))
					}
				}
				for (q = 0; q < o.length; q++) {
					o[q].odd = (q) % 2
				}
				this.plusMatchSection.setRowHeight(this.pendingSection.getRowHeight());
				this.plusMatchSection.setItems(o);
				if (o.length) {
					r.push(this.plusMatchSection)
				}
				r.push(this.directInviteSection);
				if (r.length - 1 >= 0) {
					this.view().setSections(r)
				} else {
					this._showNoResultsCase()
				}
			}
		},
		_sendInvitationEmail: function(p) {
			NgLogD("Attempting to invite: " + p);
			var o;
			var q = false;
			if (a.SessionUtils.User.hasSentFriendInviteToEmail(p)) {
				o = new f.Toast({
					text: n("You've already sent an invite to that address!")
				});
				o.ondisappear = function() {
					o.destroy()
				};
				o.show()
			} else {
				a.SessionUtils.User.sendFriendInviteToEmailIfPossible(p, function(r, s) {
					if (r && s && s.error == g.SERVER_ERRORCODE_MALFORMED_EMAIL) {
						o = new f.Toast({
							text: s.error_msg
						});
						o.ondisappear = function() {
							o.destroy()
						};
						o.show()
					} else {
						if (r) {
							o = new f.Toast({
								text: n("Please enter a valid email address.")
							});
							o.ondisappear = function() {
								o.destroy()
							};
							o.show()
						} else {
							o = new f.Toast({
								text: n("Email invite sent!")
							});
							o.ondisappear = function() {
								o.destroy()
							};
							o.show();
							q = true
						}
					}
				})
			}
			return q
		},
		_showVanitySearchCase: function() {
			NgLogD("_showVanitySearchCase");
			setTimeout(this.bind(function() {
				this.pendingSection.showError(n("We know, you are awesome."), function() {
					this.parentController.navController.pushViewController(d.MyPage.initWithJSON({}))
				});
				this.view().setSections([this.pendingSection, this.directInviteSection])
			}), 1)
		},
		_showNoResultsCase: function() {
			setTimeout(this.bind(function() {
				var x = this.view().header.content.getText();
				var o = n("Sorry, we found no results matching %1s", x);
				this.pendingSection.showError(o);
				var s = a.User.emailAddressLooksValid(x);
				if (s) {
					var r = o;
					var w = n("You may invite this person to Mobage by emailing an invite to %1s.", x);
					var t = n("Invite Sent");
					var u = n("A Mobage invitation email has been sent to %1s.", x);
					var v = n("Email Invite");
					var q = v;
					if (a.SessionUtils.User.hasSentFriendInviteToEmail(x)) {
						this.zeroCaseSection.setZeroCaseTexts([t, u, q]);
						this.zeroCaseSection.setZeroCaseButtonEnabled(false)
					} else {
						this.zeroCaseSection.setZeroCaseTexts([r, w, v]);
						this.zeroCaseSection.setZeroCaseButtonEnabled(true);
						var p = this;
						this.zeroCaseSection.setZeroCaseButtonCallback(function() {
							p._sendInvitationEmail(x.replace(/^\s+|\s+$/g, ""));
							p.zeroCaseSection.setZeroCaseTexts([t, u, q]);
							p.zeroCaseSection.setZeroCaseButtonEnabled(false)
						})
					}
					this.view().setSections([this.zeroCaseSection, this.directInviteSection])
				} else {
					this.view().setSections([this.pendingSection, this.directInviteSection])
				}
			}), 1);
			NgLogD("No Results Case")
		}
	});
	return h
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ZeroCaseSection"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ZeroCaseSection"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ZeroCaseSection"] = e;
	var d = require("NGCore/Client/UI").UI;
	var b = d.ViewGeometry.Rect;
	var a = d.ViewGeometry.Scale;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/ZeroCaseMessageCell").ZeroCaseMessageCell;
	var h = e.ZeroCaseLItem = d.ListViewItem.subclass({
		classname: "ZeroCaseLItem",
		_reuseId: "zerocase_messagecell",
		initialize: function($super) {
			$super()
		},
		_texts: ["", "", ""],
		_buttonCallback: null,
		_buttonEnabled: true,
		setZeroCaseTexts: function(k) {
			this._texts = k;
			if (this.cell) {
				this._onSetView(this.cell)
			}
		},
		setZeroCaseButtonCallback: function(k) {
			this._buttonCallback = k;
			if (this.cell) {
				this._onSetView(this.cell)
			}
		},
		setZeroCaseButtonEnabled: function(k) {
			this._buttonEnabled = k;
			if (this.cell) {
				this._onSetView(this.cell)
			}
		},
		_onCreateView: function() {
			return new g()
		},
		_onSetView: function(k) {
			k.setZeroCaseTexts(this._texts);
			k.setZeroCaseButtonCallback(this._buttonCallback);
			k.setZeroCaseButtonEnabled(this._buttonEnabled);
			require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements.largeActionButton.applyTo(this);
			k.setState(this._buttonEnabled ? d.State.Normal : d.State.Disabled);
			this.cell = k
		}
	});
	var c = e.ZeroCaseSection = j.subclass({
		classname: "ZeroCaseSection",
		messageListItem: null,
		initialize: function($super, k, l) {
			$super();
			if (!this._items) {
				this._items = []
			}
			if (k === undefined) {
				k = 5 / 6
			}
			this.setRowHeightRatio(k, l);
			this.messageListItem = (new h());
			this.setItems([this.messageListItem]);
			this.currentListItem = this.messageListItem;
			return this
		},
		destroy: function() {},
		setZeroCaseTexts: function(k) {
			if (this.messageListItem) {
				this.messageListItem.setZeroCaseTexts(k)
			}
		},
		setZeroCaseButtonCallback: function(k) {
			if (this.messageListItem) {
				this.messageListItem.setZeroCaseButtonCallback(k)
			}
		},
		setZeroCaseButtonEnabled: function(k) {
			if (this.messageListItem) {
				this.messageListItem.setZeroCaseButtonEnabled(k)
			}
		},
		calculateRowHeightForListView: function(k) {
			if (!k) {
				return
			}
			var m = new b(k.getFrame());
			if (m.isEmpty()) {
				return
			}
			var l = m.h / 5;
			this.setRowHeight(l)
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CatalogController"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CatalogController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CatalogController"] = g;
	var d = require("NGCore/Client/UI").UI;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var q = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var j = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game;
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var n = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView").CCView;
	var p = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection;
	var l = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/IdleActor").IdleActor;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ZeroCaseSection").ZeroCaseSection;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var o = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/CatalogCell").CatalogListItem;
	var h = g.CatalogController = k.subclass({
		classname: "CatalogController",
		analyticsName: "AllGames",
		_listView: null,
		_listItems: null,
		_catalogStyle: null,
		_totalGames: 0,
		_totalWidth: 0,
		_maxEntries: null,
		_sorting: null,
		_idleActor: null,
		_catalogListSection: null,
		_pendingListSection: null,
		_zeroCaseSection: null,
		initialize: function($super, r) {
			if ($super && typeof $super == "function") {
				$super()
			}
			this._listItems = [];
			this._catalogStyle = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CatalogStyle").CatalogList;
			this._variant = r;
			this._idleActor = (new e()).retain()
		},
		destroy: function() {
			this._idleActor.release();
			if (this._catalogListSection) {
				this._catalogListSection.release()
			}
			if (this._pendingListSection) {
				this._pendingListSection.release()
			}
			if (this._zeroCaseSection) {
				this._zeroCaseSection.release()
			}
		},
		setMaxEntries: function(r) {
			this._maxEntries = r
		},
		setSorting: function(r) {
			this._sorting = r
		},
		loadView: function($super) {
			$super();
			this.view()._headerHeightRatio = 0
		},
		startLoadingProgress: function() {
			if (!this._pendingListSection) {
				this._pendingListSection = (new l()).retain();
				this._pendingListSection.setPendingText(q("Loading games..."))
			}
			var s;
			if (this._listView.getSections().indexOf(this._pendingListSection) == -1) {
				var r = [this._pendingListSection];
				r = r.concat(this._listView.getSections());
				this._listView.setSections(r)
			}
		},
		stopLoadingProgress: function() {
			var r, s;
			if ((r = ((s = this._listView.getSections()).indexOf(this._pendingListSection))) != -1) {
				s.splice(r, 1);
				this._listView.setSections(s)
			}
		},
		didActivateTab: function($super) {
			$super();
			setTimeout(this.bind(function() {
				this._setupContent()
			}), 50)
		},
		_setupContent: function() {
			this._createListView();
			this._createGameList()
		},
		_createListView: function() {
			if (this._listView) {
				NgLogD("CatalogController: _createListView: already have listview");
				return
			}
			var r = (new p()).retain();
			r.setRowHeightRatio(this._catalogStyle.extras.catalogCellHFactor2);
			this._listItems = [];
			this._listView = this.view().getContentView();
			this._catalogListSection = r;
			this._listView.setSections([r]);
			this._catalogStyle.applyTo(this)
		},
		_getFriendsGamesList: function() {
			var w = f.getCurrentSession();
			if (w) {
				var v = [];
				var u = this;
				var s = 0;
				var x = 0;
				var t = false;
				var r = function() {
					u._allResultsReady = true;
					if (u._totalGames === 0) {
						if (!u._idleAction) {
							u._idleAction = u.zombieSafeCallback(function() {
								u._resultsReady()
							})
						}
					}
					u._idleActor.waitForIdleBeforeAction(u._idleAction);
					t = false
				};
				w.user().getMutualFriendsList().forAll(this.zombieSafeCallback(function(y, z, A) {
					for (var B in z.games) {
						if (v.indexOf(z.games[B].recordID) < 0) {
							s++;
							c.getGameWithAppKey(z.games[B].recordID, this.zombieSafeCallback(function(D, C) {
								if (!D && (this._maxEntries === null || this._listItems.length < this._maxEntries)) {
									this._addGameToList(C)
								}
								x++;
								if (t && s >= x) {
									r()
								}
							}));
							v[v.length] = z.games[B].recordID
						}
					}
					y(this._maxEntries === null || this._listItems.length < this._maxEntries)
				}), this.zombieSafeCallback(function(z) {
					if (!z) {
						if (x >= s) {
							r()
						} else {
							t = true
						}
					} else {
						var y = (new d.AlertDialog()).retain();
						y.setTitle(q("Error"));
						y.setText(q("Error accessing system.  Please try again later. Error: %1s", z));
						y.setChoices([q("OK")]);
						y.onchoice = function(A) {
							y.release();
							y = null
						};
						y.show()
					}
				}))
			}
		},
		_createGameList: function() {
			if (!this._listView) {
				return
			}
			if (!this._listView.getSections()) {
				return
			}
			if (!this._listView.getSections()[0].getItems()) {
				return
			}
			if (this._totalGames) {
				return
			}
			if (!this._idleAction) {
				this._idleAction = this.zombieSafeCallback(function() {
					this._resultsReady()
				})
			}
			if (!this._refreshing) {
				this.startLoadingProgress();
				this._allResultsReady = false
			}
			this._totalGames = 0;
			if (this._variant == "friends") {
				this._getFriendsGamesList()
			} else {
				c.getAllGamesList().forAll(this.zombieSafeCallback(function(s, r) {
					if (this._variant != "featured" || r.featured) {
						this._addGameToList(r)
					}
					this._idleActor.waitForIdleBeforeAction(this._idleAction);
					s(this._maxEntries === null || this._listItems.length < this._maxEntries)
				}), this.zombieSafeCallback(function(s) {
					this._allResultsReady = true;
					this._idleActor.waitForIdleBeforeAction(this._idleAction);
					if (this._totalGames === 0) {
						this.stopLoadingProgress()
					}
					if (s) {
						var r = (new d.AlertDialog()).retain();
						r.setTitle(q("Error"));
						r.setText(q("Error accessing system.  Please try again later. Error: %1s", s));
						r.setChoices([q("OK")]);
						r.onchoice = function(t) {
							r.release();
							r = null
						};
						r.show()
					}
				}), this.zombieSafeCallback(function(s, r) {
					this.loge("Cached lookup fully complete, needs UI refresh? " + !!r);
					if (!s && r) {
						this._refreshing = true;
						this._totalGames = 0;
						this._listItems = [];
						c.getAllGamesList().forAll(this.zombieSafeCallback(function(u, t) {
							if (this._variant != "featured" || t.featured) {
								this._addGameToList(t)
							}
							u(this._maxEntries === null || this._listItems.length < this._maxEntries)
						}), this.zombieSafeCallback(function(t) {
							this.loge("Refreshing UI post cache update! err:", t);
							this._idleActor.waitForIdleBeforeAction(this._idleAction);
							if (!t) {
								this._allResultsReady = true;
								this._catalogListSection.setItems(this._listItems.slice())
							}
						}), true)
					}
				}))
			}
		},
		_addGameToList: function(r) {
			if (!(r instanceof c)) {
				throw new Error("Game argument expected.")
			}
			var s = new o(r, this._totalGames % 2 === 1);
			this._listItems.push(s);
			this._totalGames++
		},
		_sortCatalog: function() {
			var r = this._catalogListSection.getItems();
			switch (this._sorting) {
				case "name abc":
					r.sort(function(w, v) {
						var u = w.game.name.toLowerCase();
						var t = v.game.name.toLowerCase();
						return (u == t ? 0 : (u < t ? -1 : +1))
					});
					break;
				case "name cba":
					r.sort(function(w, v) {
						var u = w.game.name.toLowerCase();
						var t = v.game.name.toLowerCase();
						return (u == t ? 0 : (u < t ? +1 : -1))
					});
					break;
				case "publisher abc":
					r.sort(function(w, v) {
						var u = w.game.publisher.toLowerCase();
						var t = v.game.publisher.toLowerCase();
						return (u == t ? 0 : (u < t ? -1 : +1))
					});
					break;
				case "publisher cba":
					r.sort(function(w, v) {
						var u = w.game.publisher.toLowerCase();
						var t = v.game.publisher.toLowerCase();
						return (u == t ? 0 : (u < t ? +1 : -1))
					});
					break;
				default:
					return
			}
			for (var s = r.length - 1; s >= 0; s--) {
				r[s].odd = s & 1
			}
		},
		_resultsReady: function() {
			var r = [];
			r = r.concat(this._listItems);
			if (!this._refreshingDontDisplay) {
				this._catalogListSection.setItems(r)
			}
			if (this._allResultsReady) {
				this._sortCatalog();
				this.stopLoadingProgress();
				if (this._variant == "friends" && this._totalGames === 0) {
					if (!this._zeroCaseSection) {
						this._zeroCaseSection = (new b(1, this.view().content.getFrame()[3])).retain();
						this._zeroCaseSection.setZeroCaseTexts([q("No friends' games were found."), q("Have you tried scanning your contacts? People you know may already be on Mobage!"), q("Scan Contacts")]);
						this._zeroCaseSection.setZeroCaseButtonCallback(function() {
							var s = a.FindFriends.initWithJSON({
								tab: "contacts"
							});
							m.navController.pushViewController(s)
						})
					}
					this.view().setSections([this._zeroCaseSection])
				} else {
					this.view().setSections([this._catalogListSection])
				}
			}
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/CatalogCell"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/CatalogCell"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/CatalogCell"] = d;
	var h = require("NGCore/Client/Core").Core;
	var g = require("NGCore/Client/UI").UI;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		MobageStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		GameDownloadBar: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameDownloadBar").GameDownloadBar
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var f = d.CatalogCell = g.CellView.subclass({
		classname: "CatalogCell",
		_game: null,
		_catalogStyle: null,
		_gameName: "",
		_screenWidth: 0,
		_screenHeight: 0,
		_cellWidth: 0,
		_cellHeight: 0,
		initialize: function($super) {
			$super();
			this._catalogStyle = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CatalogStyle").CatalogCell;
			this._screenWidth = h.Capabilities.getScreenHeight();
			this._screenHeight = h.Capabilities.getScreenWidth();
			this._contentWidth = this._getContentWidth() - 6;
			NgLogD("this._contentWidth = " + this._contentWidth);
			this._cellWidth = this._catalogStyle.extras.catalogCellWFactor * this._screenWidth;
			NgLogD("this._cellWidth = " + this._cellWidth);
			this._cellHeight = this._catalogStyle.extras.catalogCellHFactor * this._screenHeight;
			var n = this;
			this._gameImage = (new b.UnspammableButton()).retain();
			var m = this._catalogStyle.extras.gameIconWFactor * this._cellHeight;
			var l = this._catalogStyle.extras.gameIconXFactor * this._cellHeight - (m / 2);
			this._gameImage.setFrame([l, l, m, m]);
			this.addChild(this._gameImage);
			var k = 0;
			var j = 0;
			if (h.Capabilities.getPlatformOS().toLowerCase() == "iphone os") {
				k = 0.02;
				j = -0.05
			}
			this._gameTitle = (new g.Label()).retain();
			this._gameTitle.setTextGravity(g.ViewGeometry.Gravity.Left);
			this._gameTitle.setFrame([(this._catalogStyle.extras.gameTitleXFactor + k) * this._cellWidth, (this._catalogStyle.extras.gameTitleYFactor + j) * this._cellHeight, this._catalogStyle.extras.gameTitleWFactor * this._cellWidth, this._catalogStyle.extras.gameTitleHFactor * this._cellHeight]);
			this.addChild(this._gameTitle);
			this._publisherLabel = (new g.Label()).retain();
			this._publisherLabel.setTextGravity(g.ViewGeometry.Gravity.Left);
			this._publisherLabel.setFrame([(this._catalogStyle.extras.publisherNameXFactor + k) * this._cellWidth, (this._catalogStyle.extras.publisherNameYFactor + j) * this._cellHeight, this._catalogStyle.extras.publisherNameWFactor * this._cellWidth, this._catalogStyle.extras.publisherNameHFactor * this._cellHeight]);
			this.addChild(this._publisherLabel);
			j = -0.04;
			this._infoLabel = (new g.Label()).retain();
			this._infoLabel.setTextGravity(g.ViewGeometry.Gravity.Left);
			this._infoLabel.setFrame([(this._catalogStyle.extras.gameDescriptionXFactor + k) * this._cellWidth, (this._catalogStyle.extras.gameDescriptionYFactor + j) * this._cellHeight, this._catalogStyle.extras.gameDescriptionWFactor * this._cellWidth, this._catalogStyle.extras.gameDescriptionHFactor * this._cellHeight]);
			this.addChild(this._infoLabel);
			this.setOnClick(function() {
				b.ServiceHost.showLoadingHelper(function() {
					if (n._game) {
						NgLogD("CatalogCell: INIT GAME");
						var o = c.GameProfile.initWithJSON({
							game: n._game
						});
						b.ServiceHost.navController.pushViewController(o)
					} else {
						NgLogD("CatalogCell: missing that._game")
					}
				}.bind(n))
			});
			this._downloadBar = (new b.GameDownloadBar(true, true)).retain();
			this._downloadBar.setFrame([this._catalogStyle.extras.actionButtonXFactor * this._cellWidth, this._catalogStyle.extras.actionButtonYFactor * this._cellHeight, this._catalogStyle.extras.actionButtonWFactor * this._cellWidth, this._catalogStyle.extras.actionButtonHFactor * this._cellHeight]);
			this._downloadBar.initLayout();
			this.addChild(this._downloadBar);
			this._catalogStyle.applyTo(this)
		},
		destroy: function() {
			this._cleanUp()
		},
		_cleanUp: function() {
			if (this._gameImage) {
				this._gameImage.release()
			}
			if (this._gameTitle) {
				this._gameTitle.release()
			}
			if (this._publisherLabel) {
				this._publisherLabel.release()
			}
			if (this._downloadBar) {
				this._downloadBar.release()
			}
			if (this._infoLabel) {
				this._infoLabel.release()
			}
			if (this._overlayButton) {
				this._overlayButton.release()
			}
		},
		setOddRow: function(j) {
			if (j) {
				this.addState(b.MobageStyle.OddState)
			} else {
				this.clearState(b.MobageStyle.OddState)
			}
		},
		setGame: function(j) {
			this._game = j;
			if (j) {
				this._setPicture(j.getDefinedIcon());
				this._setTitle(j.name);
				this._setPublisher(j.publisher);
				this._setInfoLabel(j.description);
				this._setNumPlayers(-1)
			} else {
				this._setPicture("")
			}
			if (this._downloadBar) {
				this._downloadBar.setGame(j)
			}
		},
		_setPicture: function(j) {
			if (this._gameImage) {
				this._gameImage.setImage(j)
			}
		},
		_setTitle: function(j) {
			this._gameName = j;
			if (this._gameTitle) {
				this._gameTitle.setText(j)
			}
		},
		_setPublisher: function(j) {
			if (this._publisherLabel) {
				this._publisherLabel.setText(j)
			}
		},
		_setInfoLabel: function(j) {
			if ((!j) || (j.length <= 0)) {
				return
			}
			if (this._infoLabel) {
				this._infoLabel.setText(j.substring(0, 26) + "...")
			}
		},
		_setNumPlayers: function(j) {
			var k = parseInt(j, 10);
			this._numPlayers = k;
			if (this._numPlayersLabel) {
				this._numPlayersLabel.setText(a("%1d Players", k))
			}
		},
		_getContentWidth: function() {
			return (1 - b.VerticalTabViewSizing.buttonContainerRatio - b.VerticalTabViewSizing.insetRatio) * this._screenWidth
		}
	});
	var e = d.CatalogListItem = g.ListViewItem.subclass({
		classname: "CatalogListItem",
		_reuseId: "CatalogListItem",
		initialize: function($super, j, k) {
			$super();
			this.game = j;
			this.odd = k
		},
		_onCreateView: function() {
			return new f()
		},
		_onSetView: function(j) {
			j.setOddRow(this.odd);
			j.setGame(this.game)
		},
		_onReleaseView: function(j) {
			j.setGame(null)
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CatalogStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CatalogStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CatalogStyle"] = b;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var e = d.ScaledTextSize;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements;
	d.lazyLoad(b, "CatalogCell", function() {
		return {
			style: {
				gradient: {
					gradient: ["FFE6EDF5 0.0", "FFE6EDF5 1.0"]
				},
				oddGradient: {
					gradient: ["FFF9FCFD 0.0", "FFF9FCFD 1.0"]
				},
				pressedGradient: {
					gradient: ["66000000 0.0", "66000000 0.0"]
				},
				pressedOddGradient: {
					gradient: ["66000000 0.0", "66000000 0.0"]
				}
			},
			children: {
				_gameImage: {
					style: {
						image: c.image("no-game-icon.png")
					}
				},
				_gameTitle: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(15),
						textColor: "FF004AA9"
					}
				},
				_publisherLabel: {
					style: {
						textFont: d.defaultBoldFontFace,
						textSize: e(14),
						textColor: "FF000000"
					}
				},
				_infoLabel: {
					style: {
						textSize: e(13),
						textColor: "FF000000"
					}
				}
			},
			extras: {
				catalogCellWFactor: (582 / 800),
				catalogCellHFactor: (98 / 480),
				actionButtonXFactor: (438 / 582),
				actionButtonYFactor: (26 / 98),
				actionButtonWFactor: (130 / 582),
				actionButtonHFactor: (58 / 98),
				gameIconXFactor: (49 / 98),
				gameIconYFactor: (49 / 98),
				gameIconWFactor: (80 / 98),
				gameIconHFactor: (80 / 98),
				gameTitleXFactor: (104 / 582),
				gameTitleYFactor: (9 / 98),
				gameTitleWFactor: (325 / 582),
				gameTitleHFactor: (34 / 98),
				publisherNameXFactor: (104 / 582),
				publisherNameYFactor: (33 / 98),
				publisherNameWFactor: (325 / 582),
				publisherNameHFactor: (40 / 98),
				gameDescriptionXFactor: (104 / 582),
				gameDescriptionYFactor: (62 / 98),
				gameDescriptionWFactor: (328 / 582),
				gameDescriptionHFactor: (40 / 98)
			}
		}
	});
	d.lazyLoad(b, "CatalogList", function() {
		return {
			children: {
				_listView: {
					style: {
						gradient: {
							corners: "4.0 4.0 4.0 4.0",
							gradient: ["FFCAD2DD 0.0", "FF7CA4C8 0.2", "FF7CA4C8 1.0"]
						}
					}
				},
				_friendsButtonArea: {
					style: {
						gradient: {
							gradient: ["FF93A2B1 0.000", "FFB1BFCD 0.060", "FFD0DAE4 0.940", "FFADB9C6 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_labelFriends: {
					style: {
						textColor: "FF000000",
						textSize: e(13),
						textFont: d.defaultBoldFontFace
					}
				},
				_buttonAllGames: a.standardButton
			},
			extras: {
				catalogCellHFactor2: (1 / 5),
				friendsGamesHeaderHeight: 62,
				friendsButtonAreaXRatio: 206,
				friendsButtonAreaYRatio: 433,
				labelFriendsXInsetFactor: 217,
				labelFriendsYInsetFactor: 454,
				labelFriendsWidthFactor: 416,
				labelFriendsHeightFactor: 22,
				buttonAllGamesXInsetFactor: 644,
				buttonAllGamesYInsetFactor: 439,
				buttonAllGamesWidthFactor: 130,
				buttonAllGamesHeightFactor: 50
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameDownloadBar"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameDownloadBar"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameDownloadBar"] = e;
	var f = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Device").Device;
	var c = require("NGCore/Client/UI").UI;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		Game: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game
		},
		AppConfig: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/AppConfig").AppConfig
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		ScalingBehaviors: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/TextScaling").TextMeasuredScalingBehaviors
		},
		GameDownloadStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameDownloadStyle")
		}
	});
	var j = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var h = 0;
	var d = e.GameDownloadBar = c.View.subclass({
		classname: "GameDownloadBar",
		initialize: function($super, l, k) {
			$super();
			this._fullMode = l;
			this._bottomMode = k;
			this._game = null;
			a.GameDownloadStyle;
			this._sheet = a.OldStyle.registeredStyle("social.us.gamedownload").props();
			this._totalWidth = f.Capabilities.getScreenHeight();
			this._totalHeight = f.Capabilities.getScreenWidth();
			var n = this;
			this._progressBar = this.retainView(new c.ProgressBar());
			this._progressBar.setFrame([0, 0, 100, 100]);
			this._progressBar.setAttributes(this._sheet.progressBar);
			if (this._fullMode) {
				var m = this.onDownloadBarClicked.bind(this);
				this._download = this.retainView(new a.UnspammableButton());
				this._download.setFrame([0, 0, 100, 100]);
				this._download.setText(j("FREE"));
				this._download.setImage(a.Assets.image("download_icon.png"));
				this._download.setAttributes(this._sheet.downloadButton);
				this._download.onclick = m;
				this._play = this.retainView(new a.UnspammableButton());
				this._play.setFrame([0, 0, 100, 100]);
				this._play.setText(j("Play"));
				this._play.setAttributes(this._sheet.playButton);
				this._play.onclick = m;
				this._backToMarketButton = this.retainView(new a.UnspammableButton());
				this._backToMarketButton.setFrame([0, 0, 100, 100]);
				this._backToMarketButton.setText(j("Back to\nMarket"));
				this._backToMarketButton.setAttributes(this._sheet.backToMarketButton);
				this._backToMarketButton.onclick = m;
				this._stateLabel = this.retainView(new g.Label());
				this._stateLabel.setFrame([0, 0, 100, 100]);
				this._stateLabel.setText(j("Updating..."));
				this._stateLabel.setTextGravity(c.ViewGeometry.Gravity.Right);
				this._stateLabel.setAttributes(this._sheet.stateLabel);
				this._stateLabel.setTextScalingBehavior(a.ScalingBehaviors.StrictMultiLine);
				this._progressLabel = this.retainView(new c.Label());
				this._progressLabel.setFrame([0, 0, 100, 100]);
				this._progressLabel.setTextGravity(c.ViewGeometry.Gravity.Right);
				this._progressLabel.setAttributes(this._sheet.progressLabel)
			}
		},
		destroy: function() {
			if (this._retainedViews) {
				for (var k = 0; k < this._retainedViews.length; k++) {
					var l = this._retainedViews[k];
					if (l) {
						l.release()
					}
				}
			}
			this._retainedViews = new Array();
			if (this._marketDlgTimeout) {
				clearTimeout(this._marketDlgTimeout)
			}
			if (this._game) {
				this._game.removeDownloadListener(this);
				this._game.removeMarketAppDownloadWatcher(this)
			}
		},
		retainView: function(k) {
			if (k) {
				k.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(k)
			}
			return k
		},
		initLayout: function() {
			var m = new c.ViewGeometry.Rect(this.getFrame());
			NgLogD("GameDownloadBar: fullRect.w = " + m.w + ", fullRect.h = " + m.h);
			if (this._progressBar) {
				var l = 0;
				var q = 1;
				if (this._fullMode) {
					l = this._sheet.progressBarYRatio;
					q = this._sheet.progressBarHeightRatio
				}
				this._progressBar.setFrame([m.w * this._sheet.progressBarXRatio, m.h * l, m.w * this._sheet.progressBarWidthRatio, m.h * q])
			}
			if (this._download && this._play && this._backToMarketButton) {
				var n = m.h * this._sheet.downloadPlayHeightRatio;
				var k = [m.w * this._sheet.downloadPlayXRatio, this._bottomMode ? m.h * this._sheet.downloadPlayYRatio : 0, m.w * this._sheet.downloadPlayWidthRatio, n];
				this._download.setFrame(k);
				this._play.setFrame(k);
				this._backToMarketButton.setFrame(k);
				var p = n * ((1 - this._sheet.downloadIconSize) / 2);
				var r = (this._download.getText().length * this._sheet.downloadCharacterWidth + this._sheet.downloadIconSpacing) * m.w;
				var o = n * this._sheet.downloadIconSize + this._sheet.downloadIconSpacing * m.w;
				this._download.setImageInsets([p, r, p, 0]);
				this._download.setTextInsets([0, 0, 0, o])
			}
			if (this._stateLabel) {
				this._stateLabel.setFrame([m.w * this._sheet.stateLabelXRatio, m.h * this._sheet.stateLabelYRatio, m.w * this._sheet.stateLabelWidthRatio, m.h * this._sheet.stateLabelHeightRatio]);
				this._stateLabel.getTextMeasurementForState(c.State.Normal)
			}
			if (this._progressLabel) {
				this._progressLabel.setFrame([m.w * this._sheet.progressLabelXRatio, m.h * this._sheet.progressLabelYRatio, m.w * this._sheet.progressLabelWidthRatio, m.h * this._sheet.progressLabelHeightRatio])
			}
		},
		setGame: function(k) {
			if (this._game) {
				this._game.removeDownloadListener(this);
				this._game.removeMarketAppDownloadWatcher(this)
			}
			if (k) {
				k.addDownloadListener(this);
				k.addMarketAppDownloadWatcher(this)
			}
			this._game = k;
			this._recheckInstall = true;
			this.update()
		},
		onDownloadBarClicked: function() {
			if (!this._game) {
				NgLogE("Mobage/GameDownladBar - empty game object, not launching");
				return
			}
			var l = (new Date()).getTime();
			var m = 2000;
			if (d._lastDownloadBarClickTime) {
				m = Math.abs(l - d._lastDownloadBarClickTime)
			}
			d._lastDownloadBarClickTime = l;
			if (this._downloadBarVerifying || m < 600) {
				NgLogD("GameDownloadBar Button Spamming Prevention");
				return
			}
			f.Analytics.reportGameEvent("JSGamePlayAndDLButton", this._game.recordID);
			var k = function() {
				if (f.Capabilities.getIsDisaggregated() || this._game.isAvailableLocally()) {
					if (this._game.recordID === a.Session.getCurrentSession().appKey()) {
						a.ServiceHost.showLoadingHelper(function() {
							this._game.checkUpdateAndStartGame()
						}.bind(this))
					} else {
						this._game.checkUpdateAndStartGame()
					}
				} else {
					NgLogD("GameDownloadBar: startDownloading " + this._game.recordID);
					this._game.download()
				}
			}.bind(this);
			if (a.AppConfig.canDownloadGamesDirectly()) {
				k()
			} else {
				this._downloadBarVerifying = true;
				this._game.androidMarketCanPlay(function(n) {
					this._downloadBarVerifying = false;
					if (n) {
						f.Analytics.reportGameEvent("JSGameHasMarketApp", this._game.recordID);
						k()
					} else {
						f.Analytics.reportGameEvent("JSGameNeedMarketApp", this._game.recordID);
						this._game.startWatchingForMarketAppDownload();
						b.IPCEmitter.launchIntent(this._game._androidMarketIntentURL());
						this.update()
					}
				}.bind(this), true)
			}
		},
		update: function() {
			var k = this._game;
			if (!this._progressBar || !this._download || !this._backToMarketButton || !this._play || !this._stateLabel || !this._progressLabel) {
				return
			}
			if (!k) {
				this.hide(this._progressBar);
				this.hide(this._download);
				this.hide(this._play);
				this.hide(this._stateLabel);
				this.hide(this._progressLabel);
				this.hide(this._backToMarketButton);
				return
			}
			if (a.AppConfig.canDownloadGamesDirectly()) {
				if (k.isDownloading()) {
					this.show(this._progressBar);
					this.hide(this._download);
					this.hide(this._play);
					this.show(this._stateLabel);
					this.show(this._progressLabel);
					this.hide(this._backToMarketButton);
					this.updateProgress(this._game.getDownloadProgress())
				} else {
					if (k.isAvailableLocally()) {
						this.hide(this._progressBar);
						this.hide(this._download);
						this.show(this._play);
						this.hide(this._stateLabel);
						this.hide(this._progressLabel);
						this.hide(this._backToMarketButton)
					} else {
						this.hide(this._progressBar);
						this.show(this._download);
						this.hide(this._play);
						this.hide(this._stateLabel);
						this.hide(this._progressLabel);
						this.hide(this._backToMarketButton)
					}
				}
			} else {
				if (k.isDownloading()) {
					this.show(this._progressBar);
					this.hide(this._download);
					this.hide(this._play);
					this.show(this._stateLabel);
					this.show(this._progressLabel);
					this.hide(this._backToMarketButton);
					this.updateProgress(this._game.getDownloadProgress())
				} else {
					if (k.isAvailableLocally()) {
						this.hide(this._progressBar);
						this.hide(this._download);
						this.show(this._play);
						this.hide(this._stateLabel);
						this.hide(this._progressLabel);
						this.hide(this._backToMarketButton)
					} else {
						var l = this._recheckInstall;
						this._recheckInstall = null;
						k.androidMarketCanPlay(this.bind(function(m) {
							if (k != this._game) {
								return
							}
							if (!m) {
								if (k.isWatchingForMarketAppDownlaod()) {
									this.hide(this._progressBar);
									this.hide(this._download);
									this.hide(this._play);
									this.hide(this._stateLabel);
									this.hide(this._progressLabel);
									this.show(this._backToMarketButton)
								} else {
									this.hide(this._progressBar);
									this.show(this._download);
									this.hide(this._play);
									this.hide(this._stateLabel);
									this.hide(this._progressLabel);
									this.hide(this._backToMarketButton)
								}
							} else {
								this.hide(this._progressBar);
								this.hide(this._download);
								this.show(this._play);
								this.hide(this._stateLabel);
								this.hide(this._progressLabel);
								this.hide(this._backToMarketButton)
							}
						}), l)
					}
				}
			}
		},
		updateProgress: function(k) {
			if (this._progressBar) {
				this._progressBar.setProgress(k, k)
			}
			if (this._progressLabel) {
				this._progressLabel.setText(j("%1;0d%", k * 100))
			}
		},
		show: function(k) {
			if (k && !k.getParent()) {
				this.addChild(k)
			}
		},
		hide: function(k) {
			if (k && k.getParent()) {
				k.removeFromParent()
			}
		},
		downloadStarted: function(k) {
			this.update()
		},
		downloadProgress: function(k, l, n, m) {
			this.updateProgress(l)
		},
		downloadCompleted: function(k, l) {
			this.update()
		},
		downloadError: function(k, l) {
			this.update()
		},
		onMarketAppDownloaded: function(k) {
			this.update()
		},
		beganWatchingMarketAppDownload: function(k) {
			this.update()
		}
	});
	d._lastDownloadBarClickTime = 0;
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/BalanceButton"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/BalanceButton"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/BalanceButton"] = c;
	var g = require("NGCore/Client/UI").UI;
	var d = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Balance").Balance;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var b = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Transaction").Transaction;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton;
	var e = c.BalanceButton = g.View.subclass({
		initialize: function($super, j) {
			$super();
			this._clickView = this.retainView(new a());
			this._clickView.setFrame([0, 0, 10, 10]);
			this._clickView.onclick = function() {
				h.showLoadingHelper(function() {
					NgLogD("BalanceButton: button tapped");
					require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Purchase").Purchase._showBank(h.navController)
				})
			};
			this.addChild(this._clickView);
			this._balanceImage = this.retainView(new g.Image());
			this._balanceImage.setTouchable(false);
			this._balanceImage.setFrame([0, 0, 10, 10]);
			this.addChild(this._balanceImage);
			this._currencyLabel = this.retainView(new g.Label());
			this._currencyLabel.setTouchable(false);
			this._currencyLabel.setFrame([0, 0, 10, 10]);
			this.addChild(this._currencyLabel);
			this._balanceLabel = this.retainView(new g.Label());
			this._balanceLabel.setTouchable(false);
			this._balanceLabel.setFrame([0, 0, 10, 10]);
			this.addChild(this._balanceLabel);
			this.updateBalance();
			if (j && typeof j == "function") {
				setTimeout(this.bind(function() {
					j()
				}), 50)
			}
			b.registerBalanceCB("balanceButton", this)
		},
		destroy: function() {
			if (this._retainedViews) {
				for (var j = 0; j < this._retainedViews.length; j++) {
					var k = this._retainedViews[j];
					if (k) {
						k.release()
					}
				}
			}
			b.unRegisterBalanceCB("balanceButton");
			this._retainedViews = new Array()
		},
		retainView: function(j) {
			if (j) {
				j.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(j)
			}
			return j
		},
		setPressedGradient: function(j) {
			this._clickView.setGradient(j, g.State.Pressed)
		},
		setBalanceButtonFrame: function(k) {
			this.setFrame(k);
			if (this._clickView) {
				var j = new g.ViewGeometry.Rect(k);
				if (!j.isEmpty()) {
					this._clickView.setFrame([0, 0, j.w, j.h])
				}
			}
		},
		updateBalance: function() {
			var j = this;
			f.get(function(m, o, n, l, k) {
				if (o) {
					j.setBalance(n, l);
					if (j._balanceImage) {
						if (k) {
							j._balanceImage.setImage(k)
						} else {
							j._balanceImage.setImage(d.image("bank_coins_balance.png"))
						}
					}
				}
			})
		},
		setBalance: function(k, j) {
			if (this._currencyLabel) {
				this._currencyLabel.setText(j)
			}
			if (this._balanceLabel) {
				this._balanceLabel.setText(f.addCommas(k))
			}
		},
		getBalanceImage: function() {
			return this._balanceImage
		},
		getCurrencyLabel: function() {
			return this._currencyLabel
		},
		getBalanceLabel: function() {
			return this._balanceLabel
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserInfoStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserInfoStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/UserInfoStyle"] = b;
	var d = {};
	d.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var a = d.Style.ScaledCorners;
	var c = d.Style.ScaledTextSize;
	d.Style.sheet("social.us.userinfo", {
		myProfileArea: {
			gradient: {
				gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
				innerLine: "FFC9D1DA 1.0"
			}
		},
		avatarGradient: {
			corners: a(4),
			outerLine: "FFFFFFFF 3",
			innerLine: "FFB2B2B2 2"
		},
		avatarImage: {
			imageInsets: [5, 5, 5, 5]
		},
		labelGamerTag: {
			textSize: c(18),
			textFont: d.Style.defaultBoldFontFace
		},
		labelName: {
			textSize: c(12)
		},
		labelRecentlyPlayed: {
			textSize: c(12)
		},
		labelMotto: {
			textSize: c(14),
			textGravity: [0, 0]
		},
		balanceButton: {
			gradient: {
				corners: a(10),
				gradient: ["FFBBC9D5 0.000", "FFBBC9D5 1.000"],
				innerShadow: "33000000 2.0 {0.0,-2.0}",
				outerShadow: "FFE8EEF2 2.0 {0.0,-2.0}",
				insets: "{0.0,0.0,2.0,0.0}"
			}
		},
		balanceButtonPressed: {
			corners: a(10),
			gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
			innerShadow: "33000000 2.0 {0.0,-2.0}",
			outerShadow: "FFE8EEF2 2.0 {0.0,-2.0}",
			insets: "{0.0,0.0,2.0,0.0}"
		},
		currencyLabel: {
			textColor: "FF000000",
			textSize: c(10)
		},
		balanceLabel: {
			textColor: "FF004AA9",
			textSize: c(11),
			textFont: d.Style.defaultBoldFontFace
		},
		myProfileAreaXRatio: 206,
		myProfileAreaYRatio: 84,
		avatarImageSizeFactor: 232,
		avatarImageXInset: 220,
		avatarImageYInset: 90,
		labelGamerTagXInsetFactor: 466,
		labelGamerTagYInsetFactor: 95,
		labelGamerTagWidthFactor: 260,
		labelGamerTagHeightFactor: 36,
		labelNameXInsetFactor: 466,
		labelNameYInsetFactor: 131,
		labelNameWidthFactor: 260,
		labelNameHeightFactor: 22,
		labelRecentlyPlayedXInsetFactor: 466,
		labelRecentlyPlayedYInsetFactor: 156,
		labelRecentlyPlayedWidthFactor: 420,
		labelRecentlyPlayedHeightFactor: 22,
		labelMottoXInsetFactor: 463,
		labelMottoYInsetFactor: 163,
		labelMottoWidthFactor: 312,
		labelMottoHeightFactor: 97,
		balanceButtonXInsetFactor: 547,
		balanceButtonYInsetFactor: 270,
		balanceButtonWidthFactor: 150,
		balanceButtonHeightFactor: 48,
		balanceImageXInsetFactor: 7,
		balanceImageYInsetFactor: 4,
		balanceImageWidthFactor: 38,
		balanceImageHeightFactor: 38,
		currencyLabelXInsetFactor: 51,
		currencyLabelYInsetFactor: 4,
		currencyLabelWidthFactor: 90,
		currencyLabelHeightFactor: 20,
		balanceLabelXInsetFactor: 51,
		balanceLabelYInsetFactor: 23,
		balanceLabelWidthFactor: 90,
		balanceLabelHeightFactor: 20
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/MobageAccordionCVC"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/MobageAccordionCVC"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/MobageAccordionCVC"] = d;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccordionCVC").AccordionCVC;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionTitleView").AccordionTitleView;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListSection").AccordionListSection;
	var f = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ContactsSectionTitleView").ContactsSectionTitleView;
	var c = d.MobageAccordionCVC = h.subclass({
		classname: "MobageAccordionCVC",
		_accordionSectionStyle: null,
		initialize: function($super) {
			$super();
			return this
		},
		loadView: function($super) {
			$super();
			this.setStyle(new e())
		},
		destroy: function() {},
		createAccordionSection: function() {
			return this.createAccordionSectionWithTitle("")
		},
		createAccordionSectionWithTitle: function(j) {
			return this.createAccordionSectionWithTitleAndItems(j, null)
		},
		createAccordionSectionWithTitleAndItems: function(l, j) {
			var m = new g({}, this);
			m.setFrameSize([100, 40]);
			m.setTitle(l);
			m.setAccessoryText((j && j.length) ? j.length : 0);
			NgLogD("createAccordionWithTitleAndItems");
			var k = new a();
			k.setSectionHeader(m);
			if (j) {
				k.hiddenItems = j
			} else {
				k.hiddenItems = []
			}
			return k
		},
		createSection: function() {
			return this.createSectionWithTitle(null)
		},
		createSectionWithTitle: function(j) {
			return this.createSectionWithTitleAndItems(j, null)
		},
		createSectionWithTitleAndItems: function(l, j) {
			if (l) {
				var m = new b();
				m.setFrameSize([100, 40]);
				m.setTitle(l);
				m.setAccessoryText((j && j.length) ? j.length : 0)
			}
			this.logd("createSectionWithTitleAndItems");
			var k = new f();
			if (l) {
				k.setSectionHeader(m)
			}
			if (j) {
				k.setItems(j)
			} else {
				k.setItems([])
			}
			return k
		},
		setStyle: function(j) {
			if (!j) {
				j = new e()
			}
			j.defaultsFrom("social.us.mobageaccordionsection");
			this._accordionSectionStyle = j
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AddFriendManager"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AddFriendManager"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AddFriendManager"] = d;
	var h = require("NGCore/Client/UI").UI;
	var e = h.ViewGeometry.Rect;
	var f = h.ViewGeometry.Scale;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var g = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ReferenceCounting").ReferenceCounting;
	var a = d.AddFriendManager = c.subclass({
		classname: "AddFriendManager",
		initialize: function($super, j) {
			$super();
			this._controller = j
		},
		destroy: function() {},
		getCurUser: function() {
			return (this._controller.getCurUser) ? this._controller.getCurUser() : null
		},
		getButtonAddUser: function() {
			return (this._controller.getButtonAddUser) ? this._controller.getButtonAddUser() : null
		},
		getButtonUnfriendUser: function() {
			return (this._controller.getButtonUnfriendUser) ? this._controller.getButtonUnfriendUser() : null
		},
		getZeroCaseObject: function() {
			return (this._controller.getZeroCaseObject) ? this._controller.getZeroCaseObject() : null
		},
		_checkRelationship: function() {
			if (this._isLoginUser() || !this.getCurUser()) {
				return
			}
			if (!this.getCurUser().localRelation) {
				this.getCurUser().localRelation = "stranger"
			}
			var j = g.getCurrentSession().user();
			var k = false;
			j.getMutualFriendsList().forAll(this.zombieSafeCallback(function(m, l) {
				if (this.getCurUser() === l) {
					this.getCurUser().localRelation = "friend";
					m(false);
					return
				}
				m(true)
			}), this.zombieSafeCallback(function(l) {
				if (this.getCurUser().isMutualFriend) {
					this._updateAddButton();
					return
				}
				j.getInvitesList().forAll(this.zombieSafeCallback(function(n, o, m) {
					if (o === this.getCurUser()) {
						if (o.isMutualFriend) {
							this.getCurUser().localRelation = "friend"
						} else {
							this.getCurUser().localRelation = "follower"
						}
						n(false);
						return
					}
					n(true)
				}), this.zombieSafeCallback(function(m) {
					this._updateAddButton()
				}));
				j.getFollowersList().forAll(this.zombieSafeCallback(function(n, o, m) {
					if (o === this.getCurUser()) {
						if (o.isMutualFriend) {
							this.getCurUser().localRelation = "friend"
						} else {
							this.getCurUser().localRelation = "requested"
						}
						n(false);
						return
					}
					n(true)
				}), this.zombieSafeCallback(function(m) {
					this._updateAddButton()
				}))
			}))
		},
		_showErrorToast: function(k) {
			var j = (new h.Toast({
				text: k
			})).retain();
			j.ondisappear = function() {
				j.release();
				j = null
			};
			j.show()
		},
		_updateAddButton: function() {
			if (this._isLoginUser()) {
				return
			}
			var j = this.getButtonAddUser();
			var k = this.getButtonUnfriendUser();
			var m = this.getZeroCaseObject();
			if (g.getCurrentSession().user().isInviting(this.getCurUser())) {
				if (this.getCurUser().localRelation === "follower") {
					if (j) {
						j.setText(b("Accepting..."));
						j.setEnabled(false);
						j.setVisible(true)
					}
					if (m) {
						m.setZeroCaseTexts([null, null, b("Accepting...")]);
						m.setZeroCaseButtonEnabled(false)
					}
				} else {
					if (j) {
						j.setText(b("Sending Request..."));
						j.setEnabled(false);
						j.setVisible(true)
					}
					if (m) {
						m.setZeroCaseTexts([null, null, b("Sending Request...")]);
						m.setZeroCaseButtonEnabled(false)
					}
				}
				if (k) {
					k.setVisible(false)
				}
			} else {
				if (this.getCurUser().localRelation === "requested") {
					if (j) {
						j.setText(b("Request Sent"));
						j.setEnabled(false);
						j.setVisible(true)
					}
					if (m) {
						m.setZeroCaseTexts([null, null, b("Request Sent")]);
						m.setZeroCaseButtonEnabled(false)
					}
				} else {
					if (this.getCurUser().isMutualFriend || this.getCurUser().localRelation === "friend") {
						if (j) {
							j.setText("Friend!");
							j.setEnabled(false);
							j.setVisible(false)
						}
						if (k) {
							k.setVisible(true)
						}
					} else {
						if (this.getCurUser().localRelation === "follower") {
							if (j) {
								j.setText(b("Accept"));
								j.setEnabled(true);
								j.setVisible(true)
							}
							if (m) {
								m.setZeroCaseTexts([null, null, b("Accept friend request.")]);
								m.setZeroCaseButtonEnabled(true)
							}
						} else {
							if (this.getCurUser().localRelation === "stranger") {
								if (j) {
									j.setText(b("Add User"));
									j.setEnabled(true);
									j.setVisible(true)
								}
								if (m) {
									m.setZeroCaseTexts([null, null, b("Add as Friend")]);
									m.setZeroCaseButtonEnabled(true)
								}
							} else {
								var l = "Don't know how we got here..." + this.getCurUser().gamertag + " " + this.getCurUser().localRelation;
								NgLogE(l)
							}
						}
					}
				}
			}
		},
		_isLoginUser: function() {
			return (this.getCurUser().gamertag === g.getCurrentSession().user().gamertag)
		},
		getAddFriendButtonCallback: function() {
			return (function() {
				if (this.getCurUser().localRelation === "friend") {
					NgLogD("UserProfile 'Add' button tapped on someone already your friend");
					return
				}
				this._updateAddButton();
				var j = this;
				g.getCurrentSession().user().addBuddy(j.getCurUser(), function(k, l) {
					NgLogD("Add Buddy Callback");
					if (k) {
						j._showErrorToast(k)
					} else {
						j.getCurUser().invited = true;
						j._checkRelationship()
					}
					j._updateAddButton()
				})
			}.bind(this))
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccordionCVC"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccordionCVC"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/AccordionCVC"] = a;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var c = a.AccordionCVC = b.subclass({
		classname: "AccordionCVC",
		loadView: function($super) {
			$super();
			NgLogD("AccordionCVC/loadView end.")
		},
		batchChangeMode: false,
		_changedLayout: function() {
			if (!this.batchChangeMode) {
				this.view().layoutSubviews()
			}
		},
		toggleExpandSectionAtIndex: function(d) {
			var e = this.sectionAtIndex(d);
			if (!e) {
				return
			}
			this.toggleExpandSectionByHeaderView(e.headerView)
		},
		toggleExpandSectionByHeaderView: function(d) {
			var f = null;
			var g = this.view().getSections();
			var e;
			for (e in g) {
				if (!g.hasOwnProperty(e)) {
					continue
				}
				f = g[e];
				if (f.getTitleView() === d) {
					break
				}
			}
			if (!f) {
				this.logd("No section with that titleview!");
				return
			}
			f.setExpanded(!f.isExpanded);
			this._changedLayout(e)
		},
		removeSectionAtIndex: function(d, e) {
			var f = this.view().getSections();
			f.splice(d, 1);
			this.view().setSections(f, this.batchChangeMode || e);
			if (!e) {
				this._changedLayout(d)
			}
		},
		insertSectionAtIndex: function(f, d) {
			var e = this.view().content.indexOf(f);
			if (e != -1) {
				this.removeSectionAtIndex(e, true)
			}
			var g = this.view().getSections();
			g.splice(d, 0, f);
			this.view().setSections(g, this.batchChangeMode);
			this._changedLayout(d)
		},
		sectionAtIndex: function(d) {
			return this.view().getSections()[d]
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionTitleView"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionTitleView"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionTitleView"] = g;
	var e = require("NGCore/Client/UI").UI;
	var d = e.ViewGeometry.Rect;
	var c = e.ViewGeometry.Scale;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		AccordionTitleStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Accordion").TitleStyle
		}
	});
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView");
	var a = h.Composite;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeButton").ComponentsButton;
	var m = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeComponents");
	var f = m.Components;
	var l = m.Component;
	var j = g.AccordionTitleView = a({
		key: "content",
		component: f.Label,
		altKey: "main"
	}, {
		key: "disclosure",
		component: f.Image
	}, f.AddOrders.Generator("content", "disclosure"), {
		classname: "AccordionTitleView",
		_insetRatio: 0.1,
		_controller: null,
		$_layoutFunc: null,
		_expanded: false,
		initialize: function($super, o, n) {
			this.expandedStateFlag = e.State.Selected;
			$super(o);
			this._controller = n;
			this._accessoryText = "";
			this._baseText = "";
			if (!j._layoutFunc) {
				j._layoutFunc = f.Layouts.TwoHorizontalGenerator("content", "disclosure").layoutSubviews
			}
			b.AccordionTitleStyle.applyTo(this);
			this.content.setFrameSize([300, 30]);
			return this
		},
		destroy: function() {},
		layoutSubviews: function() {
			var n = new d(this.content.getFrame());
			if (n.isEmpty()) {
				return
			}
			n.x = n.y = 0;
			this.content.setFrame(n);
			var o = n.h * this._style.props().disclosure.insetRatio;
			this.setDisclosureInset([o, o, o, o]);
			this.getDisclosureView().setFrameSize([n.w * this._style.props().disclosure.widthRatio, n.h]);
			j._layoutFunc.call(this);
			this.setText(this._formattedTitle())
		},
		_formattedTitle: function() {
			return "" + this._baseText + " (" + this._accessoryText + ")"
		},
		_baseText: null,
		setTitle: function(n) {
			this._baseText = n;
			this.content.setText(this._formattedTitle())
		},
		_accessoryText: null,
		setAccessoryText: function(n) {
			this._accessoryText = n;
			this.content.setText(this._formattedTitle())
		}
	}, k);
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListSection"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListSection"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/AccordionListSection"] = c;
	var f = require("NGCore/Client/UI").UI;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var b = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection;
	var a = c.AccordionListSection = e.subclass({
		$rowsHiddenPlaceholder: null,
		classname: "AccordionListSection",
		isExpanded: null,
		hiddenItems: null,
		normalRowHeight: null,
		initialize: function($super, g) {
			$super(g);
			if (!a.rowsHiddenPlaceholder) {
				a.rowsHiddenPlaceholder = new(f.ListViewItem.subclass({
					classname: "AccordionListSectionRowShiddenPlaceholder",
					_reuseId: "accordionlistsection_rowshiddencell",
					initialize: function($super) {
						$super();
						this.setMessage(b("Rows Hidden"))
					},
					_message: "",
					setMessage: function(h) {
						this._message = h
					},
					_onCreateView: function() {
						return new f.CellView({})
					},
					_onSetView: function(h) {
						h.setTitle(this._message);
						h.onclick = function() {
							this.logd("Rows Hidden Clicked!")
						};
						h.setState(f.State.Normal)
					}
				}))()
			}
			if (!this._items) {
				this.logd("Adding the AccordionListSection hidden placeholder");
				this.setRowHeight(1);
				this.setItems([a.rowsHiddenPlaceholder]);
				this.hiddenItems = [];
				this.isExpanded = false
			}
			this.normalRowHeight = 50;
			return this
		},
		destroy: function() {
			if (this.getTitleView()) {
				this.getTitleView().release()
			}
		},
		setExpanded: function(j) {
			if (j === this.isExpanded) {
				return
			}
			var g, h;
			if (j) {
				this.flush();
				this.setRowHeight(this.normalRowHeight);
				this.setItems(this.hiddenItems.slice());
				g = this.getTitleView();
				g.addState(g.expandedStateFlag);
				if (this._listView) {
					this.logd("Setting Sections (empty)");
					this.logd("Setting Sections (full)");
					this.logd("ReloadData");
					this._listView.reloadData();
					this.logd("Post reloadData")
				}
			} else {
				g = this.getTitleView();
				g.clearState(g.expandedStateFlag);
				this.updateVisibleRange();
				this.flush();
				this.hiddenItems = this._items;
				this.setRowHeight(1);
				this.setItems([a.rowsHiddenPlaceholder]);
				if (this._listView) {
					this.logd("Setting Sections (empty)");
					this.logd("Setting Sections (full)");
					this.logd("ReloadData");
					this._listView.reloadData();
					this.logd("Post reloadData")
				}
			}
			this.isExpanded = j
		},
		calculateRowHeightForListView: function(g) {
			var h = g.getFrame()[3] / 5;
			this.setRowHeight((this.isExpanded) ? h : 1)
		},
		calculateItemPositions: function($super) {
			if (!this.__rowHeightInited && this._listView) {
				var g = new f.ViewGeometry.Rect(this._listView.getFrame());
				if (g.isEmpty()) {
					return
				}
				this.normalRowHeight = g.h / 5;
				if (this.isExpanded) {
					this.setRowHeight(this.normalRowHeight)
				}
				this.__rowHeightInited = true
			}
			if ($super) {
				$super()
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Accordion"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Accordion"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Accordion"] = b;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = c.ScaledCorners;
	var d = c.ScaledTextSize;
	c.lazyLoad(b, "TitleStyle", function() {
		return {
			style: {
				gradient: {
					gradient: ["FF134a93 0.0", "FF3372bb 1.0"],
					innerShadow: "FF00 1.0 {0,0}"
				},
				selectedGradient: {
					gradient: ["FF6eb6e3 0.000", "FF3371bb 1.000"]
				}
			},
			children: {
				content: {
					style: {
						textColor: "FFFFFFFF",
						textShadow: "FF00 2.0 {0,-1}",
						textGravity: [0, 0.5],
						textInsets: [10, 10, 10, 10],
						textSize: d(12)
					}
				}
			},
			extras: {
				widthRatio: 0.075,
				insetRatio: 0.2
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GameProfileController"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GameProfileController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/GameProfileController"] = f;
	var j = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/UI").UI;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		FullScreenshotController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/FullScreenshotController").FullScreenshotController
		},
		SupportWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen").SupportWebScreen
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		GameDownloadBar: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/GameDownloadBar").GameDownloadBar
		},
		UserButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserButton").UserButton
		},
		CCView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/CCView").CCView
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		GameProfileStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameProfileStyle")
		}
	});
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController;
	var k = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Composite/CompositeView");
	var a = g.Composite;
	var e = g.CompositeLayoutGroup;
	var d = f.GameProfileController = h.subclass({
		classname: "GameProfileController",
		analyticsName: "GameProfile",
		initialize: function($super, l) {
			$super();
			if (!l) {
				NgLogE("GameProfileController cannot be initialized without a game");
				return
			}
			this._game = l;
			b.GameProfileStyle;
			this._sheet = b.OldStyle.registeredStyle("social.us.gameprofile").props();
			this._commonSheet = b.OldStyle.registeredStyle("social.us.commonelements").props();
			this._totalWidth = j.Capabilities.getScreenHeight();
			this._totalHeight = j.Capabilities.getScreenWidth();
			this._showingWholeInfoArea = false;
			this._showingWholeFriendArea = false;
			this._friendButtons = new Array();
			this._totalGameDescLines = this._getGameDescTotalLines();
			this._isSuggestedFriends = false
		},
		destroy: function() {
			if (this._loadingSection) {
				this._loadingSection.release();
				this._loadingSection = null
			}
			this.clearFriendList(false);
			this._cleanViews()
		},
		xSize: function(l) {
			return (l / 800) * this._totalWidth
		},
		ySize: function(l) {
			return (l / 480) * this._totalHeight
		},
		infoAreaX: function(l) {
			return this.xSize(l - this._sheet.infoAreaXRatio)
		},
		infoAreaY: function(l) {
			return this.ySize(l - this._sheet.infoAreaYRatio)
		},
		friendAreaX: function(l) {
			return this.xSize(l - this._sheet.friendAreaXRatio)
		},
		friendAreaY: function(l) {
			return this.ySize(l - this._sheet.friendAreaYRatio)
		},
		screenshotAreaX: function(l) {
			return this.xSize(l - this._sheet.screenshotAreaXRatio)
		},
		screenshotAreaY: function(l) {
			return this.ySize(l - this._sheet.screenshotAreaYRatio)
		},
		bottomAreaX: function(l) {
			return this.xSize(l - this._sheet.bottomAreaXRatio)
		},
		bottomAreaY: function(l) {
			return this.ySize(l - this._sheet.bottomAreaYRatio)
		},
		loadView: function($super) {
			NgLogD("GameProfileController: loadView");
			this.setView(new b.CCView());
			$super();
			this.view()._headerHeightRatio = 0
		},
		_setupContent: function() {
			this._cleanViews();
			this._scrollView = this.view().getContentView();
			var u = this;
			var o = this.getInfoAreaHeight();
			var p = this.getFriendAreaHeight();
			var I = this.getScreenshotAreaHeight();
			var r = this.getBottomAreaHeight();
			this._infoArea = this.retainView(new c.View());
			this._infoArea.setAttributes(this._sheet.gameProfileArea);
			this._gameIcon = this.retainView(new c.Image());
			this._gameIcon.setFrame([this.infoAreaX(this._sheet.gameIconXRatio), this.infoAreaY(this._sheet.gameIconYRatio), this.xSize(this._sheet.gameIconWidthRatio), this.ySize(this._sheet.gameIconHeightRatio)]);
			this._gameIcon.setImage(this._game.getDefinedIcon());
			this._infoArea.addChild(this._gameIcon);
			this._gameName = this.retainView(new c.Label());
			this._gameName.setText(this._game.name);
			this._gameName.setFrame([this.infoAreaX(this._sheet.gameNameXRatio), this.infoAreaY(this._sheet.gameNameYRatio), this.xSize(this._sheet.gameNameWidthRatio), this.ySize(this._sheet.gameNameHeightRatio)]);
			this._gameName.setTextGravity(c.ViewGeometry.Gravity.Left);
			this._gameName.setAttributes(this._sheet.gameName);
			this._infoArea.addChild(this._gameName);
			this._gamePublisher = this.retainView(new c.Label());
			this._gamePublisher.setText(this._game.publisher);
			this._gamePublisher.setFrame([this.infoAreaX(this._sheet.gamePublisherXRatio), this.infoAreaY(this._sheet.gamePublisherYRatio), this.xSize(this._sheet.gamePublisherWidthRatio), this.ySize(this._sheet.gamePublisherHeightRatio)]);
			this._gamePublisher.setTextGravity(c.ViewGeometry.Gravity.Left);
			this._gamePublisher.setAttributes(this._sheet.gamePublisher);
			this._infoArea.addChild(this._gamePublisher);
			this._gameDesc = this.retainView(new c.Label());
			if (this._game.description) {
				this._gameDesc.setText(this._game.description.replace(/\r\n/g, "\n").replace(/\n\n/g, "\n\u00A0\n"))
			}
			this._gameDesc.setFrame([this.infoAreaX(this._sheet.gameDescXRatio), this.infoAreaY(this._sheet.gameDescYRatio), this.xSize(this._sheet.gameDescWidthRatio), this.getGameDescHeight()]);
			this._gameDesc.setTextGravity(c.ViewGeometry.Gravity.TopLeft);
			this._gameDesc.setAttributes(this._sheet.gameDesc);
			this._infoArea.addChild(this._gameDesc);
			this._downloadBar = this.retainView(new b.GameDownloadBar(true, false));
			this._downloadBar.setFrame([this.infoAreaX(this._sheet.downloadBarXRatio), this.infoAreaY(this._sheet.downloadBarYRatio), this.xSize(this._sheet.downloadBarWidthRatio), this.ySize(this._sheet.downloadBarHeightRatio)]);
			this._downloadBar.initLayout();
			this._infoArea.addChild(this._downloadBar);
			this._downloadBar.setGame(this._game);
			if (this._hasExpandableGameDesc()) {
				var B = this.xSize(this._sheet.readMoreWidthRatio);
				var w = this.ySize(this._sheet.readMoreHeightRatio);
				var t = this.xSize(this._sheet.readMoreImageWidthRatio);
				var q = B - t;
				var D = this.xSize(this._sheet.readMoreTextInsetRatio);
				this._readMore = this.retainView(new b.UnspammableButton());
				this._readMore.setFrame([this.infoAreaX(this._sheet.readMoreXRatio), o - this.ySize(this._sheet.readMoreYRatio), B, w]);
				this._readMore.setText(this.getReadMoreText());
				this._readMore.setTextGravity(c.ViewGeometry.Gravity.Right);
				this._readMore.setTextInsets([0, D, 0, 0]);
				this._readMore.setImage(this.getReadMoreImage());
				this._readMore.setImageGravity(c.ViewGeometry.Gravity.Right);
				this._readMore.setImageInsets([0, 0, 0, q]);
				this._readMore.setAttributes(this._sheet.readMore);
				this._readMore.setTextColor("FF000000", c.State.Pressed);
				this._readMore.onclick = function() {
					u.toggleInfoAreaHeight()
				};
				this._infoArea.addChild(this._readMore)
			}
			this._scrollView.addChild(this._infoArea);
			this._friendArea = this.retainView(new c.View());
			this._friendArea.setAttributes(this._sheet.gameProfileArea);
			this._friendCountLabel = this.retainView(new c.Label());
			this._friendCountLabel.setFrame([this.friendAreaX(this._sheet.friendCountLabelXRatio), this.friendAreaY(this._sheet.friendCountLabelYRatio), this.xSize(this._sheet.friendCountLabelWidthRatio), this.ySize(this._sheet.friendCountLabelHeightRatio)]);
			this._friendCountLabel.setTextGravity(c.ViewGeometry.Gravity.Left);
			this._friendCountLabel.setAttributes(this._sheet.friendCountLabel);
			this._friendArea.addChild(this._friendCountLabel);
			var m = this.xSize(this._sheet.showMoreWidthRatio);
			var F = this.ySize(this._sheet.showMoreHeightRatio);
			var l = this.xSize(this._sheet.showMoreImageWidthRatio);
			var y = m - l;
			var n = this.xSize(this._sheet.showMoreTextInsetRatio);
			this._showMore = this.retainView(new b.UnspammableButton());
			this._showMore.setFrame([this.friendAreaX(this._sheet.showMoreXRatio), p - this.ySize(this._sheet.showMoreYRatio), m, F]);
			this._showMore.setText(this.getShowMoreText());
			this._showMore.setTextGravity(c.ViewGeometry.Gravity.Right);
			this._showMore.setTextInsets([0, n, 0, 0]);
			this._showMore.setImage(this.getShowMoreImage());
			this._showMore.setImageGravity(c.ViewGeometry.Gravity.Right);
			this._showMore.setImageInsets([0, 0, 0, y]);
			this._showMore.setAttributes(this._sheet.showMore);
			this._showMore.setTextColor("FF000000", c.State.Pressed);
			this._showMore.onclick = function() {
				u.toggleFriendAreaHeight()
			};
			this._screenshotArea = this.retainView(new c.View());
			this._screenshotArea.setAttributes(this._sheet.gameProfileArea);
			this._screenshotsHeader = this.retainView(new c.Label());
			this._screenshotsHeader.setFrame([this.screenshotAreaX(this._sheet.screenshotsHeaderXRatio), this.screenshotAreaY(this._sheet.screenshotsHeaderYRatio), this.xSize(this._sheet.screenshotsHeaderWidthRatio), this.ySize(this._sheet.screenshotsHeaderHeightRatio)]);
			this._screenshotsHeader.setText(k("%1d Screenshots", this.getNumScreenshots()));
			this._screenshotsHeader.setTextGravity(c.ViewGeometry.Gravity.Left);
			this._screenshotsHeader.setAttributes(this._sheet.screenshotsHeader);
			this._screenshotArea.addChild(this._screenshotsHeader);
			var J = this.getNumScreenshots();
			var s = this._sheet.maxScreenshotsPerRow;
			for (var E = 0; E < J; E++) {
				var z = E % s;
				var v = Math.floor(E / s);
				var x = this.screenshotAreaX(this._sheet.screenThumbXRatio) + z * this.xSize(this._sheet.screenThumbWidthRatio + this._sheet.screenThumbXMarginRatio);
				var A = this.screenshotAreaY(this._sheet.screenThumbYRatio) + v * this.ySize(this._sheet.screenThumbHeightRatio + this._sheet.screenThumbYMarginRatio);
				var C = this.getThumbnail(E);
				var G = this.retainView(new b.UnspammableButton());
				G.setImage(b.Assets.image("no-game-icon.png"));
				G.setFrame([x, A, this.xSize(this._sheet.screenThumbWidthRatio), this.ySize(this._sheet.screenThumbHeightRatio)]);
				G.setAttributes(this._sheet.screenThumb);
				G.setImage(C);
				var H = this._game.phone_screenshot_urls;
				G.onclick = (function(L, K) {
					return function() {
						if (b.ServiceHost.navController) {
							b.ServiceHost.navController.pushViewController(new b.FullScreenshotController(L, K))
						}
					}
				})(u._game, E);
				this._screenshotArea.addChild(G)
			}
			this._scrollView.addChild(this._screenshotArea);
			this._bottomArea = this.retainView(new c.View());
			this._bottomArea.setAttributes(this._sheet.gameProfileArea);
			this._support = this.retainView(new b.UnspammableButton());
			this._support.setFrame([this.bottomAreaX(this._sheet.supportXRatio), this.bottomAreaY(this._sheet.supportYRatio), this.xSize(this._sheet.supportWidthRatio), this.ySize(this._sheet.supportHeightRatio)]);
			this._support.setText(k("Support"));
			this._support.setTextGravity(c.ViewGeometry.Gravity.Center);
			this._support.setAttributes(this._commonSheet.standardButton);
			this._support.onclick = function() {
				if (b.ServiceHost.navController) {
					b.ServiceHost.showLoadingHelper(function() {
						b.ServiceHost.navController.pushViewController(new b.SupportWebScreen())
					})
				}
			};
			this._bottomArea.addChild(this._support);
			this._scrollView.addChild(this._bottomArea);
			this.friendCountChanged();
			this.updateAreaFrames();
			this.loadFriends()
		},
		startLoadingProgess: function() {},
		stopLoadingProgress: function() {},
		willActivateTab: function($super) {
			$super();
			NgLogD("GameProfileController willActivateTab " + this.parentController);
			setTimeout(this.bind(function() {
				$super();
				this._setupContent()
			}), 50)
		},
		didActivateTab: function($super) {
			$super()
		},
		toggleInfoAreaHeight: function() {
			if (this._infoArea) {
				this._showingWholeInfoArea = !this._showingWholeInfoArea;
				this.updateAreaFrames();
				if (this._readMore) {
					var m = new c.ViewGeometry.Rect(this._readMore.getFrame());
					if (!m.isEmpty()) {
						m.y = this.getInfoAreaHeight() - this.ySize(this._sheet.readMoreYRatio);
						this._readMore.setFrame(m)
					}
					this._readMore.setText(this.getReadMoreText());
					this._readMore.setImage(this.getReadMoreImage())
				}
				if (this._gameDesc) {
					var l = new c.ViewGeometry.Rect(this._gameDesc.getFrame());
					if (!l.isEmpty()) {
						l.h = this.getGameDescHeight();
						this._gameDesc.setFrame(l)
					}
					if (this._game.description) {
						this._gameDesc.setText(this._game.description.replace(/\r\n/g, "\n").replace(/\n\n/g, "\n\u00A0\n"))
					}
				}
				if (!this._showingWholeInfoArea) {
					this.view().getContentView().setScrollPosition([0, 0])
				}
			}
		},
		toggleFriendAreaHeight: function() {
			if (this._friendArea) {
				this._showingWholeFriendArea = !this._showingWholeFriendArea;
				if (this._showMore) {
					this._showMore.setText(this.getShowMoreText());
					this._showMore.setImage(this.getShowMoreImage())
				}
				var l = this.getMaxFriendsToShow();
				for (var n = 0; n < this._friendButtons.length; n++) {
					var m = this._friendButtons[n];
					if (n < l) {
						if (!m.getParent()) {
							this._friendArea.addChild(m)
						}
					} else {
						if (m.getParent()) {
							m.removeFromParent()
						}
					}
				}
				this.updateFriendAreaHeight();
				if (!this._showingWholeFriendArea) {
					this.view().getContentView().setScrollPosition([0, 0])
				}
			}
		},
		friendCountChanged: function() {
			if (this._friendCountLabel) {
				if (this._isSuggestedFriends) {
					this._friendCountLabel.setText(k("%1d suggested friends", this._friendButtons.length))
				} else {
					this._friendCountLabel.setText(k("%1d friends play this game", this._friendButtons.length))
				}
			}
			if (this._friendArea && this._showMore) {
				var l = this._sheet.maxFriendsPerRow;
				if (this._friendButtons.length > l) {
					if (!this._showMore.getParent()) {
						this._friendArea.addChild(this._showMore)
					}
				} else {
					if (this._showMore.getParent()) {
						this._showMore.removeFromParent()
					}
				}
			}
			if (this._scrollView && this._friendArea) {
				if (this._friendButtons.length > 0) {
					if (!this._friendArea.getParent()) {
						this._scrollView.addChild(this._friendArea)
					}
				} else {
					if (this._friendArea.getParent()) {
						this._friendArea.removeFromParent()
					}
				}
			}
		},
		updateFriendAreaHeight: function() {
			this.parentController.navController._host.hideLoadingLabel();
			this.updateAreaFrames();
			if (this._showMore) {
				var l = new c.ViewGeometry.Rect(this._showMore.getFrame());
				if (!l.isEmpty()) {
					l.y = this.getFriendAreaHeight() - this.ySize(this._sheet.showMoreYRatio);
					this._showMore.setFrame(l)
				}
			}
		},
		loadFriends: function() {
			this._isSuggestedFriends = false;
			this.clearFriendList();
			var m = this;
			var n = b.Session.getCurrentSession();
			if (n) {
				var l = n.user();
				if (l) {
					l.getFriendsListForGame(this._game).forAll(function(q, o, p) {
						if (m._friendButtons.length < m.getMaxFriendsToLoad()) {
							m.addFriendToList(o);
							q(true)
						} else {
							q(false)
						}
					}, function(o) {
						if ((typeof o) !== "undefined") {
							m._showErrorAlertDialog(o)
						} else {
							if (!m._friendButtons.length) {
								m.loadSuggestedFriends()
							}
						}
					})
				} else {
					this.loge("Requires Current User!")
				}
			} else {
				this.loge("Requires imports.Session!")
			}
		},
		_showErrorAlertDialog: function(m) {
			var l = (new c.AlertDialog()).retain();
			l.setTitle(k("Error"));
			l.setText(k("Error accessing system.  Please try again later. Error: %1s", m));
			l.setChoices([k("OK")]);
			l.onchoice = function(n) {
				l.release();
				l = null
			};
			l.show()
		},
		loadSuggestedFriends: function() {
			this._isSuggestedFriends = true;
			this.clearFriendList();
			var m = this;
			var n = b.Session.getCurrentSession();
			if (n) {
				var l = n.user();
				if (l) {
					l.getFeaturedUsersList().forAll(function(q, o, p) {
						if (m._friendButtons.length < m.getMaxSuggestedFriendsToLoad()) {
							m.addFriendToList(o);
							q(true)
						} else {
							q(false)
						}
					}, function(o) {
						if ((typeof o) !== "undefined") {
							m._showErrorAlertDialog(o)
						}
					})
				}
			}
		},
		addFriendToList: function(n) {
			if (n) {
				var r = this._sheet.maxFriendsPerRow;
				var o = this._friendButtons.length;
				var u = o % r;
				var s = Math.floor(o / r);
				var t = this.xSize(this._sheet.friendButtonWidthRatio);
				var q = this.ySize(this._sheet.friendButtonHeightRatio);
				var p = this.friendAreaX(this._sheet.friendButtonXRatio) + u * (t + this.xSize(this._sheet.friendButtonXMarginRatio));
				var l = this.friendAreaY(this._sheet.friendButtonYRatio) + s * (q + this.ySize(this._sheet.friendButtonYMarginRatio));
				var m = (new b.UserButton(n)).retain();
				m.setUserButtonFrame([p, l, t, q]);
				this._friendButtons.push(m);
				this.friendCountChanged();
				if (this._friendArea && o < this.getMaxFriendsToShow()) {
					this._friendArea.addChild(m);
					if (u === 0) {
						this.updateFriendAreaHeight()
					}
				}
				NgLogD("GameProfileController: added friend " + n.gamertag + " to list")
			}
		},
		clearFriendList: function(n) {
			for (var m = 0; m < this._friendButtons.length; m++) {
				var l = this._friendButtons[m];
				if (l) {
					if (l.getParent()) {
						l.removeFromParent()
					}
					l.release()
				}
			}
			this._friendButtons = new Array();
			if (n === undefined || n) {
				this.friendCountChanged()
			}
		},
		updateAreaFrames: function() {
			var m = this.view().getContentWidth();
			var p = this.getInfoAreaHeight();
			var q = this.getFriendAreaHeight();
			var l = this.getScreenshotAreaHeight();
			var o = this.getBottomAreaHeight();
			var n = q;
			if (this._friendArea) {
				if (!this._friendArea.getParent()) {
					n = 0
				}
			}
			if (this._infoArea) {
				this._infoArea.setFrame([0, 0, m, p])
			}
			if (this._friendArea) {
				this._friendArea.setFrame([0, p, m, q])
			}
			if (this._screenshotArea) {
				this._screenshotArea.setFrame([0, p + n, m, l])
			}
			if (this._bottomArea) {
				this._bottomArea.setFrame([0, p + n + l, m, o])
			}
			if (this._scrollView) {
				this._scrollView.setContentSize(m, p + n + l + o)
			}
		},
		getInfoAreaHeight: function() {
			return (this.ySize(this._sheet.infoAreaHeightRatio) + this.getGameDescExtraHeight())
		},
		getFriendAreaHeight: function() {
			var n = 0;
			for (var m = 0; m < this._friendButtons.length; m++) {
				if (this._friendButtons[m].getParent()) {
					n++
				} else {
					break
				}
			}
			var l = this.ySize(this._sheet.friendAreaHeightRatio);
			var o = Math.ceil(n / this._sheet.maxFriendsPerRow);
			l += o * this.ySize(this._sheet.friendButtonHeightRatio) + (o - 1) * this.ySize(this._sheet.friendButtonYMarginRatio);
			return l
		},
		getScreenshotAreaHeight: function() {
			var l = this.ySize(this._sheet.screenshotAreaHeightRatio);
			var n = this._sheet.maxScreenshotsPerRow;
			var m = this.getNumScreenshots();
			var o = Math.ceil(m / n);
			l += o * this.ySize(this._sheet.screenThumbHeightRatio) + (o - 1) * this.ySize(this._sheet.screenThumbYMarginRatio);
			return l
		},
		getBottomAreaHeight: function() {
			return this.ySize(this._sheet.bottomAreaHeightRatio)
		},
		_hasExpandableGameDesc: function() {
			return this._totalGameDescLines > this._sheet.gameDescLinesDefault
		},
		_getGameDescTotalLines: function() {
			var m = this._sheet.gameDescLinesDefault;
			var p = m;
			if (this._game.description) {
				var r = this.xSize(this._sheet.gameDescWidthRatio);
				var o = Math.max(1, this.xSize(this._sheet.gameDescCharWidthRatio));
				var s = Math.max(1, Math.floor(r / o));
				p = Math.max(m, Math.ceil(this._game.description.length / s));
				var l = this._game.description.split("\n");
				var n = 0;
				for (var q = 0; q < l.length; q++) {
					if (l[q].length === 1) {
						n++
					}
				}
				p += n;
				NgLogD("GameProfileController: numLines = " + p)
			}
			return p
		},
		getGameDescHeight: function() {
			var m = this._showingWholeInfoArea ? this._totalGameDescLines : this._sheet.gameDescLinesDefault;
			var l = this.ySize(this._sheet.gameDescLineHeightRatio);
			return Math.round(m * l)
		},
		getGameDescExtraHeight: function() {
			var m = this._sheet.gameDescLinesDefault;
			var l = this.ySize(this._sheet.gameDescLineHeightRatio);
			return Math.max(0, this.getGameDescHeight() - (m * l))
		},
		getReadMoreText: function() {
			if (this._showingWholeInfoArea) {
				return k("Hide")
			}
			return k("Read More")
		},
		getReadMoreImage: function() {
			if (this._showingWholeInfoArea) {
				return b.Assets.image("show_less_arrow.png")
			}
			return b.Assets.image("show_more_arrow.png")
		},
		getShowMoreText: function() {
			if (this._showingWholeFriendArea) {
				return k("Hide")
			}
			return k("Show More")
		},
		getShowMoreImage: function() {
			if (this._showingWholeFriendArea) {
				return b.Assets.image("show_less_arrow.png")
			}
			return b.Assets.image("show_more_arrow.png")
		},
		getMaxFriendsToLoad: function() {
			return 100
		},
		getMaxSuggestedFriendsToLoad: function() {
			return 20
		},
		getMaxFriendsToShow: function() {
			if (this._showingWholeFriendArea) {
				return this.getMaxFriendsToLoad()
			}
			return this._sheet.maxFriendsPerRow
		},
		getNumScreenshots: function() {
			if (!this._game.phone_screenshot_urls) {
				return 0
			}
			return this._game.phone_screenshot_urls.length
		},
		getThumbnail: function(l) {
			if ((this._game.phone_thumbnail_urls) && (l < this._game.phone_thumbnail_urls.length)) {
				if (this._game.phone_thumbnail_urls[l].length > 0) {
					return this._game.phone_thumbnail_urls[l]
				}
			}
			return this._game.phone_screenshot_urls[l]
		}
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FullScreenshotController"] = function() {
	var f = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FullScreenshotController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FullScreenshotController"] = f;
	var e = require("NGCore/Client/UI").UI;
	var c = require("NGCore/Client/Device").Device;
	var k = require("NGCore/Client/Core").Core;
	var b = e.ViewGeometry.Scale;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		GameProfileStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameProfileStyle")
		}
	});
	var d = false;
	var l = false;
	var h = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/NavigableViewController").NavigableViewController;
	var g = f.FullScreenshotController = h.subclass({
		classname: "FullScreenshotController",
		_overlayButton: null,
		_screenClose: null,
		_screenshots: null,
		_screenIndex: 0,
		_landscapeFrame: null,
		_portraitFrame: null,
		_sheet: null,
		_gameForScreens: null,
		_retainedViews: null,
		initialize: function($super, m, n) {
			$super();
			this._gameForScreens = m;
			a.GameProfileStyle;
			this._sheet = a.OldStyle.registeredStyle("social.us.gameprofile").props();
			this._landscapeFrame = [0, 0, k.Capabilities.getScreenHeight(), k.Capabilities.getScreenWidth()];
			this._portraitFrame = [0, 0, k.Capabilities.getScreenWidth(), k.Capabilities.getScreenHeight()];
			this._screenshots = [];
			if (n) {
				this._screenIndex = n
			}
		},
		destroy: function() {
			this.stopOrientationListening();
			if (this._retainedViews) {
				for (var m = 0; m < this._retainedViews.length; m++) {
					var n = this._retainedViews[m];
					if (n) {
						n.release()
					}
				}
			}
			this._retainedViews = new Array()
		},
		retainView: function(m) {
			if (m) {
				m.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(m)
			}
			return m
		},
		loadView: function($super) {
			if (!this._view) {
				this.setView(new e.View())
			}
			$super();
			var o = this.bind(function(q) {
				var p = q ? q.direction : undefined;
				switch (p) {
					case 1:
						this.setScreenIndex(this._screenIndex + 1);
						break;
					case 2:
						this.setScreenIndex(this._screenIndex - 1);
						break;
					default:
						return
				}
			});
			this.view().setAttributes(this._sheet.screenFullWrapper);
			for (var n in this._gameForScreens.phone_screenshot_urls) {
				var m = this.retainView(new e.Image());
				if (l) {
					m.setImage(require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets.image("no-game-icon.png"))
				}
				if (!d) {
					m.setImage(this._gameForScreens.phone_screenshot_urls[n])
				}
				this._screenshots[this._screenshots.length] = m;
				this.view().addChild(m)
			}
			this._screenClose = this.retainView(new e.Button());
			this._screenClose.setText("x");
			this._screenClose.setAttributes(this._sheet.screenClose);
			this._screenClose.onclick = this.bind(function() {
				if (this.navController) {
					this.navController.back()
				}
			});
			this._overlayButton = this.retainView(new e.Button());
			this._overlayButton.setOnSwipe(o);
			this._overlayButton.setOnClick(function() {});
			this.view().addChild(this._overlayButton);
			this.layoutSubviews(this._landscapeFrame)
		},
		startOrientationListening: function() {
			if (!this.oListener) {
				this.oListener = new j();
				c.OrientationEmitter.addListener(this.oListener, this.onOrientationUpdate.bind(this))
			}
		},
		stopOrientationListening: function() {
			if (this.oListener) {
				c.OrientationEmitter.removeListener(this.oListener);
				this.oListener.destroy();
				this.oListener = null
			}
		},
		storeOrientation: function() {
			this._oldOrientation = c.OrientationEmitter.getInterfaceOrientation()
		},
		restoreOrientation: function() {
			if (this._oldOrientation !== undefined) {
				if (c.OrientationEmitter.getInterfaceOrientation() != this._oldOrientation) {
					this.setInterfaceOrientation(this._oldOrientation)
				}
			}
		},
		setScreenIndex: function(o, n) {
			if (o < 0 || o >= this._gameForScreens.phone_screenshot_urls.length) {
				return
			}
			this._screenIndex = o;
			if (d) {
				this._screenshots[o].setImage(this._gameForScreens.phone_screenshot_urls[o])
			}
			var q = n ? 0 : 500;
			var r = this.view().getFrame();
			var m = r[2];
			var p = this;
			e.animate(function() {
				NgLogD("TRYING TO ANIMATE GAME SCREENSHOTS: " + o + " * " + m);
				var s = -o * m;
				for (var t in p._screenshots) {
					p._screenshots[t].setFrame([s, 0, r[2], r[3]]);
					s += m
				}
			}, q, function() {
				NgLogD("Finished Animation")
			})
		},
		layoutSubviews: function(q) {
			this.view().setFrame([0, 0, q[2], q[3]]);
			if (this._overlayButton) {
				this._overlayButton.setFrame([0, 0, q[2], q[3]])
			}
			var m = 0;
			var o = q[2];
			for (var p in this._screenshots) {
				var n = this._screenshots[p];
				if (n) {
					n.setFrame([m, 0, q[2], q[3]])
				}
				m += o
			}
			if (this._screenClose) {
				var r = Math.max(q[2], q[3]);
				this._screenClose.setFrame([q[2] - r * (this._sheet.screenCloseWidthRatio + this._sheet.screenCloseXRatio), r * this._sheet.screenCloseYRatio, r * this._sheet.screenCloseWidthRatio, r * this._sheet.screenCloseHeightRatio])
			}
			this.setScreenIndex(this._screenIndex, true)
		},
		willPush: function($super, m) {
			$super(m);
			this.prepareNavController()
		},
		didPush: function($super, m) {
			$super(m);
			e.Window.document.addChild(this._screenClose);
			this.storeOrientation();
			this.startOrientationListening()
		},
		willPop: function($super, m) {
			$super(m);
			e.Window.document.removeChild(this._screenClose);
			this.stopOrientationListening();
			this.restoreOrientation()
		},
		didPop: function($super, m) {
			$super(m);
			this.restoreNavController()
		},
		willReshow: function($super, m) {
			$super(m);
			this.prepareNavController()
		},
		didReshow: function($super, m) {
			$super(m);
			e.Window.document.addChild(this._screenClose);
			this.storeOrientation();
			this.startOrientationListening()
		},
		willHide: function($super, m) {
			$super(m);
			e.Window.document.removeChild(this._screenClose);
			this.stopOrientationListening();
			this.restoreOrientation()
		},
		didHide: function($super, m) {
			$super(m);
			this.restoreNavController()
		},
		prepareNavController: function() {
			a.ServiceHost.navController.setLandscapeOnly(false);
			this.navController._host.resurfaceControls(true)
		},
		restoreNavController: function() {
			a.ServiceHost.navController.setLandscapeOnly(true);
			this.navController._host.resurfaceControls()
		},
		onOrientationUpdate: function(m) {
			if (m) {
				if (m.type == c.OrientationEmitter.OrientationType.Device) {
					this.setInterfaceOrientation(m.orientation)
				}
			}
		},
		setInterfaceOrientation: function(n) {
			var q = null;
			var o = n;
			if (n == c.OrientationEmitter.Orientation.Portrait || n == c.OrientationEmitter.Orientation.PortraitUpsideDown) {
				q = this._portraitFrame;
				if (k.Capabilities.getPlatformOS().toLowerCase() === "android") {
					o = c.OrientationEmitter.Orientation.Portrait
				}
			} else {
				q = this._landscapeFrame;
				if (n != c.OrientationEmitter.Orientation.LandscapeRight) {
					o = c.OrientationEmitter.Orientation.LandscapeLeft
				}
				if (k.Capabilities.getPlatformOS().toLowerCase() === "android") {
					o = c.OrientationEmitter.Orientation.LandscapeLeft
				}
			}
			if (o == c.OrientationEmitter.getInterfaceOrientation()) {
				return
			}
			if (!a.ServiceHost.isMenuDrawerClosedOrClosing()) {
				a.ServiceHost.closeMenuDrawer(false, false)
			}
			var m;
			for (m in this._screenshots) {
				this._screenshots[m].removeFromParent()
			}
			if (this._screenClose) {
				this._screenClose.removeFromParent()
			}
			var r = Math.max(k.Capabilities.getScreenWidth(), k.Capabilities.getScreenHeight());
			var p = [0, 0, r, r];
			a.ServiceHost.view().setFrame(p);
			a.ServiceHost.navController.view().setFrame(p);
			this.view().setFrame(p);
			c.OrientationEmitter.setInterfaceOrientation(o);
			a.ServiceHost.view().setFrame(q);
			a.ServiceHost.navController.view().setFrame(q);
			this.view().setFrame(q);
			this.layoutSubviews(q);
			if (this.view()) {
				if (this._screenshots) {
					for (m in this._screenshots) {
						this.view().addChild(this._screenshots[m])
					}
				}
				if (this._screenClose) {
					this.view().addChild(this._screenClose)
				}
			}
		}
	});
	var j = k.MessageListener.subclass({
		classname: "FullScreenshotController_orientationListener"
	});
	return f
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserButton"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserButton"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserButton"] = d;
	var f = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/UI").UI;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var g = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserIconView").UserIconView;
	var h = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Service/Profile").Profile;
	var j = d.UserButton = b.View.subclass({
		initialize: function($super, l) {
			$super();
			if (!l) {
				return
			}
			this._sheet = e.registeredStyle("social.us.userbutton").props();
			this._totalWidth = f.Capabilities.getScreenHeight();
			this._totalHeight = f.Capabilities.getScreenWidth();
			this._userButtonIcon = this.retainView(new a());
			this._userButtonIcon.setImage(c.image("no-user-icon.png"));
			this._userButtonIcon.setFrame([0, 0, 10, 10]);
			this._userButtonIcon.setImage(l.getDefinedIcon() || c.image("no-user-icon.png"));
			this.addChild(this._userButtonIcon);
			var m = l.gamertag;
			var k = this._sheet.maxFriendNameChars;
			if (m.length > k) {
				m = m.substring(0, k - 2) + ".."
			}
			this._userButtonLabel = this.retainView(new b.Label());
			this._userButtonLabel.setFrame([0, 0, 10, 10]);
			this._userButtonLabel.setText(m);
			this._userButtonLabel.setTextGravity(b.ViewGeometry.Gravity.Center);
			this._userButtonLabel.setAttributes(this._sheet.userButtonLabel);
			this.addChild(this._userButtonLabel);
			this._clickView = this.retainView(new b.View());
			this._clickView.setFrame([0, 0, 10, 10]);
			this._clickView.onclick = function() {
				g.showLoadingHelper(function() {
					var n = {
						data: {
							user: l
						}
					};
					h.showUserProfile(n)
				})
			};
			this.addChild(this._clickView)
		},
		destroy: function() {
			if (this._retainedViews) {
				for (var k = 0; k < this._retainedViews.length; k++) {
					var l = this._retainedViews[k];
					if (l) {
						l.release()
					}
				}
			}
			this._retainedViews = new Array()
		},
		retainView: function(k) {
			if (k) {
				k.retain();
				if (!this._retainedViews) {
					this._retainedViews = new Array()
				}
				this._retainedViews.push(k)
			}
			return k
		},
		xSize: function(k) {
			return (k / 800) * this._totalWidth
		},
		ySize: function(k) {
			return (k / 480) * this._totalHeight
		},
		setUserButtonFrame: function(m) {
			this.setFrame(m);
			var l = new b.ViewGeometry.Rect(m);
			if (!l.isEmpty()) {
				if (this._userButtonIcon) {
					var k = this.xSize(this._sheet.userButtonIconWidth);
					this._userButtonIcon.setFrame([l.w / 2 - k / 2, this.ySize(this._sheet.userButtonIconY), k, k])
				}
				if (this._userButtonLabel) {
					this._userButtonLabel.setFrame([0, this.ySize(this._sheet.userButtonLabelY), l.w, this.ySize(this._sheet.userButtonLabelHeight)])
				}
				if (this._clickView) {
					this._clickView.setFrame([0, 0, l.w, l.h])
				}
			}
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameProfileStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameProfileStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/GameProfileStyle"] = b;
	var d = {};
	d.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var a = d.Style.ScaledCorners;
	var c = d.Style.ScaledTextSize;
	d.Style.sheet("social.us.gameprofile", {
		gameProfileArea: {
			gradient: {
				gradient: ["FFDBE2EA 0.000", "FFE9EFF3 1.000"],
				innerLine: "FFC9D1DA 1.0"
			}
		},
		loadingProgress: {
			textColor: "FFFFFF00",
			gradient: {
				outerShadow: "FF8B8988 0.0 {0.0,-4.0}",
				corners: "0.0 0.0 0.0 0.0",
				innerShadow: "FFFFFEFE 2.0 {0.0,-1.0}",
				gradient: ["FFECEBEE 0.000", "FFCFD5D2 1.000"],
				outerLine: "FF8C9094 1.0"
			}
		},
		gameName: {
			textColor: "FF000000",
			textSize: c(17),
			textFont: d.Style.defaultBoldFontFace
		},
		gamePublisher: {
			textColor: "FF000000",
			textSize: c(12),
			textFont: d.Style.defaultBoldFontFace
		},
		gameDesc: {
			textColor: "FF000000",
			textSize: c(12)
		},
		readMore: {
			textColor: "FF004AA9",
			textSize: c(12),
			textFont: d.Style.defaultBoldFontFace
		},
		friendCountLabel: {
			textColor: "FF000000",
			textSize: c(12),
			textFont: d.Style.defaultBoldFontFace
		},
		friendButton: {
			textColor: "FF333333",
			textSize: c(11),
			textFont: d.Style.defaultBoldFontFace,
			imageBorder: {
				insets: "{0.0,0.0,0.0,0.0}",
				corners: "2.0 2.0 2.0 2.0",
				outerLine: "55676A68 1.5"
			}
		},
		showMore: {
			textColor: "FF004AA9",
			textSize: c(12),
			textFont: d.Style.defaultBoldFontFace
		},
		screenshotsHeader: {
			textColor: "FF000000",
			textSize: c(12),
			textFont: d.Style.defaultBoldFontFace
		},
		screenThumb: {
			gradient: {
				corners: a(4),
				gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
				outerLine: "FF627792 1"
			},
			imageInsets: [4, 4, 4, 4],
			imageBorder: {
				innerLine: "FFD9DEE5 1"
			}
		},
		screenFullWrapper: {
			backgroundColor: "FFFFFFFF"
		},
		screenClose: {
			gradient: {
				corners: "6.0 6.0 6.0 6.0",
				gradient: ["FF000000 0.000", "FF000000 1.000"]
			},
			pressedGradient: {
				corners: "6.0 6.0 6.0 6.0",
				gradient: ["FF525252 0.000"]
			},
			textColor: "FFFFFFFF",
			textSize: c(26)
		},
		gameDescLinesDefault: 2,
		maxFriendNameChars: 7,
		maxFriendsPerRow: 5,
		maxScreenshotsPerRow: 2,
		infoAreaHeightRatio: 177,
		friendAreaHeightRatio: (185 - 88),
		screenshotAreaHeightRatio: (408 - (2 * 160) - 20),
		bottomAreaHeightRatio: 112,
		infoAreaXRatio: 206,
		infoAreaYRatio: 84,
		gameIconXRatio: 220,
		gameIconYRatio: 98,
		gameIconWidthRatio: 130,
		gameIconHeightRatio: 123,
		gameNameXRatio: 370,
		gameNameYRatio: 97,
		gameNameWidthRatio: 239,
		gameNameHeightRatio: 34,
		gamePublisherXRatio: 371,
		gamePublisherYRatio: 128,
		gamePublisherWidthRatio: 239,
		gamePublisherHeightRatio: 23,
		gameDescXRatio: 370,
		gameDescYRatio: 171,
		gameDescWidthRatio: 398,
		gameDescCharWidthRatio: 11,
		gameDescLineHeightRatio: 22,
		downloadBarXRatio: 616,
		downloadBarYRatio: 98,
		downloadBarWidthRatio: 154,
		downloadBarHeightRatio: 58,
		readMoreXRatio: 608,
		readMoreYRatio: 48,
		readMoreWidthRatio: 160,
		readMoreHeightRatio: (22 * 2),
		readMoreImageWidthRatio: 12,
		readMoreTextInsetRatio: 20,
		friendAreaXRatio: 206,
		friendAreaYRatio: 261,
		friendCountLabelXRatio: 222,
		friendCountLabelYRatio: (275 - 2),
		friendCountLabelWidthRatio: 373,
		friendCountLabelHeightRatio: 22,
		friendButtonXRatio: (239 - 17),
		friendButtonYRatio: 307,
		friendButtonWidthRatio: (62 + (2 * 17)),
		friendButtonHeightRatio: 88,
		friendButtonXMarginRatio: (50 - (2 * 17)),
		friendButtonYMarginRatio: (111 - 88),
		showMoreXRatio: 608,
		showMoreYRatio: 48,
		showMoreWidthRatio: 160,
		showMoreHeightRatio: (22 * 2),
		showMoreImageWidthRatio: 12,
		showMoreTextInsetRatio: 20,
		screenshotAreaXRatio: 206,
		screenshotAreaYRatio: 446,
		screenshotsHeaderXRatio: 222,
		screenshotsHeaderYRatio: (459 - 2),
		screenshotsHeaderWidthRatio: 373,
		screenshotsHeaderHeightRatio: 22,
		screenThumbXRatio: 226,
		screenThumbYRatio: 489,
		screenThumbWidthRatio: 260,
		screenThumbHeightRatio: 160,
		screenThumbXMarginRatio: 18,
		screenThumbYMarginRatio: 20,
		bottomAreaXRatio: 206,
		bottomAreaYRatio: 854,
		supportXRatio: (495 - (272 / 2)),
		supportYRatio: 908,
		supportWidthRatio: 272,
		supportHeightRatio: 46,
		screenCloseXRatio: 0.025,
		screenCloseYRatio: 0.025,
		screenCloseWidthRatio: 0.075,
		screenCloseHeightRatio: 0.075
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CurrentUserProfileController"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CurrentUserProfileController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/CurrentUserProfileController"] = d;
	var h = require("NGCore/Client/Core").Core;
	var g = require("NGCore/Client/UI").UI;
	var e = g.ViewGeometry.Rect;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		AreaItem: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/UserProfileController").UserProfileController.AreaItem
		},
		ContentViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController
		},
		UIStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		Wall: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Wall").Wall
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		Settings: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Settings").Settings
		},
		SupportWebScreen: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/SupportWebScreen").SupportWebScreen
		},
		Credentials: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Private/Service/Credentials").Credentials
		},
		MobageAnalytics: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics
		},
		UserInfoView: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UserInfoView").UserInfoView
		},
		FriendsList: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/FriendsList").FriendsList
		},
		RecentlyPlayedGamesList: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/RecentlyPlayedGamesList").RecentlyPlayedGamesList
		},
		Primitives: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/Primitives").Primitives
		},
		PendingListSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		WallPostArea: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection").WallPostArea
		},
		ConversationListItem: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection").ConversationListItem
		},
		MorePostListItem: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/WallPostSection").MorePostListItem
		},
		MBListViewSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection
		},
		ConversationViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ConversationViewController").ConversationViewController
		},
		VerticalTabViewSizing: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/VerticalTab").VerticalTabViewSizing
		},
		MessageListener: function() {
			return require("NGCore/Client/Core/MessageListener").MessageListener
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var f = d.CurrentUserProfileController = b.ContentViewController.subclass({
		classname: "CurrentUserProfileController",
		analyticsName: "MyProfile",
		_styleSheet: null,
		_myGamesList: null,
		_friendsArea: null,
		_maxGamesForDisplay: 0,
		_myProfileAreaHeight: 0,
		_footerAreaHeight: 0,
		_friendsAreaHeight: 0,
		_myGamesAreaUpdated: false,
		_friendsAreaUpdated: false,
		_wallMsgUpdated: false,
		_hasMorePost: false,
		_maxMsgCount: 0,
		_enableWall: true,
		initialize: function($super, j, k) {
			$super();
			this._styleSheet = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CurrentUserProfileStyle").CurrentUserProfile;
			this._totalWidth = h.Capabilities.getScreenHeight();
			this._totalHeight = h.Capabilities.getScreenWidth();
			this._contentWidth = this._getContentWidth();
			var m = b.Session.getCurrentSession();
			this._user = m.user();
			this._myProfileAreaHeight = this.ySize(this._styleSheet.extras.myProfileAreaHeight);
			this._footerAreaHeight = this.ySize(this._styleSheet.extras.footerAreaHeight);
			this._viewAllCallback = j;
			this._viewGamesTabCallback = k;
			this._conversationViewController = new b.ConversationViewController();
			this._maxMsgCount = b.Wall.MAX_MSG_COUNT;
			this._sectionToSet = null;
			var l = new b.MessageListener();
			this._user.addListener(l, this.zombieSafeCallback(function(n) {
				if (!n) {
					return
				}
				if (n.firstName || n.lastName) {
					this._profileArea.updateName(this._user.getFullName())
				}
				if (n.motto) {
					this._profileArea.updateMotto(n.motto)
				}
			}))
		},
		getDynamicTabTitle: function() {
			return a("My Profile")
		},
		setSection: function(j) {
			this._sectionToSet = j
		},
		_scrollToSection: function() {
			var k = this.view().getContentView().getSections();
			var j = -1;
			switch (this._sectionToSet) {
				case "my games":
					j = k.indexOf(this.myGamesSection);
					break;
				case "profile":
					j = k.indexOf(this.profileSection);
					break;
				case "button section":
					j = k.indexOf(this.buttonSection);
					break;
				case "wall posts":
					j = k.indexOf(this.wallPostSection);
					break;
				case "wall messages":
					j = k.indexOf(this.wallMsgSection);
					break;
				case "more posts":
					j = k.indexOf(this.morePostSection);
					break;
				default:
					return
			}
			if (j >= 0 && j < k.length) {
				this.view().getContentView().setScrollPosition([0, k[j].getYPosition()])
			}
		},
		_setupContent: function() {
			this._cleanViews();
			this._myGamesList = new Array();
			this.profileSection = this.retainView(new b.Primitives.ListViewSection());
			this.buttonSection = (new b.Primitives.ListViewSection()).retain();
			this.wallPostSection = this.retainView(new b.Primitives.ListViewSection());
			this.wallMsgSection = this.retainView(new b.MBListViewSection());
			this.wallMsgSection.setRowHeightRatio(1 / 4);
			this.morePostSection = this.retainView(new b.MBListViewSection());
			this.morePostSection.setRowHeightRatio(1 / 8);
			this.morePostSection.setItems(new b.MorePostListItem(this.bind(function() {
				this._refreshData(b.Wall.MAX_MSG_COUNT)
			})));
			this.friendsSection = (new b.Primitives.ListViewSection()).retain();
			this.myGamesSection = (new b.Primitives.ListViewSection()).retain();
			this._profileArea = this._setupMyProfile();
			this._setupFooter();
			var j = new b.AreaItem(this._profileArea, "profile_area");
			var n = new g.ViewGeometry.Rect(this._profileArea.getFrame());
			this.profileSection.setRowHeight(n.h);
			this.profileSection.setItems([j]);
			var m = new b.AreaItem(this._footerArea, "footer_area");
			n = new g.ViewGeometry.Rect(this._footerArea.getFrame());
			this.buttonSection.setRowHeight(n.h);
			this.buttonSection.setItems([m]);
			this._wallPostArea = new b.WallPostArea(this._user, (function(p) {
				if ((typeof p) === "undefined") {
					this._refreshData()
				}
			}.bind(this)));
			this._refreshData();
			this._setupMyGamesArea();
			this._setupMyFriendsArea();
			var o = new b.AreaItem(this._wallPostArea, "userprofile_wall_post_area");
			n = new g.ViewGeometry.Rect(this._wallPostArea.getFrame());
			this.wallPostSection.setRowHeight(n.h);
			this.wallPostSection.setItems([o]);
			var l = new b.AreaItem(this._myGamesArea, "my_games_area");
			this.myGamesSection.setRowHeight(50);
			this.myGamesSection.setItems([l]);
			var k = new b.AreaItem(this._friendsArea, "friends_area");
			this.friendsSection.setRowHeight(50);
			this.friendsSection.setItems([k]);
			this._getMyGamesList();
			if (this._friendsArea) {
				this._friendsArea.getFriendsList()
			}
			this._styleSheet.applyTo(this)
		},
		destroy: function() {
			this._cleanViews();
			if (this._loadingProgess) {
				this._loadingProgess.destroy();
				this._loadingProgess = undefined
			}
			if (this._pendingListSection) {
				this._pendingListSection.release()
			}
			if (this._errorSection) {
				this._errorSection.release()
			}
			if (this._wallPending) {
				this._wallPending.release()
			}
			if (this._myGamesPending) {
				this._myGamesPending.release()
			}
			if (this._friendsPending) {
				this._friendsPending.release()
			}
			if (this.friendsSection) {
				this.friendsSection.release()
			}
			if (this.myGamesSection) {
				this.myGamesSection.release()
			}
			if (this.buttonSection) {
				this.buttonSection.release()
			}
			if (this._conversationViewController) {
				this._conversationViewController.destroy()
			}
		},
		xSize: function(j) {
			return (j / 800) * this._totalWidth
		},
		ySize: function(j) {
			return (j / 480) * this._totalHeight
		},
		myGamesHeaderX: function(j) {
			return this.xSize(j - this._styleSheet.extras.myGamesHeaderXRatio)
		},
		myGamesHeaderY: function(j) {
			return this.ySize(j - this._styleSheet.extras.myGamesHeaderYRatio)
		},
		myGamesAreaX: function(j) {
			return this.xSize(j - this._styleSheet.extras.myGamesAreaXRatio)
		},
		myGamesAreaY: function(j) {
			return this.ySize(j - this._styleSheet.extras.myGamesAreaYRatio)
		},
		footerAreaX: function(j) {
			return this.xSize(j - this._styleSheet.extras.footerAreaXRatio)
		},
		footerAreaY: function(j) {
			return this.ySize(j - this._styleSheet.extras.footerAreaYRatio)
		},
		loadView: function($super) {
			if (typeof $super == "function") {
				$super()
			}
			this.view()._headerHeightRatio = 0
		},
		setUser: function(j) {
			this.user = j
		},
		startLoadingProgess: function() {
			if (!this._pendingListSection) {
				this._pendingListSection = (new b.PendingListSection()).retain();
				this._pendingListSection.setPendingText(a("Loading your profile..."))
			}
			this.view().setSections([this._pendingListSection])
		},
		stopLoadingProgress: function() {},
		willDeactivateTab: function($super, j) {
			if (this._showingConversationWall) {
				this._conversationViewController.backToProfile();
				this._showingConversationWall = false
			}
			$super(j)
		},
		didActivateTab: function($super, j) {
			$super(j);
			this.parentController.navController._host.hideLoadingLabel();
			NgLogD("CurrentUserProfileController didActivateTab " + this.parentController);
			if ((!this._myGamesAreaUpdated) || (!this._friendsAreaUpdated)) {
				this.startLoadingProgess();
				setTimeout(this.bind(function() {
					this._setupContent()
				}), 50)
			}
		},
		_getMyGamesList: function() {
			var j = this;
			this._user.getOwnedGamesList().forAll(this.zombieSafeCallback(function(l, m, k) {
				if (j._myGamesList.length === 0) {
					j._updateRecentlyPlayed(m)
				}
				l(true)
			}), this.zombieSafeCallback(function(k) {}))
		},
		_setupMyProfile: function() {
			var j = this.retainView(new b.UserInfoView(this._user, true));
			j.setFrame([0, 0, this._contentWidth, this._myProfileAreaHeight]);
			return j
		},
		_updateRecentlyPlayed: function(j) {
			if (this._profileArea && j) {
				this._profileArea._updateRecentlyPlayed(j)
			}
		},
		_setupMyGamesArea: function() {
			this._myGamesArea = new b.RecentlyPlayedGamesList(this._user, true, this._updateGamesAreaHeight.bind(this), this._viewGamesTabCallback);
			this._myGamesArea.setFrame([0, 0, this._contentWidth, this._myGamesArea.getInitialHeight()]);
			return this._myGamesArea
		},
		_updateGamesAreaHeight: function(j, k, l) {
			this.myGamesSection.setRowHeight(k);
			this._userGamesCount = j;
			this._myGamesAreaUpdated = true;
			this._setSectionsOnView(l)
		},
		_setupFooter: function() {
			this._footerArea = this.retainView(new g.View());
			this._footerArea.setFrame([0, 0, this._contentWidth, this._footerAreaHeight]);
			this._buttonSettings = this.retainView(new b.UnspammableButton());
			this._buttonSettings.setFrame([this.footerAreaX(this._styleSheet.extras.buttonSettingsXInsetFactor), this.footerAreaY(this._styleSheet.extras.buttonSettingsYInsetFactor), this.xSize(this._styleSheet.extras.buttonSettingsWidthFactor), this.ySize(this._styleSheet.extras.buttonSettingsHeightFactor)]);
			this._buttonSettings.setText(a("Settings"));
			this._buttonSettings.setOnClick(function() {
				b.ServiceHost.showLoadingHelper(function() {
					var j = b.Settings.initWithJSON({
						tab: "profile"
					});
					b.ServiceHost.navController.pushViewController(j)
				})
			});
			this._footerArea.addChild(this._buttonSettings);
			this._buttonSupport = this.retainView(new b.UnspammableButton());
			this._buttonSupport.setFrame([this.footerAreaX(this._styleSheet.extras.buttonSupportXInsetFactor), this.footerAreaY(this._styleSheet.extras.buttonSupportYInsetFactor), this.xSize(this._styleSheet.extras.buttonSupportWidthFactor), this.ySize(this._styleSheet.extras.buttonSupportHeightFactor)]);
			this._buttonSupport.setText(a("Support"));
			this._buttonSupport.setOnClick(function() {
				if (b.ServiceHost.navController) {
					b.ServiceHost.showLoadingHelper(function() {
						b.ServiceHost.navController.pushViewController(new b.SupportWebScreen())
					})
				}
			});
			this._footerArea.addChild(this._buttonSupport);
			this._buttonLogout = this.retainView(new b.UnspammableButton());
			this._buttonLogout.setFrame([this.footerAreaX(this._styleSheet.extras.buttonLogoutXInsetFactor), this.footerAreaY(this._styleSheet.extras.buttonLogoutYInsetFactor), this.xSize(this._styleSheet.extras.buttonLogoutWidthFactor), this.ySize(this._styleSheet.extras.buttonLogoutHeightFactor)]);
			this._buttonLogout.setText(a("Logout"));
			this._buttonLogout.setOnClick(function() {
				b.Credentials.logout(function() {
					NgLogD("Completed logout/login")
				})
			});
			return this._footerArea
		},
		_getContentWidth: function() {
			return (1 - b.VerticalTabViewSizing.buttonContainerRatio - b.VerticalTabViewSizing.insetRatio) * this._totalWidth
		},
		_setSectionsOnView: function(j) {
			if (j) {
				this.lastError = j
			}
			this.stopLoadingProgress();
			if (this.lastError) {
				if (!this._errorSection) {
					this._errorSection = (new b.PendingListSection()).retain()
				}
				this._errorSection.showError(this.lastError);
				this.view().setSections([this._errorSection]);
				return
			}
			var k = new Array();
			k.push(this.profileSection);
			if (this._enableWall) {
				if (!this._wallMsgUpdated) {
					if (!this._wallPending) {
						this._wallPending = (new b.PendingListSection()).retain();
						this._wallPending.setPendingText(a("Loading user wall..."))
					}
					k.push(this._wallPending)
				} else {
					k.push(this.wallPostSection);
					if (this._wallMsgCount > 0) {
						k.push(this.wallMsgSection);
						if (this._hasMorePost) {
							k.push(this.morePostSection)
						}
					}
				}
			}
			if (!this._myGamesAreaUpdated) {
				if (!this._myGamesPending) {
					this._myGamesPending = (new b.PendingListSection()).retain();
					this._myGamesPending.setPendingText(a("Loading games list..."))
				}
				k.push(this._myGamesPending)
			} else {
				if (this._userGamesCount > 0) {
					k.push(this.myGamesSection)
				}
			}
			if (!this._friendsAreaUpdated) {
				if (!this._friendsPending) {
					this._friendsPending = (new b.PendingListSection()).retain();
					this._friendsPending.setPendingText(a("Loading friends..."))
				}
				k.push(this._friendsPending)
			} else {
				k.push(this.friendsSection)
			}
			k.push(this.buttonSection);
			this.view().setSections(k)
		},
		_setupMyFriendsArea: function() {
			this._friendsArea = new b.FriendsList(this._user, this.zombieSafeCallback(this._updateFriendsAreaHeight), this._viewAllCallback, function(j) {
				b.ServiceHost.showLoadingHelper(function() {
					var k = c.UserProfilePage.initWithJSON({
						user: j
					});
					NgLogD("mobage/CurrentUser: to view friend " + j.gamertag);
					b.ServiceHost.navController.pushViewController(k)
				})
			});
			this._friendsArea.setFrame([0, 0, this._contentWidth, this._friendsArea.getInitialHeight()]);
			return this._friendsArea
		},
		_updateFriendsAreaHeight: function(j, k, l) {
			this._friendsAreaHeight = k;
			this.friendsSection.setRowHeight(k);
			this._friendsAreaUpdated = true;
			this._userFriendsCount = j;
			this._setSectionsOnView(l)
		},
		_morePost: function() {
			this._refreshData(b.Wall.MAX_MSG_COUNT)
		},
		_refreshData: function(m) {
			if (!this._enableWall || !this._wallPostArea) {
				return
			}
			this._user.clearUnreadWallPostCount(this.zombieSafeCallback(function(o, p) {}));
			NgLogD("refresh wall");
			var n, k, j, l;
			j = [];
			if (m) {
				this._maxMsgCount += m
			}
			b.Wall.list(this._user.recordID, this._maxMsgCount, function(q, o) {
				var r = this._myProfileAreaHeight || 0;
				r += this._wallPostArea._postAreaHeight;
				for (var p = 0; p < o.length; p++) {
					if (p === this._maxMsgCount - 1) {
						this._hasMorePost = true
					} else {
						this._hasMorePost = false;
						n = o[p];
						j.push(new b.ConversationListItem(this._user, n, p, r, this, this.bind(this._refreshData), this._pushConversationWallFunction(), this.bind(this._jumpToUserProfile)))
					}
				}
				for (p = 0; p < j.length; p++) {
					j[p].odd = (p) % 2
				}
				this._wallMsgCount = j.length;
				this.wallMsgSection.setItems(j);
				this._wallMsgUpdated = true;
				this._wallPostArea._replaceTextArea();
				this._setSectionsOnView(q)
			}.bind(this))
		},
		_pushConversationWallFunction: function() {
			return this.bind(function(k, j) {
				var l = new e(this.view().getFrame());
				this._conversationViewController.parentController = this.parentController;
				this._conversationViewController.profileController = this;
				this._conversationViewController.view().setFrame(l);
				this._conversationViewController.setConversationInfo(k, j);
				this.swapViews(this.view(), this._conversationViewController.view(), false);
				b.MobageAnalytics.logNavEvent(this, this._conversationViewController);
				this._showingConversationWall = true
			})
		},
		_jumpToUserProfile: function(j) {
			if (j.gamertag === b.Session.getCurrentSession().user().gamertag) {
				return
			}
			b.ServiceHost.showLoadingHelper(function() {
				var k = c.UserProfilePage.initWithJSON({
					user: j
				});
				b.ServiceHost.navController.pushViewController(k)
			})
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/InvitesController"] = function() {
	var e = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/InvitesController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/InvitesController"] = e;
	var c = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		MessageListener: function() {
			return require("NGCore/Client/Core/MessageListener").MessageListener
		},
		ContactsController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContactsController").ContactsController
		},
		ContentViewController: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/ContentViewController").ContentViewController
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		PendingListSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection
		},
		DirectInviteSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/DirectInviteSection").DirectInviteSection
		},
		ZeroCaseSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ZeroCaseSection").ZeroCaseSection
		}
	});
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ContentControllers/MobageAccordionCVC").MobageAccordionCVC;
	var f = e.InvitesController = d.subclass({
		classname: "InvitesController",
		analyticsName: "Requests",
		_listView: null,
		_user: null,
		invitableUsers: null,
		_totalInvites: 0,
		_scanState: null,
		initialize: function($super, g) {
			$super();
			this.scanState = 0;
			this._user = g;
			this.invitableItems = new Array();
			var h = new c.MessageListener();
			this._user.addListener(h, this.zombieSafeCallback(function(j) {
				if (!j || !(j.buddies || j.invites)) {
					return
				}
				if (this.scanState == c.ContactsController.ScanState.Done) {
					this._didPreviouslyShowResults = true
				}
				this.scanState = c.ContactsController.ScanState.NotStarted
			}, this.bind(function(j) {
				g.removeListener(h);
				h.destroy()
			})))
		},
		destroy: function($super) {
			if (this.pendingSection) {
				this.pendingSection.release()
			}
			if (this.invitableSection) {
				this.invitableSection.release()
			}
			if (this.directInviteSection) {
				this.directInviteSection.release()
			}
			if (this.zeroCaseSection) {
				this.zeroCaseSection.release()
			}
			$super()
		},
		getDynamicTabTitle: function() {
			return a("My Friend Requests")
		},
		loadView: function($super) {
			$super();
			this.view()._headerHeightRatio = 0
		},
		didActivateTab: function($super) {
			$super();
			this.parentController.navController._host.hideLoadingLabel();
			this.pendingSection = (new c.PendingListSection());
			this.pendingSection.setPendingText(a("Checking for Friend requests..."));
			this.directInviteSection = (new c.DirectInviteSection()).retain();
			this.view().setSections([this.pendingSection, this.directInviteSection]);
			setTimeout(this.bind(function() {
				if (!this._activateInited) {
					setTimeout(this.zombieSafeCallback(function() {
						if (this.directInviteSection.item && this.directInviteSection.item.cell && this.directInviteSection.item.cell.getAddressFieldView()) {
							this.applyKeyboardWorkaround(this.directInviteSection.item.cell.getAddressFieldView())
						}
					}), 1000);
					this.invitableSection = this.createSectionWithTitle().retain();
					this._activateInited = true
				}
				this.startScan()
			}), 50)
		},
		startScan: function() {
			switch (this.scanState) {
				case c.ContactsController.ScanState.Done:
					break;
				case c.ContactsController.ScanState.NotStarted:
					this.scanState = c.ContactsController.ScanState.InFlight;
					this.invitableItems = [];
					this.invitableUsers = [];
					this._user.getInvitesList().forAll(this.zombieSafeCallback(function(l, h, j) {
						if (h.isMutualFriend) {
							l(true);
							return
						}
						this.invitableUsers.push(h);
						var k = new c.ContactsController.FoundUserListItem(h);
						this.invitableItems.push(k);
						k.mode = "profile";
						k.odd = (this.invitableItems.length - 1) % 2;
						this.logd("Invite found...[" + h + "]");
						l(this.invitableItems.length <= 100)
					}), this.zombieSafeCallback(function(h) {
						this.logd("Total invites found...[" + this.invitableItems.length + "]");
						this._scanFinished()
					}), this.zombieSafeCallback(function(j, h) {
						this.logd("Cached InvitesController final callback. dataWasRefreshed? ", !!h);
						if (!j && h) {
							this._user.emit({
								invites: 1
							})
						}
					}));
					break;
				case c.ContactsController.ScanState.InFlight:
					var g = this.view().getSections();
					if (!g || !g.length || g[0] != this.pendingSection) {
						this.view().setSections([this.pendingSection, this.directInviteSection])
					}
					break;
				default:
					break
			}
		},
		_addGamesToView: function() {
			var g = this._listView.getSections()[0];
			g.setItems(this._gameData)
		},
		_scanFinished: function() {
			this.scanState = c.ContactsController.ScanState.Done;
			this.invitableSection.setItems(this.invitableItems);
			if (this.invitableItems.length) {
				this.view().setSections([this.invitableSection, this.directInviteSection])
			} else {
				this._showNoResultsCase()
			}
		},
		_showNoResultsCase: function() {
			NgLogD("No Results Case");
			if (!this.zeroCaseSection) {
				this.zeroCaseSection = (new c.ZeroCaseSection(3 / 6)).retain();
				this.zeroCaseSection.setZeroCaseTexts([a("You don't have any friend requests yet."), a("Have you tried scanning your contacts? People you know may already be on Mobage!"), a("Scan Contacts")]);
				this.zeroCaseSection.setZeroCaseButtonCallback(function() {
					var g = b.FindFriends.initWithJSON({
						tab: "contacts"
					});
					c.ServiceHost.navController.pushViewController(g)
				})
			}
			this.view().setSections([this.zeroCaseSection, this.directInviteSection])
		}
	});
	return e
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CurrentUserProfileStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CurrentUserProfileStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CurrentUserProfileStyle"] = b;
	var c = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements;
	c.lazyLoad(b, "CurrentUserProfile", function() {
		return {
			children: {
				_footerArea: {
					style: {
						gradient: {
							gradient: ["FFFFFFFF 0.000", "FFFFFFFF 1.000"],
							innerLine: "FFC9D1DA 1.0"
						}
					}
				},
				_buttonSettings: a.standardButton,
				_buttonSupport: a.standardButton,
				_buttonLogout: a.standardButton
			},
			extras: {
				myProfileAreaHeight: 245,
				footerAreaHeight: 128,
				myGamesHeaderXRatio: 206,
				myGamesHeaderYRatio: 255,
				myGamesAreaXRatio: 206,
				myGamesAreaYRatio: 309,
				myGamesGameViewWidth: 116,
				myGamesAddGamesViewYInset: 318,
				myGamesAddGamesViewWidth: 100,
				myGamesAddGamesButtonWidth: 78,
				footerAreaXRatio: 206,
				footerAreaYRatio: 889,
				buttonSettingsXInsetFactor: 218,
				buttonSettingsYInsetFactor: 930,
				buttonSettingsWidthFactor: 270,
				buttonSettingsHeightFactor: 46,
				buttonSupportXInsetFactor: 495,
				buttonSupportYInsetFactor: 930,
				buttonSupportWidthFactor: 270,
				buttonSupportHeightFactor: 46,
				buttonLogoutXInsetFactor: 592,
				buttonLogoutYInsetFactor: 930,
				buttonLogoutWidthFactor: 270,
				buttonLogoutHeightFactor: 46
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/CommunityButtonController"] = function() {
	var d = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/CommunityButtonController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/CommunityButtonController"] = d;
	var g = require("NGCore/Client/UI").UI;
	var c = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		CommunityButtonStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CommunityButtonStyle")
		}
	});
	var e = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var f = d.CommunityButtonController = b.subclass({
		$_instance: null,
		initialize: function() {
			c.CommunityButtonStyle;
			this._stylesheet = c.OldStyle.registeredStyle("social.us.communitybutton");
			var h = 0;
			this._button = (new c.UnspammableButton()).retain();
			this._button.setFrame([0, 0, 150, 150]);
			this._button.setImage(e.image("ComBtnUS_up.png"));
			this._button.setImage(e.image("ComBtnUS_down.png"), g.State.Pressed);
			this._button.setImageInsets([h, h, h, h]);
			this._button.setImageGravity(g.ViewGeometry.Gravity.Right);
			this._button.onclick = function() {
				NgLogD("mobage-CommunityButtonController: button tapped");
				setTimeout(function() {
					c.ServiceHost.navController.pushViewController(new a.Home(), this, function() {
						setTimeout(function() {}, 1)
					}, 50)
				})
			};
			var j = this._button;
			g.animate(function() {
				g.Window.document.addChild(j)
			}, 250, function() {});
			f._instance = this;
			NgLogD("mobage-CommunityButtonController: initialized");
			return this
		},
		setThemeAndGravity: function(m, p) {
			var k = this._stylesheet.props()["button"];
			var o = 3;
			var l = Math.min(g.Window.getWidth(), g.Window.getHeight());
			var j = l * this._stylesheet.props()["communityButtonScale"];
			var h;
			var n;
			if (p[0] === 1 && p[1] === 0) {
				h = g.Window.getWidth() - j;
				n = -o;
				k.gradient.corners = "4.0 0 4.0 4.0"
			} else {
				if (p[0] === 0 && p[1] === 1) {
					h = -o;
					n = g.Window.getHeight() - j;
					k.gradient.corners = "4.0 4.0 4.0 0"
				} else {
					if (p[0] === 1 && p[1] === 1) {
						h = g.Window.getWidth() - j;
						n = g.Window.getHeight() - j;
						k.gradient.corners = "4.0 4.0 0 4.0"
					} else {
						h = -o;
						n = -o;
						k.gradient.corners = "0 4.0 4.0 4.0"
					}
				}
			}
			this._button.setAttributes(k);
			this._button.setFrame([h, n, j + o, j + o])
		},
		destroy: function() {
			if (this._button) {
				var h = this._button;
				g.animate(function() {
					h.removeFromParent()
				}, 250, function() {
					h.release()
				});
				this._button = null
			}
			f._instance = null
		},
		$destroyInstance: function(h) {
			if (f._instance) {
				f._instance.destroy()
			}
			if (h) {
				h()
			}
		}
	});
	return d
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BalanceButtonController"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BalanceButtonController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BalanceButtonController"] = c;
	var g = require("NGCore/Client/Core").Core;
	var f = require("NGCore/Client/UI").UI;
	var d = f.ViewGeometry.Rect;
	var b = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		BalanceButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/BalanceButton").BalanceButton
		},
		BalanceButtonStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/BalanceButtonStyle")
		}
	});
	var a = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var e = c.BalanceButtonController = a.subclass({
		$_instance: null,
		initialize: function($super, l, p, r) {
			if ($super && typeof $super == "function") {
				$super()
			}
			this._buttonRect = p;
			b.BalanceButtonStyle;
			this._sheet = b.OldStyle.registeredStyle("social.us.balancebuttoncontroller").props();
			this._totalWidth = g.Capabilities.getScreenHeight();
			this._totalHeight = g.Capabilities.getScreenWidth();
			var k = Math.min(this._totalWidth, this._totalHeight);
			var m = Math.max(this._totalWidth, this._totalHeight);
			var h = (this._sheet.minWidth / 800) * m;
			var s = (this._sheet.minHeight / 480) * k;
			if (!this._buttonRect) {
				this._buttonRect = new f.ViewGeometry.Rect(50, 50, h, s)
			}
			if (this._buttonRect.w < h) {
				this._buttonRect.w = h
			}
			if (this._buttonRect.h < s) {
				this._buttonRect.h = s
			}
			this._balanceButton = (new b.BalanceButton(r)).retain();
			this._balanceButton.setBalanceButtonFrame([this._buttonRect.x, this._buttonRect.y, this._buttonRect.w, this._buttonRect.h]);
			this._balanceButton.setAttributes(this._sheet.balanceButton);
			var n = this._balanceButton.getBalanceImage();
			n.setFrame([this.xSize(this._sheet.balanceImageX), this.ySize(this._sheet.balanceImageY), this.xSize(this._sheet.balanceImageWidth), this.ySize(this._sheet.balanceImageHeight)]);
			var o = this._balanceButton.getCurrencyLabel();
			o.setFrame([this.xSize(this._sheet.currencyLabelX), this.ySize(this._sheet.currencyLabelY), this.xSize(this._sheet.currencyLabelWidth), this.ySize(this._sheet.currencyLabelHeight)]);
			o.setTextGravity(f.ViewGeometry.Gravity.Left);
			o.setAttributes(this._sheet.currencyLabel);
			var j = this._balanceButton.getBalanceLabel();
			j.setFrame([this.xSize(this._sheet.balanceLabelX), this.ySize(this._sheet.balanceLabelY), this.xSize(this._sheet.balanceLabelWidth), this.ySize(this._sheet.balanceLabelHeight)]);
			j.setTextGravity(f.ViewGeometry.Gravity.Left);
			j.setAttributes(this._sheet.balanceLabel);
			if (l) {
				var q = this._balanceButton;
				f.animate(function() {
					f.Window.document.addChild(q)
				}, 250, function() {})
			}
			e._instance = this;
			NgLogD("mobage-BalanceButtonController: initialized");
			return this
		},
		xSize: function(h) {
			return (h / this._sheet.minWidth) * this._buttonRect.w
		},
		ySize: function(h) {
			return (h / this._sheet.minHeight) * this._buttonRect.h
		},
		getButton: function() {
			return this._balanceButton
		},
		destroy: function() {
			if (this._balanceButton) {
				var h = this._balanceButton;
				f.animate(function() {
					h.removeFromParent()
				}, 250, function() {
					h.release()
				});
				this._balanceButton = null
			}
			e._instance = null
		},
		$destroyInstance: function(h) {
			if (e._instance) {
				e._instance.destroy()
			}
			if (h) {
				h()
			}
		}
	});
	return c
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CommunityButtonStyle"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CommunityButtonStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/CommunityButtonStyle"] = a;
	var b = {};
	b.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	b.Style.sheet("social.us.communitybutton", {
		button: {
			gradient: {
				gradient: ["FFFFFFFF 0.000", "FFB7C1D7 1.000"],
				innerLine: "FFE0E6F0 1.5",
				outerLine: "AA000000 1.5"
			}
		},
		communityButtonScale: 0.11875
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/BalanceButtonStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/BalanceButtonStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/BalanceButtonStyle"] = b;
	var d = {};
	d.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var a = d.Style.ScaledCorners;
	var c = d.Style.ScaledTextSize;
	d.Style.sheet("social.us.balancebuttoncontroller", {
		balanceButton: {
			gradient: {
				corners: a(8),
				gradient: ["FF2E3F58 0.000", "FF1F2736 1.000"],
				innerShadow: "FF415D79 2.0 {0.0,-2.0}",
				insets: "{0.0,0.0,0.0,0.0}",
				outerLine: "FF000000 2.0"
			}
		},
		currencyLabel: {
			textColor: "FFFFFFFF",
			textSize: c(10)
		},
		balanceLabel: {
			textColor: "FFFFFFFF",
			textSize: c(11),
			textFont: d.Style.defaultBoldFontFace
		},
		minWidth: 150,
		minHeight: 46,
		balanceImageX: 100,
		balanceImageY: 4,
		balanceImageWidth: 46,
		balanceImageHeight: 39,
		currencyLabelX: 8,
		currencyLabelY: 3,
		currencyLabelWidth: 90,
		currencyLabelHeight: 20,
		balanceLabelX: 8,
		balanceLabelY: 21,
		balanceLabelWidth: 90,
		balanceLabelHeight: 20
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/MobageBrandSlideIn"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/MobageBrandSlideIn"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/MobageBrandSlideIn"] = b;
	var e = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/MobageStyle").MobageStyle;
	var a = e.ScaledCorners;
	var f = e.ScaledTextSize;
	var c = require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets;
	var d = require("NGCore/Client/UI/ViewGeometry").Scale;
	e.lazyLoad(b, "MobageBrandSlideIn", function() {
		var g = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
		return {
			style: {
				image: c.image("poweredby.png"),
				text: g("Where the world plays"),
				textColor: "FF",
				textShadow: "FF00 3.0 {0,-2}",
				imageGravity: [0.5, 0.25],
				textGravity: [0.5, 1],
				gradient: {
					gradient: ["FF011E4C 0.0", "FF011E4C 1.0"],
					innerLine: "FF000000 3",
					corners: a(13),
					insets: "{5,5,5,5}"
				},
				alpha: 0.9
			},
			extras: {
				centerFramePercentInsets: [74, 3, 3, 3, d.Percent],
				contentInsetsPercent: 15
			}
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/ScoresList"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/ScoresList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/ScoresList"] = b;
	var a = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Dispatcher").Dispatcher;
	var e = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/PlusRequest");
	var f = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/OrderedList").OrderedList;
	var c = require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Score").Score;
	var d = b.ScoresList = f.subclass({
		$MAX_SIZE: 100,
		initialize: function($super, g, j, k) {
			var h = d.MAX_SIZE;
			$super(h);
			this._isFriends = (k ? true : false);
			this._leaderboard = g;
			this._user = j;
			this._data = [];
			this.apiMethod = "games/" + g.game.recordID + "/leaderboards/" + g.level
		},
		_hasData: function(g) {
			return this._data.hasOwnProperty(g) && this._data[g]
		},
		_getData: function(g) {
			return this._data[g]
		},
		_constructRequest: function(j) {
			var g = new e.PlusRequest();
			g.setApiMethod(this.apiMethod);
			g.setHttpMethod("GET");
			var h = {
				count: this._requestPageSize,
				offset: j * this._requestPageSize
			};
			if (this._isFriends) {
				h.relation = "friends"
			}
			NgLogD("Generating Leaderboard scores list with both " + JSON.stringify(h));
			g.setPostBody(h);
			return g
		},
		_handleRequestData: function(k) {
			a.beginBatching();
			this._data = [];
			var j = k.leaderboard || [];
			this._knownEndOfSet = j.length;
			for (var g = 0; g < j.length; g++) {
				var h = j[g];
				var l = c.getScoreWithDataAndLeaderboard(h, this._leaderboard);
				this._data.push(l)
			}
			a.endBatching()
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankLegacy"] = function() {
	var a = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankLegacy"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/BankLegacy"] = a;
	var c = require("NGCore/Client/Core").Core;
	var b = require("NGCore/Client/Device");
	a.BankLegacy = c.Class.singleton({
		classname: "BankLegacy",
		initialize: function() {},
		asyncFulfill: function(e, d) {
			b.Device.InAppPurchase.initService(e, d)
		},
		launchPurchaseView: function(e, d) {
			b.Device.InAppPurchase.launchPurchaseView(e, function(j, k, h, g, f) {
				f(true);
				d(undefined, j, k, h, g)
			}, function(g, f) {
				d("failed:" + f)
			}, function() {
				d("cancelled")
			})
		}
	});
	return a
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FriendpickerViewController"] = function() {
	var g = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FriendpickerViewController"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Controllers/FriendpickerViewController"] = g;
	var j = require("NGCore/Client/Core").Core;
	var c = require("NGCore/Client/Device").Device;
	var e = require("NGCore/Client/UI").UI;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		ServiceHost: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ServiceHost").ServiceHost
		},
		Session: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Data/Session").Session
		},
		Game: function() {
			return require("NGCore/Client/Social/_Internal/US/Interface/Privileged/Models/Game").Game
		},
		FriendPickerCell: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/FriendPickerCell").FriendPickerCell
		},
		PendingListSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/PendingListSection").PendingListSection
		},
		MBListViewSection: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/MBListViewSection").MBListViewSection
		},
		IdleActor: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/IdleActor").IdleActor
		},
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		OldStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		FriendPickerStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FriendPickerStyle")
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		}
	});
	var n = a.OldStyle.ScaledTextSize;
	var k = require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton");
	var l = k.UnspammableButton;
	var q = k.getSpamProtectionLockForName;
	var o = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	var p = {};
	var h = j.MessageListener.subclass({
		classname: "FriendPickerKeyListener"
	});
	var d = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/Destinations").Destinations;
	var b = require("NGCore/Client/Social/_Internal/US/Implementation/Controllers/ViewController").ViewController;
	var f = g.FriendpickerViewController = b.subclass({
		classname: "FriendpickerViewController",
		_retrievingCurrentGame: true,
		_retrievingServiceFriends: false,
		_retrievingGameFriends: false,
		_mobageUserListItems: null,
		_gameFriendListItems: null,
		_currentTab: null,
		_activeListItems: null,
		GameFriendsTab: 1,
		AllServiceFriendsTab: 2,
		_idleActor: null,
		_idleAction: null,
		initialize: function($super, v, s, u) {
			$super();
			this._mobageUserListItems = [];
			this._gameFriendListItems = [];
			var y = this;
			this._friendPickerCallback = s;
			this._inviteCallback = u;
			this._maxPick = 0;
			if (v) {
				this._maxPick = v
			}
			this._idleActor = (new a.IdleActor()).retain();
			this._selectedFriends = 0;
			this._currentGame = null;
			this._setCurrentGame();
			this._oldScrollPosition_gameFriends = [0, 0];
			this._oldScrollPosition_allServiceFriends = [0, 0];
			a.FriendPickerStyle;
			this._friendPickerStyle = a.OldStyle.registeredStyle("social.us.friendpicker");
			var w = a.OldStyle.registeredStyle("social.us.commonelements");
			var x = q("friendpicker");
			x.timeout = 400;
			this._gameCoverView = new l().retain();
			this._gameCoverView.setSpamLockName("friendpicker");
			this._gameCoverView.onclick = function(z) {
				if (y._friendPickerCallback) {
					y._friendPickerCallback("friendpicker closed", [])
				}
				y.destroy()
			};
			e.Window.document.addChild(this._gameCoverView);
			this._topBarBgPane = new e.View().retain();
			this._topBarBgPane.setAttributes(this._friendPickerStyle.props()["topBarBackgroundPane"]);
			e.Window.document.addChild(this._topBarBgPane);
			this._topBarBorderPane = new e.View().retain();
			this._topBarBorderPane.setAttributes(this._friendPickerStyle.props()["borderUnderTopPane"]);
			e.Window.document.addChild(this._topBarBorderPane);
			this._mobageButton = new l().retain();
			this._mobageButton.setSpamLockName("friendpicker");
			this._mobageButton.setImage(a.Assets.image("mobagelogotm_down.png"), e.State.Pressed);
			this._mobageButton.setImage(a.Assets.image("mobagelogotm.png"));
			this._mobageButton.onclick = function() {
				NgLogD("Pressed mobage button");
				if (y._friendPickerCallback) {
					y._friendPickerCallback("friendpicker closed", [])
				}
				y.destroy();
				var z = d.Home.initWithJSON({});
				a.ServiceHost.navController.pushViewController(z, "friendpickerMobageBtn")
			};
			this._topBarBgPane.addChild(this._mobageButton);
			this._findFriendButton = new l().retain();
			this._findFriendButton.setSpamLockName("friendpicker");
			this._findFriendButton.setText(o("Find Friends"));
			a.CommonElements.standardButton.applyTo(this._findFriendButton);
			this._findFriendButton.onclick = function() {
				NgLogD("Pressed find friend button");
				if (y._friendPickerCallback) {
					y._friendPickerCallback(null, [])
				}
				y.destroy();
				var z = d.FindFriends.initWithJSON({});
				a.ServiceHost.navController.pushViewController(z, "friendpickerFindFriendsBtn")
			};
			this._topBarBgPane.addChild(this._findFriendButton);
			this._tabAndListBgPane = new e.View().retain();
			this._tabAndListBgPane.setAttributes(this._friendPickerStyle.props()["listAreaPane"]);
			e.Window.document.addChild(this._tabAndListBgPane);
			var t = w.props()["topPageNavigationTab"];
			this._buttonAllFriends = new l().retain();
			this._buttonAllFriends.setSpamLockName("friendpicker");
			this._buttonAllFriends.setText(o("Mobage Friends"));
			this._buttonAllFriends.setAttributes(t);
			this._buttonAllFriends.setGradient(t.pressedGradient, e.State.Pressed);
			this._buttonAllFriends.setGradient(t.gradientSelected, e.State.Selected);
			this._buttonAllFriends.setTextFont(t.textFontSelected, e.State.Selected);
			this._buttonAllFriends.setTextShadow(t.textShadowSelected, e.State.Selected);
			this._buttonAllFriends.onclick = this._selectAllServiceFriends.bind(this);
			e.Window.document.addChild(this._buttonAllFriends);
			this._buttonCurrentGameFriends = new l().retain();
			this._buttonCurrentGameFriends.setSpamLockName("friendpicker");
			this._buttonCurrentGameFriends.setText("");
			this._buttonCurrentGameFriends.setAttributes(t);
			this._buttonCurrentGameFriends.setGradient(t.pressedGradient, e.State.Pressed);
			this._buttonCurrentGameFriends.setGradient(t.gradientSelected, e.State.Selected);
			this._buttonCurrentGameFriends.setTextFont(t.textFontSelected, e.State.Selected);
			this._buttonCurrentGameFriends.setTextShadow(t.textShadowSelected, e.State.Selected);
			this._buttonCurrentGameFriends.onclick = this._selectGameFriends.bind(this);
			e.Window.document.addChild(this._buttonCurrentGameFriends);
			this._allFriendsShowing = true;
			this._buttonAllFriends.setState(e.State.Pressed);
			this._buttonCurrentGameFriends.setState(e.State.Normal);
			this._listViewBgOuterPane = new e.View().retain();
			this._listViewBgOuterPane.setAttributes(this._friendPickerStyle.props().verticalContentContainer);
			e.Window.document.addChild(this._listViewBgOuterPane);
			this._listViewBgInnerPane = new e.View().retain();
			this._listViewBgInnerPane.setAttributes(this._friendPickerStyle.props().verticalContentContainer.innerContainer);
			e.Window.document.addChild(this._listViewBgInnerPane);
			this._listView = new e.ListView().retain();
			this._listViewBgInnerPane.addChild(this._listView);
			this._listViewSection = (new a.MBListViewSection()).retain();
			this._listViewSection.setRowHeightRatio(1 / 3.8);
			this._zeroCaseView = new e.View().retain();
			this._zeroCaseTextHeader = new e.Label().retain();
			this._zeroCaseTextHeader.setAttributes(this._friendPickerStyle.props().verticalContentFailureCaseTextHeader);
			this._zeroCaseView.addChild(this._zeroCaseTextHeader);
			this._zeroCaseTextBody = new e.Label().retain();
			this._zeroCaseTextBody.setAttributes(this._friendPickerStyle.props().verticalContentFailureCaseTextBody);
			this._zeroCaseTextBody.setText(o("Check out these suggested friends who play this game!"));
			this._zeroCaseView.addChild(this._zeroCaseTextBody);
			this._zeroCaseLinkBtn = new l().retain();
			this._zeroCaseLinkBtn.setSpamLockName("friendpicker");
			this._zeroCaseLinkBtn.setText(o("Suggested Friends"));
			this._zeroCaseLinkBtn.setAttributes(w.props()["largeActionButton"]);
			this._zeroCaseLinkBtn.setGradient(w.props()["largeActionButton"].pressedGradient, e.State.Pressed);
			this._zeroCaseLinkBtn.onclick = function() {
				if (y._friendPickerCallback) {
					y._friendPickerCallback(null, y._getPickedUsers())
				}
				y.destroy();
				var z = d.FindFriends.initWithJSON({});
				a.ServiceHost.navController.pushViewController(z, "friendpickerZeroCaseFindFriendsBtn")
			};
			this._zeroCaseView.addChild(this._zeroCaseLinkBtn);
			this._bottomBar = new e.View().retain();
			this._bottomBar.setAttributes(this._friendPickerStyle.props()["bottomBar"]);
			this._confirmButton = new l().retain();
			this._confirmButton.setText(o("Confirm"));
			this._confirmButton.setTextSize(n(12).realize());
			this._confirmButton.setAttributes(this._friendPickerStyle.props()["confirmButton"]);
			this._confirmButton.setGradient(w.props()["disabledButton"].gradient, e.State.Disabled);
			this._confirmButton.setTextColor(w.props()["disabledButton"].textColor, e.State.Disabled);
			this._confirmButton.setTextShadow(w.props()["disabledButton"].textShadow, e.State.Disabled);
			this._confirmButton.onclick = function() {
				if (y._friendPickerCallback) {
					y._friendPickerCallback(null, y._getPickedUsers())
				}
				y.destroy()
			};
			this._bottomBar.addChild(this._confirmButton);
			this._bottombarText = new e.Label().retain();
			this._bottombarText.setTextSize(n(12).realize());
			this._bottombarText.setTextGravity(e.ViewGeometry.Gravity.Center);
			this._bottombarText.setAttributes(this._friendPickerStyle.props()["bottomBarText"]);
			this._bottomBar.addChild(this._bottombarText);
			this.layoutViews(e.Window.getWidth(), e.Window.getHeight());
			var r = j.MessageListener.subclass({
				_onLayoutEvent: function(z) {
					y.layoutViews(z.width, z.height)
				},
				destroy: function() {
					c.LayoutEmitter.removeListener(this)
				}
			});
			this.layoutListenerInstance = new r();
			c.LayoutEmitter.addListener(this.layoutListenerInstance, this.layoutListenerInstance._onLayoutEvent);
			this._loadingItemsSection = (new a.PendingListSection()).retain();
			this._loadingItemsSection.setPendingText(o("Loading..."));
			this._selectAllServiceFriends();
			this.kListener = new h();
			l.addDeviceKeyListener(this.kListener, this.onKeyPressed.bind(this), 99999);
			return this
		},
		loadView: function($super) {
			$super()
		},
		layoutViews: function(s, y) {
			var r = j.Capabilities.getScreenWidth();
			var t = j.Capabilities.getScreenHeight();
			var x = s >= y;
			var F = new e.ViewGeometry.Rect(0, 0, s, y);
			var D = r / 480;
			var w = t / 800;
			var A;
			if (x) {
				A = F.sliceHorizontal(320 * w);
				this._gameCoverView.setGradient({
					gradient: ["66000000 0.0", "66000000 0.94", "B3000000 1.0"],
					gradientAngle: 180
				})
			} else {
				A = F.sliceVertical(320 * w);
				this._gameCoverView.setGradient({
					gradient: ["66000000 0.0", "66000000 0.94", "B3000000 1.0"]
				})
			}
			this._gameCoverView.setFrame(A);
			var v = F.sliceVertical(66 * w);
			this._topBarBgPane.setFrame(v);
			var z = 10 * D;
			var B = 176 * D;
			this._findFriendButton.setFrame([v.w - z - B, z, B, 46 * w]);
			this._mobageButton.setFrame([20 * D, z, 165 * D, 46 * w]);
			this._topBarBorderPane.setFrame(F.sliceVertical(2));
			this._tabAndListBgPane.setFrame(F);
			var E = F.sliceVertical(62 * w);
			E.inset(6 * D, 10 * w, 0, 10 * D);
			this._buttonAllFriends.setFrame(E.sliceHorizontal(E.w / 2));
			this._buttonCurrentGameFriends.setFrame(E);
			var C = F.copy();
			C.x += 5 * D;
			C.w -= 10 * D;
			this._listViewBgOuterPane.setFrame(C);
			C.inset(2, 2, 0, 2);
			this._listViewBgInnerPane.setFrame([C.x, C.y, C.w, C.h + 2]);
			C.x = 0;
			C.y = 0;
			C.inset(2, 2, 0, 2);
			this._zeroCaseView.setFrame(C);
			var u = C.sliceVertical(-62 * D);
			this._listView.setFrame(C);
			this._bottomBar.setFrame(u);
			u.x = u.y = 0;
			u.inset(6 * w, 6 * D, 6 * w, 6 * D);
			this._confirmButton.setFrame(u.sliceHorizontal(-166 * w));
			this._bottombarText.setFrame(u);
			this._zeroCaseTextHeader.setFrame([0, 55 * D, C.w, 75 * w]);
			this._zeroCaseTextBody.setFrame([35 * w, 125 * D, C.w - 70 * w, 150 * w]);
			this._zeroCaseLinkBtn.setFrame([(C.w - 282 * w) / 2, 210 * D, 282 * w, 54 * D]);
			this._refreshUI()
		},
		onKeyPressed: function(r) {
			if (r.code === c.KeyEmitter.Keycode.back) {
				if (this._gameCoverView) {
					if (this._friendPickerCallback) {
						this._friendPickerCallback("friendpicker closed", [])
					}
					this.destroy();
					return true
				}
			}
			return false
		},
		destroy: function() {
			this._idleActor.release();
			this._gameCoverView.release();
			this._topBarBgPane.release();
			this._topBarBorderPane.release();
			this._mobageButton.release();
			this._findFriendButton.release();
			this._tabAndListBgPane.release();
			this._buttonAllFriends.release();
			this._buttonCurrentGameFriends.release();
			this._listViewBgOuterPane.release();
			this._listViewBgInnerPane.release();
			this._zeroCaseView.release();
			this._zeroCaseTextHeader.release();
			this._zeroCaseTextBody.release();
			this._zeroCaseLinkBtn.release();
			this._listView.release();
			this._listViewSection.release();
			this._bottomBar.release();
			this._confirmButton.release();
			this._bottombarText.release();
			this._loadingItemsSection.release();
			this.layoutListenerInstance.destroy();
			c.KeyEmitter.removeListener(this.kListener);
			this.kListener = undefined
		},
		_isInvited: function(r) {
			for (var s = 0; s < this._invitedUsers.length; s++) {
				if (r.recordID === this._invitedUsers[s].recordID) {
					return true
				}
			}
			return false
		},
		_updateUIElements: function() {
			this._buttonCurrentGameFriends.setText(o("%1s", this._currentGame ? this._currentGame.name : ""));
			this._selectedFriends = this._getTotalSelected();
			this._updateBottomBarText();
			if (this._waitingOnData()) {
				this._confirmButton.setState(e.State.Disabled)
			} else {
				var r = this._maxPick !== 0 && this._selectedFriends >= this._maxPick;
				if (this._reachedMaximumPicked != r) {
					this._enablePicking(!r);
					this._reachedMaximumPicked = r
				}
				this._confirmButton.setState((this._selectedFriends > 0) ? e.State.Normal : e.State.Disabled)
			}
		},
		_enablePicking: function(r) {
			if (this._activeListItems) {
				for (var s = 0; s < this._activeListItems.length; s++) {
					if (this._activeListItems[s].cell) {
						this._activeListItems[s].cell.setFriendPickerSelectionEnabled(r)
					}
				}
			}
		},
		_updateBottomBarText: function(r) {
			if (!this._bottombarText) {
				return
			}
			if (this._maxPick > 0) {
				if (this._selectedFriends > 0) {
					this._bottombarText.setText(o("Choose up to %1d friends: %2d left", this._maxPick, (this._maxPick - this._selectedFriends)))
				} else {
					this._bottombarText.setText(o("Choose up to %1d friends", this._maxPick))
				}
			} else {
				this._bottombarText.setText(o("Choose Friends: %1d", this._selectedFriends))
			}
		},
		_getPickedUsers: function() {
			var s = [];
			if (this._activeListItems) {
				for (var r = 0; r < this._activeListItems.length; r++) {
					if (this._activeListItems[r].data.isSelected) {
						if (this._activeListItems[r].data.user) {
							s.push(this._activeListItems[r].data.user)
						}
					}
				}
			}
			return s
		},
		_getTotalSelected: function() {
			var r = 0;
			if (this._activeListItems) {
				for (var s = 0; s < this._activeListItems.length; s++) {
					if (this._activeListItems[s].data.isSelected) {
						r++
					}
				}
			}
			return r
		},
		onRowSelectClicked: function(r) {
			r.listItem.data.isSelected = !r.listItem.data.isSelected;
			this._updateUIElements()
		},
		onRowInviteClicked: function(r) {
			if (this._inviteCallback && r.listItem.data.user) {
				r.onInviteSent();
				r.listItem.data.isInvited = true;
				this._invitedUsers.push(r.listItem.data.user);
				this._inviteCallback(r.listItem.data.user)
			}
		},
		_setCurrentGame: function() {
			var r = this;
			a.Game.getCurrentGame(function(t, s) {
				r._retrievingCurrentGame = false;
				r._currentGame = s;
				if (!p[r._currentGame.recordID]) {
					p[r._currentGame.recordID] = []
				}
				r._invitedUsers = p[r._currentGame.recordID];
				r._updateUIElements();
				r._getGameFriends();
				r._getServiceGameOwners();
				r._getServiceFriends()
			})
		},
		_getGameFriends: function() {
			NgLogD("FriendpickerViewController - Retrieving game friends for game " + this._currentGame);
			this._retrievingGameFriends = true;
			this._gameFriendListItems = [];
			var s = this;
			var t = a.Session.getCurrentSession();
			if (t) {
				var r = t.user();
				if (r) {
					r.getGameFriendsList("mutual").forAll(function(w, x, v) {
						NgLogD("FriendpickerViewController - Got game friend: " + x.gamertag);
						var u = new m();
						u.data = {
							user: x,
							hasGame: true,
							isSelected: false,
							isInvited: true,
							friendPickerController: s
						};
						s._gameFriendListItems.push(u);
						s._displayAvailableDataWhenIdle();
						w(true)
					}, function(u) {
						NgLogD("FriendpickerViewController - Done getting all game friends");
						s._onGameFriendsRetrieved()
					})
				}
			}
		},
		_userHasGame: function(r) {
			if (r && r.recordID) {
				return !!((this._serviceGameOwnersIdToUser || {})[r.recordID])
			}
			return false
		},
		_getServiceGameOwners: function() {
			this._retrievingServiceGameOwners = true;
			if (!this._currentGame) {
				a.Game.getCurrentGame(this.zombieSafeCallback(function(u, t) {
					if (u) {
						console.log("Error getting current game in friend picker, trying _getServiceGameOwners again")
					}
					this._currentGame = t;
					this._getServiceGameOwners()
				}));
				return
			}
			this._serviceGameOwnersIdToUser = {};
			var s = a.Session.getCurrentSession();
			if (s) {
				var r = s.user();
				if (r) {
					r.getFriendsListForGame(this._currentGame).forAll(this.zombieSafeCallback(function(v, t) {
						this._serviceGameOwnersIdToUser[t.recordID] = t;
						var u = (this._idToListItem || {})[t.recordID];
						if (u) {
							u.data.hasGame = true;
							if (u.cell) {
								u._onSetView(u.cell)
							}
						}
						this._displayAvailableDataWhenIdle();
						v(true)
					}), this.zombieSafeCallback(function(t) {
						this._retrievingServiceGameOwners = false;
						NgLogD("FriendpickerViewController: Got Service Game Owners");
						this._serviceFriendsFinishRefresh()
					}))
				}
			}
		},
		_getServiceFriends: function() {
			NgLogD("FriendpickerViewController - Retrieving mobage friends");
			this._retrievingServiceFriends = true;
			this._mobageUserListItems = [];
			this._idToListItem = {};
			var s = this;
			var t = a.Session.getCurrentSession();
			if (t) {
				var r = t.user();
				if (r) {
					r.getMutualFriendsList().forAll(this.zombieSafeCallback(function(x, w, v) {
						NgLogD("FriendpickerViewController - Got service friend: " + w.gamertag);
						var u = new m();
						u.data = {
							user: w,
							hasGame: this._userHasGame(w),
							isSelected: false,
							isInvited: s._isInvited(w),
							friendPickerController: s
						};
						this._mobageUserListItems.push(u);
						this._idToListItem[w.recordID] = u;
						this._displayAvailableDataWhenIdle();
						x(true)
					}), this.zombieSafeCallback(function(u) {
						NgLogD("FriendpickerViewController - Done getting all mobage service friends");
						this._retrievingServiceFriends = false;
						this._serviceFriendsFinishRefresh()
					}))
				}
			}
		},
		_serviceFriendsFinishRefresh: function() {
			for (var r = 0; r < this._mobageUserListItems.length; r++) {
				var s = this._mobageUserListItems[r];
				if (s && s.cell) {
					s._onSetView(s.cell)
				}
			}
			this._refreshUI()
		},
		_onGameFriendsRetrieved: function() {
			this._retrievingGameFriends = false;
			if (this._currentTab === this.GameFriendsTab) {
				this._refreshUI()
			}
		},
		_waitingOnData: function() {
			return this._retrievingCurrentGame || this._retrievingServiceFriends || this._retrievingServiceGameOwners || (this._currentTab === this.GameFriendsTab && this._retrievingGameFriends)
		},
		_displayAvailableDataWhenIdle: function() {
			if (!this._idleAction) {
				this._idleAction = this.bind(function() {
					this._displayAvailableData()
				})
			}
			this._idleActor.waitForIdleBeforeAction(this._idleAction)
		},
		_displayAvailableData: function() {
			this._activeListItems = null;
			if (!this._loadingItemsSection) {
				return
			}
			var r;
			var t = [];
			var s = [];
			if (this._currentTab === this.GameFriendsTab) {
				for (r = 0; r < this._gameFriendListItems.length; r++) {
					s.push(this._gameFriendListItems[r])
				}
			}
			for (r = 0; r < this._mobageUserListItems.length; r++) {
				if (this._currentTab === this.AllServiceFriendsTab || this._mobageUserListItems[r].data.hasGame) {
					s.push(this._mobageUserListItems[r])
				}
			}
			for (r = 0; r < s.length; r++) {
				s[r].data.isEven = (r % 2 === 0)
			}
			if (s.length > 0) {
				t.push(this._listViewSection);
				this._listViewSection.calculateRowHeightForListView(this._listView);
				this._activeListItems = s;
				this._listViewSection.setItems(this._activeListItems)
			}
			if (this._waitingOnData()) {
				this._loadingItemsSection.setRowHeight(this._listView.getFrame()[3] / 3.8);
				t.unshift(this._loadingItemsSection);
				this._zeroCaseView.removeFromParent();
				if (s.length === 0) {
					this._bottomBar.removeFromParent()
				}
			}
			if (this._activeListItems && this._activeListItems.length) {
				this._zeroCaseView.removeFromParent();
				this._listViewBgInnerPane.addChild(this._bottomBar);
				this._listViewBgInnerPane.addChild(this._listView);
				if (this._waitingOnData() && !this._loadingFurtherUsers) {
					this._loadingItemsSection.setPendingText(o("Loading more choices..."));
					this._loadingFurtherUsers = true
				}
			}
			this._listView.setSections(t)
		},
		_refreshUI: function() {
			this._displayAvailableData();
			if (this._waitingOnData()) {
				this._zeroCaseView.removeFromParent();
				this._bottomBar.removeFromParent();
				this._listViewBgInnerPane.addChild(this._listView)
			} else {
				if (!this._activeListItems || !this._activeListItems.length) {
					this._bottomBar.removeFromParent();
					this._listView.removeFromParent();
					this._listViewBgInnerPane.addChild(this._zeroCaseView)
				}
			}
			if (j.Capabilities.getPlatformOS().toLowerCase() === "android") {
				this._listView.removeFromParent();
				this._listViewBgInnerPane.addChild(this._listView)
			}
			this._updateUIElements()
		},
		_selectAllServiceFriends: function() {
			if (this._currentTab !== this.AllServiceFriendsTab) {
				this._oldScrollPosition_gameFriends = this._listView.getScrollPosition();
				this._listView.setScrollPosition(this._oldScrollPosition_allServiceFriends);
				this._currentTab = this.AllServiceFriendsTab;
				for (var r = 0; r < this._gameFriendListItems.length; r++) {
					this._gameFriendListItems[r].data.isSelected = false
				}
				this._buttonCurrentGameFriends.setState(e.State.Normal);
				this._buttonAllFriends.setState(e.State.Selected);
				this._allFriendsShowing = true;
				this._buttonCurrentGameFriends.setImage(null);
				if (this._zeroCaseTextHeader) {
					this._zeroCaseTextHeader.setText(o("You don't have any Mobage friends yet."))
				}
				this._refreshUI()
			}
		},
		_selectGameFriends: function() {
			if (this._currentTab !== this.GameFriendsTab) {
				this._oldScrollPosition_allServiceFriends = this._listView.getScrollPosition();
				this._listView.setScrollPosition(this._oldScrollPosition_gameFriends);
				this._currentTab = this.GameFriendsTab;
				this._buttonCurrentGameFriends.setState(e.State.Selected);
				this._buttonAllFriends.setState(e.State.Normal);
				this._allFriendsShowing = false;
				this._buttonAllFriends.setImage(null);
				if (this._zeroCaseTextHeader && this._currentGame) {
					this._zeroCaseTextHeader.setText(o("You don't have any %1s friends yet.", this._currentGame.name))
				}
				this._refreshUI()
			}
		}
	});
	var m = e.ListViewItem.subclass({
		initialize: function() {},
		_onCreateView: function() {
			return new a.FriendPickerCell(1, 480, this.data.friendPickerController)
		},
		_onSetView: function(u) {
			if (u) {
				u.listItem = this;
				this.cell = u;
				var t = this.data.user ? this.data.user.gamertag : "<no user>";
				var s = this.data.user ? this.data.user.getDefinedIcon() : a.Assets.image("no-user-icon.png");
				var r = this.data.hasGame ? "Choose me" : "Invite to " + this.data.friendPickerController._currentGame.name;
				u.setupListItem(this.data.isEven, this.data.hasGame, t, s, r, this.data.isSelected, this.data.isInvited, this.data.friendPickerController._reachedMaximumPicked)
			}
		},
		_onReleaseView: function(r) {
			r.listItem = null;
			this.cell = null
		}
	});
	return g
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/FriendPickerCell"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/FriendPickerCell"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Implementation/Widgets/ListViewCells/FriendPickerCell"] = b;
	var e = require("NGCore/Client/UI").UI;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		Assets: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Assets").Assets
		},
		FriendPickerStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FriendPickerStyle")
		},
		UIStyle: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style
		},
		UnspammableButton: function() {
			return require("NGCore/Client/Social/_Internal/US/Implementation/Widgets/UnspammableButton").UnspammableButton
		},
		CommonElements: function() {
			return require("NGCore/Client/Social/_Internal/US/Assets/Stylesheets/Main").CommonElements
		}
	});
	var d = a.UIStyle.ScaledTextSize;
	var c = e.View.subclass({
		classname: "FriendPickerCell",
		initialize: function($super, j, g, h) {
			$super();
			a.FriendPickerStyle;
			this._FriendPickerStyle = a.UIStyle.registeredStyle("social.us.friendpicker");
			this.scaleFactor = 1;
			if (j) {
				this.scaleFactor = j
			}
			this._baseWidth = 480;
			if (g) {
				this._baseWidth = g
			}
			this.setFrame([15 * j, 15 * j, 15 * j, 15 * j]);
			this._userPhoto = (new e.Image()).retain();
			this._userPhoto.setImageBorder(this._FriendPickerStyle.props()["userAvatar"]);
			this.addChild(this._userPhoto);
			this._nameLabel = (new e.Label()).retain();
			this._nameLabel.setTextSize(d(14).realize());
			this._nameLabel.setTextGravity(e.ViewGeometry.Gravity.BottomLeft);
			this._nameLabel.setAttributes(this._FriendPickerStyle.props()["listItemName"]);
			this.addChild(this._nameLabel);
			this._descriptionLabel = (new e.Label()).retain();
			this._descriptionLabel.setTextSize(d(12).realize());
			this._descriptionLabel.setTextGravity(e.ViewGeometry.Gravity.TopLeft);
			this._descriptionLabel.setAttributes(this._FriendPickerStyle.props()["listItemInvite"]);
			this.addChild(this._descriptionLabel);
			var f = this;
			this._selectCheckBox = (new e.CheckBox()).retain();
			a.CommonElements.checkBox.applyTo(this._selectCheckBox);
			this._selectCheckBox.onclick = function() {
				h.onRowSelectClicked(f)
			};
			this._sendInviteButton = (new a.UnspammableButton()).retain();
			this._sendInviteButton.setImage(a.Assets.image("invite_icon.png"));
			this._sendInviteButton.setImage(a.Assets.image("invite_sent_icon.png"), e.State.Disabled);
			this._sendInviteButton.setAttributes(this._FriendPickerStyle.props()["confirmButton"]);
			this._sendInviteButton.setGradient({}, e.State.Disabled);
			this._sendInviteButton.onclick = function() {
				h.onRowInviteClicked(f)
			}
		},
		setupListItem: function(n, y, p, g, t, o, j, u) {
			var w = this.getFrame();
			var q = w[2];
			var z = w[3];
			var f = (100 / 460) * q;
			var v = (275 / 460) * q;
			this._nameLabel.setFrame([f, 0, v, z / 2]);
			this._descriptionLabel.setFrame([f, z / 2, v, z / 2]);
			if (n) {
				this.setAttributes(this._FriendPickerStyle.props()["listItemEven"])
			} else {
				this.setAttributes(this._FriendPickerStyle.props()["listItemOdd"])
			}
			this._nameLabel.setText(p);
			this._descriptionLabel.setText(t);
			var m = (10 / 75) * z;
			var l = (61 / 75) * z;
			this._userPhoto.setFrame([m, (z - l) / 2, l, l]);
			if (g) {
				this._userPhoto.setImage(g)
			} else {
				this._userPhoto.setImage(a.Assets.image("no-user-icon.png"))
			}
			if (y === true) {
				if (this._sendInviteButton) {
					this._sendInviteButton.removeFromParent()
				}
				var h = (10 / 75) * z;
				var s = (60 / 75) * z;
				this._selectCheckBox.setFrame([q - h - s * 1.3 + s * 0.3, (z - s) / 2, s * 1.3, s]);
				this.addChild(this._selectCheckBox);
				this._selectCheckBox.clearState(e.State.Disabled);
				this._selectCheckBox.setChecked(o === true);
				if (!o && u) {
					this._selectCheckBox.setState(e.State.Disabled)
				}
			} else {
				if (this._selectCheckBox) {
					this._selectCheckBox.removeFromParent()
				}
				var r = (10 / 75) * z;
				var k = (75 / 75) * z;
				var x = (52 / 75) * z;
				this._sendInviteButton.setFrame([q - r - k, (z - x) / 2, k, x]);
				this.addChild(this._sendInviteButton);
				if (j) {
					this._sendInviteButton.setImageInsets([0, 0, 0, 0]);
					this._sendInviteButton.setState(e.State.Disabled)
				} else {
					this._sendInviteButton.setImageInsets([(10 / 75) * k, (10 / 75) * k, (10 / 75) * k, (10 / 75) * k]);
					this._sendInviteButton.setState(e.State.Normal)
				}
			}
		},
		onInviteSent: function() {
			this._sendInviteButton.setImageInsets([0, 0, 0, 0]);
			this._sendInviteButton.setState(e.State.Disabled)
		},
		setFriendPickerSelectionEnabled: function(f) {
			if (this.listItem.data.isSelected !== true) {
				this._selectCheckBox.setState(f ? e.State.Normal : e.State.Disabled)
			}
		},
		cleanUp: function() {
			if (this._userPhoto) {
				this._userPhoto.release();
				this._userPhoto = null
			}
			if (this._nameLabel) {
				this._nameLabel.release();
				this._nameLabel = null
			}
			if (this._descriptionLabel) {
				this._descriptionLabel.release();
				this._descriptionLabel = null
			}
			if (this._selectCheckBox) {
				this._selectCheckBox.release();
				this._selectCheckBox = null
			}
			if (this._sendInviteButton) {
				this._sendInviteButton.release();
				this._sendInviteButton = null
			}
		},
		destroy: function() {
			this.cleanUp()
		}
	});
	b.FriendPickerCell = c;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FriendPickerStyle"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FriendPickerStyle"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/_Internal/US/Assets/Stylesheets/FriendPickerStyle"] = b;
	var d = {};
	d.Style = require("NGCore/Client/Social/_Internal/US/Implementation/Stylesheets/Stylesheets").Style;
	var a = d.Style.ScaledCorners;
	var c = d.Style.ScaledTextSize;
	d.Style.sheet("social.us.friendpicker", {
		listItemEven: {
			gradient: {
				gradient: ["FFF9FCFD 0.0", "FFF9FCFD 1.0"]
			}
		},
		listItemOdd: {
			gradient: {
				gradient: ["FFE6EDF5 0.0", "FFE6EDF5 1.0"]
			}
		},
		listItemName: {
			textColor: "FF004AA9"
		},
		listItemInvite: {
			textColor: "FF000000"
		},
		topBarBackgroundPane: {
			backgroundColor: "EE0C152D"
		},
		borderUnderTopPane: {
			backgroundColor: "FF2C4B6F"
		},
		listAreaPane: {
			backgroundColor: "EE13243B"
		},
		baseView: {
			gradient: {
				gradient: ["FF0A1D34 0.0", "FF0A1D34 1.0"]
			}
		},
		findFriendButtonNormalGradient: {
			gradient: ["FFDAF2FD 0.0", "FFDAF2FD 1.0"]
		},
		findFriendButtonHighlightedGradient: {
			corners: "6.0 6.0 6.0 6.0",
			gradient: ["FF4090CD 0.0", "FF2966BC 1.0"]
		},
		bottomBar: {
			gradient: {
				insets: "{0.0,0.0,0.0,0.0}",
				gradient: ["E50E2454 0.000", "E51C4B7C 1.000"]
			}
		},
		bottomBarText: {
			textColor: "FFFFFFFF"
		},
		confirmButton: {
			gradient: {
				corners: "6.0 6.0 6.0 6.0",
				gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"]
			},
			pressedGradient: {
				corners: "6.0 6.0 6.0 6.0",
				gradient: ["FF397210 0.000", "FF5B971B 1.000"]
			},
			textColor: "FFFFFFFF"
		},
		confirmButtonDisabled: {
			gradient: {
				corners: "6.0 6.0 6.0 6.0",
				gradient: ["FF9A9E90 0.000", "FF7C7F76 1.000"]
			},
			textColor: "FFFFFFFF"
		},
		sentInviteButton: {
			gradient: {
				outerShadow: "0000 1.0 {0.0,0.0}",
				insets: "{1.0,0.0,0.0,0.0}",
				corners: "6.0 6.0 6.0 6.0",
				innerShadow: "FF00 0.0 {0.0,0.0}",
				gradient: ["FF75B624 0.000", "FF4D8D1F 1.000"]
			}
		},
		userAvatar: {
			corners: "2.0 2.0 2.0 2.0",
			gradient: [],
			outerLine: "FFFF 2",
			innerLine: "6000 2"
		},
		inviteSentButton: {
			gradient: {
				corners: "6.0 6.0 6.0 6.0",
				gradient: ["00FFFFFF 0.0", "00FFFFFF 1.0"]
			}
		},
		verticalContentContainer: {
			gradient: {
				gradient: ["FFCAD2DD 0.0", "FF7CA4C8 0.2"],
				corners: "4 4 0 0"
			},
			innerContainer: {
				gradient: {
					gradient: ["FFC2D0E0 0.0", "FFD9E1EC 1.0"],
					innerLine: "FF0E1D3B 2.0",
					corners: "4 4 0 0"
				}
			}
		},
		verticalContentFailureCaseTextHeader: {
			textFont: d.Style.defaultBoldFontFace,
			textColor: "FF60718A",
			textGravity: [0.5, 0],
			textSize: c(14),
			textShadow: "66FFFFFF 1.0 {0.0,-2.0}"
		},
		verticalContentFailureCaseTextBody: {
			textColor: "FF60718A",
			textGravity: [0.5, 0],
			textSize: c(14),
			textShadow: "66FFFFFF 1.0 {0.0,-2.0}"
		}
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Client/Social/US/Models/OrderedList"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Client/Social/US/Models/OrderedList"] || {};
	$MODULE_REGISTRY["NGCore/Client/Social/US/Models/OrderedList"] = b;
	var a = require("NGCore/Client/Social/US/Data/Dispatcher").Dispatcher;
	var c = {
		getObjectPublicInterface: function(e, f, g) {
			if (e[g]) {
				return e[g]
			}
			var d = Array.apply(null, arguments);
			if (d && d.length > 3) {
				d.splice(0, 3)
			} else {
				d = []
			}
			var h = {
				forAll: function(k, j) {
					a.callMethodOnRemoteObject(e, [f, "forAll"], [d, [k, j]])
				},
				forRange: function(m, l, k, j) {
					a.callMethodOnRemoteObject(e, [f, "forRange"], [d, [m, l, k, j]])
				},
				forItem: function(k, l, j) {
					a.callMethodOnRemoteObject(e, [f, "forItem"], [d, [k, l, j]])
				}
			};
			e[g] = h;
			return h
		},
		getClassPublicInterface: function(d, e, f) {
			if (d[f]) {
				return d[f]
			}
			var g = {
				forAll: function(j, h) {
					a.callClassMethodOnRemoteObject(d, [e, "forAll"], [
						[],
						[j, h]
					])
				},
				forRange: function(l, k, j, h) {
					a.callClassMethodOnRemoteObject(d, [e, "forRange"], [
						[],
						[l, k, j, h]
					])
				},
				forItem: function(j, k, h) {
					a.callClassMethodOnRemoteObject(d, [e, "forItem"], [
						[],
						[j, k, h]
					])
				}
			};
			d[f] = g;
			return g
		}
	};
	b.OrderedList = c;
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Color"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Shared/Color"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Color"] = b;
	var a = require("NGCore/Shared/Class").Class;
	b.Color = a.subclass({
		classname: "Color",
		initialize: function(e, d, c) {
			switch (arguments.length) {
				case 0:
					this._red = 1;
					this._green = 1;
					this._blue = 1;
					break;
				case 1:
					var f = arguments[0];
					if (f === undefined) {
						this._red = 1;
						this._green = 1;
						this._blue = 1
					} else {
						if (!f.hasOwnProperty("length")) {
							this._red = f.getRed();
							this._green = f.getGreen();
							this._blue = f.getBlue()
						} else {
							switch (f.length) {
								case 0:
									this._red = 1;
									this._green = 1;
									this._blue = 1;
									break;
								case 1:
									f = f[0];
									this._red = f.getRed();
									this._green = f.getGreen();
									this._blue = f.getBlue();
									break;
								case 3:
									this._red = f[0];
									this._green = f[1];
									this._blue = f[2];
									break;
								default:
									throw new Error("Wrong number of arguments for a Color")
							}
						}
					}
					break;
				case 3:
					this._red = arguments[0];
					this._green = arguments[1];
					this._blue = arguments[2];
					break;
				default:
					throw new Error("Wrong number of arguments for a Color")
			}
			return this
		},
		setAll: function(e, d, c) {
			this.constructor.apply(this, arguments);
			return this
		},
		getRed: function() {
			return this._red
		},
		getGreen: function() {
			return this._green
		},
		getBlue: function() {
			return this._blue
		},
		setRed: function(c) {
			this._red = c;
			return this
		},
		setGreen: function(c) {
			this._green = c;
			return this
		},
		setBlue: function(c) {
			this._blue = c;
			return this
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Vector"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Shared/Vector"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Vector"] = b;
	var a = require("NGCore/Shared/Class").Class;
	b.Vector = a.subclass({
		classname: "Vector",
		initialize: function() {
			switch (arguments.length) {
				case 0:
					this._x = 0;
					this._y = 0;
					break;
				case 1:
					var c = arguments[0];
					if (c === undefined) {
						this._x = 0;
						this._y = 0
					} else {
						if (!c.hasOwnProperty("length")) {
							this._x = c.getX();
							this._y = c.getY()
						} else {
							switch (c.length) {
								case 0:
									this._x = 0;
									this._y = 0;
									break;
								case 1:
									c = c[0];
									this._x = c.getX();
									this._y = c.getY();
									break;
								case 2:
									this._x = c[0];
									this._y = c[1];
									break;
								default:
									throw new Error("Wrong number of arguments for a Vector")
							}
						}
					}
					break;
				case 2:
					this._x = arguments[0];
					this._y = arguments[1];
					break;
				default:
					throw new Error("Wrong number of arguments for a Vector")
			}
		},
		setAll: function() {
			this.constructor.apply(this, arguments);
			return this
		},
		clone: function() {
			return new this.constructor(this)
		},
		getX: function() {
			return this._x
		},
		setX: function(c) {
			this._x = c;
			return this
		},
		getY: function() {
			return this._y
		},
		setY: function(c) {
			this._y = c;
			return this
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Point"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Shared/Point"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Point"] = b;
	var a = require("NGCore/Shared/Class").Class;
	b.Point = a.subclass({
		classname: "Point",
		initialize: function(c, e) {
			switch (arguments.length) {
				case 0:
					this._x = 0;
					this._y = 0;
					break;
				case 1:
					var d = arguments[0];
					if (d === undefined) {
						this._x = 0;
						this._y = 0
					} else {
						if (!d.hasOwnProperty("length")) {
							this._x = d.getX();
							this._y = d.getY()
						} else {
							switch (d.length) {
								case 0:
									this._x = 0;
									this._y = 0;
									break;
								case 1:
									d = d[0];
									this._x = d.getX();
									this._y = d.getY();
									break;
								case 2:
									this._x = d[0];
									this._y = d[1];
									break;
								default:
									throw new Error("Wrong number of arguments for a Point")
							}
						}
					}
					break;
				case 2:
					this._x = arguments[0];
					this._y = arguments[1];
					break;
				default:
					throw new Error("Wrong number of arguments for a Point")
			}
		},
		setAll: function(c, d) {
			this.constructor.apply(this, arguments);
			return this
		},
		clone: function() {
			return new this.constructor(this)
		},
		getX: function() {
			return this._x
		},
		setX: function(c) {
			this._x = c;
			return this
		},
		getY: function() {
			return this._y
		},
		setY: function(c) {
			this._y = c;
			return this
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Size"] = function() {
	var b = $MODULE_REGISTRY["NGCore/Shared/Size"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Size"] = b;
	var a = require("NGCore/Shared/Class").Class;
	b.Size = a.subclass({
		classname: "Size",
		initialize: function(d, c) {
			switch (arguments.length) {
				case 0:
					this._width = 0;
					this._height = 0;
					break;
				case 1:
					var e = arguments[0];
					if (e === undefined) {
						this._width = 0;
						this._height = 0
					} else {
						if (!e.hasOwnProperty("length")) {
							this._width = e.getWidth();
							this._height = e.getHeight()
						} else {
							switch (e.length) {
								case 0:
									this._width = 0;
									this._height = 0;
									break;
								case 1:
									e = e[0];
									this._width = e.getWidth();
									this._height = e.getHeight();
									break;
								case 2:
									this._width = e[0];
									this._height = e[1];
									break;
								default:
									throw new Error("Wrong number of arguments for a Size")
							}
						}
					}
					break;
				case 2:
					this._width = arguments[0];
					this._height = arguments[1];
					break;
				default:
					throw new Error("Wrong number of arguments for a Size")
			}
		},
		setAll: function(d, c) {
			this.constructor.apply(this, arguments);
			return this
		},
		clone: function() {
			return new this.constructor(this)
		},
		getWidth: function() {
			return this._width
		},
		setWidth: function(c) {
			this._width = c;
			return this
		},
		getHeight: function() {
			return this._height
		},
		setHeight: function(c) {
			this._height = c;
			return this
		},
	});
	return b
};
$MODULE_FACTORY_REGISTRY["NGCore/Shared/Rect"] = function() {
	var c = $MODULE_REGISTRY["NGCore/Shared/Rect"] || {};
	$MODULE_REGISTRY["NGCore/Shared/Rect"] = c;
	var b = require("NGCore/Shared/Class").Class;
	var d = require("NGCore/Shared/Point").Point;
	var a = require("NGCore/Shared/Size").Size;
	c.Rect = b.subclass({
		classname: "Rect",
		initialize: function(e, f) {
			switch (arguments.length) {
				case 0:
					this._origin = new d();
					this._size = new a();
					break;
				case 1:
					var g = arguments[0];
					if (g === undefined) {
						this._origin = new d();
						this._size = new a()
					} else {
						if (!g.hasOwnProperty("length")) {
							this._origin = new d(g.getOrigin());
							this._size = new a(g.getSize())
						} else {
							switch (g.length) {
								case 0:
									this._origin = new d();
									this._size = new a();
									break;
								case 1:
									g = g[0];
									this._origin = new d(g.getOrigin());
									this._size = new a(g.getSize());
									break;
								case 2:
									this._origin = new d(g[0]);
									this._size = new a(g[1]);
									break;
								case 4:
									this._origin = new d(g[0], g[1]);
									this._size = new a(g[2], g[3]);
									break;
								default:
									throw new Error("Wrong number of arguments for a Rect")
							}
						}
					}
					break;
				case 2:
					this._origin = new d(arguments[0]);
					this._size = new a(arguments[1]);
					break;
				case 4:
					this._origin = new d(arguments[0], arguments[1]);
					this._size = new a(arguments[2], arguments[3]);
					break;
				default:
					throw new Error("Wrong number of arguments for a Rect")
			}
		},
		setAll: function(e, f) {
			this.constructor.apply(this, arguments);
			return this
		},
		clone: function() {
			return new this.constructor(this)
		},
		getOrigin: function() {
			return this._origin
		},
		setOrigin: function(e) {
			this._origin.setAll(e);
			return this
		},
		setOriginCentered: function(e) {
			e = new Core.Point(e);
			this._origin.setX(e.getX() - this._size.getWidth() / 2);
			this._origin.setY(e.getY() - this._size.getHeight() / 2);
			return this
		},
		getSize: function() {
			return this._size
		},
		setSize: function(e) {
			this._size.setAll(e);
			return this
		},
		setSizeCentered: function(f) {
			var e = this._size.getWidth();
			var g = this._size.getHeight();
			this._size.setAll(f);
			this._origin.setX(this._origin.getX() + e / 2 - this._size.getWidth() / 2);
			this._origin.setY(this._origin.getY() + g / 2 - this._size.getHeight() / 2);
			return this
		},
		getMinX: function() {
			return this._origin.getX()
		},
		getMidX: function() {
			return this._origin.getX() + this._size.getWidth() / 2
		},
		getMaxX: function() {
			return this._origin.getX() + this._size.getWidth()
		},
		getMinY: function() {
			return this._origin.getY()
		},
		getMidY: function() {
			return this._origin.getY() + this._size.getHeight() / 2
		},
		getMaxY: function() {
			return this._origin.getY() + this._size.getHeight()
		},
	});
	return c
};
$MODULE_FACTORY_REGISTRY["Code/StartupNetworkListener"] = function() {
	var b = $MODULE_REGISTRY["Code/StartupNetworkListener"] || {};
	$MODULE_REGISTRY["Code/StartupNetworkListener"] = b;
	var e = require("NGCore/Client/Core").Core;
	var d = require("NGCore/Client/UI").UI;
	var a = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
		_LocalGameList: function() {
			return require("NGCore/Client/Core/_LocalGameList")._LocalGameList
		},
		NetworkEmitter: function() {
			return require("NGCore/Client/Device/NetworkEmitter").NetworkEmitter
		}
	});
	var c = b.StartupNetworkListener = e.MessageListener.singleton({
		classname: "StartupNetworkListener",
		start: function() {
			if (!this.LocText) {
				this.LocText = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString
			}
			this.slowText = this.mediumText = null;
			this.connectionState = 0;
			this._aveRates = [];
			a.NetworkEmitter.setPerformanceThreshold({
				minRate: (5 << 30),
				duration: 5000
			});
			a.NetworkEmitter.addPerformanceListener(this, this.onPerformanceAlert.bind(this));
			a.NetworkEmitter.setConnectionThreshold({
				maxConnTime: 5000
			});
			a.NetworkEmitter.addConnectionListener(this, this.onConnectionAlert.bind(this))
		},
		stop: function() {
			a.NetworkEmitter.removePerformanceListener(this);
			a.NetworkEmitter.removeConnectionListener(this)
		},
		showPendingError: function() {
			if (this._pendingErrorCb) {
				this._pendingErrorCb();
				this._pendingErrorCb = null
			}
		},
		onConnectionAlert: function(f) {
			NgLogI("StartupNetworkListener Connection Alert: " + JSON.stringify(f));
			switch (this.connectionState) {
				case 0:
					this._showSlowMessage();
					this.connectionState = 1;
					a.NetworkEmitter.setConnectionThreshold({
						maxConnTime: 10000
					});
					break;
				case 1:
					this._showMediumMessage();
					this.connectionState = 2;
					a.NetworkEmitter.setConnectionThreshold({
						maxConnTime: 20000
					});
					break;
				case 2:
					this._showHardDialog();
					this.connectionState = 3;
					a.NetworkEmitter.removeConnectionListener(this);
					break;
				default:
					NgLogE("Error: MobageBoot is still showing ongoing network issues")
			}
		},
		onPerformanceAlert: function(f) {
			NgLogI("StartupNetworkListener Performance Alert: " + JSON.stringify(f));
			this._aveRates.push(f.aveRate);
			if (this._failsRate(1 << 10, 4)) {
				this._showHardDialog()
			} else {
				if (this._failsRate(1 << 10, 2)) {
					this._showMediumMessage()
				} else {
					if (this._failsRate(5 << 10, 1)) {
						this._showSlowMessage()
					}
				}
			}
		},
		_showSlowMessage: function() {
			if (!this.slowText) {
				this.slowText = this.LocText("Slow connection. Please wait…")
			}
			NgLogD("StartupNetworkListener: Slow Performance");
			this._showMessageFor(this.slowText, 2000)
		},
		_showMediumMessage: function() {
			if (!this.mediumText) {
				this.mediumText = this.LocText("You may want to find better signal…")
			}
			NgLogD("StartupNetworkListener: Really Slow Performance");
			this._showMessageFor(this.mediumText, 2000)
		},
		_showHardDialog: function() {
			NgLogD("StartupNetworkListener: Horrible Performance");
			if (!this._showingDialog) {
				this._showingDialog = true;
				var f = function() {
					var h = new d.AlertDialog({
						title: this.LocText("Unable to connect"),
						text: this.LocText("Please check that your network settings are correct and that you have a good signal.")
					});
					h.setChoices(["OK"]);
					var g;
					h.onchoice = function(j) {
						g._showingDialog = false;
						h.destroy()
					};
					h.show();
					setTimeout(function() {
						if (!h._destroyed) {
							g._showingDialog = false;
							h.destroy()
						}
					}, 10000)
				}.bind(this);
				if (e.LocalGameList.progressVisible) {
					f()
				} else {
					this._pendingErrorCb = f
				}
			}
		},
		_failsRate: function(h, f) {
			for (var g = this._aveRates.length - 1; g >= this._aveRates.length - f; g--) {
				if (this._aveRates[g] > h) {
					return false
				}
			}
			return true
		},
		_showMessageFor: function(f, g) {
			if (this.oldText || !f || !g) {
				return
			}
			this.oldText = a._LocalGameList._progressText;
			a._LocalGameList.setProgressText(f);
			if (this.oldText) {
				setTimeout(function() {
					if (a._LocalGameList._progressText == f && this.oldText) {
						a._LocalGameList.setProgressText(this.oldText);
						delete this.oldText
					}
				}.bind(this), g)
			}
		}
	});
	return b
};
(function() {
	if (!Function.prototype.hasOwnProperty("bind")) {
		var a = Array.prototype.slice;
		Function.prototype.bind = function(c) {
			var d = this;
			if (arguments.length > 1) {
				var b = a.call(arguments, 1);
				return function() {
					if (arguments.length) {
						var e = b.concat(a.call(arguments));
						return d.apply(c, e)
					} else {
						return d.apply(c, b)
					}
				}
			} else {
				return function() {
					if (arguments.length) {
						return d.apply(c, arguments)
					} else {
						return d.call(c)
					}
				}
			}
		}
	}
})();
(function() {
	if (!Array.prototype.hasOwnProperty("indexOf")) {
		Array.prototype.indexOf = function(c) {
			var a = this.length;
			for (var b = 0; b < this.length; ++b) {
				if (c === this[b]) {
					return b
				}
			}
			return -1
		}
	}
})();

function userGameInit() {
	console.log("ngCore calling main()");
	main()
}
var NGSetTimeoutRunTimers = require("NGCore/Client/UI/NGJSEnvironmentSupport").NGSetTimeoutRunTimers;
var SystemBinding = require("NGCore/Client/UI/SystemBinding").SystemBinding;
var UI = require("NGCore/Client/UI").UI;
var AlertDialog = UI.AlertDialog;
var ProgressDialog = UI.ProgressDialog;
var Downloader = require("NGCore/Client/Network/DownloadManifest").Downloader;
var LocalGameList = require("NGCore/Client/Core/LocalGameList").LocalGameList;
var Device = require("NGCore/Client/Device").Device;
var Core = require("NGCore/Client/Core").Core;
var Capabilities = require("NGCore/Client/Core/Capabilities").Capabilities;
var Localization = require("NGCore/Client/Core/Localization").Localization;
Storage = require("NGCore/Client/Storage").Storage;
var NgProcID = {
	PersistProc: -1,
	GameProc: -2
};
var gNgShutdownPending = false;
var gNgEngineEntities;
var gNgAddedEngineEntities;
var gNgRemovedEngineEntities;
var gNgUpdateEngineEntities;
var gNgTouchEngineEntities;
var gNgKeyPressEngineEntities;

function NgEngineInitPrivate() {
	NgLogInit();
	NgApplication.getInstance().restart();
	gNgEngineEntities = new Array();
	gNgAddedEngineEntities = new Array();
	gNgRemovedEngineEntities = new Array();
	gNgUpdateEngineEntities = new Array();
	gNgTouchEngineEntities = new Array();
	gNgKeyPressEngineEntities = new Array();
	Core.Analytics.instantiate()
}

function NgEngineProcessEntityAddRemove() {
	for (var a in gNgAddedEngineEntities) {
		var b = gNgAddedEngineEntities[a];
		if (b.mIsTouchable) {
			NgInsertSortedTouch(b)
		}
		if (b.mIsKeyable) {
			NgInsertSortedKeyPress(b)
		}
		if (b.mIsUpdatable) {
			gNgUpdateEngineEntities[b.mId] = b
		}
	}
	gNgAddedEngineEntities = [];
	for (var a in gNgRemovedEngineEntities) {
		var b = gNgRemovedEngineEntities[a];
		if (b.mIsTouchable) {
			gNgTouchEngineEntities.splice(NgFindIndex(gNgTouchEngineEntities, b), 1)
		}
		if (b.mIsKeyable) {
			gNgKeyPressEngineEntities.splice(NgFindIndex(gNgKeyPressEngineEntities, b), 1)
		}
		if (b.mIsUpdatable) {
			delete gNgUpdateEngineEntities[b.mId]
		}
	}
	gNgRemovedEngineEntities = []
}

function NgHandleException(a) {
	if (Core.Proc.isPrivileged()) {
		NgLogException(a)
	} else {
		var b = JSON.stringify(a);
		NgLogException(a);
		Core.LocalGameList._forwardException(b)
	}
}

function NgEngineInit(a) {
	NgLogD("NgEngineInit beg");
	try {
		NgEngineInitPrivate();
		time.setCtr("frame", 1000, NgLogD);
		NgLogD("KeyValue Storage initializing...");
		Storage.KeyValueCache.init();
		NgLogD("KeyValue Storage initialized...");
		Core.Time.instantiate();
		NgLogD("Instantiate the Localization context (singleton), depends on Capabilities");
		Localization.instantiate()
	} catch (b) {
		NgHandleException(b)
	}
	NgLogD("NgEngineInit end");
	return NgEngineUpdate(a)
}

function NgPreInit(a) {
	NgLogD("Localization NgPreInit beg");
	return update(a)
}

function NgGameInit(a) {
	NgLogD("NgGameInit beg");
	try {
		NGWindow = UI.Window;
		userGameInit()
	} catch (b) {
		NgHandleException(b)
	}
	NgLogD("NgGameInit end");
	return update(a)
}

function update(a) {
	return NgEngineUpdate(a)
}
var NGSetTimeoutRunTimers = require("NGCore/Client/UI/NGJSEnvironmentSupport").NGSetTimeoutRunTimers;
var setTimeoutOrig = setTimeout;
setTimeout = function(a, b) {
	return setTimeoutOrig(function() {
		try {
			a()
		} catch (c) {
			NgHandleException(c)
		}
	}, b)
};
var setIntervalOrig = setInterval;
setInterval = function(a, b) {
	return setIntervalOrig(function() {
		try {
			a()
		} catch (c) {
			NgHandleException(c)
		}
	}, b)
};
var NgEngineUpdate = (function() {
	var a = require("NGCore/Client/Core").Core;
	return function(c) {
		try {
			NGSetTimeoutRunTimers();
			if (c.length) {
				NgEngineProcessEntityAddRemove();
				var b = c.split(":");
				for (var g = 0; g < b.length; ++g) {
					command = b[g];
					if (0 == command.length) {
						continue
					}
					switch (parseInt(command)) {
						case NgEntityTypes.App:
							NgApplication.getInstance().handleCommand(command);
							break;
						case NgEntityTypes.NgFileSys:
							NgApplication.getInstance().getFileSys().handleCommand(command);
							break;
						case NgEntityTypes.Storage:
							NgLogD("Command for storage is " + command);
							Storage.getInstanceForCommand(command).handleCommand(command);
							break;
						case NgEntityTypes.NgUI:
							NGWindow.handleCommand(command);
							break;
						case NgEntityTypes.NgSystemBinding:
							SystemBinding.handleCommand(command);
							break;
						case 3117:
							console.log("got leet response");
							if (typeof(_WifiDiagCallback) != "undefined") {
								_WifiDiagCallback(command)
							}
							break;
						default:
							a.Proc._classRecvGen(command.split(","));
							break
					}
				}
			}
			if (gNgShutdownPending) {
				gNgShutdownPending = false
			} else {
				NgEngineProcessEntityAddRemove();
				for (var g in gNgUpdateEngineEntities) {
					var d = gNgUpdateEngineEntities[g];
					if (!d.mRegistered) {
						continue
					}
					d.onUpdate()
				}
			}
		} catch (f) {
			NgHandleException(f)
		}
		var e = a.Proc.getCommandString() + gNgCommandString;
		gNgCommandString = e;
		a.Proc.clearCommandString();
		return NgFlushCommandsToString()
	}
})();
var Capabilities = require("NGCore/Client/Core/Capabilities").Capabilities;
var Logger = require("NGCore/Client/Core/Logger").Logger;
var NgApplicationCommands = {
	Caps: 0,
	Debug: 1,
	FrameTime: 2,
	FrameRate: 3,
	Start: 4,
	DeviceOrientation: 10,
	SetOrientation: 11,
	BackPress: 12,
	OnBackPressed: 13,
	LaunchExternalNativeApp: 15,
	ExitSystemProcess: 16
};
var NgApplicationOrientation = {
	Portrait: 0,
	PortraitUpsideDown: 1,
	LandscapeLeft: 2,
	LandscapeRight: 3,
	FaceUp: 4,
	FaceDown: 5
};

function NgApplication() {
	this.mFileSys = Storage.FileSystem;
	this.mFrameTime = 0;
	this.mObservers = []
}
NgApplication.sInstance = null;
NgApplication.getInstance = function() {
	if (NgApplication.sInstance == null) {
		NgApplication.sInstance = new NgApplication()
	}
	return NgApplication.sInstance
};
NgApplication.prototype = {
	mFileSys: null,
	mObservers: [],
	mFrameTime: 0,
	restart: function() {},
	handleCommand: function(b) {
		var a = NgPeekCommandId(b);
		switch (a) {
			case NgApplicationCommands.FrameTime:
				this.parseFrameTime(b);
				break;
			case NgApplicationCommands.Start:
				this.onApplicationStart();
				break;
			case NgApplicationCommands.OnBackPressed:
				this.onApplicationBackPressed();
				break;
			default:
				NgLogE("NgApplication command unknown: " + b);
				break
		}
	},
	getFileSys: function() {
		return this.mFileSys
	},
	ngLog: function(b, a) {
		NgPushCommand4(NgEntityTypes.App, NgApplicationCommands.Debug, Core.Base64.encode(a), b)
	},
	parseFrameTime: function(c) {
		var a = NgParseCommand2(c, parseInt, parseFloat);
		var b = a[1];
		if (this.mFrameDelta == undefined) {
			this.mFrameDelta = 0
		} else {
			this.mFrameDelta = b - this.mFrameTime
		}
		this.mFrameTime = b
	},
	getFrameTime: function() {
		return this.mFrameTime
	},
	getFrameDelta: function() {
		return this.mFrameDelta
	},
	setFrameRate: function(a) {
		NgPushCommand3(NgEntityTypes.App, NgApplicationCommands.FrameRate, a)
	},
	setOrientation: function(a) {
		NgPushCommand3(NgEntityTypes.App, NgApplicationCommands.SetOrientation, a)
	},
	registerObserver: function(a) {
		a.index = this.mObservers.push(a)
	},
	unregisterObserver: function(a) {
		if (a.index) {
			delete this.mObservers[a.index - 1]
		}
	},
	onApplicationStart: function() {
		NgUI.onLoad();
		for (i in this.mObservers) {
			this.mObservers[i].onApplicationStart()
		}
	},
	onApplicationReceivedCustomMessage: function(a) {
		for (i in this.mObservers) {
			this.mObservers[i].onApplicationReceivedCustomMessage(a)
		}
	},
	onApplicationBackPressed: function() {
		var a = false;
		for (i in this.mObservers) {
			if (this.mObservers[i].onApplicationBackPressed()) {
				a = true;
				break
			}
		}
		if (!a) {
			NgPushCommand2(NgEntityTypes.App, NgApplicationCommands.BackPress)
		}
	},
	exitSystemProcess: function() {
		NgLogD("pushing exit command");
		NgPushCommand2(NgEntityTypes.App, NgApplicationCommands.BackPress);
		NgLogD("pushed exit command")
	}
};

function NgApplicationObserver() {}
NgApplicationObserver.prototype = {
	index: 0,
	onApplicationStart: function() {},
	onApplicationReceivedCustomMessage: function(a) {},
	onApplicationDeviceOrientation: function(a) {},
	onApplicationBackPressed: function() {
		return false
	}
};
var NgEntityTypes = {
	App: 1,
	NgTouchEvent: 2,
	NgKeyPressEvent: 3,
	Accel: 4,
	NgTextInputBox2D: 5,
	Animation: 6,
	Sound: 7,
	NgEngineEntity: 8,
	NgDrawableEntity2D: 9,
	NgCanvas2D: 10,
	NgCamera2D: 11,
	NgSprite2D: 12,
	NgText2D: 13,
	NgWebView2D: 14,
	NgGroup2D: 16,
	NgPhysics2D: 17,
	NgPrimitive2D: 18,
	NgFileSys: 19,
	Gyro: 22,
	NgUI: 23,
	Storage: 24,
	NgSystemBinding: 25,
	NgCustomMessage: 50,
	LoadApp: 100
};
var NgEngineEntityCommandIDs = {
	SetNativeTouchType: 1
};

function NgEngineEntity() {
	this.mId = 0;
	this.mTouchPriority = 0;
	this.mKeyPressPriority = 0;
	this.mIsTouchable = false;
	this.mIsKeyable = false;
	this.mIsUpdatable = false;
	this.mNativeTouchType = NgEngineEntity.NativeTouchType.Enable;
	this.mRegistered = false
}
NgEngineEntity.NativeTouchType = {
	None: 0,
	Enable: 1,
	EnableBounds: 2
};
NgEngineEntity.engineCurrentId = 1;
NgEngineEntity.newEngineId = function() {
	return NgEngineEntity.engineCurrentId++
};
NgEngineEntity.deleteEngineId = function() {};
NgEngineEntity.prototype.newEntity = function() {};
NgEngineEntity.prototype.deleteEntity = function() {};
NgEngineEntity.prototype.onTouch = function(a) {
	return false
};
NgEngineEntity.prototype.onNativeTouch = function(a) {};
NgEngineEntity.prototype.onKeyPress = function(a) {
	return false
};
NgEngineEntity.prototype.onUpdate = function() {};
NgEngineEntity.prototype.register = function() {
	this.mParents = new Array();
	if (this.mId >= 0) {
		this.mId = NgEngineEntity.newEngineId()
	}
	this.mRegistered = true;
	gNgEngineEntities[this.mId] = this;
	gNgAddedEngineEntities[this.mId] = this;
	this.newEntity()
};
NgEngineEntity.prototype.unregister = function() {
	var a = this.mParents.concat(new Array());
	for (var b in a) {
		NgLogD("Removing child " + this.mId + " from parent Group " + a[b].mId + " because the Entity was unregistered");
		a[b].removeChild(this)
	}
	this.mRegistered = false;
	delete gNgEngineEntities[this.mId];
	gNgRemovedEngineEntities[this.mId] = this;
	this.deleteEntity();
	if (this.mId >= 0) {
		NgEngineEntity.deleteEngineId(this.mId)
	}
};
NgEngineEntity.prototype.toggleKeyable = function() {
	if (this.mIsKeyable) {
		gNgKeyPressEngineEntities.splice(NgFindIndex(gNgKeyPressEngineEntities, this), 1)
	} else {
		NgInsertSortedKeyPress(this)
	}
	this.mIsKeyable = !this.mIsKeyable
};
NgEngineEntity.prototype.toggleUpdatable = function() {
	if (this.mIsUpdatable) {
		delete gNgUpdateEngineEntities[this.mId]
	} else {
		gNgUpdateEngineEntities[this.mId] = this
	}
	this.mIsUpdatable = !this.mIsUpdatable
};
NgEngineEntity.prototype.toggleTouchable = function() {
	if (this.mIsTouchable) {
		gNgTouchEngineEntities.splice(NgFindIndex(gNgTouchEngineEntities, this), 1)
	} else {
		NgInsertSortedTouch(this)
	}
	this.mIsTouchable = !this.mIsTouchable
};
NgEngineEntity.prototype.setNativeTouchType = function(a) {
	this.mNativeTouchType = a;
	NgPushCommand4(NgEntityTypes.NgDrawableEntity2D, NgEngineEntityCommandIDs.SetNativeTouchType, this.mId, this.mNativeTouchType)
};
var Core = require("NGCore/Client/Core").Core;
var gNgCommandStrings = [];
var gNgCommandString = "";
var gNgCommandMode = 2;

function NgQueueCommandText(a) {
	switch (gNgCommandMode) {
		case 0:
		case 1:
			gNgCommandStrings.push(a);
			break;
		case 2:
			gNgCommandString += a;
			break
	}
}

function NgFlushCommandsToString() {
	var c = "";
	switch (gNgCommandMode) {
		case 0:
			for (var b = 0, a = gNgCommandStrings.length; b < a; ++b) {
				c += gNgCommandStrings[b]
			}
			break;
		case 1:
			c = String.prototype.concat.apply(gNgCommandStrings);
			break
	}
	switch (gNgCommandMode) {
		case 0:
		case 1:
			gNgCommandStrings = [];
			break;
		case 2:
			c = gNgCommandString;
			gNgCommandString = "";
			break
	}
	return c
}

function NgParseString(a) {
	return a
}

function NgParseBase64(a) {
	if (a) {
		return Core.Base64.decode(a)
	} else {
		return ""
	}
}

function NgParseBool(a) {
	return parseInt(a) ? true : false
}

function NgParseInt(a) {
	return parseInt(a, 10)
}

function NgKVArrayToCmd(b) {
	var a = "";
	var d = 0;
	for (var c in b) {
		var e = b[c];
		a += "," + c + "," + Core.Base64.encode(e);
		++d
	}
	return d + a
}

function NgPushCommand1(a) {
	gNgCommandString += ":" + a
}

function NgPushCommand2(b, a) {
	gNgCommandString += ":" + b + "," + a
}

function NgPushCommand3(c, b, a) {
	gNgCommandString += ":" + c + "," + b + "," + a
}

function NgPushCommand4(d, c, b, a) {
	gNgCommandString += ":" + d + "," + c + "," + b + "," + a
}

function NgPushCommand5(d, c, b, a, e) {
	gNgCommandString += ":" + d + "," + c + "," + b + "," + a + "," + e
}

function NgPushCommand6(d, c, b, a, f, e) {
	gNgCommandString += ":" + d + "," + c + "," + b + "," + a + "," + f + "," + e
}

function NgPushCommand7(d, c, b, a, g, f, e) {
	gNgCommandString += ":" + d + "," + c + "," + b + "," + a + "," + g + "," + f + "," + e
}

function NgPushCommand8(d, c, b, a, h, g, f, e) {
	gNgCommandString += ":" + d + "," + c + "," + b + "," + a + "," + h + "," + g + "," + f + "," + e
}

function NgPushCommand9(j, h, g, f, e, d, c, b, a) {
	gNgCommandString += ":" + j + "," + h + "," + g + "," + f + "," + e + "," + d + "," + c + "," + b + "," + a
}

function NgPushCommandN() {
	var a = arguments;
	var d = a.length;
	var c = ":";
	if (d > 0) {
		c += a[0];
		for (var b = 1; b < d; ++b) {
			c += "," + a[b]
		}
	}
	gNgCommandString += c
}

function NgPeekCommandId(b) {
	var a = b.split(",", 2);
	if (a.length == 2) {
		return parseInt(a[1])
	} else {
		return null
	}
}

function NgPeekClassAndCommandId(b) {
	var a = b.split(",", 2);
	if (a.length == 2) {
		a[0] = parseInt(a[0]);
		a[1] = parseInt(a[1]);
		return a
	} else {
		return null
	}
}

function NgParseCommandToStrings(a) {
	return a.split(",")
}

function NgParseCommand1(d, b) {
	var c = [];
	var a = d.split(",");
	c[0] = b(a[1]);
	return c
}

function NgParseCommand2(e, c, b) {
	var d = [];
	var a = e.split(",");
	d[0] = c(a[1]);
	d[1] = b(a[2]);
	return d
}

function NgParseCommand3(f, d, c, b) {
	var e = [];
	var a = f.split(",");
	e[0] = d(a[1]);
	e[1] = c(a[2]);
	e[2] = b(a[3]);
	return e
}

function NgParseCommand4(f, d, c, b, g) {
	var e = [];
	var a = f.split(",");
	e[0] = d(a[1]);
	e[1] = c(a[2]);
	e[2] = b(a[3]);
	e[3] = g(a[4]);
	return e
}

function NgParseCommand5(g, d, c, b, h, f) {
	var e = [];
	var a = g.split(",");
	e[0] = d(a[1]);
	e[1] = c(a[2]);
	e[2] = b(a[3]);
	e[3] = h(a[4]);
	e[4] = f(a[5]);
	return e
}

function NgParseCommandN(f) {
	var d = [];
	var b = arguments;
	var e = b.length;
	var a = f.split(",");
	for (var c = 1; c < e; ++c) {
		d[c - 1] = b[c](a[c])
	}
	return d
}

function NgParseCommandDictionary(a, g, m, d) {
	var k = true;
	var j = a.split(",");
	var f = j.length;
	if (d) {
		for (var h = 0; h < g; ++h) {
			d[h] = j[h]
		}
	}
	for (var h = g; h < f;) {
		var l = j[h++];
		var b = j[h++];
		var c = j[h++];
		var e = true;
		switch (l) {
			case "i":
				c = parseInt(c);
				break;
			case "f":
				c = parseFloat(c);
				break;
			case "s":
				break;
			case "S":
				c = Core.Base64.decode(c);
				break;
			case "b":
				c = parseInt(c) ? true : false;
				break;
			default:
				k = false;
				e = false;
				break
		}
		if (e) {
			m[b] = c;
			NgLogD("dict: " + b + " : " + m[b])
		} else {
			NgLogD("dict: could not process " + l)
		}
	}
	return k
}
var gNgTrace = null;
var NgDebugModes = {
	BrowserTrace: {},
	NgCommand: {},
	NgCommandDocLoc: {}
};
var NgLogLevel = {
	Verbose: 5,
	Debug: 4,
	Info: 3,
	Warning: 2,
	Error: 1
};
var NgLogStr = ["", "e", "w", "i", "d", "v"];

function NgSetDebugDefaultDestination() {
	if (typeof navigator == "undefined") {
		return NgDebugModes.NgCommand
	}
	var a = navigator.userAgent.toLowerCase();
	if (!((a.indexOf("iphone") >= 0) || (a.indexOf("ipad") >= 0))) {
		return NgDebugModes.BrowserTrace
	} else {
		return NgDebugModes.NgCommand
	}
}
var gNgDebugMode = NgSetDebugDefaultDestination();

function NgLogInit() {
	if (gNgDebugMode == NgDebugModes.BrowserTrace) {
		gNgTrace = document.getElementById("trace")
	}
}

function NgLogSetLevel(a) {
	switch (a) {
		case NgLogLevel.Debug:
			NgLogV = NgNoLog;
			NgLogD = NgDoDebugLog;
			NgLogI = NgDoInfoLog;
			NgLogW = NgDoWarningLog;
			NgLogE = NgDoErrorLog;
			break;
		case NgLogLevel.Info:
			NgLogV = NgNoLog;
			NgLogD = NgNoLog;
			NgLogI = NgDoInfoLog;
			NgLogW = NgDoWarningLog;
			NgLogE = NgDoErrorLog;
			break;
		case NgLogLevel.Warning:
			NgLogV = NgNoLog;
			NgLogD = NgNoLog;
			NgLogI = NgNoLog;
			NgLogW = NgDoWarningLog;
			NgLogE = NgDoErrorLog;
			break;
		case NgLogLevel.Error:
			NgLogV = NgNoLog;
			NgLogD = NgNoLog;
			NgLogI = NgNoLog;
			NgLogW = NgNoLog;
			NgLogE = NgDoErrorLog;
			break;
		default:
		case NgLogLevel.Verbose:
			NgLogV = NgDoVerboseLog;
			NgLogD = NgDoDebugLog;
			NgLogI = NgDoInfoLog;
			NgLogW = NgDoWarningLog;
			NgLogE = NgDoErrorLog;
			break
	}
}
NgDoVerboseLog = function(a) {
	NgLog(NgLogLevel.Verbose, a)
};
NgDoDebugLog = function(a) {
	NgLog(NgLogLevel.Debug, a)
};
NgDoInfoLog = function(a) {
	NgLog(NgLogLevel.Info, a)
};
NgDoWarningLog = function(a) {
	NgLog(NgLogLevel.Warning, a)
};
NgDoErrorLog = function(a) {
	NgLog(NgLogLevel.Error, a)
};
NgNoLog = function() {};
NgLogSetLevel(NgLogLevel.Verbose);
var useConsole = ((typeof console != "undefined") && (typeof console.log == "function"));

function NgLog(b, a) {
	console.log(NgLogStr[b] + ": " + a)
}

function NgLogException(a) {
	var b = "\nEXCEPTION:\n";
	for (var c in a) {
		b += "property: " + c + " value: [" + a[c] + "]\n"
	}
	b += "toString():  value: [" + a.toString() + "]\n\n";
	NgLogD(b)
}
if ((typeof window == "undefined") || (typeof window.time == "undefined")) {
	(function() {
		time = {
			start: function(name) {
				if (!name) {
					error("start: If starting a timer manually a name must be set")
				} else {
					timeMap[name] = (new Date()).getTime();
					if (name in NgRecordMap) {} else {
						NgRecordMap[name] = new NgRecord(name)
					}
				}
			},
			stop: function(name) {
				if (name in timeMap) {
					var stop = (new Date()).getTime();
					var l = NgRecordMap[name].addRecord(stop - timeMap[name]);
					log.push(l);
					if (NgRecordMap[name].records % NgRecordMap[name].ctr == 0) {
						NgRecordMap[name].lineReportMethod.call(this, l);
						NgRecordMap[name].records = 0;
						NgRecordMap[name].avg = 0;
						NgRecordMap[name].min = 55555;
						NgRecordMap[name].max = 0
					}
					delete timeMap[name]
				} else {
					error("stop:" + name + " not found")
				}
			},
			event: function(name, elm, type) {
				if (typeof name != "string") {
					type = elm;
					elm = name;
					name = ""
				}
				if (!elm.length) {
					elm = [elm]
				}
				if (type.indexOf("on") == -1) {
					type = "on" + type
				}
				var i = elm.length;
				var timerN = null;
				var c = null;
				while (i--) {
					timerN = name;
					if (!timerN) {
						timerN = elm[i].id || elm[i].getAttribute("class") || elm[i].getAttribute("className") || elm[i].tagName
					}
					mapEvent(elm[i], type, timerN)
				}
			},
			func: function(name, fn) {
				if (typeof name == "function") {
					fn = name
				}
				if (!fn.name && typeof fn == "function") {
					var m = fn.toString().match(/function\s*(.*)\s*\(/);
					if (m[1]) {
						fn.name = m[1]
					}
				}
				if (typeof fn == "function" && !fn.name) {
					if (typeof name != "string") {
						anonFuncId++;
						name = "anonymous" + anonFuncId
					}
					return function() {
						time.start(name);
						var ret = fn.apply(window, arguments);
						time.stop(name);
						return ret
					}
				} else {
					var fnName = fn.name || fn;
					if (typeof name != "string") {
						name = fnName
					}
					eval("var fnCopy = " + fnName);
					if (typeof fnCopy == "function") {
						var wrap = function() {
							time.start(name);
							var ret = fnCopy.apply(this, arguments);
							time.stop(name);
							return ret
						};
						wrap.hooked = true;
						eval(fnName + " = wrap;");
						return eval(fnName)
					} else {
						error("func: Could not hook function (name: " + name + ")")
					}
				}
			},
			report: function(name) {
				if (typeof name == "undefined") {
					reportMethod.call(this, log)
				} else {
					var i = log.length;
					var l = [];
					while (i--) {
						if (name == log[i].name) {
							l.push(log[i])
						}
					}
					reportMethod.call(this, l)
				}
			},
			setReportMethod: function(fn) {
				if (fn.hooked) {
					error("setReportMethod: Cannot use hooked method " + fn.name)
				} else {
					reportMethod = fn
				}
			},
			setCtr: function(name, ctr, fn) {
				if (name in NgRecordMap) {} else {
					NgRecordMap[name] = new NgRecord(name, ctr, fn)
				}
			},
			setLineReportMethod: function(fn) {
				if (fn.hooked) {
					error("setLineReportMethod: Cannot use hooked method " + fn.name)
				} else {
					lineReportMethod = fn;
					lineReport = true
				}
			},
			errors: false
		};
		var timeMap = {};
		var NgRecordMap = {};
		var log = [];
		var reportMethod = defaultReport;
		var lineReport = false;
		var lineReportMethod = defaultLineReport;
		var anonFuncId = 0;
		var Report = function(n, s, e) {
			this.name = n;
			this.start = s;
			this.stop = e;
			this.delta = e - s
		};
		Report.prototype.toString = function() {
			return this.name + ": " + this.delta + "ms"
		};

		function defaultReport(l) {
			alert(l.join("\n"))
		}

		function defaultLineReport(l) {
			alert(l)
		}

		function error(e) {
			if (time.errors) {
				alert(e)
			}
		}
		var NgRecord = function(name, ctr, fn) {
			this.name = name;
			this.records = 0;
			this.avg = 0;
			this.min = 555555;
			this.max = 0;
			this.ctr = ctr;
			if (fn.hooked) {
				error("setLineReportMethod: Cannot use hooked method. Will use default method" + fn.name);
				this.lineReportMethod = defaultLineReport
			} else {
				this.lineReportMethod = fn
			}
		};
		NgRecord.prototype.addRecord = function(delta) {
			this.avg = (this.avg * this.records + delta) / (this.records + 1);
			if (this.min > delta) {
				this.min = delta
			}
			if (this.max < delta) {
				this.max = delta
			}
			this.records++;
			frq = 1000 / this.avg;
			return this.name + "->  max:" + this.max + "  min:" + this.min + "  avg:" + this.avg.toFixed(2) + "  freq:" + frq.toFixed(2) + "\n"
		};

		function mapEvent(e, t, n) {
			var c = e[t];
			if (typeof c == "function") {
				e[t] = function() {
					time.start(n + ":" + t);
					var ret = c.apply(this, arguments);
					time.stop(n + ":" + t);
					return ret
				}
			} else {
				error("event: Function must be set on element." + t + " before hooking (name: " + n + ")")
			}
		}
	})()
}
var Core = require("NGCore/Client/Core").Core;
var UI = require("NGCore/Client/UI").UI;
var imports = new(require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/RequireLoader").RequireLoader)({
	_LocalGameList: function() {
		return require("NGCore/Client/Core/_LocalGameList")._LocalGameList
	},
	_int_LGL: function() {
		return require("NGCore/Client/Core/_int_LGL")._int_LGL
	},
	StartupNetworkListener: function() {
		return require("Code/StartupNetworkListener").StartupNetworkListener
	},
	MobageAnalytics: function() {
		return require("NGCore/Client/Social/_Internal/US/Implementation/Utilities/MobageAnalytics").MobageAnalytics
	},
});
var KeyListener = Core.MessageListener.singleton({
	initialize: function() {
		(require("NGCore/Client/Device").Device).KeyEmitter.addListener(this, this.onUpdate)
	},
	onUpdate: function(a) {
		return false
	}
});

function main() {
	NgLogD("@@@ mobage main +");
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	imports.MobageAnalytics.logStartupFlowEvent("MobageBootMain");
	var d = require("NGCore/Client/Social/_Internal/Privileged").Social.CheckBinaryVersion.checkForBinaryUpdates();
	if (!d) {
		var h = (require("NGCore/Client/Social/_Internal/Privileged").Social).Main.switchToGame;
		imports._LocalGameList.mobageRunGame(h);
		KeyListener.instantiate();
		var g = a._getBootServer();
		if (!g.match(/.*\/$/)) {
			g += "/"
		}
		var c = a.getStartingServer();
		if (!c.match(/.*\/$/)) {
			c += "/"
		}
		NgLogD("@@@ mobage main NGCore boot +");
		boot(g, a._getBoot(), c, a.getBootGame());
		NgLogD("@@@ mobage main NGCore boot -")
	}
	var b = a._getReferrer();
	if (b) {
		try {
			imports._LocalGameList.getGameConfig(a.getGameDir(), true, function(j) {
				try {
					Core.Analytics._getPipe().plusEvent("referrer", b, j.appId)
				} catch (k) {
					NgLogException(k)
				}
			})
		} catch (f) {
			NgLogException(f)
		}
	}
	NgLogD("@@@ mobage main -")
}

function runGame(c) {
	var a = require("NGCore/Client/Core/Capabilities").Capabilities;
	for (var e in a) {
		if (typeof e === "function") {
			NgLogD("   : FN = " + e)
		}
	}
	var b = require("NGCore/Client/Social/_Internal/Privileged").Social;
	if (!c || c === "") {
		NgLogD("MobageBoot: bypassing game launch and running the game service...");
		startMobage(c, b.US.Service.Home.showMobage)
	} else {
		if (a.getIsDisaggregated()) {
			runGameDisaggregated(c)
		} else {
			if (b.US.Session._isLocalDevelopmentMode() || !isGameBundled(c)) {
				NgLogD("In local development mode or game is not bundled, updating game ,url=" + c);
				imports._LocalGameList.updateGame(c, -1, function(f, h) {
					if (h) {
						NgLogE("Error updating game! " + h);
						(require("NGCore/Client/Network").Network).Util.showFatalErrorDialog()
					} else {
						var g = function() {
							imports._int_LGL.launch(c, imports._int_LGL.ProcID.Game)
						};
						startMobage(c, g)
					}
				}, true)
			} else {
				NgLogD("In production mode and running bundled game, running game first, update later...");
				var d = function() {
					imports._int_LGL.launch(c, imports._int_LGL.ProcID.Game)
				};
				startMobage(c, d)
			}
		}
	}
}

function runGameDisaggregated(c) {
	imports._LocalGameList.setSplashVisible(true);
	var f = false;
	var e = false;
	var d = false;
	var b = 0;
	var g = function() {
		if (!d && e && b && !f) {
			d = true;
			imports._LocalGameList.setProgressText("Getting new content…");
			imports.StartupNetworkListener.showPendingError()
		}
	};
	imports._LocalGameList.listenToProgress(function(k, m, l, j) {
		if (j) {
			return
		}
		if (b == 0 && l > (20 << 20)) {
			var h = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
			new UI.Toast({
				text: h("Switching to Wi-Fi is recommended"),
				onDisappear: function() {
					this.destroy()
				}
			}).show()
		}
		b = l;
		g()
	});
	var a = function() {
		imports.MobageAnalytics.logStartupFlowEvent("MobageBootLaunchGame");
		var h = require("NGCore/Client/Social/_Internal/Privileged").Social;
		if (h.Main && h.Main.isLaunchIntoServiceUI) {
			if (h.Main.isLaunchIntoServiceUI()) {
				h.Main.finishShortcutLaunch(function(j) {
					imports._LocalGameList.setSplashVisible(true);
					launchGame(j)
				}, c)
			} else {
				launchGame(c)
			}
		} else {
			launchGame(c)
		}
	};
	NgLogD("@@@ mobage main.js runGameDisaggregated updateGame +");
	imports.MobageAnalytics.logStartupFlowEvent("MobageBootStartUpdateGame");
	imports._LocalGameList.updateGame(c, -1, function(h, j) {
		NgLogD("Mobage/runGame: updateGame done. " + (e ? "login done" : "login NOT done"));
		if (j) {
			NgLogE("Mobage/runGame: Error updating game! " + j);
			(require("NGCore/Client/Network").Network).Util.showFatalErrorDialog()
		} else {
			imports.MobageAnalytics.logStartupFlowEvent("MobageBootUpdateGameComplete");
			f = true;
			NgLogD("@@@ mobage main.js runGameDisaggregated updateGame -");
			if (e) {
				a()
			}
		}
	});
	NgLogD("@@@ mobage main.js runGameDisaggregated startMobage +");
	startMobage(c, function() {
		NgLogD("@@@ mobage main.js runGameDisaggregated startMobage -");
		NgLogD("Mobage/runGame: login done. " + (f ? "update done" : "update NOT done"));
		e = true;
		if (f) {
			a()
		} else {
			g()
		}
	});
	imports.StartupNetworkListener.start()
}
var _launchDialog;

function launchGame(c) {
	var b = require("NGCore/Client/Social/_Internal/Privileged").Social;
	var a = require("NGCore/Client/Social/_Internal/US/Assets/Localization").LocalizedString;
	imports._LocalGameList.setProgressText(a("Launching…", Core.Capabilities.getProductName()));
	imports._int_LGL.launch(c, imports._int_LGL.ProcID.Game);
	imports._LocalGameList._setProgress(-1)
}

function runBoot(d, c, b) {
	var a = require("NGCore/Client/Social/_Internal/Privileged").Social;
	if (a.US.Session._isLocalDevelopmentMode()) {
		NgLogD("In local development mode, updating boot, url=" + d);
		imports._LocalGameList.setProgressText("[Updating Mobage]");
		NgLogD("@@@ mobage main.js runBoot updating boot in dev mode +");
		imports._LocalGameList.updateGame(d, -1, function(e, f) {
			NgLogD("@@@ mobage main.js runBoot updating boot in dev mode -");
			if (f) {
				NgLogE("Error updating! " + d + ": " + f);
				var g = new(require("NGCore/Client/UI").UI).AlertDialog();
				g.setTitle("Error Updating Boot");
				g.setText("Could not get update at " + d);
				g.setChoices(["Try Again", "Ignore"]);
				g.show();
				g.onchoice = function(h) {
					if (h.choice === 0) {
						runBoot(d, c, b)
					} else {
						setTimeout(runGame.bind(undefined, b), 500)
					}
					g.hide()
				};
				g.show()
			} else {
				if (e) {
					NgLogD("@@@ mobage main.js runBoot new content _int_LGL.launch self +");
					imports._int_LGL.launch(d, imports._int_LGL.ProcID.Persist);
					NgLogD("@@@ mobage main.js runBoot new content _int_LGL.launch self -")
				} else {
					NgLogD("@@@ mobage main.js runBoot runGame +");
					runGame(b);
					NgLogD("@@@ mobage main.js runBoot runGame -")
				}
			}
		}, true, true)
	} else {
		NgLogD("In production mode, save boot update for later...");
		NgLogD("@@@ mobage main.js runBoot not dev mode runGame +");
		runGame(b);
		NgLogD("@@@ mobage main.js runBoot not dev mode runGame -")
	}
}

function startMobage(c, b) {
	var a = require("NGCore/Client/Social/_Internal/Privileged").Social;
	if (a.Main && a.Main.gameServiceMain) {
		imports._LocalGameList.setSplashVisible(true);
		a.Main.gameServiceMain(c, function() {
			imports.MobageAnalytics.logStartupFlowEvent("MobageBootLoginDone");
			imports._LocalGameList._setAllowDeterminateProgress(true);
			b.apply(this, Array.prototype.slice.call(arguments));
			setTimeout(function() {
				imports._LocalGameList.setSplashVisible(false)
			}, 200)
		})
	} else {
		b()
	}
}

function boot(f, d, c, b) {
	imports._LocalGameList.setSplashVisible(true);
	imports._LocalGameList._setAllowDeterminateProgress(false);
	var e;
	if (b) {
		e = c + b
	} else {
		e = ""
	}
	NgLogD("Game: " + e);
	var a = f + d;
	NgLogD("Boot: " + a);
	if (f == "ngmoco:)/") {
		runGame(e)
	} else {
		runBoot(a, b, e)
	}
	imports._LocalGameList.setSplashVisible(false)
}

function isGameBundled(a) {
	NgLogD("MobageBoot/isGameBundled: currently returning false for all games, regardless of bundling");
	return false
}

function NgMobageGameStart() {
	try {
		if (_launchDialog) {
			UI.Window.document.removeChild(_launchDialog);
			_launchDialog.destroy();
			_launchDialog = undefined
		}
		imports._LocalGameList.setSplashVisible(false);
		imports.StartupNetworkListener.stop();
		var a = require("NGCore/Client/Social/_Internal/Privileged").Social;
		if (a.Main && a.Main.onGameStart) {
			a.Main.onGameStart()
		}
	} catch (b) {
		NgLogException(b)
	}
	return NgEngineUpdate("")
};